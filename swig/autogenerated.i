/*
 *    This file is part of CasADi.
 *
 *    CasADi -- A symbolic framework for dynamic optimization.
 *    Copyright (C) 2010 by Joel Andersson, Moritz Diehl, K.U.Leuven. All rights reserved.
 *
 *    CasADi is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 3 of the License, or (at your option) any later version.
 *
 *    CasADi is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with CasADi; if not, write to the Free Software
 *    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

/** All edits to this file will be lost - autogenerated by misc/autogencode.py */
#ifndef AUTOGENERATED_I
#define AUTOGENERATED_I
%include "symbolic/fx/schemes_metadata.hpp"
%include "symbolic/fx/schemes_helpers.hpp"
#ifdef SWIGPYTHON
%pythoncode %{

def IOSchemeVector(arg,io_scheme):
  try:
    return IOSchemeVectorSXMatrix(arg,io_scheme)
  except:
    pass
  try:
    return IOSchemeVectorMX(arg,io_scheme)
  except:
    pass
  try:
    arg = map(lambda x: sp_dense(0,0) if isinstance(x,list) and len(x)==0 else x,arg)
    return IOSchemeVectorCRSSparsity(arg,io_scheme)
  except:
    pass
%}
#endif //SWIGPYTHON
#ifdef SWIGPYTHON
%pythoncode %{
def acadoIn(*dummy,**kwargs):
  """
  Helper function for 'ACADO_Input'

  Two use cases:
     a) arg = acadoIn(x_guess=my_x_guess, u_guess=my_u_guess, p_guess=my_p_guess, lbx=my_lbx, ubx=my_ubx, lbx0=my_lbx0, ubx0=my_ubx0, lbxf=my_lbxf, ubxf=my_ubxf, lbu=my_lbu, ubu=my_ubu, lbp=my_lbp, ubp=my_ubp, lbc=my_lbc, ubc=my_ubc, lbr=my_lbr, ubr=my_ubr) 
          all arguments optional
     b) x_guess, u_guess, p_guess, lbx, ubx, lbx0, ubx0, lbxf, ubxf, lbu, ubu, lbp, ubp, lbc, ubc, lbr, ubr = acadoIn(arg,"x_guess", "u_guess", "p_guess", "lbx", "ubx", "lbx0", "ubx0", "lbxf", "ubxf", "lbu", "ubu", "lbp", "ubp", "lbc", "ubc", "lbr", "ubr") 
          all arguments after the first optional
  Input arguments of an ACADO OCP solver
  
  Keyword arguments:
    x_guess -- Initial guess for x (default: 0) [ACADO_X_GUESS]
    u_guess -- Initial guess for u (default: 0) [ACADO_U_GUESS]
    p_guess -- Initial guess for p (default: 0) [ACADO_P_GUESS]
    lbx     -- Lower bound on x (default:  -infinity) [ACADO_LBX]
    ubx     -- Upper bound on x (default:  infinity) [ACADO_UBX]
    lbx0    -- Lower bound on x0 (default:  -infinity) [ACADO_LBX0]
    ubx0    -- Upper bound on x0 (default:  infinity) [ACADO_UBX0]
    lbxf    -- Lower bound on xf (default:  -infinity) [ACADO_LBXF]
    ubxf    -- Upper bound on xf (default:  infinity) [ACADO_UBXF]
    lbu     -- Lower bound on u (default:  -infinity) [ACADO_LBU]
    ubu     -- Upper bound on u (default:  infinity) [ACADO_UBU]
    lbp     -- Lower bound on p (default:  -infinity) [ACADO_LBP]
    ubp     -- Upper bound on p (default:  infinity) [ACADO_UBP]
    lbc     -- Lower bound on the path constraint function (default:  -infinity) [ACADO_LBC]
    ubc     -- Upper bound on the path constraint function (default:  infinity) [ACADO_UBC]
    lbr     -- Lower bound on the initial constraint function (default:  0) [ACADO_LBR]
    ubr     -- Upper bound on the initial constraint function (default:  0) [ACADO_UBR]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of acadoIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_ACADO_Input,n)] for n in dummy[1:]]
  x_guess = []
  if 'x_guess' in kwargs:
    x_guess = kwargs['x_guess']
  u_guess = []
  if 'u_guess' in kwargs:
    u_guess = kwargs['u_guess']
  p_guess = []
  if 'p_guess' in kwargs:
    p_guess = kwargs['p_guess']
  lbx = []
  if 'lbx' in kwargs:
    lbx = kwargs['lbx']
  ubx = []
  if 'ubx' in kwargs:
    ubx = kwargs['ubx']
  lbx0 = []
  if 'lbx0' in kwargs:
    lbx0 = kwargs['lbx0']
  ubx0 = []
  if 'ubx0' in kwargs:
    ubx0 = kwargs['ubx0']
  lbxf = []
  if 'lbxf' in kwargs:
    lbxf = kwargs['lbxf']
  ubxf = []
  if 'ubxf' in kwargs:
    ubxf = kwargs['ubxf']
  lbu = []
  if 'lbu' in kwargs:
    lbu = kwargs['lbu']
  ubu = []
  if 'ubu' in kwargs:
    ubu = kwargs['ubu']
  lbp = []
  if 'lbp' in kwargs:
    lbp = kwargs['lbp']
  ubp = []
  if 'ubp' in kwargs:
    ubp = kwargs['ubp']
  lbc = []
  if 'lbc' in kwargs:
    lbc = kwargs['lbc']
  ubc = []
  if 'ubc' in kwargs:
    ubc = kwargs['ubc']
  lbr = []
  if 'lbr' in kwargs:
    lbr = kwargs['lbr']
  ubr = []
  if 'ubr' in kwargs:
    ubr = kwargs['ubr']
  for k in kwargs.keys():
    if not(k in ['x_guess','u_guess','p_guess','lbx','ubx','lbx0','ubx0','lbxf','ubxf','lbu','ubu','lbp','ubp','lbc','ubc','lbr','ubr']):
      raise Exception("Keyword error in acadoIn: '%s' is not recognized. Available keywords are: x_guess, u_guess, p_guess, lbx, ubx, lbx0, ubx0, lbxf, ubxf, lbu, ubu, lbp, ubp, lbc, ubc, lbr, ubr" % k )
  return IOSchemeVector([x_guess,u_guess,p_guess,lbx,ubx,lbx0,ubx0,lbxf,ubxf,lbu,ubu,lbp,ubp,lbc,ubc,lbr,ubr], SCHEME_ACADO_Input)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(acadoIn) acadoIn<SXMatrix>;
%template(acadoIn) acadoIn<MX>;
%template(acadoIn) acadoIn<CRSSparsity>;
%template(IOSchemeVectorACADO_Input) ACADO_InputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorACADO_Input) ACADO_InputIOSchemeVector<MX>;
%template(IOSchemeVectorACADO_Input) ACADO_InputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def acadoOut(*dummy,**kwargs):
  """
  Helper function for 'ACADO_Output'

  Two use cases:
     a) arg = acadoOut(x_opt=my_x_opt, u_opt=my_u_opt, p_opt=my_p_opt, cost=my_cost) 
          all arguments optional
     b) x_opt, u_opt, p_opt, cost = acadoOut(arg,"x_opt", "u_opt", "p_opt", "cost") 
          all arguments after the first optional
  Output arguments of an ACADO OCP solver
  
  Keyword arguments:
    x_opt -- Optimal states [ACADO_X_OPT]
    u_opt -- Optimal control inputs [ACADO_U_OPT]
    p_opt -- Optimal parameters [ACADO_P_OPT]
    cost  -- Optimal cost [ACADO_COST]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of acadoOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_ACADO_Output,n)] for n in dummy[1:]]
  x_opt = []
  if 'x_opt' in kwargs:
    x_opt = kwargs['x_opt']
  u_opt = []
  if 'u_opt' in kwargs:
    u_opt = kwargs['u_opt']
  p_opt = []
  if 'p_opt' in kwargs:
    p_opt = kwargs['p_opt']
  cost = []
  if 'cost' in kwargs:
    cost = kwargs['cost']
  for k in kwargs.keys():
    if not(k in ['x_opt','u_opt','p_opt','cost']):
      raise Exception("Keyword error in acadoOut: '%s' is not recognized. Available keywords are: x_opt, u_opt, p_opt, cost" % k )
  return IOSchemeVector([x_opt,u_opt,p_opt,cost], SCHEME_ACADO_Output)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(acadoOut) acadoOut<SXMatrix>;
%template(acadoOut) acadoOut<MX>;
%template(acadoOut) acadoOut<CRSSparsity>;
%template(IOSchemeVectorACADO_Output) ACADO_OutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorACADO_Output) ACADO_OutputIOSchemeVector<MX>;
%template(IOSchemeVectorACADO_Output) ACADO_OutputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def acadofcnIn(*dummy,**kwargs):
  """
  Helper function for 'ACADO_FCN_Input'

  Two use cases:
     a) arg = acadofcnIn(t=my_t, xd=my_xd, xa=my_xa, u=my_u, p=my_p, xdot=my_xdot) 
          all arguments optional
     b) t, xd, xa, u, p, xdot = acadofcnIn(arg,"t", "xd", "xa", "u", "p", "xdot") 
          all arguments after the first optional
  Input arguments of an ACADO function
  
  Keyword arguments:
    t    -- Time [ACADO_FCN_T]
    xd   -- Differential state [ACADO_FCN_XD]
    xa   -- Algebraic state [ACADO_FCN_XA]
    u    -- Control input [ACADO_FCN_U]
    p    -- Parameter [ACADO_FCN_P]
    xdot -- Differential state derivative [ACADO_FCN_XDOT]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of acadofcnIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_ACADO_FCN_Input,n)] for n in dummy[1:]]
  t = []
  if 't' in kwargs:
    t = kwargs['t']
  xd = []
  if 'xd' in kwargs:
    xd = kwargs['xd']
  xa = []
  if 'xa' in kwargs:
    xa = kwargs['xa']
  u = []
  if 'u' in kwargs:
    u = kwargs['u']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  xdot = []
  if 'xdot' in kwargs:
    xdot = kwargs['xdot']
  for k in kwargs.keys():
    if not(k in ['t','xd','xa','u','p','xdot']):
      raise Exception("Keyword error in acadofcnIn: '%s' is not recognized. Available keywords are: t, xd, xa, u, p, xdot" % k )
  return IOSchemeVector([t,xd,xa,u,p,xdot], SCHEME_ACADO_FCN_Input)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(acadofcnIn) acadofcnIn<SXMatrix>;
%template(acadofcnIn) acadofcnIn<MX>;
%template(acadofcnIn) acadofcnIn<CRSSparsity>;
%template(IOSchemeVectorACADO_FCN_Input) ACADO_FCN_InputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorACADO_FCN_Input) ACADO_FCN_InputIOSchemeVector<MX>;
%template(IOSchemeVectorACADO_FCN_Input) ACADO_FCN_InputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def controldaeIn(*dummy,**kwargs):
  """
  Helper function for 'ControlledDAEInput'

  Two use cases:
     a) arg = controldaeIn(t=my_t, x=my_x, z=my_z, p=my_p, u=my_u, u_interp=my_u_interp, x_major=my_x_major, t0=my_t0, tf=my_tf) 
          all arguments optional
     b) t, x, z, p, u, u_interp, x_major, t0, tf = controldaeIn(arg,"t", "x", "z", "p", "u", "u_interp", "x_major", "t0", "tf") 
          all arguments after the first optional
  Input arguments of an ODE/DAE function
  
  Keyword arguments:
    t        -- Global physical time. (1-by-1) [CONTROL_DAE_T]
    x        -- State vector (dimension nx-by-1). Should have same amount of non-zeros as DAEOutput:DAE_RES [CONTROL_DAE_X]
    z        -- Algebraic state vector (dimension np-by-1). [CONTROL_DAE_Z]
    p        -- Parameter vector (dimension np-by-1). [CONTROL_DAE_P]
    u        -- Control vector (dimension nu-by-1). [CONTROL_DAE_U]
    u_interp -- Control vector, linearly interpolated (dimension nu-by-1). [CONTROL_DAE_U_INTERP]
    x_major  -- State vector (dimension nx-by-1) at the last major time-step [CONTROL_DAE_X_MAJOR]
    t0       -- Time at start of control interval (1-by-1) [CONTROL_DAE_T0]
    tf       -- Time at end of control interval (1-by-1) [CONTROL_DAE_TF]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of controldaeIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_ControlledDAEInput,n)] for n in dummy[1:]]
  t = []
  if 't' in kwargs:
    t = kwargs['t']
  x = []
  if 'x' in kwargs:
    x = kwargs['x']
  z = []
  if 'z' in kwargs:
    z = kwargs['z']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  u = []
  if 'u' in kwargs:
    u = kwargs['u']
  u_interp = []
  if 'u_interp' in kwargs:
    u_interp = kwargs['u_interp']
  x_major = []
  if 'x_major' in kwargs:
    x_major = kwargs['x_major']
  t0 = []
  if 't0' in kwargs:
    t0 = kwargs['t0']
  tf = []
  if 'tf' in kwargs:
    tf = kwargs['tf']
  for k in kwargs.keys():
    if not(k in ['t','x','z','p','u','u_interp','x_major','t0','tf']):
      raise Exception("Keyword error in controldaeIn: '%s' is not recognized. Available keywords are: t, x, z, p, u, u_interp, x_major, t0, tf" % k )
  return IOSchemeVector([t,x,z,p,u,u_interp,x_major,t0,tf], SCHEME_ControlledDAEInput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(controldaeIn) controldaeIn<SXMatrix>;
%template(controldaeIn) controldaeIn<MX>;
%template(controldaeIn) controldaeIn<CRSSparsity>;
%template(IOSchemeVectorControlledDAEInput) ControlledDAEInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorControlledDAEInput) ControlledDAEInputIOSchemeVector<MX>;
%template(IOSchemeVectorControlledDAEInput) ControlledDAEInputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def controlsimulatorIn(*dummy,**kwargs):
  """
  Helper function for 'ControlSimulatorInput'

  Two use cases:
     a) arg = controlsimulatorIn(x0=my_x0, p=my_p, u=my_u) 
          all arguments optional
     b) x0, p, u = controlsimulatorIn(arg,"x0", "p", "u") 
          all arguments after the first optional
  Input arguments of a control simulator
  
  Keyword arguments:
    x0 -- Differential or algebraic state at t0  (dimension nx-by-1) [CONTROLSIMULATOR_X0]
    p  -- Parameters that are fixed over the entire horizon  (dimension np-by-1) [CONTROLSIMULATOR_P]
    u  -- Parameters that change over the integration intervals (dimension (ns-1)-by-nu) [CONTROLSIMULATOR_U]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of controlsimulatorIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_ControlSimulatorInput,n)] for n in dummy[1:]]
  x0 = []
  if 'x0' in kwargs:
    x0 = kwargs['x0']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  u = []
  if 'u' in kwargs:
    u = kwargs['u']
  for k in kwargs.keys():
    if not(k in ['x0','p','u']):
      raise Exception("Keyword error in controlsimulatorIn: '%s' is not recognized. Available keywords are: x0, p, u" % k )
  return IOSchemeVector([x0,p,u], SCHEME_ControlSimulatorInput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(controlsimulatorIn) controlsimulatorIn<SXMatrix>;
%template(controlsimulatorIn) controlsimulatorIn<MX>;
%template(controlsimulatorIn) controlsimulatorIn<CRSSparsity>;
%template(IOSchemeVectorControlSimulatorInput) ControlSimulatorInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorControlSimulatorInput) ControlSimulatorInputIOSchemeVector<MX>;
%template(IOSchemeVectorControlSimulatorInput) ControlSimulatorInputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def daeIn(*dummy,**kwargs):
  """
  Helper function for 'DAEInput'

  Two use cases:
     a) arg = daeIn(x=my_x, z=my_z, p=my_p, t=my_t) 
          all arguments optional
     b) x, z, p, t = daeIn(arg,"x", "z", "p", "t") 
          all arguments after the first optional
  Input arguments of an ODE/DAE function
  
  Keyword arguments:
    x -- Differential state [DAE_X]
    z -- Algebraic state [DAE_Z]
    p -- Parameter [DAE_P]
    t -- Explicit time dependence [DAE_T]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of daeIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_DAEInput,n)] for n in dummy[1:]]
  x = []
  if 'x' in kwargs:
    x = kwargs['x']
  z = []
  if 'z' in kwargs:
    z = kwargs['z']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  t = []
  if 't' in kwargs:
    t = kwargs['t']
  for k in kwargs.keys():
    if not(k in ['x','z','p','t']):
      raise Exception("Keyword error in daeIn: '%s' is not recognized. Available keywords are: x, z, p, t" % k )
  return IOSchemeVector([x,z,p,t], SCHEME_DAEInput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(daeIn) daeIn<SXMatrix>;
%template(daeIn) daeIn<MX>;
%template(daeIn) daeIn<CRSSparsity>;
%template(IOSchemeVectorDAEInput) DAEInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorDAEInput) DAEInputIOSchemeVector<MX>;
%template(IOSchemeVectorDAEInput) DAEInputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def daeOut(*dummy,**kwargs):
  """
  Helper function for 'DAEOutput'

  Two use cases:
     a) arg = daeOut(ode=my_ode, alg=my_alg, quad=my_quad) 
          all arguments optional
     b) ode, alg, quad = daeOut(arg,"ode", "alg", "quad") 
          all arguments after the first optional
  Output arguments of an DAE function
  
  Keyword arguments:
    ode  -- Right hand side of the implicit ODE [DAE_ODE]
    alg  -- Right hand side of algebraic equations [DAE_ALG]
    quad -- Right hand side of quadratures equations [DAE_QUAD]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of daeOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_DAEOutput,n)] for n in dummy[1:]]
  ode = []
  if 'ode' in kwargs:
    ode = kwargs['ode']
  alg = []
  if 'alg' in kwargs:
    alg = kwargs['alg']
  quad = []
  if 'quad' in kwargs:
    quad = kwargs['quad']
  for k in kwargs.keys():
    if not(k in ['ode','alg','quad']):
      raise Exception("Keyword error in daeOut: '%s' is not recognized. Available keywords are: ode, alg, quad" % k )
  return IOSchemeVector([ode,alg,quad], SCHEME_DAEOutput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(daeOut) daeOut<SXMatrix>;
%template(daeOut) daeOut<MX>;
%template(daeOut) daeOut<CRSSparsity>;
%template(IOSchemeVectorDAEOutput) DAEOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorDAEOutput) DAEOutputIOSchemeVector<MX>;
%template(IOSchemeVectorDAEOutput) DAEOutputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def rdaeIn(*dummy,**kwargs):
  """
  Helper function for 'RDAEInput'

  Two use cases:
     a) arg = rdaeIn(rx=my_rx, rz=my_rz, rp=my_rp, x=my_x, z=my_z, p=my_p, t=my_t) 
          all arguments optional
     b) rx, rz, rp, x, z, p, t = rdaeIn(arg,"rx", "rz", "rp", "x", "z", "p", "t") 
          all arguments after the first optional
  Input arguments of an ODE/DAE backward integration function
  
  Keyword arguments:
    rx -- Backward differential state [RDAE_RX]
    rz -- Backward algebraic state [RDAE_RZ]
    rp -- Backward  parameter vector [RDAE_RP]
    x  -- Forward differential state [RDAE_X]
    z  -- Forward algebraic state [RDAE_Z]
    p  -- Parameter vector [RDAE_P]
    t  -- Explicit time dependence [RDAE_T]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of rdaeIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_RDAEInput,n)] for n in dummy[1:]]
  rx = []
  if 'rx' in kwargs:
    rx = kwargs['rx']
  rz = []
  if 'rz' in kwargs:
    rz = kwargs['rz']
  rp = []
  if 'rp' in kwargs:
    rp = kwargs['rp']
  x = []
  if 'x' in kwargs:
    x = kwargs['x']
  z = []
  if 'z' in kwargs:
    z = kwargs['z']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  t = []
  if 't' in kwargs:
    t = kwargs['t']
  for k in kwargs.keys():
    if not(k in ['rx','rz','rp','x','z','p','t']):
      raise Exception("Keyword error in rdaeIn: '%s' is not recognized. Available keywords are: rx, rz, rp, x, z, p, t" % k )
  return IOSchemeVector([rx,rz,rp,x,z,p,t], SCHEME_RDAEInput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(rdaeIn) rdaeIn<SXMatrix>;
%template(rdaeIn) rdaeIn<MX>;
%template(rdaeIn) rdaeIn<CRSSparsity>;
%template(IOSchemeVectorRDAEInput) RDAEInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorRDAEInput) RDAEInputIOSchemeVector<MX>;
%template(IOSchemeVectorRDAEInput) RDAEInputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def rdaeOut(*dummy,**kwargs):
  """
  Helper function for 'RDAEOutput'

  Two use cases:
     a) arg = rdaeOut(ode=my_ode, alg=my_alg, quad=my_quad) 
          all arguments optional
     b) ode, alg, quad = rdaeOut(arg,"ode", "alg", "quad") 
          all arguments after the first optional
  Output arguments of an ODE/DAE backward integration function
  
  Keyword arguments:
    ode  -- Right hand side of ODE. [RDAE_ODE]
    alg  -- Right hand side of algebraic equations. [RDAE_ALG]
    quad -- Right hand side of quadratures. [RDAE_QUAD]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of rdaeOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_RDAEOutput,n)] for n in dummy[1:]]
  ode = []
  if 'ode' in kwargs:
    ode = kwargs['ode']
  alg = []
  if 'alg' in kwargs:
    alg = kwargs['alg']
  quad = []
  if 'quad' in kwargs:
    quad = kwargs['quad']
  for k in kwargs.keys():
    if not(k in ['ode','alg','quad']):
      raise Exception("Keyword error in rdaeOut: '%s' is not recognized. Available keywords are: ode, alg, quad" % k )
  return IOSchemeVector([ode,alg,quad], SCHEME_RDAEOutput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(rdaeOut) rdaeOut<SXMatrix>;
%template(rdaeOut) rdaeOut<MX>;
%template(rdaeOut) rdaeOut<CRSSparsity>;
%template(IOSchemeVectorRDAEOutput) RDAEOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorRDAEOutput) RDAEOutputIOSchemeVector<MX>;
%template(IOSchemeVectorRDAEOutput) RDAEOutputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def integratorIn(*dummy,**kwargs):
  """
  Helper function for 'IntegratorInput'

  Two use cases:
     a) arg = integratorIn(x0=my_x0, p=my_p, rx0=my_rx0, rp=my_rp) 
          all arguments optional
     b) x0, p, rx0, rp = integratorIn(arg,"x0", "p", "rx0", "rp") 
          all arguments after the first optional
  Input arguments of an integrator
  
  Keyword arguments:
    x0  -- Differential state at the initial time [INTEGRATOR_X0]
    p   -- Parameters [INTEGRATOR_P]
    rx0 -- Backward differential state at the final time [INTEGRATOR_RX0]
    rp  -- Backward parameter vector [INTEGRATOR_RP]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of integratorIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_IntegratorInput,n)] for n in dummy[1:]]
  x0 = []
  if 'x0' in kwargs:
    x0 = kwargs['x0']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  rx0 = []
  if 'rx0' in kwargs:
    rx0 = kwargs['rx0']
  rp = []
  if 'rp' in kwargs:
    rp = kwargs['rp']
  for k in kwargs.keys():
    if not(k in ['x0','p','rx0','rp']):
      raise Exception("Keyword error in integratorIn: '%s' is not recognized. Available keywords are: x0, p, rx0, rp" % k )
  return IOSchemeVector([x0,p,rx0,rp], SCHEME_IntegratorInput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(integratorIn) integratorIn<SXMatrix>;
%template(integratorIn) integratorIn<MX>;
%template(integratorIn) integratorIn<CRSSparsity>;
%template(IOSchemeVectorIntegratorInput) IntegratorInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorIntegratorInput) IntegratorInputIOSchemeVector<MX>;
%template(IOSchemeVectorIntegratorInput) IntegratorInputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def integratorOut(*dummy,**kwargs):
  """
  Helper function for 'IntegratorOutput'

  Two use cases:
     a) arg = integratorOut(xf=my_xf, qf=my_qf, rxf=my_rxf, rqf=my_rqf) 
          all arguments optional
     b) xf, qf, rxf, rqf = integratorOut(arg,"xf", "qf", "rxf", "rqf") 
          all arguments after the first optional
  Output arguments of an integrator
  
  Keyword arguments:
    xf  -- Differential state at the final time [INTEGRATOR_XF]
    qf  -- Quadrature state at the final time [INTEGRATOR_QF]
    rxf -- Backward differential state at the initial time [INTEGRATOR_RXF]
    rqf -- Backward quadrature state at the initial time [INTEGRATOR_RQF]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of integratorOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_IntegratorOutput,n)] for n in dummy[1:]]
  xf = []
  if 'xf' in kwargs:
    xf = kwargs['xf']
  qf = []
  if 'qf' in kwargs:
    qf = kwargs['qf']
  rxf = []
  if 'rxf' in kwargs:
    rxf = kwargs['rxf']
  rqf = []
  if 'rqf' in kwargs:
    rqf = kwargs['rqf']
  for k in kwargs.keys():
    if not(k in ['xf','qf','rxf','rqf']):
      raise Exception("Keyword error in integratorOut: '%s' is not recognized. Available keywords are: xf, qf, rxf, rqf" % k )
  return IOSchemeVector([xf,qf,rxf,rqf], SCHEME_IntegratorOutput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(integratorOut) integratorOut<SXMatrix>;
%template(integratorOut) integratorOut<MX>;
%template(integratorOut) integratorOut<CRSSparsity>;
%template(IOSchemeVectorIntegratorOutput) IntegratorOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorIntegratorOutput) IntegratorOutputIOSchemeVector<MX>;
%template(IOSchemeVectorIntegratorOutput) IntegratorOutputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def lpIn(*dummy,**kwargs):
  """
  Helper function for 'LPSolverInput'

  Two use cases:
     a) arg = lpIn(c=my_c, a=my_a, lba=my_lba, uba=my_uba, lbx=my_lbx, ubx=my_ubx) 
          all arguments optional
     b) c, a, lba, uba, lbx, ubx = lpIn(arg,"c", "a", "lba", "uba", "lbx", "ubx") 
          all arguments after the first optional
  Input arguments of a LP problem
  
  Keyword arguments:
    c   -- The vector c: dense (n x 1) [LP_SOLVER_C]
    a   -- The matrix A: sparse, (nc x n) - product with x must be dense. [LP_SOLVER_A]
    lba -- dense, (nc x 1) [LP_SOLVER_LBA]
    uba -- dense, (nc x 1) [LP_SOLVER_UBA]
    lbx -- dense, (n x 1) [LP_SOLVER_LBX]
    ubx -- dense, (n x 1) [LP_SOLVER_UBX]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of lpIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_LPSolverInput,n)] for n in dummy[1:]]
  c = []
  if 'c' in kwargs:
    c = kwargs['c']
  a = []
  if 'a' in kwargs:
    a = kwargs['a']
  lba = []
  if 'lba' in kwargs:
    lba = kwargs['lba']
  uba = []
  if 'uba' in kwargs:
    uba = kwargs['uba']
  lbx = []
  if 'lbx' in kwargs:
    lbx = kwargs['lbx']
  ubx = []
  if 'ubx' in kwargs:
    ubx = kwargs['ubx']
  for k in kwargs.keys():
    if not(k in ['c','a','lba','uba','lbx','ubx']):
      raise Exception("Keyword error in lpIn: '%s' is not recognized. Available keywords are: c, a, lba, uba, lbx, ubx" % k )
  return IOSchemeVector([c,a,lba,uba,lbx,ubx], SCHEME_LPSolverInput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(lpIn) lpIn<SXMatrix>;
%template(lpIn) lpIn<MX>;
%template(lpIn) lpIn<CRSSparsity>;
%template(IOSchemeVectorLPSolverInput) LPSolverInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorLPSolverInput) LPSolverInputIOSchemeVector<MX>;
%template(IOSchemeVectorLPSolverInput) LPSolverInputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def lpOut(*dummy,**kwargs):
  """
  Helper function for 'LPSolverOutput'

  Two use cases:
     a) arg = lpOut(x=my_x, cost=my_cost, lam_a=my_lam_a, lam_x=my_lam_x) 
          all arguments optional
     b) x, cost, lam_a, lam_x = lpOut(arg,"x", "cost", "lam_a", "lam_x") 
          all arguments after the first optional
  Output arguments of an LP Solver
  
  Keyword arguments:
    x     -- The primal solution [LP_SOLVER_X]
    cost  -- The optimal cost [LP_SOLVER_COST]
    lam_a -- The dual solution corresponding to linear bounds [LP_SOLVER_LAM_A]
    lam_x -- The dual solution corresponding to simple bounds [LP_SOLVER_LAM_X]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of lpOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_LPSolverOutput,n)] for n in dummy[1:]]
  x = []
  if 'x' in kwargs:
    x = kwargs['x']
  cost = []
  if 'cost' in kwargs:
    cost = kwargs['cost']
  lam_a = []
  if 'lam_a' in kwargs:
    lam_a = kwargs['lam_a']
  lam_x = []
  if 'lam_x' in kwargs:
    lam_x = kwargs['lam_x']
  for k in kwargs.keys():
    if not(k in ['x','cost','lam_a','lam_x']):
      raise Exception("Keyword error in lpOut: '%s' is not recognized. Available keywords are: x, cost, lam_a, lam_x" % k )
  return IOSchemeVector([x,cost,lam_a,lam_x], SCHEME_LPSolverOutput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(lpOut) lpOut<SXMatrix>;
%template(lpOut) lpOut<MX>;
%template(lpOut) lpOut<CRSSparsity>;
%template(IOSchemeVectorLPSolverOutput) LPSolverOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorLPSolverOutput) LPSolverOutputIOSchemeVector<MX>;
%template(IOSchemeVectorLPSolverOutput) LPSolverOutputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def lpStruct(*dummy,**kwargs):
  """
  Helper function for 'LPStruct'

  Two use cases:
     a) arg = lpStruct(a=my_a) 
          all arguments optional
     b) a = lpStruct(arg,"a") 
          all arguments after the first optional
  Structure specification of an LP
  
  Keyword arguments:
    a -- The matrix A: sparse [LP_STRUCT_A]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of lpStruct. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_LPStruct,n)] for n in dummy[1:]]
  a = []
  if 'a' in kwargs:
    a = kwargs['a']
  for k in kwargs.keys():
    if not(k in ['a']):
      raise Exception("Keyword error in lpStruct: '%s' is not recognized. Available keywords are: a" % k )
  return LPStructure([a])
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(lpStruct) lpStruct<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
%template(LPStructure) LPStructIOSchemeVector<CRSSparsity>;
}
#ifdef SWIGPYTHON
%pythoncode %{
def nlpIn(*dummy,**kwargs):
  """
  Helper function for 'NLPInput'

  Two use cases:
     a) arg = nlpIn(x=my_x, p=my_p) 
          all arguments optional
     b) x, p = nlpIn(arg,"x", "p") 
          all arguments after the first optional
  Input arguments of an NLP function
  
  Keyword arguments:
    x -- Decision variable [NL_X]
    p -- Fixed parameter [NL_P]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of nlpIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_NLPInput,n)] for n in dummy[1:]]
  x = []
  if 'x' in kwargs:
    x = kwargs['x']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  for k in kwargs.keys():
    if not(k in ['x','p']):
      raise Exception("Keyword error in nlpIn: '%s' is not recognized. Available keywords are: x, p" % k )
  return IOSchemeVector([x,p], SCHEME_NLPInput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(nlpIn) nlpIn<SXMatrix>;
%template(nlpIn) nlpIn<MX>;
%template(nlpIn) nlpIn<CRSSparsity>;
%template(IOSchemeVectorNLPInput) NLPInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorNLPInput) NLPInputIOSchemeVector<MX>;
%template(IOSchemeVectorNLPInput) NLPInputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def nlpOut(*dummy,**kwargs):
  """
  Helper function for 'NLPOutput'

  Two use cases:
     a) arg = nlpOut(f=my_f, g=my_g) 
          all arguments optional
     b) f, g = nlpOut(arg,"f", "g") 
          all arguments after the first optional
  Output arguments of an NLP function
  
  Keyword arguments:
    f -- Objective function [NL_F]
    g -- Constraint function [NL_G]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of nlpOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_NLPOutput,n)] for n in dummy[1:]]
  f = []
  if 'f' in kwargs:
    f = kwargs['f']
  g = []
  if 'g' in kwargs:
    g = kwargs['g']
  for k in kwargs.keys():
    if not(k in ['f','g']):
      raise Exception("Keyword error in nlpOut: '%s' is not recognized. Available keywords are: f, g" % k )
  return IOSchemeVector([f,g], SCHEME_NLPOutput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(nlpOut) nlpOut<SXMatrix>;
%template(nlpOut) nlpOut<MX>;
%template(nlpOut) nlpOut<CRSSparsity>;
%template(IOSchemeVectorNLPOutput) NLPOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorNLPOutput) NLPOutputIOSchemeVector<MX>;
%template(IOSchemeVectorNLPOutput) NLPOutputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def gradFIn(*dummy,**kwargs):
  """
  Helper function for 'GradFInput'

  Two use cases:
     a) arg = gradFIn(x=my_x, p=my_p) 
          all arguments optional
     b) x, p = gradFIn(arg,"x", "p") 
          all arguments after the first optional
  Input arguments of an NLP objective gradient function
  
  Keyword arguments:
    x -- Decision variable [GRADF_X]
    p -- Fixed parameter [GRADF_P]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of gradFIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_GradFInput,n)] for n in dummy[1:]]
  x = []
  if 'x' in kwargs:
    x = kwargs['x']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  for k in kwargs.keys():
    if not(k in ['x','p']):
      raise Exception("Keyword error in gradFIn: '%s' is not recognized. Available keywords are: x, p" % k )
  return IOSchemeVector([x,p], SCHEME_GradFInput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(gradFIn) gradFIn<SXMatrix>;
%template(gradFIn) gradFIn<MX>;
%template(gradFIn) gradFIn<CRSSparsity>;
%template(IOSchemeVectorGradFInput) GradFInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorGradFInput) GradFInputIOSchemeVector<MX>;
%template(IOSchemeVectorGradFInput) GradFInputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def gradFOut(*dummy,**kwargs):
  """
  Helper function for 'GradFOutput'

  Two use cases:
     a) arg = gradFOut(grad=my_grad, f=my_f, g=my_g) 
          all arguments optional
     b) grad, f, g = gradFOut(arg,"grad", "f", "g") 
          all arguments after the first optional
  Output arguments of an NLP objective gradient function
  
  Keyword arguments:
    grad -- Jacobian of the constraints [GRADF_GRAD]
    f    -- Objective function [GRADF_F]
    g    -- Constraint function [GRADF_G]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of gradFOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_GradFOutput,n)] for n in dummy[1:]]
  grad = []
  if 'grad' in kwargs:
    grad = kwargs['grad']
  f = []
  if 'f' in kwargs:
    f = kwargs['f']
  g = []
  if 'g' in kwargs:
    g = kwargs['g']
  for k in kwargs.keys():
    if not(k in ['grad','f','g']):
      raise Exception("Keyword error in gradFOut: '%s' is not recognized. Available keywords are: grad, f, g" % k )
  return IOSchemeVector([grad,f,g], SCHEME_GradFOutput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(gradFOut) gradFOut<SXMatrix>;
%template(gradFOut) gradFOut<MX>;
%template(gradFOut) gradFOut<CRSSparsity>;
%template(IOSchemeVectorGradFOutput) GradFOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorGradFOutput) GradFOutputIOSchemeVector<MX>;
%template(IOSchemeVectorGradFOutput) GradFOutputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def jacGIn(*dummy,**kwargs):
  """
  Helper function for 'JacGInput'

  Two use cases:
     a) arg = jacGIn(x=my_x, p=my_p) 
          all arguments optional
     b) x, p = jacGIn(arg,"x", "p") 
          all arguments after the first optional
  Input arguments of an NLP Jacobian function
  
  Keyword arguments:
    x -- Decision variable [JACG_X]
    p -- Fixed parameter [JACG_P]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of jacGIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_JacGInput,n)] for n in dummy[1:]]
  x = []
  if 'x' in kwargs:
    x = kwargs['x']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  for k in kwargs.keys():
    if not(k in ['x','p']):
      raise Exception("Keyword error in jacGIn: '%s' is not recognized. Available keywords are: x, p" % k )
  return IOSchemeVector([x,p], SCHEME_JacGInput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(jacGIn) jacGIn<SXMatrix>;
%template(jacGIn) jacGIn<MX>;
%template(jacGIn) jacGIn<CRSSparsity>;
%template(IOSchemeVectorJacGInput) JacGInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorJacGInput) JacGInputIOSchemeVector<MX>;
%template(IOSchemeVectorJacGInput) JacGInputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def jacGOut(*dummy,**kwargs):
  """
  Helper function for 'JacGOutput'

  Two use cases:
     a) arg = jacGOut(jac=my_jac, f=my_f, g=my_g) 
          all arguments optional
     b) jac, f, g = jacGOut(arg,"jac", "f", "g") 
          all arguments after the first optional
  Output arguments of an NLP Jacobian function
  
  Keyword arguments:
    jac -- Jacobian of the constraints [JACG_JAC]
    f   -- Objective function [JACG_F]
    g   -- Constraint function [JACG_G]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of jacGOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_JacGOutput,n)] for n in dummy[1:]]
  jac = []
  if 'jac' in kwargs:
    jac = kwargs['jac']
  f = []
  if 'f' in kwargs:
    f = kwargs['f']
  g = []
  if 'g' in kwargs:
    g = kwargs['g']
  for k in kwargs.keys():
    if not(k in ['jac','f','g']):
      raise Exception("Keyword error in jacGOut: '%s' is not recognized. Available keywords are: jac, f, g" % k )
  return IOSchemeVector([jac,f,g], SCHEME_JacGOutput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(jacGOut) jacGOut<SXMatrix>;
%template(jacGOut) jacGOut<MX>;
%template(jacGOut) jacGOut<CRSSparsity>;
%template(IOSchemeVectorJacGOutput) JacGOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorJacGOutput) JacGOutputIOSchemeVector<MX>;
%template(IOSchemeVectorJacGOutput) JacGOutputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def hessLagIn(*dummy,**kwargs):
  """
  Helper function for 'HessLagInput'

  Two use cases:
     a) arg = hessLagIn(x=my_x, p=my_p, lam_f=my_lam_f, lam_g=my_lam_g) 
          all arguments optional
     b) x, p, lam_f, lam_g = hessLagIn(arg,"x", "p", "lam_f", "lam_g") 
          all arguments after the first optional
  Input arguments of an NLP Hessian function
  
  Keyword arguments:
    x     -- Decision variable [HESSLAG_X]
    p     -- Fixed parameter [HESSLAG_P]
    lam_f -- Multiplier for f [HESSLAG_LAM_F]
    lam_g -- Multiplier for g [HESSLAG_LAM_G]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of hessLagIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_HessLagInput,n)] for n in dummy[1:]]
  x = []
  if 'x' in kwargs:
    x = kwargs['x']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  lam_f = []
  if 'lam_f' in kwargs:
    lam_f = kwargs['lam_f']
  lam_g = []
  if 'lam_g' in kwargs:
    lam_g = kwargs['lam_g']
  for k in kwargs.keys():
    if not(k in ['x','p','lam_f','lam_g']):
      raise Exception("Keyword error in hessLagIn: '%s' is not recognized. Available keywords are: x, p, lam_f, lam_g" % k )
  return IOSchemeVector([x,p,lam_f,lam_g], SCHEME_HessLagInput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(hessLagIn) hessLagIn<SXMatrix>;
%template(hessLagIn) hessLagIn<MX>;
%template(hessLagIn) hessLagIn<CRSSparsity>;
%template(IOSchemeVectorHessLagInput) HessLagInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorHessLagInput) HessLagInputIOSchemeVector<MX>;
%template(IOSchemeVectorHessLagInput) HessLagInputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def hessLagOut(*dummy,**kwargs):
  """
  Helper function for 'HessLagOutput'

  Two use cases:
     a) arg = hessLagOut(hess=my_hess, f=my_f, g=my_g, grad_x=my_grad_x, grad_p=my_grad_p) 
          all arguments optional
     b) hess, f, g, grad_x, grad_p = hessLagOut(arg,"hess", "f", "g", "grad_x", "grad_p") 
          all arguments after the first optional
  Output arguments of an NLP Hessian function
  
  Keyword arguments:
    hess   -- Hessian of the Lagrangian [HESSLAG_HESS]
    f      -- Objective function [HESSLAG_F]
    g      -- Constraint function [HESSLAG_G]
    grad_x -- Gradient of the Lagrangian with respect to x [HESSLAG_GRAD_X]
    grad_p -- Gradient of the Lagrangian with respect to p [HESSLAG_GRAD_P]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of hessLagOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_HessLagOutput,n)] for n in dummy[1:]]
  hess = []
  if 'hess' in kwargs:
    hess = kwargs['hess']
  f = []
  if 'f' in kwargs:
    f = kwargs['f']
  g = []
  if 'g' in kwargs:
    g = kwargs['g']
  grad_x = []
  if 'grad_x' in kwargs:
    grad_x = kwargs['grad_x']
  grad_p = []
  if 'grad_p' in kwargs:
    grad_p = kwargs['grad_p']
  for k in kwargs.keys():
    if not(k in ['hess','f','g','grad_x','grad_p']):
      raise Exception("Keyword error in hessLagOut: '%s' is not recognized. Available keywords are: hess, f, g, grad_x, grad_p" % k )
  return IOSchemeVector([hess,f,g,grad_x,grad_p], SCHEME_HessLagOutput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(hessLagOut) hessLagOut<SXMatrix>;
%template(hessLagOut) hessLagOut<MX>;
%template(hessLagOut) hessLagOut<CRSSparsity>;
%template(IOSchemeVectorHessLagOutput) HessLagOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorHessLagOutput) HessLagOutputIOSchemeVector<MX>;
%template(IOSchemeVectorHessLagOutput) HessLagOutputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def nlpSolverIn(*dummy,**kwargs):
  """
  Helper function for 'NLPSolverInput'

  Two use cases:
     a) arg = nlpSolverIn(x0=my_x0, p=my_p, lbx=my_lbx, ubx=my_ubx, lbg=my_lbg, ubg=my_ubg, lam_x0=my_lam_x0, lam_g0=my_lam_g0) 
          all arguments optional
     b) x0, p, lbx, ubx, lbg, ubg, lam_x0, lam_g0 = nlpSolverIn(arg,"x0", "p", "lbx", "ubx", "lbg", "ubg", "lam_x0", "lam_g0") 
          all arguments after the first optional
  Input arguments of an NLP Solver
  
  Keyword arguments:
    x0     -- Decision variables, initial guess (nx x 1)  [NLP_SOLVER_X0]
    p      -- Value of fixed parameters (np x 1) [NLP_SOLVER_P]
    lbx    -- Decision variables lower bound (nx x 1), default -inf [NLP_SOLVER_LBX]
    ubx    -- Decision variables upper bound (nx x 1), default +inf [NLP_SOLVER_UBX]
    lbg    -- Constraints lower bound (ng x 1), default -inf [NLP_SOLVER_LBG]
    ubg    -- Constraints upper bound (ng x 1), default +inf [NLP_SOLVER_UBG]
    lam_x0 -- Lagrange multipliers for bounds on X, initial guess (nx x 1) [NLP_SOLVER_LAM_X0]
    lam_g0 -- Lagrange multipliers for bounds on G, initial guess (ng x 1) [NLP_SOLVER_LAM_G0]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of nlpSolverIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_NLPSolverInput,n)] for n in dummy[1:]]
  x0 = []
  if 'x0' in kwargs:
    x0 = kwargs['x0']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  lbx = []
  if 'lbx' in kwargs:
    lbx = kwargs['lbx']
  ubx = []
  if 'ubx' in kwargs:
    ubx = kwargs['ubx']
  lbg = []
  if 'lbg' in kwargs:
    lbg = kwargs['lbg']
  ubg = []
  if 'ubg' in kwargs:
    ubg = kwargs['ubg']
  lam_x0 = []
  if 'lam_x0' in kwargs:
    lam_x0 = kwargs['lam_x0']
  lam_g0 = []
  if 'lam_g0' in kwargs:
    lam_g0 = kwargs['lam_g0']
  for k in kwargs.keys():
    if not(k in ['x0','p','lbx','ubx','lbg','ubg','lam_x0','lam_g0']):
      raise Exception("Keyword error in nlpSolverIn: '%s' is not recognized. Available keywords are: x0, p, lbx, ubx, lbg, ubg, lam_x0, lam_g0" % k )
  return IOSchemeVector([x0,p,lbx,ubx,lbg,ubg,lam_x0,lam_g0], SCHEME_NLPSolverInput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(nlpSolverIn) nlpSolverIn<SXMatrix>;
%template(nlpSolverIn) nlpSolverIn<MX>;
%template(nlpSolverIn) nlpSolverIn<CRSSparsity>;
%template(IOSchemeVectorNLPSolverInput) NLPSolverInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorNLPSolverInput) NLPSolverInputIOSchemeVector<MX>;
%template(IOSchemeVectorNLPSolverInput) NLPSolverInputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def nlpSolverOut(*dummy,**kwargs):
  """
  Helper function for 'NLPSolverOutput'

  Two use cases:
     a) arg = nlpSolverOut(x=my_x, f=my_f, g=my_g, lam_x=my_lam_x, lam_g=my_lam_g, lam_p=my_lam_p) 
          all arguments optional
     b) x, f, g, lam_x, lam_g, lam_p = nlpSolverOut(arg,"x", "f", "g", "lam_x", "lam_g", "lam_p") 
          all arguments after the first optional
  Output arguments of an NLP Solver
  
  Keyword arguments:
    x     -- Decision variables at the optimal solution (nx x 1) [NLP_SOLVER_X]
    f     -- Cost function value at the optimal solution (1 x 1) [NLP_SOLVER_F]
    g     -- Constraints function at the optimal solution (ng x 1) [NLP_SOLVER_G]
    lam_x -- Lagrange multipliers for bounds on X at the solution (nx x 1) [NLP_SOLVER_LAM_X]
    lam_g -- Lagrange multipliers for bounds on G at the solution (ng x 1) [NLP_SOLVER_LAM_G]
    lam_p -- Lagrange multipliers for bounds on P at the solution (np x 1) [NLP_SOLVER_LAM_P]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of nlpSolverOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_NLPSolverOutput,n)] for n in dummy[1:]]
  x = []
  if 'x' in kwargs:
    x = kwargs['x']
  f = []
  if 'f' in kwargs:
    f = kwargs['f']
  g = []
  if 'g' in kwargs:
    g = kwargs['g']
  lam_x = []
  if 'lam_x' in kwargs:
    lam_x = kwargs['lam_x']
  lam_g = []
  if 'lam_g' in kwargs:
    lam_g = kwargs['lam_g']
  lam_p = []
  if 'lam_p' in kwargs:
    lam_p = kwargs['lam_p']
  for k in kwargs.keys():
    if not(k in ['x','f','g','lam_x','lam_g','lam_p']):
      raise Exception("Keyword error in nlpSolverOut: '%s' is not recognized. Available keywords are: x, f, g, lam_x, lam_g, lam_p" % k )
  return IOSchemeVector([x,f,g,lam_x,lam_g,lam_p], SCHEME_NLPSolverOutput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(nlpSolverOut) nlpSolverOut<SXMatrix>;
%template(nlpSolverOut) nlpSolverOut<MX>;
%template(nlpSolverOut) nlpSolverOut<CRSSparsity>;
%template(IOSchemeVectorNLPSolverOutput) NLPSolverOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorNLPSolverOutput) NLPSolverOutputIOSchemeVector<MX>;
%template(IOSchemeVectorNLPSolverOutput) NLPSolverOutputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def mayerIn(*dummy,**kwargs):
  """
  Helper function for 'MayerInput'

  Two use cases:
     a) arg = mayerIn(x=my_x, p=my_p) 
          all arguments optional
     b) x, p = mayerIn(arg,"x", "p") 
          all arguments after the first optional
  Input arguments of a Mayer Term
  nx: Number of states: from ffcn.input(INTEGRATOR_X0).size()
  np: Number of parameters: from option number_of_parameters
  
  Keyword arguments:
    x -- States at the end of integration (nx x 1) [MAYER_X]
    p -- Problem parameters (np x 1) [MAYER_P]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of mayerIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_MayerInput,n)] for n in dummy[1:]]
  x = []
  if 'x' in kwargs:
    x = kwargs['x']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  for k in kwargs.keys():
    if not(k in ['x','p']):
      raise Exception("Keyword error in mayerIn: '%s' is not recognized. Available keywords are: x, p" % k )
  return IOSchemeVector([x,p], SCHEME_MayerInput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(mayerIn) mayerIn<SXMatrix>;
%template(mayerIn) mayerIn<MX>;
%template(mayerIn) mayerIn<CRSSparsity>;
%template(IOSchemeVectorMayerInput) MayerInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorMayerInput) MayerInputIOSchemeVector<MX>;
%template(IOSchemeVectorMayerInput) MayerInputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def ocpIn(*dummy,**kwargs):
  """
  Helper function for 'OCPInput'

  Two use cases:
     a) arg = ocpIn(lbx=my_lbx, ubx=my_ubx, x_init=my_x_init, lbu=my_lbu, ubu=my_ubu, u_init=my_u_init, lbp=my_lbp, ubp=my_ubp, p_init=my_p_init, lbh=my_lbh, ubh=my_ubh, lbg=my_lbg, ubg=my_ubg) 
          all arguments optional
     b) lbx, ubx, x_init, lbu, ubu, u_init, lbp, ubp, p_init, lbh, ubh, lbg, ubg = ocpIn(arg,"lbx", "ubx", "x_init", "lbu", "ubu", "u_init", "lbp", "ubp", "p_init", "lbh", "ubh", "lbg", "ubg") 
          all arguments after the first optional
  Input arguments of an OCP Solver
  ns: Number of shooting nodes: from option number_of_grid_points
  nx: Number of states: from ffcn.input(INTEGRATOR_X0).size()
  nc: Number of constants duting intergation: ffcn.input(INTEGRATOR_P).size()
  nu: Number of controls: from nc - np
  np: Number of parameters: from option number_of_parameters
  nh: Number of point constraints: from cfcn.input(0).size()
  
  Keyword arguments:
    lbx    -- States lower bounds (nx x (ns+1)) [OCP_LBX]
    ubx    -- States upper bounds (nx x (ns+1)) [OCP_UBX]
    x_init -- States initial guess (nx x (ns+1)) [OCP_X_INIT]
    lbu    -- Controls lower bounds (nu x ns) [OCP_LBU]
    ubu    -- Controls upper bounds (nu x ns) [OCP_UBU]
    u_init -- Controls initial guess (nu x ns) [OCP_U_INIT]
    lbp    -- Parameters lower bounds (np x 1) [OCP_LBP]
    ubp    -- Parameters upper bounds (np x 1) [OCP_UBP]
    p_init -- Parameters initial guess (np x 1) [OCP_P_INIT]
    lbh    -- Point constraint lower bound (nh x (ns+1)) [OCP_LBH]
    ubh    -- Point constraint upper bound (nh x (ns+1)) [OCP_UBH]
    lbg    -- Lower bound for the coupling constraints [OCP_LBG]
    ubg    -- Upper bound for the coupling constraints [OCP_UBG]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of ocpIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_OCPInput,n)] for n in dummy[1:]]
  lbx = []
  if 'lbx' in kwargs:
    lbx = kwargs['lbx']
  ubx = []
  if 'ubx' in kwargs:
    ubx = kwargs['ubx']
  x_init = []
  if 'x_init' in kwargs:
    x_init = kwargs['x_init']
  lbu = []
  if 'lbu' in kwargs:
    lbu = kwargs['lbu']
  ubu = []
  if 'ubu' in kwargs:
    ubu = kwargs['ubu']
  u_init = []
  if 'u_init' in kwargs:
    u_init = kwargs['u_init']
  lbp = []
  if 'lbp' in kwargs:
    lbp = kwargs['lbp']
  ubp = []
  if 'ubp' in kwargs:
    ubp = kwargs['ubp']
  p_init = []
  if 'p_init' in kwargs:
    p_init = kwargs['p_init']
  lbh = []
  if 'lbh' in kwargs:
    lbh = kwargs['lbh']
  ubh = []
  if 'ubh' in kwargs:
    ubh = kwargs['ubh']
  lbg = []
  if 'lbg' in kwargs:
    lbg = kwargs['lbg']
  ubg = []
  if 'ubg' in kwargs:
    ubg = kwargs['ubg']
  for k in kwargs.keys():
    if not(k in ['lbx','ubx','x_init','lbu','ubu','u_init','lbp','ubp','p_init','lbh','ubh','lbg','ubg']):
      raise Exception("Keyword error in ocpIn: '%s' is not recognized. Available keywords are: lbx, ubx, x_init, lbu, ubu, u_init, lbp, ubp, p_init, lbh, ubh, lbg, ubg" % k )
  return IOSchemeVector([lbx,ubx,x_init,lbu,ubu,u_init,lbp,ubp,p_init,lbh,ubh,lbg,ubg], SCHEME_OCPInput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(ocpIn) ocpIn<SXMatrix>;
%template(ocpIn) ocpIn<MX>;
%template(ocpIn) ocpIn<CRSSparsity>;
%template(IOSchemeVectorOCPInput) OCPInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorOCPInput) OCPInputIOSchemeVector<MX>;
%template(IOSchemeVectorOCPInput) OCPInputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def ocpOut(*dummy,**kwargs):
  """
  Helper function for 'OCPOutput'

  Two use cases:
     a) arg = ocpOut(x_opt=my_x_opt, u_opt=my_u_opt, p_opt=my_p_opt, cost=my_cost) 
          all arguments optional
     b) x_opt, u_opt, p_opt, cost = ocpOut(arg,"x_opt", "u_opt", "p_opt", "cost") 
          all arguments after the first optional
  Output arguments of an OCP Solver
  
  Keyword arguments:
    x_opt -- Optimal state trajectory [OCP_X_OPT]
    u_opt -- Optimal control trajectory [OCP_U_OPT]
    p_opt -- Optimal parameters [OCP_P_OPT]
    cost  -- Objective/cost function for optimal solution (1 x 1) [OCP_COST]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of ocpOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_OCPOutput,n)] for n in dummy[1:]]
  x_opt = []
  if 'x_opt' in kwargs:
    x_opt = kwargs['x_opt']
  u_opt = []
  if 'u_opt' in kwargs:
    u_opt = kwargs['u_opt']
  p_opt = []
  if 'p_opt' in kwargs:
    p_opt = kwargs['p_opt']
  cost = []
  if 'cost' in kwargs:
    cost = kwargs['cost']
  for k in kwargs.keys():
    if not(k in ['x_opt','u_opt','p_opt','cost']):
      raise Exception("Keyword error in ocpOut: '%s' is not recognized. Available keywords are: x_opt, u_opt, p_opt, cost" % k )
  return IOSchemeVector([x_opt,u_opt,p_opt,cost], SCHEME_OCPOutput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(ocpOut) ocpOut<SXMatrix>;
%template(ocpOut) ocpOut<MX>;
%template(ocpOut) ocpOut<CRSSparsity>;
%template(IOSchemeVectorOCPOutput) OCPOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorOCPOutput) OCPOutputIOSchemeVector<MX>;
%template(IOSchemeVectorOCPOutput) OCPOutputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def qpIn(*dummy,**kwargs):
  """
  Helper function for 'QPSolverInput'

  Two use cases:
     a) arg = qpIn(h=my_h, g=my_g, a=my_a, lba=my_lba, uba=my_uba, lbx=my_lbx, ubx=my_ubx, x0=my_x0, lam_x0=my_lam_x0) 
          all arguments optional
     b) h, g, a, lba, uba, lbx, ubx, x0, lam_x0 = qpIn(arg,"h", "g", "a", "lba", "uba", "lbx", "ubx", "x0", "lam_x0") 
          all arguments after the first optional
  Input arguments of a QP problem
  
  Keyword arguments:
    h      -- The square matrix H: sparse, (n x n). Only the lower triangular part is actually used. The matrix is assumed to be symmetrical. [QP_SOLVER_H]
    g      -- The vector g: dense,  (n x 1) [QP_SOLVER_G]
    a      -- The matrix A: sparse, (nc x n) - product with x must be dense. [QP_SOLVER_A]
    lba    -- dense, (nc x 1) [QP_SOLVER_LBA]
    uba    -- dense, (nc x 1) [QP_SOLVER_UBA]
    lbx    -- dense, (n x 1) [QP_SOLVER_LBX]
    ubx    -- dense, (n x 1) [QP_SOLVER_UBX]
    x0     -- dense, (n x 1) [QP_SOLVER_X0]
    lam_x0 -- dense [QP_SOLVER_LAM_X0]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of qpIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_QPSolverInput,n)] for n in dummy[1:]]
  h = []
  if 'h' in kwargs:
    h = kwargs['h']
  g = []
  if 'g' in kwargs:
    g = kwargs['g']
  a = []
  if 'a' in kwargs:
    a = kwargs['a']
  lba = []
  if 'lba' in kwargs:
    lba = kwargs['lba']
  uba = []
  if 'uba' in kwargs:
    uba = kwargs['uba']
  lbx = []
  if 'lbx' in kwargs:
    lbx = kwargs['lbx']
  ubx = []
  if 'ubx' in kwargs:
    ubx = kwargs['ubx']
  x0 = []
  if 'x0' in kwargs:
    x0 = kwargs['x0']
  lam_x0 = []
  if 'lam_x0' in kwargs:
    lam_x0 = kwargs['lam_x0']
  for k in kwargs.keys():
    if not(k in ['h','g','a','lba','uba','lbx','ubx','x0','lam_x0']):
      raise Exception("Keyword error in qpIn: '%s' is not recognized. Available keywords are: h, g, a, lba, uba, lbx, ubx, x0, lam_x0" % k )
  return IOSchemeVector([h,g,a,lba,uba,lbx,ubx,x0,lam_x0], SCHEME_QPSolverInput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(qpIn) qpIn<SXMatrix>;
%template(qpIn) qpIn<MX>;
%template(qpIn) qpIn<CRSSparsity>;
%template(IOSchemeVectorQPSolverInput) QPSolverInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorQPSolverInput) QPSolverInputIOSchemeVector<MX>;
%template(IOSchemeVectorQPSolverInput) QPSolverInputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def qpOut(*dummy,**kwargs):
  """
  Helper function for 'QPSolverOutput'

  Two use cases:
     a) arg = qpOut(x=my_x, cost=my_cost, lam_a=my_lam_a, lam_x=my_lam_x) 
          all arguments optional
     b) x, cost, lam_a, lam_x = qpOut(arg,"x", "cost", "lam_a", "lam_x") 
          all arguments after the first optional
  Output arguments of an QP Solver
  
  Keyword arguments:
    x     -- The primal solution [QP_SOLVER_X]
    cost  -- The optimal cost [QP_SOLVER_COST]
    lam_a -- The dual solution corresponding to linear bounds [QP_SOLVER_LAM_A]
    lam_x -- The dual solution corresponding to simple bounds [QP_SOLVER_LAM_X]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of qpOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_QPSolverOutput,n)] for n in dummy[1:]]
  x = []
  if 'x' in kwargs:
    x = kwargs['x']
  cost = []
  if 'cost' in kwargs:
    cost = kwargs['cost']
  lam_a = []
  if 'lam_a' in kwargs:
    lam_a = kwargs['lam_a']
  lam_x = []
  if 'lam_x' in kwargs:
    lam_x = kwargs['lam_x']
  for k in kwargs.keys():
    if not(k in ['x','cost','lam_a','lam_x']):
      raise Exception("Keyword error in qpOut: '%s' is not recognized. Available keywords are: x, cost, lam_a, lam_x" % k )
  return IOSchemeVector([x,cost,lam_a,lam_x], SCHEME_QPSolverOutput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(qpOut) qpOut<SXMatrix>;
%template(qpOut) qpOut<MX>;
%template(qpOut) qpOut<CRSSparsity>;
%template(IOSchemeVectorQPSolverOutput) QPSolverOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorQPSolverOutput) QPSolverOutputIOSchemeVector<MX>;
%template(IOSchemeVectorQPSolverOutput) QPSolverOutputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def qpStruct(*dummy,**kwargs):
  """
  Helper function for 'QPStruct'

  Two use cases:
     a) arg = qpStruct(h=my_h, a=my_a) 
          all arguments optional
     b) h, a = qpStruct(arg,"h", "a") 
          all arguments after the first optional
  Structure specification of a QP
  
  Keyword arguments:
    h -- The square matrix H: sparse, (n x n). Only the lower triangular part is actually used. The matrix is assumed to be symmetrical. [QP_STRUCT_H]
    a -- The matrix A: sparse, (nc x n) - product with x must be dense. [QP_STRUCT_A]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of qpStruct. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_QPStruct,n)] for n in dummy[1:]]
  h = []
  if 'h' in kwargs:
    h = kwargs['h']
  a = []
  if 'a' in kwargs:
    a = kwargs['a']
  for k in kwargs.keys():
    if not(k in ['h','a']):
      raise Exception("Keyword error in qpStruct: '%s' is not recognized. Available keywords are: h, a" % k )
  return QPStructure([h,a])
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(qpStruct) qpStruct<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
%template(QPStructure) QPStructIOSchemeVector<CRSSparsity>;
}
#ifdef SWIGPYTHON
%pythoncode %{
def sdpIn(*dummy,**kwargs):
  """
  Helper function for 'SDPInput'

  Two use cases:
     a) arg = sdpIn(f=my_f, c=my_c, g=my_g, a=my_a, lba=my_lba, uba=my_uba, lbx=my_lbx, ubx=my_ubx) 
          all arguments optional
     b) f, c, g, a, lba, uba, lbx, ubx = sdpIn(arg,"f", "c", "g", "a", "lba", "uba", "lbx", "ubx") 
          all arguments after the first optional
  Input arguments of a SDP problem
  
  Keyword arguments:
    f   -- The vertical stack of all matrices F_i: ( nm x m) [SDP_SOLVER_F]
    c   -- The vector c: ( n x 1) [SDP_SOLVER_C]
    g   -- The matrix G: ( m x m) [SDP_SOLVER_G]
    a   -- The matrix A: ( nc x n) [SDP_SOLVER_A]
    lba -- Lower bounds on Ax ( nc x 1) [SDP_SOLVER_LBA]
    uba -- Upper bounds on Ax  ( nc x 1) [SDP_SOLVER_UBA]
    lbx -- Lower bounds on x ( n x 1 ) [SDP_SOLVER_LBX]
    ubx -- Upper bounds on x ( n x 1 ) [SDP_SOLVER_UBX]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of sdpIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_SDPInput,n)] for n in dummy[1:]]
  f = []
  if 'f' in kwargs:
    f = kwargs['f']
  c = []
  if 'c' in kwargs:
    c = kwargs['c']
  g = []
  if 'g' in kwargs:
    g = kwargs['g']
  a = []
  if 'a' in kwargs:
    a = kwargs['a']
  lba = []
  if 'lba' in kwargs:
    lba = kwargs['lba']
  uba = []
  if 'uba' in kwargs:
    uba = kwargs['uba']
  lbx = []
  if 'lbx' in kwargs:
    lbx = kwargs['lbx']
  ubx = []
  if 'ubx' in kwargs:
    ubx = kwargs['ubx']
  for k in kwargs.keys():
    if not(k in ['f','c','g','a','lba','uba','lbx','ubx']):
      raise Exception("Keyword error in sdpIn: '%s' is not recognized. Available keywords are: f, c, g, a, lba, uba, lbx, ubx" % k )
  return IOSchemeVector([f,c,g,a,lba,uba,lbx,ubx], SCHEME_SDPInput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(sdpIn) sdpIn<SXMatrix>;
%template(sdpIn) sdpIn<MX>;
%template(sdpIn) sdpIn<CRSSparsity>;
%template(IOSchemeVectorSDPInput) SDPInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorSDPInput) SDPInputIOSchemeVector<MX>;
%template(IOSchemeVectorSDPInput) SDPInputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def sdpOut(*dummy,**kwargs):
  """
  Helper function for 'SDPOutput'

  Two use cases:
     a) arg = sdpOut(x=my_x, p=my_p, dual=my_dual, cost=my_cost, dual_cost=my_dual_cost, lam_a=my_lam_a, lam_x=my_lam_x) 
          all arguments optional
     b) x, p, dual, cost, dual_cost, lam_a, lam_x = sdpOut(arg,"x", "p", "dual", "cost", "dual_cost", "lam_a", "lam_x") 
          all arguments after the first optional
  Output arguments of an SDP Solver
  
  Keyword arguments:
    x         -- The primal solution (n x 1) - may be used as initial guess [SDP_SOLVER_X]
    p         -- The solution P (m x m) - may be used as initial guess [SDP_SOLVER_P]
    dual      -- The dual solution (m x m) - may be used as initial guess [SDP_SOLVER_DUAL]
    cost      -- The primal optimal cost (1 x 1) [SDP_SOLVER_COST]
    dual_cost -- The dual optimal cost (1 x 1) [SDP_SOLVER_DUAL_COST]
    lam_a     -- The dual solution corresponding to the linear constraints  (nc x 1) [SDP_SOLVER_LAM_A]
    lam_x     -- The dual solution corresponding to simple bounds  (n x 1) [SDP_SOLVER_LAM_X]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of sdpOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_SDPOutput,n)] for n in dummy[1:]]
  x = []
  if 'x' in kwargs:
    x = kwargs['x']
  p = []
  if 'p' in kwargs:
    p = kwargs['p']
  dual = []
  if 'dual' in kwargs:
    dual = kwargs['dual']
  cost = []
  if 'cost' in kwargs:
    cost = kwargs['cost']
  dual_cost = []
  if 'dual_cost' in kwargs:
    dual_cost = kwargs['dual_cost']
  lam_a = []
  if 'lam_a' in kwargs:
    lam_a = kwargs['lam_a']
  lam_x = []
  if 'lam_x' in kwargs:
    lam_x = kwargs['lam_x']
  for k in kwargs.keys():
    if not(k in ['x','p','dual','cost','dual_cost','lam_a','lam_x']):
      raise Exception("Keyword error in sdpOut: '%s' is not recognized. Available keywords are: x, p, dual, cost, dual_cost, lam_a, lam_x" % k )
  return IOSchemeVector([x,p,dual,cost,dual_cost,lam_a,lam_x], SCHEME_SDPOutput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(sdpOut) sdpOut<SXMatrix>;
%template(sdpOut) sdpOut<MX>;
%template(sdpOut) sdpOut<CRSSparsity>;
%template(IOSchemeVectorSDPOutput) SDPOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorSDPOutput) SDPOutputIOSchemeVector<MX>;
%template(IOSchemeVectorSDPOutput) SDPOutputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def sdpStruct(*dummy,**kwargs):
  """
  Helper function for 'SDPStruct'

  Two use cases:
     a) arg = sdpStruct(f=my_f, g=my_g, a=my_a) 
          all arguments optional
     b) f, g, a = sdpStruct(arg,"f", "g", "a") 
          all arguments after the first optional
  Structure specification of an SDP
  
  Keyword arguments:
    f -- The vertical stack of all matrices F_i: ( nm x m) [SDP_STRUCT_F]
    g -- The matrix G: ( m x m) [SDP_STRUCT_G]
    a -- The matrix A: ( nc x n) [SDP_STRUCT_A]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of sdpStruct. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_SDPStruct,n)] for n in dummy[1:]]
  f = []
  if 'f' in kwargs:
    f = kwargs['f']
  g = []
  if 'g' in kwargs:
    g = kwargs['g']
  a = []
  if 'a' in kwargs:
    a = kwargs['a']
  for k in kwargs.keys():
    if not(k in ['f','g','a']):
      raise Exception("Keyword error in sdpStruct: '%s' is not recognized. Available keywords are: f, g, a" % k )
  return SDPStructure([f,g,a])
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(sdpStruct) sdpStruct<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
%template(SDPStructure) SDPStructIOSchemeVector<CRSSparsity>;
}
#ifdef SWIGPYTHON
%pythoncode %{
def socpIn(*dummy,**kwargs):
  """
  Helper function for 'SOCPInput'

  Two use cases:
     a) arg = socpIn(g=my_g, h=my_h, e=my_e, f=my_f, c=my_c, a=my_a, lba=my_lba, uba=my_uba, lbx=my_lbx, ubx=my_ubx) 
          all arguments optional
     b) g, h, e, f, c, a, lba, uba, lbx, ubx = socpIn(arg,"g", "h", "e", "f", "c", "a", "lba", "uba", "lbx", "ubx") 
          all arguments after the first optional
  Input arguments of a SOCP problem
  
  Keyword arguments:
    g   -- The vertical stack of all matrices Gi: ( N x n) [SOCP_SOLVER_G]
    h   -- The vertical stack of all vectors hi: ( N x 1) [SOCP_SOLVER_H]
    e   -- The vertical stack of all vectors ei: ( nm x 1) [SOCP_SOLVER_E]
    f   -- The vertical stack of all scalars fi: ( m x 1) [SOCP_SOLVER_F]
    c   -- The vector c: ( n x 1) [SOCP_SOLVER_C]
    a   -- The matrix A: ( nc x n) [SOCP_SOLVER_A]
    lba -- Lower bounds on Ax ( nc x 1) [SOCP_SOLVER_LBA]
    uba -- Upper bounds on Ax  ( nc x 1) [SOCP_SOLVER_UBA]
    lbx -- Lower bounds on x ( n x 1 ) [SOCP_SOLVER_LBX]
    ubx -- Upper bounds on x ( n x 1 ) [SOCP_SOLVER_UBX]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of socpIn. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_SOCPInput,n)] for n in dummy[1:]]
  g = []
  if 'g' in kwargs:
    g = kwargs['g']
  h = []
  if 'h' in kwargs:
    h = kwargs['h']
  e = []
  if 'e' in kwargs:
    e = kwargs['e']
  f = []
  if 'f' in kwargs:
    f = kwargs['f']
  c = []
  if 'c' in kwargs:
    c = kwargs['c']
  a = []
  if 'a' in kwargs:
    a = kwargs['a']
  lba = []
  if 'lba' in kwargs:
    lba = kwargs['lba']
  uba = []
  if 'uba' in kwargs:
    uba = kwargs['uba']
  lbx = []
  if 'lbx' in kwargs:
    lbx = kwargs['lbx']
  ubx = []
  if 'ubx' in kwargs:
    ubx = kwargs['ubx']
  for k in kwargs.keys():
    if not(k in ['g','h','e','f','c','a','lba','uba','lbx','ubx']):
      raise Exception("Keyword error in socpIn: '%s' is not recognized. Available keywords are: g, h, e, f, c, a, lba, uba, lbx, ubx" % k )
  return IOSchemeVector([g,h,e,f,c,a,lba,uba,lbx,ubx], SCHEME_SOCPInput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(socpIn) socpIn<SXMatrix>;
%template(socpIn) socpIn<MX>;
%template(socpIn) socpIn<CRSSparsity>;
%template(IOSchemeVectorSOCPInput) SOCPInputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorSOCPInput) SOCPInputIOSchemeVector<MX>;
%template(IOSchemeVectorSOCPInput) SOCPInputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def socpOut(*dummy,**kwargs):
  """
  Helper function for 'SOCPOutput'

  Two use cases:
     a) arg = socpOut(x=my_x, cost=my_cost, lam_a=my_lam_a, lam_x=my_lam_x) 
          all arguments optional
     b) x, cost, lam_a, lam_x = socpOut(arg,"x", "cost", "lam_a", "lam_x") 
          all arguments after the first optional
  Output arguments of an SOCP Solver
  
  Keyword arguments:
    x     -- The primal solution (n x 1) [SOCP_SOLVER_X]
    cost  -- The primal optimal cost (1 x 1) [SOCP_SOLVER_COST]
    lam_a -- The dual solution corresponding to the linear constraints  (nc x 1) [SOCP_SOLVER_LAM_A]
    lam_x -- The dual solution corresponding to simple bounds  (n x 1) [SOCP_SOLVER_LAM_X]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of socpOut. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_SOCPOutput,n)] for n in dummy[1:]]
  x = []
  if 'x' in kwargs:
    x = kwargs['x']
  cost = []
  if 'cost' in kwargs:
    cost = kwargs['cost']
  lam_a = []
  if 'lam_a' in kwargs:
    lam_a = kwargs['lam_a']
  lam_x = []
  if 'lam_x' in kwargs:
    lam_x = kwargs['lam_x']
  for k in kwargs.keys():
    if not(k in ['x','cost','lam_a','lam_x']):
      raise Exception("Keyword error in socpOut: '%s' is not recognized. Available keywords are: x, cost, lam_a, lam_x" % k )
  return IOSchemeVector([x,cost,lam_a,lam_x], SCHEME_SOCPOutput)
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(socpOut) socpOut<SXMatrix>;
%template(socpOut) socpOut<MX>;
%template(socpOut) socpOut<CRSSparsity>;
%template(IOSchemeVectorSOCPOutput) SOCPOutputIOSchemeVector<SXMatrix>;
%template(IOSchemeVectorSOCPOutput) SOCPOutputIOSchemeVector<MX>;
%template(IOSchemeVectorSOCPOutput) SOCPOutputIOSchemeVector<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
}
#ifdef SWIGPYTHON
%pythoncode %{
def socpStruct(*dummy,**kwargs):
  """
  Helper function for 'SOCPStruct'

  Two use cases:
     a) arg = socpStruct(g=my_g, a=my_a) 
          all arguments optional
     b) g, a = socpStruct(arg,"g", "a") 
          all arguments after the first optional
  Structure specification of an SOCP
  
  Keyword arguments:
    g -- The vertical stack of all matrices Gi: ( N x n) [SOCP_STRUCT_G]
    a -- The matrix A: ( nc x n) [SOCP_STRUCT_A]
  """
  if(len(dummy)>0 and len(kwargs)>0): raise Exception("Cannot mix two use cases of socpStruct. Either use keywords or non-keywords ")
  if len(dummy)>0: return [ dummy[0][getSchemeEntryEnum(SCHEME_SOCPStruct,n)] for n in dummy[1:]]
  g = []
  if 'g' in kwargs:
    g = kwargs['g']
  a = []
  if 'a' in kwargs:
    a = kwargs['a']
  for k in kwargs.keys():
    if not(k in ['g','a']):
      raise Exception("Keyword error in socpStruct: '%s' is not recognized. Available keywords are: g, a" % k )
  return SOCPStructure([g,a])
%}
#endif //SWIGPYTHON
#ifndef SWIGPYTHON
namespace CasADi {
%template(socpStruct) socpStruct<CRSSparsity>;
}
#endif //SWIGPYTHON
namespace CasADi {
%template(SOCPStructure) SOCPStructIOSchemeVector<CRSSparsity>;
}
#endif //AUTOGENERATED_I

