
// File: index.xml

// File: classcasadi_1_1Assertion.xml


// File: classcasadi_1_1BackwardDiff.xml
%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FiniteDiff::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(casadi_int
nadj, const std::string &name, const std::vector< std::string > &inames,
const std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FiniteDiff::uses_output() const  "

[INTERNAL]  Is the scheme using the (nondifferentiated) output?

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::BackwardDiff::class_name() const  "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::FiniteDiff::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FiniteDiff::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FiniteDiff::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")
casadi::FunctionInternal::serialize_body(SerializingStream &s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FiniteDiff::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FiniteDiff::codegen_body(CodeGenerator &g)
const  "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::BackwardDiff::BackwardDiff(const std::string
&name, casadi_int n) "

[INTERNAL] ";

%feature("docstring")  casadi::ForwardDiff::has_err() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(casadi_int
nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::ForwardDiff::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::ForwardDiff::calc_fd(double **yk, double *y0,
double *J, double h) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ForwardDiff::calc_fd() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FiniteDiff::get_default_in(casadi_int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::BackwardDiff "

[INTERNAL]  Calculate derivative using backward differences Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| abstol           | OT_DOUBLE       | Accuracy of      | casadi::Backward |
|                  |                 | function outputs | Diff             |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| h                | OT_DOUBLE       | Step size        | casadi::Backward |
|                  |                 | [default:        | Diff             |
|                  |                 | computed from    |                  |
|                  |                 | abstol]          |                  |
+------------------+-----------------+------------------+------------------+
| h_iter           | OT_INT          | Number of        | casadi::Backward |
|                  |                 | iterations to    | Diff             |
|                  |                 | improve on the   |                  |
|                  |                 | step-size        |                  |
|                  |                 | [default: 1 if   |                  |
|                  |                 | error estimate   |                  |
|                  |                 | available,       |                  |
|                  |                 | otherwise 0]     |                  |
+------------------+-----------------+------------------+------------------+
| h_max            | OT_DOUBLE       | Maximum step     | casadi::Backward |
|                  |                 | size [default 0] | Diff             |
+------------------+-----------------+------------------+------------------+
| h_min            | OT_DOUBLE       | Minimum step     | casadi::Backward |
|                  |                 | size [default    | Diff             |
|                  |                 | inf]             |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reltol           | OT_DOUBLE       | Accuracy of      | casadi::Backward |
|                  |                 | function inputs  | Diff             |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| second_order_ste | OT_DOUBLE       | Second order     | casadi::Backward |
| psize            |                 | perturbation     | Diff             |
|                  |                 | size [default:   |                  |
|                  |                 | 1e-3]            |                  |
+------------------+-----------------+------------------+------------------+
| smoothing        | OT_DOUBLE       | Smoothing        | casadi::Backward |
|                  |                 | regularization   | Diff             |
|                  |                 | [default:        |                  |
|                  |                 | machine          |                  |
|                  |                 | precision]       |                  |
+------------------+-----------------+------------------+------------------+
| u_aim            | OT_DOUBLE       | Target ratio of  | casadi::Backward |
|                  |                 | roundoff error   | Diff             |
|                  |                 | to truncation    |                  |
|                  |                 | error [default:  |                  |
|                  |                 | 100.]            |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: finite_differences.hpp ";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FiniteDiff::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")
casadi::FiniteDiff::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FiniteDiff::eval(const double **arg, double
**res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::ForwardDiff::has_forward(casadi_int nfwd)
const  "

[INTERNAL]  Second order derivatives.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::FiniteDiff::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::ForwardDiff::n_pert() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::finalize()  "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FiniteDiff::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::serialize_type(SerializingStream &s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::ForwardDiff::pert(const std::string &k) const
"

[INTERNAL] ";

%feature("docstring")  casadi::ForwardDiff::pert(casadi_int k, double h)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::ProtoFunction::serialize_base_function()
const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::BackwardDiff::calc_stepsize(double abstol)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::ForwardDiff::get_forward(casadi_int nfwd,
const std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Second order derivatives.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::ProtoFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring") casadi::BackwardDiff::~BackwardDiff "

[INTERNAL]  Destructor.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FiniteDiff::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";


// File: classcasadi_1_1Bilin.xml


// File: classcasadi_1_1BinaryMX.xml


// File: classcasadi_1_1BinarySX.xml


// File: classcasadi_1_1Blocksqp.xml
%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::Blocksqp::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::Nlpsol::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::Nlpsol::get_forward(casadi_int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates forward mode derivatives.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::Blocksqp::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::OracleFunction::finalize()  "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::Blocksqp::plugin_name() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::Blocksqp::printProgress(BlocksqpMemory *m)
const  "

[INTERNAL]  Print one line of output to stdout about the current iteration.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::Nlpsol::disp_more(std::ostream &stream) const
"

[INTERNAL]  Print description.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::Nlpsol::callback(NlpsolMemory *m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::Nlpsol::kkt() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::Nlpsol::nlpsol_codegen_body(CodeGenerator &g)
const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::Blocksqp::sizeHessianCOL(BlocksqpMemory *m,
const double *gamma, const double *delta, casadi_int b) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::Blocksqp::calcBFGS(BlocksqpMemory *m, const
double *gamma, const double *delta, casadi_int b) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::pairInFilter(BlocksqpMemory *m,
double cNorm, double obj) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::reset_sqp(BlocksqpMemory *m) const
"

[INTERNAL]  Reset variables that any SQP code needs.

";

%feature("docstring")  casadi::Blocksqp::resetHessian(BlocksqpMemory *m)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::resetHessian(BlocksqpMemory *m,
casadi_int b) const  "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Blocksqp::fullstep(BlocksqpMemory *m) const
"

[INTERNAL]  No globalization strategy.

";

%feature("docstring")  casadi::Nlpsol::has_reverse(casadi_int nadj) const  "

[INTERNAL]  Generate a function that calculates reverse mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::Nlpsol::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::Nlpsol::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::Blocksqp::~Blocksqp "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::Blocksqp::calcHessianUpdate(BlocksqpMemory
*m, casadi_int updateType, casadi_int hessScaling) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::Blocksqp::evaluate(BlocksqpMemory *m, double
*f, double *g, double *grad_f, double *jac_g) const  "

[INTERNAL]  Evaluate objective and constraints, including derivatives.

";

%feature("docstring")  casadi::Blocksqp::evaluate(BlocksqpMemory *m, const
double *xk, double *f, double *g) const  "

[INTERNAL]  Evaluate objective and constraints, no derivatives.

";

%feature("docstring")  casadi::Blocksqp::evaluate(BlocksqpMemory *m, double
*exact_hess_lag) const  "

[INTERNAL]  Evaluate exact hessian of Lagrangian.

";

%feature("docstring")  casadi::Nlpsol::check_inputs(void *mem) const  "

[INTERNAL]  Check if the inputs correspond to a well-posed problem.

";

%feature("docstring")  casadi::Blocksqp::initializeFilter(BlocksqpMemory *m)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::getReducedHessian() "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_function() const  "

[INTERNAL]  Get list of dependency functions -1 Indicates irregularity.

";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Blocksqp::Blocksqp(const std::string &name,
const Function &nlp) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::Blocksqp::computeNextHessian(BlocksqpMemory
*m, casadi_int idx, casadi_int maxQP) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Nlpsol::has_forward(casadi_int nfwd) const  "

[INTERNAL]  Generate a function that calculates forward mode derivatives.

";

%feature("docstring") casadi::Blocksqp "

'blocksqp' plugin for Nlpsol

This is a modified version of blockSQP by Janka et al.

Dennis Janka, Joel Andersson

>List of available options

+----------------------------+-----------+---------------------------------+
|             Id             |   Type    |           Description           |
+============================+===========+=================================+
| block_hess                 | OT_INT    | Blockwise Hessian               |
|                            |           | approximation?                  |
+----------------------------+-----------+---------------------------------+
| col_eps                    | OT_DOUBLE | Epsilon for COL scaling         |
|                            |           | strategy                        |
+----------------------------+-----------+---------------------------------+
| col_tau1                   | OT_DOUBLE | tau1 for COL scaling strategy   |
+----------------------------+-----------+---------------------------------+
| col_tau2                   | OT_DOUBLE | tau2 for COL scaling strategy   |
+----------------------------+-----------+---------------------------------+
| conv_strategy              | OT_INT    | Convexification strategy        |
+----------------------------+-----------+---------------------------------+
| delta                      | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| delta_h0                   | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| eps                        | OT_DOUBLE | Values smaller than this are    |
|                            |           | regarded as numerically zero    |
+----------------------------+-----------+---------------------------------+
| eta                        | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| fallback_scaling           | OT_INT    | If indefinite update is used,   |
|                            |           | the type of fallback strategy   |
+----------------------------+-----------+---------------------------------+
| fallback_update            | OT_INT    | If indefinite update is used,   |
|                            |           | the type of fallback strategy   |
+----------------------------+-----------+---------------------------------+
| gamma_f                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| gamma_theta                | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| globalization              | OT_BOOL   | Enable globalization            |
+----------------------------+-----------+---------------------------------+
| hess_damp                  | OT_INT    | Activate Powell damping for     |
|                            |           | BFGS                            |
+----------------------------+-----------+---------------------------------+
| hess_damp_fac              | OT_DOUBLE | Damping factor for BFGS Powell  |
|                            |           | modification                    |
+----------------------------+-----------+---------------------------------+
| hess_lim_mem               | OT_INT    | Full or limited memory          |
+----------------------------+-----------+---------------------------------+
| hess_memsize               | OT_INT    | Memory size for L-BFGS updates  |
+----------------------------+-----------+---------------------------------+
| hess_scaling               | OT_INT    | Scaling strategy for Hessian    |
|                            |           | approximation                   |
+----------------------------+-----------+---------------------------------+
| hess_update                | OT_INT    | Type of Hessian approximation   |
+----------------------------+-----------+---------------------------------+
| ini_hess_diag              | OT_DOUBLE | Initial Hessian guess: diagonal |
|                            |           | matrix diag(iniHessDiag)        |
+----------------------------+-----------+---------------------------------+
| kappa_f                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_minus                | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_plus                 | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_plus_max             | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_soc                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| linsol                     | OT_STRING | The linear solver to be used by |
|                            |           | the QP method                   |
+----------------------------+-----------+---------------------------------+
| max_consec_reduced_steps   | OT_INT    | Maximum number of consecutive   |
|                            |           | reduced steps                   |
+----------------------------+-----------+---------------------------------+
| max_consec_skipped_updates | OT_INT    | Maximum number of consecutive   |
|                            |           | skipped updates                 |
+----------------------------+-----------+---------------------------------+
| max_conv_qp                | OT_INT    | How many additional QPs may be  |
|                            |           | solved for convexification per  |
|                            |           | iteration?                      |
+----------------------------+-----------+---------------------------------+
| max_it_qp                  | OT_INT    | Maximum number of QP iterations |
|                            |           | per SQP iteration               |
+----------------------------+-----------+---------------------------------+
| max_iter                   | OT_INT    | Maximum number of SQP           |
|                            |           | iterations                      |
+----------------------------+-----------+---------------------------------+
| max_line_search            | OT_INT    | Maximum number of steps in line |
|                            |           | search                          |
+----------------------------+-----------+---------------------------------+
| max_soc_iter               | OT_INT    | Maximum number of SOC line      |
|                            |           | search iterations               |
+----------------------------+-----------+---------------------------------+
| max_time_qp                | OT_DOUBLE | Maximum number of time in       |
|                            |           | seconds per QP solve per SQP    |
|                            |           | iteration                       |
+----------------------------+-----------+---------------------------------+
| nlinfeastol                | OT_DOUBLE | Nonlinear feasibility tolerance |
+----------------------------+-----------+---------------------------------+
| obj_lo                     | OT_DOUBLE | Lower bound on objective        |
|                            |           | function [-inf]                 |
+----------------------------+-----------+---------------------------------+
| obj_up                     | OT_DOUBLE | Upper bound on objective        |
|                            |           | function [inf]                  |
+----------------------------+-----------+---------------------------------+
| opttol                     | OT_DOUBLE | Optimality tolerance            |
+----------------------------+-----------+---------------------------------+
| print_header               | OT_BOOL   | Print solver header at startup  |
+----------------------------+-----------+---------------------------------+
| print_iteration            | OT_BOOL   | Print SQP iterations            |
+----------------------------+-----------+---------------------------------+
| print_maxit_reached        | OT_BOOL   | Print error when maximum number |
|                            |           | of SQP iterations reached       |
+----------------------------+-----------+---------------------------------+
| qp_init                    | OT_BOOL   | Use warmstarting                |
+----------------------------+-----------+---------------------------------+
| qpsol                      | OT_STRING | The QP solver to be used by the |
|                            |           | SQP method                      |
+----------------------------+-----------+---------------------------------+
| qpsol_options              | OT_DICT   | Options to be passed to the QP  |
|                            |           | solver                          |
+----------------------------+-----------+---------------------------------+
| restore_feas               | OT_BOOL   | Use feasibility restoration     |
|                            |           | phase                           |
+----------------------------+-----------+---------------------------------+
| rho                        | OT_DOUBLE | Feasibility restoration phase   |
|                            |           | parameter                       |
+----------------------------+-----------+---------------------------------+
| s_f                        | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| s_theta                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| schur                      | OT_BOOL   | Use qpOASES Schur compliment    |
|                            |           | approach                        |
+----------------------------+-----------+---------------------------------+
| skip_first_globalization   | OT_BOOL   | No globalization strategy in    |
|                            |           | first iteration                 |
+----------------------------+-----------+---------------------------------+
| theta_max                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| theta_min                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| warmstart                  | OT_BOOL   | Use warmstarting                |
+----------------------------+-----------+---------------------------------+
| which_second_derv          | OT_INT    | For which block should second   |
|                            |           | derivatives be provided by the  |
|                            |           | user                            |
+----------------------------+-----------+---------------------------------+
| zeta                       | OT_DOUBLE | Feasibility restoration phase   |
|                            |           | parameter                       |
+----------------------------+-----------+---------------------------------+

>List of available options

+-------------------+---------------+-------------------+------------------+
|        Id         |     Type      |    Description    |     Used in      |
+===================+===============+===================+==================+
| block_hess        | OT_INT        | Blockwise Hessian | casadi::Blocksqp |
|                   |               | approximation?    |                  |
+-------------------+---------------+-------------------+------------------+
| bound_consistency | OT_BOOL       | Ensure that       | casadi::Nlpsol   |
|                   |               | primal-dual       |                  |
|                   |               | solution is       |                  |
|                   |               | consistent with   |                  |
|                   |               | the bounds        |                  |
+-------------------+---------------+-------------------+------------------+
| calc_f            | OT_BOOL       | Calculate 'f' in  | casadi::Nlpsol   |
|                   |               | the Nlpsol base   |                  |
|                   |               | class             |                  |
+-------------------+---------------+-------------------+------------------+
| calc_g            | OT_BOOL       | Calculate 'g' in  | casadi::Nlpsol   |
|                   |               | the Nlpsol base   |                  |
|                   |               | class             |                  |
+-------------------+---------------+-------------------+------------------+
| calc_lam_p        | OT_BOOL       | Calculate 'lam_p' | casadi::Nlpsol   |
|                   |               | in the Nlpsol     |                  |
|                   |               | base class        |                  |
+-------------------+---------------+-------------------+------------------+
| calc_lam_x        | OT_BOOL       | Calculate 'lam_x' | casadi::Nlpsol   |
|                   |               | in the Nlpsol     |                  |
|                   |               | base class        |                  |
+-------------------+---------------+-------------------+------------------+
| calc_multipliers  | OT_BOOL       | Calculate         | casadi::Nlpsol   |
|                   |               | Lagrange          |                  |
|                   |               | multipliers in    |                  |
|                   |               | the Nlpsol base   |                  |
|                   |               | class             |                  |
+-------------------+---------------+-------------------+------------------+
| col_eps           | OT_DOUBLE     | Epsilon for COL   | casadi::Blocksqp |
|                   |               | scaling strategy  |                  |
+-------------------+---------------+-------------------+------------------+
| col_tau1          | OT_DOUBLE     | tau1 for COL      | casadi::Blocksqp |
|                   |               | scaling strategy  |                  |
+-------------------+---------------+-------------------+------------------+
| col_tau2          | OT_DOUBLE     | tau2 for COL      | casadi::Blocksqp |
|                   |               | scaling strategy  |                  |
+-------------------+---------------+-------------------+------------------+
| conv_strategy     | OT_INT        | Convexification   | casadi::Blocksqp |
|                   |               | strategy          |                  |
+-------------------+---------------+-------------------+------------------+
| delta             | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| delta_h0          | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| discrete          | OT_BOOLVECTOR | Indicates which   | casadi::Nlpsol   |
|                   |               | of the variables  |                  |
|                   |               | are discrete,     |                  |
|                   |               | i.e. integer-     |                  |
|                   |               | valued            |                  |
+-------------------+---------------+-------------------+------------------+
| eps               | OT_DOUBLE     | Values smaller    | casadi::Blocksqp |
|                   |               | than this are     |                  |
|                   |               | regarded as       |                  |
|                   |               | numerically zero  |                  |
+-------------------+---------------+-------------------+------------------+
| error_on_fail     | OT_BOOL       | When the          | casadi::Nlpsol   |
|                   |               | numerical process |                  |
|                   |               | returns           |                  |
|                   |               | unsuccessfully,   |                  |
|                   |               | raise an error    |                  |
|                   |               | (default false).  |                  |
+-------------------+---------------+-------------------+------------------+
| eta               | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| eval_errors_fatal | OT_BOOL       | When errors occur | casadi::Nlpsol   |
|                   |               | during evaluation |                  |
|                   |               | of f,g,...,stop   |                  |
|                   |               | the iterations    |                  |
+-------------------+---------------+-------------------+------------------+
| fallback_scaling  | OT_INT        | If indefinite     | casadi::Blocksqp |
|                   |               | update is used,   |                  |
|                   |               | the type of       |                  |
|                   |               | fallback strategy |                  |
+-------------------+---------------+-------------------+------------------+
| fallback_update   | OT_INT        | If indefinite     | casadi::Blocksqp |
|                   |               | update is used,   |                  |
|                   |               | the type of       |                  |
|                   |               | fallback strategy |                  |
+-------------------+---------------+-------------------+------------------+
| gamma_f           | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| gamma_theta       | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| globalization     | OT_BOOL       | Enable            | casadi::Blocksqp |
|                   |               | globalization     |                  |
+-------------------+---------------+-------------------+------------------+
| hess_damp         | OT_INT        | Activate Powell   | casadi::Blocksqp |
|                   |               | damping for BFGS  |                  |
+-------------------+---------------+-------------------+------------------+
| hess_damp_fac     | OT_DOUBLE     | Damping factor    | casadi::Blocksqp |
|                   |               | for BFGS Powell   |                  |
|                   |               | modification      |                  |
+-------------------+---------------+-------------------+------------------+
| hess_lim_mem      | OT_INT        | Full or limited   | casadi::Blocksqp |
|                   |               | memory            |                  |
+-------------------+---------------+-------------------+------------------+
| hess_memsize      | OT_INT        | Memory size for   | casadi::Blocksqp |
|                   |               | L-BFGS updates    |                  |
+-------------------+---------------+-------------------+------------------+
| hess_scaling      | OT_INT        | Scaling strategy  | casadi::Blocksqp |
|                   |               | for Hessian       |                  |
|                   |               | approximation     |                  |
+-------------------+---------------+-------------------+------------------+
| hess_update       | OT_INT        | Type of Hessian   | casadi::Blocksqp |
|                   |               | approximation     |                  |
+-------------------+---------------+-------------------+------------------+
| ignore_check_vec  | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
|                   |               | the input shape   |                  |
|                   |               | of F will not be  |                  |
|                   |               | checked.          |                  |
+-------------------+---------------+-------------------+------------------+
| ini_hess_diag     | OT_DOUBLE     | Initial Hessian   | casadi::Blocksqp |
|                   |               | guess: diagonal   |                  |
|                   |               | matrix            |                  |
|                   |               | diag(iniHessDiag) |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_FUNCTION   | A function that   | casadi::Nlpsol   |
| k                 |               | will be called at |                  |
|                   |               | each iteration    |                  |
|                   |               | with the solver   |                  |
|                   |               | as input. Check   |                  |
|                   |               | documentation of  |                  |
|                   |               | Callback .        |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
| k_ignore_errors   |               | errors thrown by  |                  |
|                   |               | iteration_callbac |                  |
|                   |               | k will be         |                  |
|                   |               | ignored.          |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_INT        | Only call the     | casadi::Nlpsol   |
| k_step            |               | callback function |                  |
|                   |               | every few         |                  |
|                   |               | iterations.       |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_f           | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_minus       | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_plus        | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_plus_max    | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_soc         | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| linsol            | OT_STRING     | The linear solver | casadi::Blocksqp |
|                   |               | to be used by the |                  |
|                   |               | QP method         |                  |
+-------------------+---------------+-------------------+------------------+
| max_consec_reduce | OT_INT        | Maximum number of | casadi::Blocksqp |
| d_steps           |               | consecutive       |                  |
|                   |               | reduced steps     |                  |
+-------------------+---------------+-------------------+------------------+
| max_consec_skippe | OT_INT        | Maximum number of | casadi::Blocksqp |
| d_updates         |               | consecutive       |                  |
|                   |               | skipped updates   |                  |
+-------------------+---------------+-------------------+------------------+
| max_conv_qp       | OT_INT        | How many          | casadi::Blocksqp |
|                   |               | additional QPs    |                  |
|                   |               | may be solved for |                  |
|                   |               | convexification   |                  |
|                   |               | per iteration?    |                  |
+-------------------+---------------+-------------------+------------------+
| max_it_qp         | OT_INT        | Maximum number of | casadi::Blocksqp |
|                   |               | QP iterations per |                  |
|                   |               | SQP iteration     |                  |
+-------------------+---------------+-------------------+------------------+
| max_iter          | OT_INT        | Maximum number of | casadi::Blocksqp |
|                   |               | SQP iterations    |                  |
+-------------------+---------------+-------------------+------------------+
| max_line_search   | OT_INT        | Maximum number of | casadi::Blocksqp |
|                   |               | steps in line     |                  |
|                   |               | search            |                  |
+-------------------+---------------+-------------------+------------------+
| max_soc_iter      | OT_INT        | Maximum number of | casadi::Blocksqp |
|                   |               | SOC line search   |                  |
|                   |               | iterations        |                  |
+-------------------+---------------+-------------------+------------------+
| max_time_qp       | OT_DOUBLE     | Maximum number of | casadi::Blocksqp |
|                   |               | time in seconds   |                  |
|                   |               | per QP solve per  |                  |
|                   |               | SQP iteration     |                  |
+-------------------+---------------+-------------------+------------------+
| min_lam           | OT_DOUBLE     | Minimum allowed   | casadi::Nlpsol   |
|                   |               | multiplier value  |                  |
+-------------------+---------------+-------------------+------------------+
| nlinfeastol       | OT_DOUBLE     | Nonlinear         | casadi::Blocksqp |
|                   |               | feasibility       |                  |
|                   |               | tolerance         |                  |
+-------------------+---------------+-------------------+------------------+
| no_nlp_grad       | OT_BOOL       | Prevent the       | casadi::Nlpsol   |
|                   |               | creation of the   |                  |
|                   |               | 'nlp_grad'        |                  |
|                   |               | function          |                  |
+-------------------+---------------+-------------------+------------------+
| obj_lo            | OT_DOUBLE     | Lower bound on    | casadi::Blocksqp |
|                   |               | objective         |                  |
|                   |               | function [-inf]   |                  |
+-------------------+---------------+-------------------+------------------+
| obj_up            | OT_DOUBLE     | Upper bound on    | casadi::Blocksqp |
|                   |               | objective         |                  |
|                   |               | function [inf]    |                  |
+-------------------+---------------+-------------------+------------------+
| opttol            | OT_DOUBLE     | Optimality        | casadi::Blocksqp |
|                   |               | tolerance         |                  |
+-------------------+---------------+-------------------+------------------+
| oracle_options    | OT_DICT       | Options to be     | casadi::Nlpsol   |
|                   |               | passed to the     |                  |
|                   |               | oracle function   |                  |
+-------------------+---------------+-------------------+------------------+
| print_header      | OT_BOOL       | Print solver      | casadi::Blocksqp |
|                   |               | header at startup |                  |
+-------------------+---------------+-------------------+------------------+
| print_iteration   | OT_BOOL       | Print SQP         | casadi::Blocksqp |
|                   |               | iterations        |                  |
+-------------------+---------------+-------------------+------------------+
| print_maxit_reach | OT_BOOL       | Print error when  | casadi::Blocksqp |
| ed                |               | maximum number of |                  |
|                   |               | SQP iterations    |                  |
|                   |               | reached           |                  |
+-------------------+---------------+-------------------+------------------+
| qp_init           | OT_BOOL       | Use warmstarting  | casadi::Blocksqp |
+-------------------+---------------+-------------------+------------------+
| qpsol             | OT_STRING     | The QP solver to  | casadi::Blocksqp |
|                   |               | be used by the    |                  |
|                   |               | SQP method        |                  |
+-------------------+---------------+-------------------+------------------+
| qpsol_options     | OT_DICT       | Options to be     | casadi::Blocksqp |
|                   |               | passed to the QP  |                  |
|                   |               | solver            |                  |
+-------------------+---------------+-------------------+------------------+
| restore_feas      | OT_BOOL       | Use feasibility   | casadi::Blocksqp |
|                   |               | restoration phase |                  |
+-------------------+---------------+-------------------+------------------+
| rho               | OT_DOUBLE     | Feasibility       | casadi::Blocksqp |
|                   |               | restoration phase |                  |
|                   |               | parameter         |                  |
+-------------------+---------------+-------------------+------------------+
| s_f               | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| s_theta           | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| schur             | OT_BOOL       | Use qpOASES Schur | casadi::Blocksqp |
|                   |               | compliment        |                  |
|                   |               | approach          |                  |
+-------------------+---------------+-------------------+------------------+
| sens_linsol       | OT_STRING     | Linear solver     | casadi::Nlpsol   |
|                   |               | used for          |                  |
|                   |               | parametric        |                  |
|                   |               | sensitivities     |                  |
|                   |               | (default 'qr').   |                  |
+-------------------+---------------+-------------------+------------------+
| sens_linsol_optio | OT_DICT       | Linear solver     | casadi::Nlpsol   |
| ns                |               | options used for  |                  |
|                   |               | parametric        |                  |
|                   |               | sensitivities.    |                  |
+-------------------+---------------+-------------------+------------------+
| skip_first_global | OT_BOOL       | No globalization  | casadi::Blocksqp |
| ization           |               | strategy in first |                  |
|                   |               | iteration         |                  |
+-------------------+---------------+-------------------+------------------+
| theta_max         | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| theta_min         | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| verbose_init      | OT_BOOL       | Print out timing  | casadi::Nlpsol   |
|                   |               | information about |                  |
|                   |               | the different     |                  |
|                   |               | stages of         |                  |
|                   |               | initialization    |                  |
+-------------------+---------------+-------------------+------------------+
| warmstart         | OT_BOOL       | Use warmstarting  | casadi::Blocksqp |
+-------------------+---------------+-------------------+------------------+
| warn_initial_boun | OT_BOOL       | Warn if the       | casadi::Nlpsol   |
| ds                |               | initial guess     |                  |
|                   |               | does not satisfy  |                  |
|                   |               | LBX and UBX       |                  |
+-------------------+---------------+-------------------+------------------+
| which_second_derv | OT_INT        | For which block   | casadi::Blocksqp |
|                   |               | should second     |                  |
|                   |               | derivatives be    |                  |
|                   |               | provided by the   |                  |
|                   |               | user              |                  |
+-------------------+---------------+-------------------+------------------+
| zeta              | OT_DOUBLE     | Feasibility       | casadi::Blocksqp |
|                   |               | restoration phase |                  |
|                   |               | parameter         |                  |
+-------------------+---------------+-------------------+------------------+

Diagrams
--------



C++ includes: blocksqp.hpp ";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")
casadi::Blocksqp::secondOrderCorrection(BlocksqpMemory *m, double cNorm,
double cNormTrial, double dfTdeltaXi, bool swCond, casadi_int it) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::solve(void *mem) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::kktErrorReduction(BlocksqpMemory
*m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::Nlpsol::setOptionsFromFile(const std::string
&file) "

[INTERNAL]  Read options from parameter xml.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::Blocksqp::class_name() const  "

[INTERNAL]  Get type name.

";

%feature("docstring")
casadi::Blocksqp::feasibilityRestorationPhase(BlocksqpMemory *m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::updateStepBounds(BlocksqpMemory *m,
bool soc) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::Blocksqp::filterLineSearch(BlocksqpMemory *m)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::Blocksqp::calcOptTol(BlocksqpMemory *m) const
"

[INTERNAL]  Update optimization tolerance (similar to SNOPT) in current
iterate.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::Blocksqp::calcInitialHessian(BlocksqpMemory
*m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::calcInitialHessian(BlocksqpMemory
*m, casadi_int b) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::Blocksqp::augmentFilter(BlocksqpMemory *m,
double cNorm, double obj) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::serialize_body(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Nlpsol::integer_support() const  "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring")  casadi::Nlpsol::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")
casadi::Blocksqp::calcHessianUpdateLimitedMemory(BlocksqpMemory *m,
casadi_int updateType, casadi_int hessScaling) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::Nlpsol::eval(const double **arg, double
**res, casadi_int *iw, double *w, void *mem) const final "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::Blocksqp::initIterate(BlocksqpMemory *m)
const  "

[INTERNAL]  Set initial filter, objective function, tolerances etc.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::Nlpsol::serialize_base_function() const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Blocksqp::sizeInitialHessian(BlocksqpMemory
*m, const double *gamma, const double *delta, casadi_int b, casadi_int
option) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::Blocksqp::set_work(void *mem, const double
**&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::Nlpsol::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::Nlpsol::get_default_in(casadi_int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::Blocksqp::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::Blocksqp::initStats(BlocksqpMemory *m) const
"

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::printInfo(BlocksqpMemory *m) const
"

[INTERNAL]  Print information about the SQP method.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::Blocksqp::run(BlocksqpMemory *m, casadi_int
maxIt, casadi_int warmStart=0) const  "

[INTERNAL]  Main Loop of SQP method.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")
casadi::Blocksqp::calcHessianUpdateExact(BlocksqpMemory *m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::reduceSOCStepsize(BlocksqpMemory
*m, double *alphaSOC) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Blocksqp::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::Blocksqp::updateDeltaGamma(BlocksqpMemory *m)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::OracleFunction::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname)  "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Blocksqp::calcSR1(BlocksqpMemory *m, const
double *gamma, const double *delta, casadi_int b) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::Nlpsol::serialize_type(SerializingStream &s)
const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::Blocksqp::solveQP(BlocksqpMemory *m, double
*deltaXi, double *lambdaQP, bool matricesChanged=true) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::is_a(const std::string &type, bool
recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::Nlpsol::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::Blocksqp::reduceStepsize(BlocksqpMemory *m,
double *alpha) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Blocksqp::lInfConstraintNorm(BlocksqpMemory
*m, const double *xk, const double *g) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::Blocksqp::calcLagrangeGradient(BlocksqpMemory
*m, const double *lam_x, const double *lam_g, const double *grad_f, const
double *jacNz, double *grad_lag, casadi_int flag) const  "

[INTERNAL]  Compute gradient of Lagrangian function (sparse version)

";

%feature("docstring")  casadi::Blocksqp::calcLagrangeGradient(BlocksqpMemory
*m, double *grad_lag, casadi_int flag) const  "

[INTERNAL]  Overloaded function for convenience, uses current variables of
SQPiterate vars.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::Blocksqp::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::Nlpsol::get_reverse(casadi_int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates reverse mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::Blocksqp::acceptStep(BlocksqpMemory *m, const
double *deltaXi, const double *lambdaQP, double alpha, casadi_int nSOCS)
const  "

[INTERNAL]  Set new primal dual iterate.

";

%feature("docstring")  casadi::Blocksqp::acceptStep(BlocksqpMemory *m,
double alpha) const  "

[INTERNAL] ";

%feature("docstring")
casadi::Blocksqp::feasibilityRestorationHeuristic(BlocksqpMemory *m) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::Nlpsol::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=nullptr) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::Blocksqp::convertHessian(BlocksqpMemory *m)
const  "

[INTERNAL]  Convert *hess to column compressed sparse format.

";

%feature("docstring")  casadi::Blocksqp::updateStats(BlocksqpMemory *m)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";


// File: classcasadi_1_1BonMinMessageHandler.xml
%feature("docstring") casadi::BonMinMessageHandler "

[INTERNAL]

>List of available options

+------------------+------------------+------------------+-----------------+
|        Id        |       Type       |   Description    |     Used in     |
+==================+==================+==================+=================+
| bonmin           | OT_DICT          | Options to be    | casadi::BonMinM |
|                  |                  | passed to BONMIN | essageHandler   |
+------------------+------------------+------------------+-----------------+
| bound_consistenc | OT_BOOL          | Ensure that      | casadi::Nlpsol  |
| y                |                  | primal-dual      |                 |
|                  |                  | solution is      |                 |
|                  |                  | consistent with  |                 |
|                  |                  | the bounds       |                 |
+------------------+------------------+------------------+-----------------+
| calc_f           | OT_BOOL          | Calculate 'f' in | casadi::Nlpsol  |
|                  |                  | the Nlpsol base  |                 |
|                  |                  | class            |                 |
+------------------+------------------+------------------+-----------------+
| calc_g           | OT_BOOL          | Calculate 'g' in | casadi::Nlpsol  |
|                  |                  | the Nlpsol base  |                 |
|                  |                  | class            |                 |
+------------------+------------------+------------------+-----------------+
| calc_lam_p       | OT_BOOL          | Calculate        | casadi::Nlpsol  |
|                  |                  | 'lam_p' in the   |                 |
|                  |                  | Nlpsol base      |                 |
|                  |                  | class            |                 |
+------------------+------------------+------------------+-----------------+
| calc_lam_x       | OT_BOOL          | Calculate        | casadi::Nlpsol  |
|                  |                  | 'lam_x' in the   |                 |
|                  |                  | Nlpsol base      |                 |
|                  |                  | class            |                 |
+------------------+------------------+------------------+-----------------+
| calc_multipliers | OT_BOOL          | Calculate        | casadi::Nlpsol  |
|                  |                  | Lagrange         |                 |
|                  |                  | multipliers in   |                 |
|                  |                  | the Nlpsol base  |                 |
|                  |                  | class            |                 |
+------------------+------------------+------------------+-----------------+
| con_integer_md   | OT_DICT          | Integer metadata | casadi::BonMinM |
|                  |                  | (a dictionary    | essageHandler   |
|                  |                  | with lists of    |                 |
|                  |                  | integers) about  |                 |
|                  |                  | constraints to   |                 |
|                  |                  | be passed to     |                 |
|                  |                  | BONMIN           |                 |
+------------------+------------------+------------------+-----------------+
| con_numeric_md   | OT_DICT          | Numeric metadata | casadi::BonMinM |
|                  |                  | (a dictionary    | essageHandler   |
|                  |                  | with lists of    |                 |
|                  |                  | reals) about     |                 |
|                  |                  | constraints to   |                 |
|                  |                  | be passed to     |                 |
|                  |                  | BONMIN           |                 |
+------------------+------------------+------------------+-----------------+
| con_string_md    | OT_DICT          | String metadata  | casadi::BonMinM |
|                  |                  | (a dictionary    | essageHandler   |
|                  |                  | with lists of    |                 |
|                  |                  | strings) about   |                 |
|                  |                  | constraints to   |                 |
|                  |                  | be passed to     |                 |
|                  |                  | BONMIN           |                 |
+------------------+------------------+------------------+-----------------+
| discrete         | OT_BOOLVECTOR    | Indicates which  | casadi::Nlpsol  |
|                  |                  | of the variables |                 |
|                  |                  | are discrete,    |                 |
|                  |                  | i.e. integer-    |                 |
|                  |                  | valued           |                 |
+------------------+------------------+------------------+-----------------+
| error_on_fail    | OT_BOOL          | When the         | casadi::Nlpsol  |
|                  |                  | numerical        |                 |
|                  |                  | process returns  |                 |
|                  |                  | unsuccessfully,  |                 |
|                  |                  | raise an error   |                 |
|                  |                  | (default false). |                 |
+------------------+------------------+------------------+-----------------+
| eval_errors_fata | OT_BOOL          | When errors      | casadi::Nlpsol  |
| l                |                  | occur during     |                 |
|                  |                  | evaluation of    |                 |
|                  |                  | f,g,...,stop the |                 |
|                  |                  | iterations       |                 |
+------------------+------------------+------------------+-----------------+
| grad_f           | OT_FUNCTION      | Function for     | casadi::BonMinM |
|                  |                  | calculating the  | essageHandler   |
|                  |                  | gradient of the  |                 |
|                  |                  | objective        |                 |
|                  |                  | (column,         |                 |
|                  |                  | autogenerated by |                 |
|                  |                  | default)         |                 |
+------------------+------------------+------------------+-----------------+
| grad_f_options   | OT_DICT          | Options for the  | casadi::BonMinM |
|                  |                  | autogenerated    | essageHandler   |
|                  |                  | gradient of the  |                 |
|                  |                  | objective.       |                 |
+------------------+------------------+------------------+-----------------+
| hess_lag         | OT_FUNCTION      | Function for     | casadi::BonMinM |
|                  |                  | calculating the  | essageHandler   |
|                  |                  | Hessian of the   |                 |
|                  |                  | Lagrangian       |                 |
|                  |                  | (autogenerated   |                 |
|                  |                  | by default)      |                 |
+------------------+------------------+------------------+-----------------+
| hess_lag_options | OT_DICT          | Options for the  | casadi::BonMinM |
|                  |                  | autogenerated    | essageHandler   |
|                  |                  | Hessian of the   |                 |
|                  |                  | Lagrangian.      |                 |
+------------------+------------------+------------------+-----------------+
| ignore_check_vec | OT_BOOL          | If set to true,  | casadi::Nlpsol  |
|                  |                  | the input shape  |                 |
|                  |                  | of F will not be |                 |
|                  |                  | checked.         |                 |
+------------------+------------------+------------------+-----------------+
| iteration_callba | OT_FUNCTION      | A function that  | casadi::Nlpsol  |
| ck               |                  | will be called   |                 |
|                  |                  | at each          |                 |
|                  |                  | iteration with   |                 |
|                  |                  | the solver as    |                 |
|                  |                  | input. Check     |                 |
|                  |                  | documentation of |                 |
|                  |                  | Callback .       |                 |
+------------------+------------------+------------------+-----------------+
| iteration_callba | OT_BOOL          | If set to true,  | casadi::Nlpsol  |
| ck_ignore_errors |                  | errors thrown by |                 |
|                  |                  | iteration_callba |                 |
|                  |                  | ck will be       |                 |
|                  |                  | ignored.         |                 |
+------------------+------------------+------------------+-----------------+
| iteration_callba | OT_INT           | Only call the    | casadi::Nlpsol  |
| ck_step          |                  | callback         |                 |
|                  |                  | function every   |                 |
|                  |                  | few iterations.  |                 |
+------------------+------------------+------------------+-----------------+
| jac_g            | OT_FUNCTION      | Function for     | casadi::BonMinM |
|                  |                  | calculating the  | essageHandler   |
|                  |                  | Jacobian of the  |                 |
|                  |                  | constraints      |                 |
|                  |                  | (autogenerated   |                 |
|                  |                  | by default)      |                 |
+------------------+------------------+------------------+-----------------+
| jac_g_options    | OT_DICT          | Options for the  | casadi::BonMinM |
|                  |                  | autogenerated    | essageHandler   |
|                  |                  | Jacobian of the  |                 |
|                  |                  | constraints.     |                 |
+------------------+------------------+------------------+-----------------+
| min_lam          | OT_DOUBLE        | Minimum allowed  | casadi::Nlpsol  |
|                  |                  | multiplier value |                 |
+------------------+------------------+------------------+-----------------+
| no_nlp_grad      | OT_BOOL          | Prevent the      | casadi::Nlpsol  |
|                  |                  | creation of the  |                 |
|                  |                  | 'nlp_grad'       |                 |
|                  |                  | function         |                 |
+------------------+------------------+------------------+-----------------+
| oracle_options   | OT_DICT          | Options to be    | casadi::Nlpsol  |
|                  |                  | passed to the    |                 |
|                  |                  | oracle function  |                 |
+------------------+------------------+------------------+-----------------+
| pass_nonlinear_c | OT_BOOL          | Pass list of     | casadi::BonMinM |
| onstraints       |                  | constraints      | essageHandler   |
|                  |                  | entering         |                 |
|                  |                  | nonlinearly to   |                 |
|                  |                  | BONMIN           |                 |
+------------------+------------------+------------------+-----------------+
| pass_nonlinear_v | OT_BOOL          | Pass list of     | casadi::BonMinM |
| ariables         |                  | variables        | essageHandler   |
|                  |                  | entering         |                 |
|                  |                  | nonlinearly to   |                 |
|                  |                  | BONMIN           |                 |
+------------------+------------------+------------------+-----------------+
| sens_linsol      | OT_STRING        | Linear solver    | casadi::Nlpsol  |
|                  |                  | used for         |                 |
|                  |                  | parametric       |                 |
|                  |                  | sensitivities    |                 |
|                  |                  | (default 'qr').  |                 |
+------------------+------------------+------------------+-----------------+
| sens_linsol_opti | OT_DICT          | Linear solver    | casadi::Nlpsol  |
| ons              |                  | options used for |                 |
|                  |                  | parametric       |                 |
|                  |                  | sensitivities.   |                 |
+------------------+------------------+------------------+-----------------+
| sos1_groups      | OT_INTVECTORVECT | Options for the  | casadi::BonMinM |
|                  | OR               | autogenerated    | essageHandler   |
|                  |                  | gradient of the  |                 |
|                  |                  | objective.       |                 |
+------------------+------------------+------------------+-----------------+
| sos1_priorities  | OT_INTVECTOR     | Options for the  | casadi::BonMinM |
|                  |                  | autogenerated    | essageHandler   |
|                  |                  | gradient of the  |                 |
|                  |                  | objective.       |                 |
+------------------+------------------+------------------+-----------------+
| sos1_weights     | OT_DOUBLEVECTORV | Options for the  | casadi::BonMinM |
|                  | ECTOR            | autogenerated    | essageHandler   |
|                  |                  | gradient of the  |                 |
|                  |                  | objective.       |                 |
+------------------+------------------+------------------+-----------------+
| var_integer_md   | OT_DICT          | Integer metadata | casadi::BonMinM |
|                  |                  | (a dictionary    | essageHandler   |
|                  |                  | with lists of    |                 |
|                  |                  | integers) about  |                 |
|                  |                  | variables to be  |                 |
|                  |                  | passed to BONMIN |                 |
+------------------+------------------+------------------+-----------------+
| var_numeric_md   | OT_DICT          | Numeric metadata | casadi::BonMinM |
|                  |                  | (a dictionary    | essageHandler   |
|                  |                  | with lists of    |                 |
|                  |                  | reals) about     |                 |
|                  |                  | variables to be  |                 |
|                  |                  | passed to BONMIN |                 |
+------------------+------------------+------------------+-----------------+
| var_string_md    | OT_DICT          | String metadata  | casadi::BonMinM |
|                  |                  | (a dictionary    | essageHandler   |
|                  |                  | with lists of    |                 |
|                  |                  | strings) about   |                 |
|                  |                  | variables to be  |                 |
|                  |                  | passed to BONMIN |                 |
+------------------+------------------+------------------+-----------------+
| verbose_init     | OT_BOOL          | Print out timing | casadi::Nlpsol  |
|                  |                  | information      |                 |
|                  |                  | about the        |                 |
|                  |                  | different stages |                 |
|                  |                  | of               |                 |
|                  |                  | initialization   |                 |
+------------------+------------------+------------------+-----------------+
| warn_initial_bou | OT_BOOL          | Warn if the      | casadi::Nlpsol  |
| nds              |                  | initial guess    |                 |
|                  |                  | does not satisfy |                 |
|                  |                  | LBX and UBX      |                 |
+------------------+------------------+------------------+-----------------+

Diagrams
--------



C++ includes: b0_options.hpp ";


// File: classcasadi_1_1BonminUserClass.xml
%feature("docstring") casadi::BonminUserClass "

[INTERNAL] C++ includes: bonmin_nlp.hpp ";

%feature("docstring")
casadi::BonminUserClass::finalize_solution(TMINLP::SolverReturn status,
Index n, const Number *x, Number obj_value)  "

[INTERNAL]  This method is called when the algorithm is complete so the TNLP
can store/write the solution

";

%feature("docstring")  casadi::BonminUserClass::eval_g(Index n, const Number
*x, bool new_x, Index m, Number *g)  "

[INTERNAL]  Method to return the constraint residuals

";

%feature("docstring")  casadi::BonminUserClass::eval_f(Index n, const Number
*x, bool new_x, Number &obj_value)  "

[INTERNAL]  Method to return the objective value

";

%feature("docstring")
casadi::BonminUserClass::get_constraints_linearity(Index m,
Ipopt::TNLP::LinearityType *const_types)  "

[INTERNAL] ";

%feature("docstring") casadi::BonminUserClass::BonminUserClass(const
BonminInterface &bonminInterface, BonminMemory *mem) "

[INTERNAL] ";

%feature("docstring")  casadi::BonminUserClass::get_starting_point(Index n,
bool init_x, Number *x, bool init_z, Number *z_L, Number *z_U, Index m, bool
init_lambda, Number *lambda)  "

[INTERNAL]  Method to return the starting point for the algorithm

";

%feature("docstring")
casadi::BonminUserClass::get_number_of_nonlinear_variables() "

[INTERNAL]  Specify the number of variables that appear in the Hessian

";

%feature("docstring")  casadi::BonminUserClass::eval_jac_g(Index n, const
Number *x, bool new_x, Index m, Index nele_jac, Index *iRow, Index *jCol,
Number *values)  "

[INTERNAL]  Method to return: 1) The structure of the Jacobian (if
\"values\" is NULL) 2) The values of the Jacobian (if \"values\" is not
NULL)

";

%feature("docstring")
casadi::BonminUserClass::intermediate_callback(AlgorithmMode mode, Index
iter, Number obj_value, Number inf_pr, Number inf_du, Number mu, Number
d_norm, Number regularization_size, Number alpha_du, Number alpha_pr, Index
ls_trials, const IpoptData *ip_data, IpoptCalculatedQuantities *ip_cq) "

[INTERNAL]  This method is called at every iteration

";

%feature("docstring")  casadi::BonminUserClass::eval_h(Index n, const Number
*x, bool new_x, Number obj_factor, Index m, const Number *lambda, bool
new_lambda, Index nele_hess, Index *iRow, Index *jCol, Number *values)  "

[INTERNAL]  Method to return: 1) The structure of the hessian of the
Lagrangian (if \"values\" is NULL) 2) The values of the hessian of the
Lagrangian (if \"values\" is not NULL)

";

%feature("docstring")  casadi::BonminUserClass::get_variables_types(Index n,
VariableType *var_types)  "

[INTERNAL] ";

%feature("docstring") casadi::BonminUserClass::~BonminUserClass "

[INTERNAL] ";

%feature("docstring")
casadi::BonminUserClass::get_list_of_nonlinear_variables(Index
num_nonlin_vars, Index *pos_nonlin_vars) "

[INTERNAL]  Specify which variables that appear in the Hessian

";

%feature("docstring")  casadi::BonminUserClass::get_bounds_info(Index n,
Number *x_l, Number *x_u, Index m, Number *g_l, Number *g_u)  "

[INTERNAL]  Method to return the bounds for my problem

";

%feature("docstring")  casadi::BonminUserClass::sosConstraints() const  "

[INTERNAL] ";

%feature("docstring")  casadi::BonminUserClass::get_nlp_info(Index &n, Index
&m, Index &nnz_jac_g, Index &nnz_h_lag, TNLP::IndexStyleEnum &index_style)
"

[INTERNAL]  Method to return some info about the nlp

";

%feature("docstring")  casadi::BonminUserClass::branchingInfo() const  "

[INTERNAL] ";

%feature("docstring")  casadi::BonminUserClass::eval_grad_f(Index n, const
Number *x, bool new_x, Number *grad_f)  "

[INTERNAL]  Method to return the gradient of the objective

";

%feature("docstring")
casadi::BonminUserClass::get_variables_linearity(Index n,
Ipopt::TNLP::LinearityType *var_types)  "

[INTERNAL] ";


// File: classcasadi_1_1BSpline.xml


// File: classcasadi_1_1BSplineCommon.xml


// File: classcasadi_1_1BSplineInterpolant.xml
%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::BSplineInterpolant::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::Interpolant::has_parametric_grid() const  "

[INTERNAL]  Is parametric?

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::Interpolant::has_parametric_values() const  "

[INTERNAL]  Is parametric?

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::BSplineInterpolant::~BSplineInterpolant "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")
casadi::BSplineInterpolant::serialize_body(SerializingStream &s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::BSplineInterpolant::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::Interpolant::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::finalize()  "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::Interpolant::arg_values() const  "

[INTERNAL] ";

%feature("docstring")
casadi::BSplineInterpolant::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Interpolant::serialize_base_function() const
"

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::Interpolant::coeff_size() const  "

[INTERNAL]  Size of the flattened coefficients vector.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::BSplineInterpolant "

'bspline' plugin for Interpolant

N-dimensional BSpline interpolator

Uses not-a-knot conditions. For 1D and 2D cases, this code is equivalent to
fitpack

>List of available options

+-----------------------+--------------+-----------------------------------+
|          Id           |     Type     |            Description            |
+=======================+==============+===================================+
| algorithm             | OT_STRING    | Algorithm used for fitting the    |
|                       |              | data: 'not_a_knot' (default, same |
|                       |              | as Matlab), 'smooth_linear'.      |
+-----------------------+--------------+-----------------------------------+
| degree                | OT_INTVECTOR | Sets, for each grid dimension,    |
|                       |              | the degree of the spline.         |
+-----------------------+--------------+-----------------------------------+
| linear_solver         | OT_STRING    | Solver used for constructing the  |
|                       |              | coefficient tensor.               |
+-----------------------+--------------+-----------------------------------+
| linear_solver_options | OT_DICT      | Options to be passed to the       |
|                       |              | linear solver.                    |
+-----------------------+--------------+-----------------------------------+
| smooth_linear_frac    | OT_DOUBLE    | When 'smooth_linear' algorithm is |
|                       |              | active, determines sharpness      |
|                       |              | between 0 (sharp, as linear       |
|                       |              | interpolation) and 0.5            |
|                       |              | (smooth).Default value is 0.1.    |
+-----------------------+--------------+-----------------------------------+

Joris Gillis

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| algorithm        | OT_STRING       | Algorithm used   | casadi::BSplineI |
|                  |                 | for fitting the  | nterpolant       |
|                  |                 | data:            |                  |
|                  |                 | 'not_a_knot'     |                  |
|                  |                 | (default, same   |                  |
|                  |                 | as Matlab),      |                  |
|                  |                 | 'smooth_linear'. |                  |
+------------------+-----------------+------------------+------------------+
| batch_x          | OT_INT          | Evaluate a batch | casadi::Interpol |
|                  |                 | of different     | ant              |
|                  |                 | inputs at once   |                  |
|                  |                 | (default 1).     |                  |
+------------------+-----------------+------------------+------------------+
| degree           | OT_INTVECTOR    | Sets, for each   | casadi::BSplineI |
|                  |                 | grid dimension,  | nterpolant       |
|                  |                 | the degree of    |                  |
|                  |                 | the spline.      |                  |
+------------------+-----------------+------------------+------------------+
| inline           | OT_BOOL         | Implement the    | casadi::Interpol |
|                  |                 | lookup table in  | ant              |
|                  |                 | MX primitives.   |                  |
|                  |                 | Useful when you  |                  |
|                  |                 | need derivatives |                  |
|                  |                 | with respect to  |                  |
|                  |                 | grid and/or      |                  |
|                  |                 | coefficients.    |                  |
|                  |                 | Such derivatives |                  |
|                  |                 | are              |                  |
|                  |                 | fundamentally    |                  |
|                  |                 | dense, so use    |                  |
|                  |                 | with caution.    |                  |
+------------------+-----------------+------------------+------------------+
| linear_solver    | OT_STRING       | Solver used for  | casadi::BSplineI |
|                  |                 | constructing the | nterpolant       |
|                  |                 | coefficient      |                  |
|                  |                 | tensor.          |                  |
+------------------+-----------------+------------------+------------------+
| linear_solver_op | OT_DICT         | Options to be    | casadi::BSplineI |
| tions            |                 | passed to the    | nterpolant       |
|                  |                 | linear solver.   |                  |
+------------------+-----------------+------------------+------------------+
| lookup_mode      | OT_STRINGVECTOR | Specifies, for   | casadi::Interpol |
|                  |                 | each grid        | ant              |
|                  |                 | dimenion, the    |                  |
|                  |                 | lookup algorithm |                  |
|                  |                 | used to find the |                  |
|                  |                 | correct index.   |                  |
|                  |                 | 'linear' uses a  |                  |
|                  |                 | for-loop +       |                  |
|                  |                 | break; (default  |                  |
|                  |                 | when             |                  |
|                  |                 | #knots<=100),    |                  |
|                  |                 | 'exact' uses     |                  |
|                  |                 | floored division |                  |
|                  |                 | (only for        |                  |
|                  |                 | uniform grids),  |                  |
|                  |                 | 'binary' uses a  |                  |
|                  |                 | binary search.   |                  |
|                  |                 | (default when    |                  |
|                  |                 | #knots>100).     |                  |
+------------------+-----------------+------------------+------------------+
| smooth_linear_fr | OT_DOUBLE       | When             | casadi::BSplineI |
| ac               |                 | 'smooth_linear'  | nterpolant       |
|                  |                 | algorithm is     |                  |
|                  |                 | active,          |                  |
|                  |                 | determines       |                  |
|                  |                 | sharpness        |                  |
|                  |                 | between 0        |                  |
|                  |                 | (sharp, as       |                  |
|                  |                 | linear           |                  |
|                  |                 | interpolation)   |                  |
|                  |                 | and 0.5          |                  |
|                  |                 | (smooth).Default |                  |
|                  |                 | value is 0.1.    |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: bspline_interpolant.hpp ";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::Interpolant::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::BSplineInterpolant::sp_forward(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::BSplineInterpolant::has_forward(casadi_int
nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::BSplineInterpolant::has_jacobian() const  "

[INTERNAL]  Full Jacobian.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(casadi_int
ind) const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::BSplineInterpolant::is_diff_in(casadi_int i)
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::Interpolant::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::BSplineInterpolant::get_forward(casadi_int
nfwd, const std::string &name, const std::vector< std::string > &inames,
const std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::Interpolant::get_sparsity_out(casadi_int i)
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::Interpolant::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::Interpolant::arg_grid() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::BSplineInterpolant::codegen_body(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::BSplineInterpolant::get_reverse(casadi_int
nadj, const std::string &name, const std::vector< std::string > &inames,
const std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::BSplineInterpolant::plugin_name() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::BSplineInterpolant::BSplineInterpolant(const
std::string &name, const std::vector< double > &grid, const std::vector<
casadi_int > &offset, const std::vector< double > &values, casadi_int m) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::ProtoFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::Interpolant::serialize_type(SerializingStream
&s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::BSplineInterpolant::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Full Jacobian.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::BSplineInterpolant::class_name() const  "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::BSplineInterpolant::sp_reverse(bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::BSplineInterpolant::eval(const double **arg,
double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::BSplineInterpolant::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::BSplineInterpolant::has_reverse(casadi_int
nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::Interpolant::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";


// File: classcasadi_1_1BSplineParametric.xml


// File: classcasadi_1_1Call.xml


// File: classcasadi_1_1Callback.xml
%feature("docstring")  casadi::Function::convert_out(const std::vector< DM >
&arg) const  "

Convert from/to input/output lists/map.

Will raise an error when an unknown key is used or a list has incorrect
size. Does not perform sparsity checking.

";

%feature("docstring")  casadi::Function::convert_out(const DMDict &arg)
const  "

Convert from/to input/output lists/map.

Will raise an error when an unknown key is used or a list has incorrect
size. Does not perform sparsity checking.

";

%feature("docstring")  casadi::Function::convert_out(const std::vector< SX >
&arg) const  "

Convert from/to input/output lists/map.

Will raise an error when an unknown key is used or a list has incorrect
size. Does not perform sparsity checking.

";

%feature("docstring")  casadi::Function::convert_out(const SXDict &arg)
const  "

Convert from/to input/output lists/map.

Will raise an error when an unknown key is used or a list has incorrect
size. Does not perform sparsity checking.

";

%feature("docstring")  casadi::Function::convert_out(const std::vector< MX >
&arg) const  "

Convert from/to input/output lists/map.

Will raise an error when an unknown key is used or a list has incorrect
size. Does not perform sparsity checking.

";

%feature("docstring")  casadi::Function::convert_out(const MXDict &arg)
const  "

Convert from/to input/output lists/map.

Will raise an error when an unknown key is used or a list has incorrect
size. Does not perform sparsity checking.

";

%feature("docstring")  casadi::Callback::has_forward(casadi_int nfwd) const
"

Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(casadi_int
nfwd) if no cached version is available.

";

%feature("docstring")  casadi::Function::size2_in(casadi_int ind) const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::size2_in(const std::string &iname)
const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::call(const std::vector< DM > &arg,
std::vector< DM > &output_res, bool always_inline=false, bool
never_inline=false) const  "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
std::vector< SX > &output_res, bool always_inline=false, bool
never_inline=false) const  "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
std::vector< MX > &output_res, bool always_inline=false, bool
never_inline=false) const  "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::call(const DMDict &arg, DMDict
&output_res, bool always_inline=false, bool never_inline=false) const  "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::call(const SXDict &arg, SXDict
&output_res, bool always_inline=false, bool never_inline=false) const  "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::call(const MXDict &arg, MXDict
&output_res, bool always_inline=false, bool never_inline=false) const  "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::generate_dependencies(const
std::string &fname, const Dict &opts=Dict()) const  "

Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::Callback::get_n_in() "

Get the number of inputs This function is called during construction.

";

%feature("docstring")  casadi::Callback::get_n_out() "

Get the number of outputs This function is called during construction.

";

%feature("docstring")  casadi::Function::size_in(casadi_int ind) const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::size_in(const std::string &iname)
const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::reverse(casadi_int nadj) const  "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out + n_out inputs and n_in outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_out inputs
correspond to adjoint seeds, stacked horizontally The n_in outputs
correspond to adjoint sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

(n_in = n_in(), n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::casadi_reverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out + n_out inputs and n_in outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_out inputs
correspond to adjoint seeds, stacked horizontally The n_in outputs
correspond to adjoint sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

(n_in = n_in(), n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::casadi_reverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out + n_out inputs and n_in outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_out inputs
correspond to adjoint seeds, stacked horizontally The n_in outputs
correspond to adjoint sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

(n_in = n_in(), n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Callback::get_jacobian_sparsity() const  "

Return sparsity of Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Function::instruction_id(casadi_int k) const
"

Identifier index of the instruction (SXFunction/MXFunction)

";

%feature("docstring")  casadi::Function::wrap_as_needed(const Dict &opts)
const  "

Wrap in a Function with options.

";

%feature("docstring")  casadi::Function::sz_arg() const  "

Get required length of arg field.

";

%feature("docstring")  casadi::Function::slice(const std::string &name,
const std::vector< casadi_int > &order_in, const std::vector< casadi_int >
&order_out, const Dict &opts=Dict()) const  "

returns a new function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::casadi_slice "

returns a new function with a selection of inputs/outputs of the original

";

%feature("docstring")  casadi::Function::casadi_slice "

returns a new function with a selection of inputs/outputs of the original

";

%feature("docstring")  casadi::Function::export_code(const std::string
&lang, const std::string &fname, const Dict &options=Dict()) const  "

Export function in specific language.

Only allowed for (a subset of) SX/MX Functions

";

%feature("docstring")  casadi::Function::export_code(const std::string
&lang, const Dict &options=Dict()) const  "

Export function in specific language.

Only allowed for (a subset of) SX/MX Functions

";

%feature("docstring")  casadi::Function::hessian_old(casadi_int iind,
casadi_int oind) const  "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::hessian pre-
CasADi 3.2

";

%feature("docstring")  casadi::Function::nnz_out() const  "

Get number of output nonzeros.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::nnz_out(casadi_int ind) const  "

Get number of output nonzeros.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::nnz_out(const std::string &oname)
const  "

Get number of output nonzeros.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::mapsum(const std::vector< MX > &x,
const std::string &parallelization="serial") const  "

Evaluate symbolically in parallel and sum (matrix graph)

Parameters:
-----------

parallelization:  Type of parallelization used: unroll|serial|openmp

";

%feature("docstring")  casadi::Function::free_sx() const  "

Get all the free variables of the function.

";

%feature("docstring")  casadi::Function::name_out() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::name_out(casadi_int ind) const  "

Get output scheme name by index.

";

%feature("docstring")  casadi::Function::nnz_in() const  "

Get number of input nonzeros.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::nnz_in(casadi_int ind) const  "

Get number of input nonzeros.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::nnz_in(const std::string &iname)
const  "

Get number of input nonzeros.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::forward(casadi_int nfwd) const  "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out + n_in inputs and nfwd outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_in inputs
correspond to forward seeds, stacked horizontally The n_out outputs
correspond to forward sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::casadi_forward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out + n_in inputs and nfwd outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_in inputs
correspond to forward seeds, stacked horizontally The n_out outputs
correspond to forward sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::casadi_forward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out + n_in inputs and nfwd outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_in inputs
correspond to forward seeds, stacked horizontally The n_out outputs
correspond to forward sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::default_in(casadi_int ind) const  "

Get default input value.

";

%feature("docstring")  casadi::Callback::init() "

Initialize the object This function is called after the object construction
(for the whole class hierarchy) is complete, but before the finalization
step. It is called recursively for the whole class hierarchy, starting with
the lowest level.

";

%feature("docstring")  casadi::Function::numel_out() const  "

Get number of output elements.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::numel_out(casadi_int ind) const  "

Get number of output elements.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::numel_out(const std::string &oname)
const  "

Get number of output elements.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::print_dimensions(std::ostream
&stream=casadi::uout()) const  "

Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::Function::generate(const std::string &fname,
const Dict &opts=Dict()) const  "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generate(const Dict &opts=Dict())
const  "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::instruction_input(casadi_int k)
const  "

Locations in the work vector for the inputs of the instruction
(SXFunction/MXFunction)

";

%feature("docstring")  casadi::Function::sz_iw() const  "

Get required length of iw field.

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::is_diff_in(casadi_int ind) const  "

Get differentiability of inputs/output.

";

%feature("docstring")  casadi::Function::is_diff_in() const  "

Get differentiability of inputs/output.

";

%feature("docstring")  casadi::Callback::has_reverse(casadi_int nadj) const
"

Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(casadi_int
nadj) if no cached version is available.

";

%feature("docstring")  casadi::Function::jacobian() const  "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::casadi_jacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::casadi_jacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::expand() const  "

Expand a function to SX.

";

%feature("docstring") casadi::casadi_expand "

Expand a function to SX.

";

%feature("docstring")  casadi::Function::casadi_expand "

Expand a function to SX.

";

%feature("docstring")  casadi::Function::expand(const std::string &name,
const Dict &opts=Dict()) const  "

Expand a function to SX.

";

%feature("docstring") casadi::casadi_expand "

Expand a function to SX.

";

%feature("docstring")  casadi::Function::casadi_expand "

Expand a function to SX.

";

%feature("docstring")  casadi::Function::sx_out(casadi_int oind) const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::sx_out(const std::string &oname)
const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::sx_out() const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::print_options(std::ostream
&stream=casadi::uout()) const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::generate_out(const std::string
&fname, const std::vector< DM > &arg) "

Export an output file that can be checked with generated C code output.

generate_in  convert_out to convert between dict/map and vector

";

%feature("docstring")  casadi::Function::generate_out(const std::string
&fname) "

Export an output file that can be checked with generated C code output.

generate_in  convert_out to convert between dict/map and vector

";

%feature("docstring")  casadi::Function::checkout() const  "

Checkout a memory object.

";

%feature("docstring") casadi::Callback::Callback() "

Default constructor.

";

%feature("docstring") casadi::Callback::Callback(const Callback &obj) "

Copy constructor (throws an error)

";

%feature("docstring") casadi::Callback::~Callback "

Destructor.

";

%feature("docstring")  casadi::Function::instruction_output(casadi_int k)
const  "

Location in the work vector for the output of the instruction
(SXFunction/MXFunction)

";

%feature("docstring")  casadi::Callback::uses_output() const  "

Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::Function::jac() const  "

Calculate all Jacobian blocks Generates a function that takes all non-
differentiated inputs and outputs and calculates all Jacobian blocks. Inputs
that are not needed by the routine are all-zero sparse matrices with the
correct dimensions. Output blocks that are not calculated, e.g. if the
corresponding input or output is marked non-differentiated are also all-zero
sparse. The Jacobian blocks are sorted starting by all the blocks for the
first output, then all the blocks for the second output and so on. E.g.
f:(x,y)->(r,s) results in the function jac_f:(x,y,r,s)->(dr_dx, dr_dy,
ds_dx, ds_dy) This function is cached.

";

%feature("docstring")  casadi::Function::has_spfwd() const  "

Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::Function::which_depends(const std::string
&s_in, const std::vector< std::string > &s_out, casadi_int order=1, bool
tr=false) const  "

Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::casadi_which_depends "

Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::Function::casadi_which_depends "

Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::Function::jit(const std::string &name, const
std::string &body, const std::vector< std::string > &name_in, const
std::vector< std::string > &name_out, const Dict &opts=Dict()) "

To resolve ambiguity on some compilers.

Create a just-in-time compiled function from a C language string The names
and sparsity patterns of all the inputs and outputs must be provided. If
sparsities are not provided, all inputs and outputs are assumed to be
scalar. Only specify the function body, assuming that input and output
nonzeros are stored in arrays with the specified naming convension. The data
type used is 'casadi_real', which is typically equal to 'double` or another
data type with the same API as 'double'.

Inputs may be null pointers. This means that the all entries are zero.
Outputs may be null points. This means that the corresponding result can be
ignored.

If an error occurs in the evaluation, issue \"return 1;\";

The final generated function will have a structure similar to:

casadi_int fname(const casadi_real** arg, casadi_real** res, casadi_int* iw,
casadi_real* w, void* mem) { const casadi_real *x1, *x2; casadi_real *r1,
*r2; x1 = *arg++; x2 = *arg++; r1 = *res++; r2 = *res++; <FUNCTION_BODY>
return 0; }

";

%feature("docstring")  casadi::Function::jit(const std::string &name, const
std::string &body, const std::vector< std::string > &name_in, const
std::vector< std::string > &name_out, const std::vector< Sparsity >
&sparsity_in, const std::vector< Sparsity > &sparsity_out, const Dict
&opts=Dict()) "

To resolve ambiguity on some compilers.

Create a just-in-time compiled function from a C language string The names
and sparsity patterns of all the inputs and outputs must be provided. If
sparsities are not provided, all inputs and outputs are assumed to be
scalar. Only specify the function body, assuming that input and output
nonzeros are stored in arrays with the specified naming convension. The data
type used is 'casadi_real', which is typically equal to 'double` or another
data type with the same API as 'double'.

Inputs may be null pointers. This means that the all entries are zero.
Outputs may be null points. This means that the corresponding result can be
ignored.

If an error occurs in the evaluation, issue \"return 1;\";

The final generated function will have a structure similar to:

casadi_int fname(const casadi_real** arg, casadi_real** res, casadi_int* iw,
casadi_real* w, void* mem) { const casadi_real *x1, *x2; casadi_real *r1,
*r2; x1 = *arg++; x2 = *arg++; r1 = *res++; r2 = *res++; <FUNCTION_BODY>
return 0; }

";

%feature("docstring")  casadi::Function::get_free() const  "

Get free variables as a string.

";

%feature("docstring")  casadi::Function::index_out(const std::string &name)
const  "

Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLPSOL_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Callback::construct(const std::string &name,
const Dict &opts=Dict()) "

Construct internal object This is the step that actually construct the
internal object, as the class constructor only creates a null pointer. It
should be called from the user constructor.

";

%feature("docstring")  casadi::Function::save(const std::string &fname,
const Dict &opts=Dict()) const  "

Export function in specific language.

Only allowed for (a subset of) SX/MX Functions

";

%feature("docstring")  casadi::Function::has_sprev() const  "

Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::Function::sx_in(casadi_int iind) const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::sx_in(const std::string &iname)
const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::sx_in() const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Callback::get_forward(casadi_int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(casadi_int
nfwd) if no cached version is available.

";

%feature("docstring")  casadi::Function::max_in(casadi_int ind) const  "

Get largest input value.

";

%feature("docstring")  casadi::Function::min_in(casadi_int ind) const  "

Get smallest input value.

";

%feature("docstring")  casadi::Function::nz_from_out(const std::vector< DM >
&arg) const  "

Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::Function::sparsity_jac(casadi_int iind,
casadi_int oind, bool compact=false, bool symmetric=false) const  "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::sparsity_jac(const std::string
&iind, casadi_int oind=0, bool compact=false, bool symmetric=false) const  "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::sparsity_jac(casadi_int iind, const
std::string &oind, bool compact=false, bool symmetric=false) const  "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::sparsity_jac(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false)
const  "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::SharedObject::class_name() const  "

Get class name.

";

%feature("docstring")  casadi::Function::nz_to_out(const std::vector< double
> &arg) const  "

Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::Function::nz_to_in(const std::vector< double
> &arg) const  "

Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::SharedObject::get_str(bool more=false) const
"

Get string representation.

";

%feature("docstring")  casadi::Callback::eval_buffer(const double **arg,
const std::vector< casadi_int > &sizes_arg, double **res, const std::vector<
casadi_int > &sizes_res) const  "

A copy-free low level interface.

In Python, you will be passed two tuples of memoryview objects

";

%feature("docstring")  casadi::Function::free_mx() const  "

Get all the free variables of the function.

";

%feature("docstring")  casadi::Function::serialize(const Dict &opts=Dict())
const  "

Serialize.

";

%feature("docstring")  casadi::Function::size1_out(casadi_int ind) const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::size1_out(const std::string &oname)
const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::n_instructions() const  "

Number of instruction in the algorithm (SXFunction/MXFunction)

";

%feature("docstring")  casadi::Function::instruction_constant(casadi_int k)
const  "

Get the floating point output argument of an instruction ( SXFunction)

";

%feature("docstring")  casadi::Callback::has_jacobian() const  "

Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring")  casadi::Callback::finalize() "

Finalize the object This function is called after the construction and init
steps are completed, but before user functions are called. It is called
recursively for the whole class hierarchy, starting with the highest level.

";

%feature("docstring")  casadi::Function::size2_out(casadi_int ind) const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::size2_out(const std::string &oname)
const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::mx_in(casadi_int ind) const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::mx_in(const std::string &iname)
const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::mx_in() const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::release(int mem) const  "

Release a memory object.

";

%feature("docstring")  casadi::Function::is_a(const std::string &type, bool
recursive=true) const  "

Check if the function is of a particular type Optionally check if name
matches one of the base classes (default true)

";

%feature("docstring")  casadi::Function::is_diff_out(casadi_int ind) const
"

Get differentiability of inputs/output.

";

%feature("docstring")  casadi::Function::is_diff_out() const  "

Get differentiability of inputs/output.

";

%feature("docstring")  casadi::Function::wrap() const  "

Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::Callback::get_sparsity_out(casadi_int i) "

Get the sparsity of an output This function is called during construction.

";

%feature("docstring")  casadi::Function::assert_size_out(casadi_int i,
casadi_int nrow, casadi_int ncol) const  "

Assert that an output dimension is equal so some given value.

";

%feature("docstring")  casadi::Function::name_in() const  "

Get input scheme.

";

%feature("docstring")  casadi::Function::name_in(casadi_int ind) const  "

Get input scheme name by index.

";

%feature("docstring")  casadi::Function::has_free() const  "

Does the function have free variables.

";

%feature("docstring")  casadi::Function::instructions_sx() const  "

Get the SX node corresponding to all instructions ( SXFunction)

Note: input and output instructions have no SX representation. This method
returns nan for those instructions.

";

%feature("docstring")  casadi::Function::assert_size_in(casadi_int i,
casadi_int nrow, casadi_int ncol) const  "

Assert that an input dimension is equal so some given value.

";

%feature("docstring")  casadi::Callback::get_sparsity_in(casadi_int i) "

Get the sparsity of an input This function is called during construction.

";

%feature("docstring")  casadi::SharedObject::disp(std::ostream &stream, bool
more=false) const  "

Print a description of the object.

";

%feature("docstring")  casadi::Function::n_in() const  "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::sz_w() const  "

Get required length of w field.

";

%feature("docstring")  casadi::Function::info() const  "

Obtain information about function

";

%feature("docstring")  casadi::Function::instruction_MX(casadi_int k) const
"

Get the MX node corresponding to an instruction ( MXFunction)

";

%feature("docstring")  casadi::Callback::has_jacobian_sparsity() const  "

Return sparsity of Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Function::sz_res() const  "

Get required length of res field.

";

%feature("docstring")  casadi::SharedObject::print_ptr(std::ostream
&stream=casadi::uout()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring")  casadi::Callback::get_jacobian(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring")  casadi::Function::nz_from_in(const std::vector< DM >
&arg) const  "

Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::Function::n_nodes() const  "

Number of nodes in the algorithm.

";

%feature("docstring")  casadi::Function::oracle() const  "

Get oracle.

";

%feature("docstring")  casadi::Callback::eval(const std::vector< DM > &arg)
const  "

Evaluate numerically, using temporary matrices and work vectors.

This signature is not thread-safe. For guaranteed thread-safety, use
eval_buffer

";

%feature("docstring")  casadi::Function::convert_in(const std::vector< DM >
&arg) const  "

Convert from/to input/output lists/map.

Will raise an error when an unknown key is used or a list has incorrect
size. Does not perform sparsity checking.

";

%feature("docstring")  casadi::Function::convert_in(const DMDict &arg) const
"

Convert from/to input/output lists/map.

Will raise an error when an unknown key is used or a list has incorrect
size. Does not perform sparsity checking.

";

%feature("docstring")  casadi::Function::convert_in(const std::vector< SX >
&arg) const  "

Convert from/to input/output lists/map.

Will raise an error when an unknown key is used or a list has incorrect
size. Does not perform sparsity checking.

";

%feature("docstring")  casadi::Function::convert_in(const SXDict &arg) const
"

Convert from/to input/output lists/map.

Will raise an error when an unknown key is used or a list has incorrect
size. Does not perform sparsity checking.

";

%feature("docstring")  casadi::Function::convert_in(const std::vector< MX >
&arg) const  "

Convert from/to input/output lists/map.

Will raise an error when an unknown key is used or a list has incorrect
size. Does not perform sparsity checking.

";

%feature("docstring")  casadi::Function::convert_in(const MXDict &arg) const
"

Convert from/to input/output lists/map.

Will raise an error when an unknown key is used or a list has incorrect
size. Does not perform sparsity checking.

";

%feature("docstring")  casadi::Function::numel_in() const  "

Get number of input elements.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::numel_in(casadi_int ind) const  "

Get number of input elements.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::numel_in(const std::string &iname)
const  "

Get number of input elements.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::map(const std::string &name, const
std::string &parallelization, casadi_int n, const std::vector< casadi_int >
&reduce_in, const std::vector< casadi_int > &reduce_out, const Dict
&opts=Dict()) const  "

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

";

%feature("docstring") casadi::casadi_map "

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

";

%feature("docstring")  casadi::Function::casadi_map "

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

";

%feature("docstring")  casadi::Function::map(const std::string &name, const
std::string &parallelization, casadi_int n, const std::vector< std::string >
&reduce_in, const std::vector< std::string > &reduce_out, const Dict
&opts=Dict()) const  "

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

";

%feature("docstring") casadi::casadi_map "

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

";

%feature("docstring")  casadi::Function::casadi_map "

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

";

%feature("docstring")  casadi::Function::map(casadi_int n, const
std::vector< bool > &reduce_in, const std::vector< bool >
&reduce_out=std::vector< bool >(), const Dict &opts=Dict()) const  "

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

";

%feature("docstring") casadi::casadi_map "

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

";

%feature("docstring")  casadi::Function::casadi_map "

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

";

%feature("docstring")  casadi::Function::map(casadi_int n, const std::string
&parallelization="serial") const  "

Create a mapped version of this function.

Suppose the function has a signature of:

::

     f: (a, p) -> ( s )
  



The the mapped version has the signature:

::

     F: (A, P) -> (S )
  
      with
          A: horzcat([a0, a1, ..., a_(N-1)])
          P: horzcat([p0, p1, ..., p_(N-1)])
          S: horzcat([s0, s1, ..., s_(N-1)])
      and
          s0 <- f(a0, p0)
          s1 <- f(a1, p1)
          ...
          s_(N-1) <- f(a_(N-1), p_(N-1))
  



Parameters:
-----------

parallelization:  Type of parallelization used: unroll|serial|openmp

";

%feature("docstring") casadi::casadi_map "

Create a mapped version of this function.

Suppose the function has a signature of:

::

     f: (a, p) -> ( s )
  



The the mapped version has the signature:

::

     F: (A, P) -> (S )
  
      with
          A: horzcat([a0, a1, ..., a_(N-1)])
          P: horzcat([p0, p1, ..., p_(N-1)])
          S: horzcat([s0, s1, ..., s_(N-1)])
      and
          s0 <- f(a0, p0)
          s1 <- f(a1, p1)
          ...
          s_(N-1) <- f(a_(N-1), p_(N-1))
  



Parameters:
-----------

parallelization:  Type of parallelization used: unroll|serial|openmp

";

%feature("docstring")  casadi::Function::casadi_map "

Create a mapped version of this function.

Suppose the function has a signature of:

::

     f: (a, p) -> ( s )
  



The the mapped version has the signature:

::

     F: (A, P) -> (S )
  
      with
          A: horzcat([a0, a1, ..., a_(N-1)])
          P: horzcat([p0, p1, ..., p_(N-1)])
          S: horzcat([s0, s1, ..., s_(N-1)])
      and
          s0 <- f(a0, p0)
          s1 <- f(a1, p1)
          ...
          s_(N-1) <- f(a_(N-1), p_(N-1))
  



Parameters:
-----------

parallelization:  Type of parallelization used: unroll|serial|openmp

";

%feature("docstring")  casadi::Function::print_option(const std::string
&name, std::ostream &stream=casadi::uout()) const  "

Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::Function::mapaccum(const std::string &name,
casadi_int N, const Dict &opts=Dict()) const  "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



Mapaccum has the following benefits over writing an equivalent for- loop:
much faster at construction time

potentially much faster compilation times (for codegen)

offers a trade-off between memory and evaluation time

The base (settable through the options dictionary, default 10), is used to
create a tower of function calls, containing unrolled for- loops of length
maximum base.

This technique is much more scalable in terms of memory-usage, but slightly
slower at evaluation, than a plain for-loop. The effect is similar to that
of a for-loop with a check-pointing instruction after each chunk of
iterations with size base.

Set base to -1 to unroll all the way; no gains in memory efficiency here.

";

%feature("docstring")  casadi::Function::mapaccum(const std::string &name,
casadi_int N, casadi_int n_accum, const Dict &opts=Dict()) const  "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



Mapaccum has the following benefits over writing an equivalent for- loop:
much faster at construction time

potentially much faster compilation times (for codegen)

offers a trade-off between memory and evaluation time

The base (settable through the options dictionary, default 10), is used to
create a tower of function calls, containing unrolled for- loops of length
maximum base.

This technique is much more scalable in terms of memory-usage, but slightly
slower at evaluation, than a plain for-loop. The effect is similar to that
of a for-loop with a check-pointing instruction after each chunk of
iterations with size base.

Set base to -1 to unroll all the way; no gains in memory efficiency here.

";

%feature("docstring")  casadi::Function::mapaccum(const std::string &name,
casadi_int n, const std::vector< casadi_int > &accum_in, const std::vector<
casadi_int > &accum_out, const Dict &opts=Dict()) const  "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



Mapaccum has the following benefits over writing an equivalent for- loop:
much faster at construction time

potentially much faster compilation times (for codegen)

offers a trade-off between memory and evaluation time

The base (settable through the options dictionary, default 10), is used to
create a tower of function calls, containing unrolled for- loops of length
maximum base.

This technique is much more scalable in terms of memory-usage, but slightly
slower at evaluation, than a plain for-loop. The effect is similar to that
of a for-loop with a check-pointing instruction after each chunk of
iterations with size base.

Set base to -1 to unroll all the way; no gains in memory efficiency here.

";

%feature("docstring")  casadi::Function::mapaccum(const std::string &name,
casadi_int n, const std::vector< std::string > &accum_in, const std::vector<
std::string > &accum_out, const Dict &opts=Dict()) const  "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



Mapaccum has the following benefits over writing an equivalent for- loop:
much faster at construction time

potentially much faster compilation times (for codegen)

offers a trade-off between memory and evaluation time

The base (settable through the options dictionary, default 10), is used to
create a tower of function calls, containing unrolled for- loops of length
maximum base.

This technique is much more scalable in terms of memory-usage, but slightly
slower at evaluation, than a plain for-loop. The effect is similar to that
of a for-loop with a check-pointing instruction after each chunk of
iterations with size base.

Set base to -1 to unroll all the way; no gains in memory efficiency here.

";

%feature("docstring")  casadi::Function::mapaccum(casadi_int N, const Dict
&opts=Dict()) const  "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



Mapaccum has the following benefits over writing an equivalent for- loop:
much faster at construction time

potentially much faster compilation times (for codegen)

offers a trade-off between memory and evaluation time

The base (settable through the options dictionary, default 10), is used to
create a tower of function calls, containing unrolled for- loops of length
maximum base.

This technique is much more scalable in terms of memory-usage, but slightly
slower at evaluation, than a plain for-loop. The effect is similar to that
of a for-loop with a check-pointing instruction after each chunk of
iterations with size base.

Set base to -1 to unroll all the way; no gains in memory efficiency here.

";

%feature("docstring")  casadi::Function::size1_in(casadi_int ind) const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::size1_in(const std::string &iname)
const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::sparsity_in(casadi_int ind) const
"

Get sparsity of a given input.

";

%feature("docstring")  casadi::Function::sparsity_in(const std::string
&iname) const  "

Get sparsity of a given input.

";

%feature("docstring")  casadi::Callback::get_reverse(casadi_int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(casadi_int
nadj) if no cached version is available.

";

%feature("docstring")  casadi::Function::generate_in(const std::string
&fname, const std::vector< DM > &arg) "

Export an input file that can be passed to generate C code with a main.

generate_out  convert_in to convert between dict/map and vector

";

%feature("docstring")  casadi::Function::generate_in(const std::string
&fname) "

Export an input file that can be passed to generate C code with a main.

generate_out  convert_in to convert between dict/map and vector

";

%feature("docstring") casadi::Callback "

Callback function functionality.

This class provides a public API to the FunctionInternal class that can be
subclassed by the user, who is then able to implement the different virtual
method. Note that the Function class also provides a public API to
FunctionInternal, but only allows calling, not being called.

The user is responsible for not deleting this class for the lifetime of the
internal function object.

Joris Gillis, Joel Andersson

C++ includes: callback.hpp ";

%feature("docstring")  casadi::Function::n_out() const  "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::jacobian_old(casadi_int iind,
casadi_int oind) const  "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring") casadi::Callback::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring")  casadi::Function::fold(casadi_int N, const Dict
&opts=Dict()) const  "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



Mapaccum has the following benefits over writing an equivalent for- loop:
much faster at construction time

potentially much faster compilation times (for codegen)

offers a trade-off between memory and evaluation time

The base (settable through the options dictionary, default 10), is used to
create a tower of function calls, containing unrolled for- loops of length
maximum base.

This technique is much more scalable in terms of memory-usage, but slightly
slower at evaluation, than a plain for-loop. The effect is similar to that
of a for-loop with a check-pointing instruction after each chunk of
iterations with size base.

Set base to -1 to unroll all the way; no gains in memory efficiency here.

";

%feature("docstring")  casadi::Function::index_in(const std::string &name)
const  "

Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLPSOL_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::generate_lifted(Function
&output_vdef_fcn, Function &output_vinit_fcn) const  "

Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::Function::sparsity_out(casadi_int ind) const
"

Get sparsity of a given output.

";

%feature("docstring")  casadi::Function::sparsity_out(const std::string
&iname) const  "

Get sparsity of a given output.

";

%feature("docstring")  casadi::Function::stats(int mem=0) const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::name() const  "

Name of the function.

";

%feature("docstring")  casadi::Function::size_out(casadi_int ind) const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::size_out(const std::string &oname)
const  "

Get output dimension.

";

%feature("docstring")  casadi::Callback::get_name_in(casadi_int i) "

Get the sparsity of an input This function is called during construction.

";

%feature("docstring")  casadi::Callback::get_name_out(casadi_int i) "

Get the sparsity of an output This function is called during construction.

";

%feature("docstring")  casadi::Function::mx_out(casadi_int ind) const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::mx_out(const std::string &oname)
const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::mx_out() const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";


// File: classcasadi_1_1casadi__limits.xml
%feature("docstring") casadi::casadi_limits "

casadi_limits class

The following class, which acts as a complements to the standard
numeric_limits class, allows specifying certain properties of scalar
objects. The template can be specialized for e.g. symbolic scalars Joel
Andersson

C++ includes: casadi_limits.hpp ";


// File: classcasadi_1_1CasadiException.xml
%feature("docstring")  casadi::CasadiException::what() const  "

throw () Display error.

";

%feature("docstring") casadi::CasadiException::CasadiException() "

Default constructor.

";

%feature("docstring") casadi::CasadiException::CasadiException(const
std::string &msg) "

Form message string.

";

%feature("docstring") casadi::CasadiException "

Casadi exception class.

Joel Andersson

C++ includes: exception.hpp ";

%feature("docstring") casadi::CasadiException::~CasadiException "

throw () Destructor.

";


// File: classcasadi_1_1CasadiMeta.xml
%feature("docstring") casadi::CasadiMeta "

Collects global CasADi meta information.

Joris Gillis

C++ includes: casadi_meta.hpp ";


// File: classcasadi_1_1CentralDiff.xml
%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FiniteDiff::uses_output() const  "

[INTERNAL]  Is the scheme using the (nondifferentiated) output?

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FiniteDiff::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(casadi_int
nadj, const std::string &name, const std::vector< std::string > &inames,
const std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::CentralDiff::get_forward(casadi_int nfwd,
const std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Second order derivatives.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FiniteDiff::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::CentralDiff::has_err() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::CentralDiff::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::CentralDiff::calc_stepsize(double abstol)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::CentralDiff::pert(const std::string &k) const
"

[INTERNAL] ";

%feature("docstring")  casadi::CentralDiff::pert(casadi_int k, double h)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FiniteDiff::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FiniteDiff::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring") casadi::CentralDiff::CentralDiff(const std::string
&name, casadi_int n) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::finalize()  "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")
casadi::FunctionInternal::serialize_body(SerializingStream &s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::CentralDiff::calc_fd(double **yk, double *y0,
double *J, double h) const  "

[INTERNAL] ";

%feature("docstring")  casadi::CentralDiff::calc_fd() const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::CentralDiff::class_name() const  "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::ProtoFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FiniteDiff::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FiniteDiff::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::CentralDiff::~CentralDiff "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FiniteDiff::eval(const double **arg, double
**res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")
casadi::FiniteDiff::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::CentralDiff::n_pert() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(casadi_int
nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")
casadi::FunctionInternal::serialize_type(SerializingStream &s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FiniteDiff::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FiniteDiff::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::CentralDiff::has_forward(casadi_int nfwd)
const  "

[INTERNAL]  Second order derivatives.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::CentralDiff "

[INTERNAL]  Calculate derivative using central differences Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| abstol           | OT_DOUBLE       | Accuracy of      | casadi::CentralD |
|                  |                 | function outputs | iff              |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| h                | OT_DOUBLE       | Step size        | casadi::CentralD |
|                  |                 | [default:        | iff              |
|                  |                 | computed from    |                  |
|                  |                 | abstol]          |                  |
+------------------+-----------------+------------------+------------------+
| h_iter           | OT_INT          | Number of        | casadi::CentralD |
|                  |                 | iterations to    | iff              |
|                  |                 | improve on the   |                  |
|                  |                 | step-size        |                  |
|                  |                 | [default: 1 if   |                  |
|                  |                 | error estimate   |                  |
|                  |                 | available,       |                  |
|                  |                 | otherwise 0]     |                  |
+------------------+-----------------+------------------+------------------+
| h_max            | OT_DOUBLE       | Maximum step     | casadi::CentralD |
|                  |                 | size [default 0] | iff              |
+------------------+-----------------+------------------+------------------+
| h_min            | OT_DOUBLE       | Minimum step     | casadi::CentralD |
|                  |                 | size [default    | iff              |
|                  |                 | inf]             |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reltol           | OT_DOUBLE       | Accuracy of      | casadi::CentralD |
|                  |                 | function inputs  | iff              |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| second_order_ste | OT_DOUBLE       | Second order     | casadi::CentralD |
| psize            |                 | perturbation     | iff              |
|                  |                 | size [default:   |                  |
|                  |                 | 1e-3]            |                  |
+------------------+-----------------+------------------+------------------+
| smoothing        | OT_DOUBLE       | Smoothing        | casadi::CentralD |
|                  |                 | regularization   | iff              |
|                  |                 | [default:        |                  |
|                  |                 | machine          |                  |
|                  |                 | precision]       |                  |
+------------------+-----------------+------------------+------------------+
| u_aim            | OT_DOUBLE       | Target ratio of  | casadi::CentralD |
|                  |                 | roundoff error   | iff              |
|                  |                 | to truncation    |                  |
|                  |                 | error [default:  |                  |
|                  |                 | 100.]            |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: finite_differences.hpp ";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FiniteDiff::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FiniteDiff::codegen_body(CodeGenerator &g)
const  "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::ProtoFunction::serialize_base_function()
const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::FiniteDiff::get_default_in(casadi_int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";


// File: classcasadi_1_1ClangCompiler.xml
%feature("docstring") casadi::ClangCompiler::ClangCompiler(const std::string
&name) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::ImporterInternal::can_have_meta() const  "

[INTERNAL]  Can meta information be read?

";

%feature("docstring")  casadi::ImporterInternal::inlined(const std::string
&symname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ClangCompiler::get_function(const std::string
&symname)  "

[INTERNAL]  Get a function pointer for numerical evaluation.

";

%feature("docstring")  casadi::ImporterInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::ImporterInternal::finalize() "

[INTERNAL] ";

%feature("docstring")  casadi::ImporterInternal::read_external(const
std::string &sym, bool inlined, std::istream &file, casadi_int &offset) "

[INTERNAL]  Get an external function declaration.

";

%feature("docstring")  casadi::ImporterInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Print.

";

%feature("docstring")  casadi::ImporterInternal::library() const  "

[INTERNAL]  Get library name.

";

%feature("docstring") casadi::ClangCompiler "

'clang' plugin for Importer

Joris Gillis  Interface to the JIT compiler CLANG

>List of available options

+--------------+-----------------+-----------------------------------------+
|      Id      |      Type       |               Description               |
+==============+=================+=========================================+
| flags        | OT_STRINGVECTOR | Compile flags for the JIT compiler.     |
|              |                 | Default: None                           |
+--------------+-----------------+-----------------------------------------+
| include_path | OT_STRING       | Include paths for the JIT compiler. The |
|              |                 | include directory shipped with CasADi   |
|              |                 | will be automatically appended.         |
+--------------+-----------------+-----------------------------------------+

>List of available options

+--------------+-----------------+--------------------+--------------------+
|      Id      |      Type       |    Description     |      Used in       |
+==============+=================+====================+====================+
| flags        | OT_STRINGVECTOR | Compile flags for  | casadi::ClangCompi |
|              |                 | the JIT compiler.  | ler                |
|              |                 | Default: None      |                    |
+--------------+-----------------+--------------------+--------------------+
| include_path | OT_STRING       | Include paths for  | casadi::ClangCompi |
|              |                 | the JIT compiler.  | ler                |
|              |                 | The include        |                    |
|              |                 | directory shipped  |                    |
|              |                 | with CasADi will   |                    |
|              |                 | be automatically   |                    |
|              |                 | appended.          |                    |
+--------------+-----------------+--------------------+--------------------+
| verbose      | OT_BOOL         | Verbose evaluation | casadi::ImporterIn |
|              |                 | for debugging      | ternal             |
+--------------+-----------------+--------------------+--------------------+

Diagrams
--------



C++ includes: clang_compiler.hpp ";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::ClangCompiler::~ClangCompiler "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::ClangCompiler::plugin_name() const  "

[INTERNAL]  Get name of plugin.

";

%feature("docstring")
casadi::ImporterInternal::serialize_body(SerializingStream &s) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ClangCompiler::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::ImporterInternal::read_meta(std::istream
&file, casadi_int &offset) "

[INTERNAL]  Get meta information.

";

%feature("docstring")  casadi::ImporterInternal::to_text(const std::string
&cmd, casadi_int ind=-1) const  "

[INTERNAL]  Get entry as a text.

";

%feature("docstring")  casadi::ClangCompiler::class_name() const  "

[INTERNAL]  Get type name.

";

%feature("docstring")
casadi::ImporterInternal::serialize_type(SerializingStream &s) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ImporterInternal::has_meta(const std::string
&cmd, casadi_int ind=-1) const  "

[INTERNAL]  Does an entry exist?

";

%feature("docstring")  casadi::ClangCompiler::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::ImporterInternal::serialize(SerializingStream
&s) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ImporterInternal::body(const std::string
&symname) const  "

[INTERNAL]  Get the function body, if inlined.

";

%feature("docstring")  casadi::ImporterInternal::get_meta(const std::string
&cmd, casadi_int ind=-1) const  "

[INTERNAL]  Get entry as a text.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::ImporterInternal::has_function(const
std::string &symname) const  "

[INTERNAL]  Get a function pointer for numerical evaluation.

";


// File: classcasadi_1_1CodeGenerator.xml
%feature("docstring")  casadi::CodeGenerator::add_include(const std::string
&new_include, bool relative_path=false, const std::string
&use_ifdef=std::string()) "

Add an include file optionally using a relative path \"...\" instead of an
absolute path <...>

";

%feature("docstring") casadi::CodeGenerator "

Helper class for C code generation.

Joel Andersson

C++ includes: code_generator.hpp ";

%feature("docstring")  casadi::CodeGenerator::dump() "

Generate a file, return code as string.

";

%feature("docstring")  casadi::CodeGenerator::add(const Function &f, bool
with_jac_sparsity=false) "

Add a function (name generated)

";

%feature("docstring") casadi::CodeGenerator::CodeGenerator(const std::string
&name, const Dict &opts=Dict()) "

Constructor.

";

%feature("docstring")  casadi::CodeGenerator::generate(const std::string
&prefix="") "

Generate file(s) The \"prefix\" argument will be prepended to the generated
files and may be a directory or a file prefix. returns the filename.

";


// File: classcasadi_1_1Collocation.xml
%feature("docstring")  casadi::Collocation::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::Integrator::sp_reverse(bvec_t **arg, bvec_t
**res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::Integrator::serialize_type(SerializingStream
&s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::Integrator::sp_forward(const bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::Integrator::has_forward(casadi_int nfwd)
const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Collocation::Collocation(const std::string
&name, const Function &dae) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::Integrator::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::Collocation::~Collocation "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::Collocation::algebraic_state_init(const MX
&x0, const MX &z0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::Collocation::plugin_name() const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::ImplicitFixedStepIntegrator::getExplicitB()
const  "

[INTERNAL]  Get explicit dynamics (backward problem)

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::Collocation::setupFG()  "

[INTERNAL]  Setup F and G.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::Integrator::print_stats(IntegratorMemory
*mem) const  "

[INTERNAL]  Print solver statistics.

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::eval(const double **arg, double
**res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  evaluate

";

%feature("docstring")  casadi::Integrator::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::Integrator::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FixedStepIntegrator::create_advanced(const
Dict &opts)  "

[INTERNAL]  Helper for a more powerful 'integrator' factory

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::Integrator::x() const  "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::Collocation::serialize_body(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FixedStepIntegrator::advance(IntegratorMemory
*mem, double t, double *x, double *z, double *q) const  "

[INTERNAL]  Advance solution in time.

";

%feature("docstring")  casadi::Integrator::has_reverse(casadi_int nadj)
const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::Integrator::getDerivativeOptions(bool fwd)
const  "

[INTERNAL]  Set solver specific options to generated augmented integrators.

";

%feature("docstring")  casadi::Integrator::aug_adj(casadi_int nadj) const  "

[INTERNAL]  Generate a augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(casadi_int
ind) const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=nullptr) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::Integrator::get_forward(casadi_int nfwd,
const std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::Integrator::sp_jac_dae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (forward
problem)

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::serialize_base_function() const
"

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Integrator::z() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FixedStepIntegrator::free_mem(void *mem)
const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FixedStepIntegrator::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::Integrator::p() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::q() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::t() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::Integrator::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::FixedStepIntegrator::init_mem(void *mem)
const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::Integrator::setStopTime(IntegratorMemory
*mem, double tf) const  "

[INTERNAL]  Set stop time for the integration.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Collocation "

'collocation' plugin for Integrator

Fixed-step implicit Runge-Kutta integrator ODE/DAE integrator based on
collocation schemes

The method is still under development

>List of available options

+---------------------------+-----------------+----------------------------+
|            Id             |      Type       |        Description         |
+===========================+=================+============================+
| augmented_options         | OT_DICT         | Options to be passed down  |
|                           |                 | to the augmented           |
|                           |                 | integrator, if one is      |
|                           |                 | constructed.               |
+---------------------------+-----------------+----------------------------+
| collocation_scheme        | OT_STRING       | Collocation scheme:        |
|                           |                 | radau|legendre             |
+---------------------------+-----------------+----------------------------+
| expand                    | OT_BOOL         | Replace MX with SX         |
|                           |                 | expressions in problem     |
|                           |                 | formulation [false]        |
+---------------------------+-----------------+----------------------------+
| grid                      | OT_DOUBLEVECTOR | Time grid                  |
+---------------------------+-----------------+----------------------------+
| interpolation_order       | OT_INT          | Order of the interpolating |
|                           |                 | polynomials                |
+---------------------------+-----------------+----------------------------+
| number_of_finite_elements | OT_INT          | Number of finite elements  |
+---------------------------+-----------------+----------------------------+
| output_t0                 | OT_BOOL         | Output the state at the    |
|                           |                 | initial time               |
+---------------------------+-----------------+----------------------------+
| print_stats               | OT_BOOL         | Print out statistics after |
|                           |                 | integration                |
+---------------------------+-----------------+----------------------------+
| rootfinder                | OT_STRING       | An implicit function       |
|                           |                 | solver                     |
+---------------------------+-----------------+----------------------------+
| rootfinder_options        | OT_DICT         | Options to be passed to    |
|                           |                 | the NLP Solver             |
+---------------------------+-----------------+----------------------------+
| simplify                  | OT_BOOL         | Implement as MX  Function  |
|                           |                 | (codegeneratable/serializa |
|                           |                 | ble) default: false        |
+---------------------------+-----------------+----------------------------+
| simplify_options          | OT_DICT         | Any options to pass to     |
|                           |                 | simplified form Function   |
|                           |                 | constructor                |
+---------------------------+-----------------+----------------------------+
| t0                        | OT_DOUBLE       | Beginning of the time      |
|                           |                 | horizon                    |
+---------------------------+-----------------+----------------------------+
| tf                        | OT_DOUBLE       | End of the time horizon    |
+---------------------------+-----------------+----------------------------+

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::Implicit |
| s                |                 | passed down to   | FixedStepIntegra |
|                  |                 | the augmented    | tor              |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| collocation_sche | OT_STRING       | Collocation      | casadi::Collocat |
| me               |                 | scheme:          | ion              |
|                  |                 | radau|legendre   |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Implicit |
|                  |                 | SX expressions   | FixedStepIntegra |
|                  |                 | in problem       | tor              |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::Implicit |
|                  |                 |                  | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| interpolation_or | OT_INT          | Order of the     | casadi::Collocat |
| der              |                 | interpolating    | ion              |
|                  |                 | polynomials      |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::Implicit |
| _elements        |                 | elements         | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::Implicit |
|                  |                 | at the initial   | FixedStepIntegra |
|                  |                 | time             | tor              |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::Implicit |
|                  |                 | statistics after | FixedStepIntegra |
|                  |                 | integration      | tor              |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::Implicit |
|                  |                 | function solver  | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::Implicit |
| ns               |                 | passed to the    | FixedStepIntegra |
|                  |                 | NLP Solver       | tor              |
+------------------+-----------------+------------------+------------------+
| simplify         | OT_BOOL         | Implement as MX  | casadi::Implicit |
|                  |                 | Function (codege | FixedStepIntegra |
|                  |                 | neratable/serial | tor              |
|                  |                 | izable) default: |                  |
|                  |                 | false            |                  |
+------------------+-----------------+------------------+------------------+
| simplify_options | OT_DICT         | Any options to   | casadi::Implicit |
|                  |                 | pass to          | FixedStepIntegra |
|                  |                 | simplified form  | tor              |
|                  |                 | Function         |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::Implicit |
|                  |                 | time horizon     | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::Implicit |
|                  |                 | horizon          | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: collocation.hpp ";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::Integrator::rx() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::rz() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::get_reverse(casadi_int nadj,
const std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::Integrator::rq() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::rp() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::Integrator::sp_jac_rdae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (backward
problem)

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::OracleFunction::get_function() const  "

[INTERNAL]  Get list of dependency functions -1 Indicates irregularity.

";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Collocation::algebraic_state_output(const MX
&Z) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::ImplicitFixedStepIntegrator::getExplicit()
const  "

[INTERNAL]  Get explicit dynamics.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::Collocation::init(const Dict &opts)  "

[INTERNAL]  Initialize stage.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname)  "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::OracleFunction::finalize()  "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::Collocation::resetB(IntegratorMemory *mem,
double t, const double *rx, const double *rz, const double *rp) const  "

[INTERNAL]  Reset the backward problem and take time to tf.

";

%feature("docstring")  casadi::Integrator::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Integrator::aug_fwd(casadi_int nfwd) const  "

[INTERNAL]  Generate a augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::Integrator::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::Collocation::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FixedStepIntegrator::retreat(IntegratorMemory
*mem, double t, double *rx, double *rz, double *rq) const  "

[INTERNAL]  Retreat solution in time.

";

%feature("docstring")  casadi::Integrator::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::Collocation::reset(IntegratorMemory *mem,
double t, const double *x, const double *z, const double *p) const  "

[INTERNAL]  Reset the forward problem.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";


// File: classcasadi_1_1Concat.xml


// File: classcasadi_1_1Conic.xml
%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::Conic::init(const Dict &opts)  "

[INTERNAL]  Initialize Initialize and make the object ready for setting
arguments and evaluation. This method is typically called after setting
options but before evaluating. If passed to another class (in the
constructor), this class should invoke this function when initialized.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::Conic::generateNativeCode(std::ostream &file)
const  "

[INTERNAL]  Generate native code in the interfaced language for debugging

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::Conic::eval(const double **arg, double **res,
casadi_int *iw, double *w, void *mem) const final "

[INTERNAL]   Solve the QP.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(casadi_int
nadj, const std::string &name, const std::vector< std::string > &inames,
const std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::finalize()  "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::Conic::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(casadi_int
nfwd, const std::string &name, const std::vector< std::string > &inames,
const std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::Conic::get_default_in(casadi_int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::Conic::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Conic::set_work(void *mem, const double
**&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Conic::integer_support() const  "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::Conic::serialize_base_function() const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Conic::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(casadi_int
nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Conic::~Conic "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::PluginInterface< Conic  >::plugin_name()
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::Conic::Conic(const std::string &name, const
std::map< std::string, Sparsity > &st) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Conic::serialize_body(SerializingStream &s)
const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::SharedObjectInternal::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::Conic::check_inputs(const double *lbx, const
double *ubx, const double *lba, const double *uba) const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::Conic::serialize_type(SerializingStream &s)
const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::Conic::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::Conic::is_a(const std::string &type, bool
recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::Conic::solve(const double **arg, double
**res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]   Solve the QP.

";

%feature("docstring") casadi::casadi_solve "

Solve the QP.

";

%feature("docstring")  casadi::Conic::casadi_solve "

Solve the QP.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::Conic::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::Conic::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::Conic::psd_support() const  "

[INTERNAL]  Can psd constraints be treated.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Conic::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Conic::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Conic "

Internal class.

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| discrete         | OT_BOOLVECTOR   | Indicates which  | casadi::Conic    |
|                  |                 | of the variables |                  |
|                  |                 | are discrete,    |                  |
|                  |                 | i.e. integer-    |                  |
|                  |                 | valued           |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| error_on_fail    | OT_BOOL         | When the         | casadi::Conic    |
|                  |                 | numerical        |                  |
|                  |                 | process returns  |                  |
|                  |                 | unsuccessfully,  |                  |
|                  |                 | raise an error   |                  |
|                  |                 | (default false). |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_problem    | OT_BOOL         | Print a numeric  | casadi::Conic    |
|                  |                 | description of   |                  |
|                  |                 | the problem      |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: conic_impl.hpp ";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::Conic::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::has_forward(casadi_int
nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";


// File: classcasadi_1_1Constant.xml


// File: classcasadi_1_1ConstantDM.xml


// File: classcasadi_1_1ConstantFile.xml


// File: classcasadi_1_1ConstantMX.xml


// File: classcasadi_1_1ConstantSX.xml


// File: classcasadi_1_1Convexify.xml


// File: classcasadi_1_1DaeBuilder.xml


/*  Variables and equations  */

/* Public data members

*/

/*  Symbolic modeling  */

/* Formulate an optimal control problem

*/

/*  Manipulation  */

/* Reformulate the dynamic optimization problem.

*/

/*  Functions  */

/* Add or load auxiliary functions

*/

/*  Import and export  */ %feature("docstring")
casadi::DaeBuilder::add_s(const std::string &name=std::string(), casadi_int
n=1) "

Add a implicit state.

";

%feature("docstring")  casadi::DaeBuilder::add_fun(const std::string &name,
const std::vector< std::string > &arg, const std::vector< std::string >
&res, const Dict &opts=Dict()) "

Add a function from loaded expressions.

";

%feature("docstring")  casadi::DaeBuilder::add_fun(const Function &f) "

Add an already existing function.

";

%feature("docstring")  casadi::DaeBuilder::add_fun(const std::string &name,
const Importer &compiler, const Dict &opts=Dict()) "

Add an external function.

";

%feature("docstring")  casadi::DaeBuilder::sanity_check() const  "

Check if dimensions match.

";

%feature("docstring")  casadi::DaeBuilder::set_unit(const std::string &name,
const std::string &val) "

Set the unit for a component.

";

%feature("docstring") casadi::DaeBuilder::DaeBuilder() "

Default constructor.

";

%feature("docstring")  casadi::DaeBuilder::sort_dae() "

Sort the DAE and implicitly defined states.

";

%feature("docstring")  casadi::DaeBuilder::start(const std::string &name,
bool normalized=false) const  "

Get the (optionally normalized) value at time 0 by name.

";

%feature("docstring")  casadi::DaeBuilder::start(const MX &var, bool
normalized=false) const  "

Get the (optionally normalized) value(s) at time 0 by expression.

";

%feature("docstring")  casadi::DaeBuilder::add_aux(const std::string
&name=std::string(), casadi_int n=1) "

Add an auxiliary variable.

";

%feature("docstring")  casadi::DaeBuilder::min(const std::string &name, bool
normalized=false) const  "

Get the lower bound by name.

";

%feature("docstring") casadi::casadi_min "

Get the lower bound by name.

";

%feature("docstring")  casadi::DaeBuilder::casadi_min "

Get the lower bound by name.

";

%feature("docstring")  casadi::DaeBuilder::min(const MX &var, bool
normalized=false) const  "

Get the lower bound(s) by expression.

";

%feature("docstring") casadi::casadi_min "

Get the lower bound(s) by expression.

";

%feature("docstring")  casadi::DaeBuilder::casadi_min "

Get the lower bound(s) by expression.

";

%feature("docstring")  casadi::DaeBuilder::add_quad(const std::string &name,
const MX &new_quad) "

Add a quadrature equation.

";

%feature("docstring")  casadi::DaeBuilder::nominal(const std::string &name)
const  "

Get the nominal value by name.

";

%feature("docstring")  casadi::DaeBuilder::nominal(const MX &var) const  "

Get the nominal value(s) by expression.

";

%feature("docstring")  casadi::DaeBuilder::max(const std::string &name, bool
normalized=false) const  "

Get the upper bound by name.

";

%feature("docstring") casadi::casadi_max "

Get the upper bound by name.

";

%feature("docstring")  casadi::DaeBuilder::casadi_max "

Get the upper bound by name.

";

%feature("docstring")  casadi::DaeBuilder::max(const MX &var, bool
normalized=false) const  "

Get the upper bound(s) by expression.

";

%feature("docstring") casadi::casadi_max "

Get the upper bound(s) by expression.

";

%feature("docstring")  casadi::DaeBuilder::casadi_max "

Get the upper bound(s) by expression.

";

%feature("docstring")  casadi::DaeBuilder::make_semi_explicit() "

Transform the implicit DAE to a semi-explicit DAE.

";

%feature("docstring")  casadi::DaeBuilder::set_derivative_start(const
std::string &name, double val, bool normalized=false) "

Set the (optionally normalized) derivative value at time 0 by name.

";

%feature("docstring")  casadi::DaeBuilder::set_derivative_start(const MX
&var, const std::vector< double > &val, bool normalized=false) "

Set the (optionally normalized) derivative value(s) at time 0 by expression.

";

%feature("docstring")  casadi::DaeBuilder::add_lc(const std::string &name,
const std::vector< std::string > &f_out) "

Add a named linear combination of output expressions.

";

%feature("docstring")  casadi::DaeBuilder::sort_d() "

Sort dependent parameters.

";

%feature("docstring")  casadi::DaeBuilder::sort_alg() "

Sort the algebraic equations and algebraic states.

";

%feature("docstring")  casadi::DaeBuilder::fun(const std::string &name)
const  "

Get function by name.

";

%feature("docstring")  casadi::DaeBuilder::add_dae(const std::string &name,
const MX &new_dae) "

Add a differential-algebraic equation.

";

%feature("docstring")  casadi::DaeBuilder::make_explicit() "

Transform the implicit DAE or semi-explicit DAE into an explicit ODE.

";

%feature("docstring") casadi::DaeBuilder "

An initial-value problem in differential-algebraic equations.

Independent variables:
======================





::

  t:      time
  



Time-continuous variables:
==========================





::

  x:      states defined by ODE
  s:      implicitly defined states
  z:      algebraic variables
  u:      control signals
  q:      quadrature states
  y:      outputs
  



Time-constant variables:
========================





::

  p:      free parameters
  d:      dependent parameters
  



Dynamic constraints (imposed everywhere):
=========================================





::

  ODE                    \\\\dot{x} ==  ode(t, x, s, z, u, p, d)
  DAE or implicit ODE:         0 ==  dae(t, x, s, z, u, p, d, sdot)
  algebraic equations:         0 ==  alg(t, x, s, z, u, p, d)
  quadrature equations:  \\\\dot{q} == quad(t, x, s, z, u, p, d)
  dependent parameters:        d == ddef(t, x, s, z, u, p, d)
  output equations:            y == ydef(t, x, s, z, u, p, d)
  



Point constraints (imposed pointwise):
======================================





::

  Initial equations:           0 == init(t, x, s, z, u, p, d, sdot)
  



Joel Andersson

C++ includes: dae_builder.hpp ";

%feature("docstring")  casadi::DaeBuilder::add_q(const std::string
&name=std::string(), casadi_int n=1) "

Add a new quadrature state.

";

%feature("docstring")  casadi::DaeBuilder::add_p(const std::string
&name=std::string(), casadi_int n=1) "

Add a new parameter

";

%feature("docstring")  casadi::DaeBuilder::var(const std::string &name)
const  "

Get variable expression by name.

";

%feature("docstring")  casadi::DaeBuilder::add_u(const std::string
&name=std::string(), casadi_int n=1) "

Add a new control.

";

%feature("docstring")  casadi::DaeBuilder::has_fun(const std::string &name)
const  "

Does a particular function already exist?

";

%feature("docstring")  casadi::DaeBuilder::add_z(const std::string
&name=std::string(), casadi_int n=1) "

Add a new algebraic variable.

";

%feature("docstring")  casadi::DaeBuilder::add_y(const std::string &name,
const MX &new_ydef) "

Add a new output.

";

%feature("docstring")  casadi::DaeBuilder::add_x(const std::string
&name=std::string(), casadi_int n=1) "

Add a new differential state.

";

%feature("docstring")  casadi::DaeBuilder::eliminate_quad() "

Eliminate quadrature states and turn them into ODE states.

";

%feature("docstring")  casadi::DaeBuilder::derivative_start(const
std::string &name, bool normalized=false) const  "

Get the (optionally normalized) derivative value at time 0 by name.

";

%feature("docstring")  casadi::DaeBuilder::derivative_start(const MX &var,
bool normalized=false) const  "

Get the (optionally normalized) derivative value(s) at time 0 by expression.

";

%feature("docstring")  casadi::DaeBuilder::set_nominal(const std::string
&name, double val) "

Set the nominal value by name.

";

%feature("docstring")  casadi::DaeBuilder::set_nominal(const MX &var, const
std::vector< double > &val) "

Set the nominal value(s) by expression.

";

%feature("docstring")  casadi::DaeBuilder::parse_fmi(const std::string
&filename) "

Import existing problem from FMI/XML

";

%feature("docstring")  casadi::DaeBuilder::add_variable(const std::string
&name, const Variable &var) "

Add a variable.

";

%feature("docstring")  casadi::DaeBuilder::add_variable(const std::string
&name, casadi_int n=1) "

Add a new variable: returns corresponding symbolic expression.

";

%feature("docstring")  casadi::DaeBuilder::add_variable(const std::string
&name, const Sparsity &sp) "

Add a new variable: returns corresponding symbolic expression.

";

%feature("docstring")  casadi::DaeBuilder::add_d(const std::string &name,
const MX &new_ddef) "

Add a new dependent parameter.

";

%feature("docstring")  casadi::DaeBuilder::split_dae() "

Identify and separate the algebraic variables and equations in the DAE.

";

%feature("docstring")  casadi::DaeBuilder::set_guess(const std::string
&name, double val, bool normalized=false) "

Set the initial guess by name.

";

%feature("docstring")  casadi::DaeBuilder::set_guess(const MX &var, const
std::vector< double > &val, bool normalized=false) "

Set the initial guess(es) by expression.

";

%feature("docstring")  casadi::DaeBuilder::add_alg(const std::string &name,
const MX &new_alg) "

Add an algebraic equation.

";

%feature("docstring")  casadi::DaeBuilder::create(const std::string &fname,
const std::vector< std::string > &s_in, const std::vector< std::string >
&s_out) const  "

Construct a function object.

";

%feature("docstring")  casadi::DaeBuilder::guess(const std::string &name,
bool normalized=false) const  "

Get the initial guess by name.

";

%feature("docstring")  casadi::DaeBuilder::guess(const MX &var, bool
normalized=false) const  "

Get the initial guess(es) by expression.

";

%feature("docstring")  casadi::DaeBuilder::variable(const std::string &name)
"

Access a variable by name

";

%feature("docstring")  casadi::DaeBuilder::variable(const std::string &name)
const  "

Access a variable by name

";

%feature("docstring")  casadi::DaeBuilder::set_max(const std::string &name,
double val, bool normalized=false) "

Set the upper bound by name.

";

%feature("docstring")  casadi::DaeBuilder::set_max(const MX &var, const
std::vector< double > &val, bool normalized=false) "

Set the upper bound(s) by expression.

";

%feature("docstring")  casadi::DaeBuilder::eliminate_alg() "

Eliminate algebraic variables and equations transforming them into outputs.

";

%feature("docstring")  casadi::DaeBuilder::set_min(const std::string &name,
double val, bool normalized=false) "

Set the lower bound by name.

";

%feature("docstring")  casadi::DaeBuilder::set_min(const MX &var, const
std::vector< double > &val, bool normalized=false) "

Set the lower bound(s) by expression.

";

%feature("docstring")  casadi::DaeBuilder::set_start(const std::string
&name, double val, bool normalized=false) "

Set the (optionally normalized) value at time 0 by name.

";

%feature("docstring")  casadi::DaeBuilder::set_start(const MX &var, const
std::vector< double > &val, bool normalized=false) "

Set the (optionally normalized) value(s) at time 0 by expression.

";

%feature("docstring")  casadi::DaeBuilder::unit(const std::string &name)
const  "

Get the unit for a component.

";

%feature("docstring")  casadi::DaeBuilder::unit(const MX &var) const  "

Get the unit given a vector of symbolic variables (all units must be
identical)

";

%feature("docstring")  casadi::DaeBuilder::scale_variables() "

Scale the variables.

";

%feature("docstring")  casadi::DaeBuilder::split_d() "

Eliminate interdependencies amongst dependent parameters.

";

%feature("docstring")  casadi::DaeBuilder::eliminate_d() "

Eliminate dependent parameters.

";

%feature("docstring")  casadi::DaeBuilder::disp(std::ostream &stream, bool
more=false) const  "

Print representation.

";

%feature("docstring")  casadi::DaeBuilder::der(const std::string &name)
const  "

Get a derivative expression by name.

";

%feature("docstring")  casadi::DaeBuilder::der(const MX &var) const  "

Get a derivative expression by non-differentiated expression.

";

%feature("docstring")  casadi::DaeBuilder::type_name() const  "

Readable name of the class.

";

%feature("docstring")  casadi::DaeBuilder::scale_equations() "

Scale the implicit equations.

";

%feature("docstring")  casadi::DaeBuilder::get_str(bool more=false) const  "

Get string representation.

";

%feature("docstring")  casadi::DaeBuilder::add_ode(const std::string &name,
const MX &new_ode) "

Add an ordinary differential equation.

";


// File: classcasadi_1_1DenseMultiplication.xml


// File: classcasadi_1_1DenseTranspose.xml


// File: classcasadi_1_1Densify.xml


// File: classcasadi_1_1DeserializerBase.xml
%feature("docstring") casadi::DeserializerBase "

C++ includes: serializer.hpp ";


// File: classcasadi_1_1DeserializingStream.xml
%feature("docstring")
casadi::DeserializingStream::DeserializingStream(std::istream &in_s) "

Constructor.

";

%feature("docstring")  casadi::DeserializingStream::unpack(Sparsity &e) "

Reconstruct an object from the input stream.

If the reference is not of the same type as the object encoded in the
stream. an error will be raised.

";

%feature("docstring")  casadi::DeserializingStream::unpack(MX &e) "

Reconstruct an object from the input stream.

If the reference is not of the same type as the object encoded in the
stream. an error will be raised.

";

%feature("docstring")  casadi::DeserializingStream::unpack(SXElem &e) "

Reconstruct an object from the input stream.

If the reference is not of the same type as the object encoded in the
stream. an error will be raised.

";

%feature("docstring")  casadi::DeserializingStream::unpack(Linsol &e) "

Reconstruct an object from the input stream.

If the reference is not of the same type as the object encoded in the
stream. an error will be raised.

";

%feature("docstring")  casadi::DeserializingStream::unpack(MatrixCommon &e)
"

Reconstruct an object from the input stream.

If the reference is not of the same type as the object encoded in the
stream. an error will be raised.

";

%feature("docstring")  casadi::DeserializingStream::unpack(Function &e) "

Reconstruct an object from the input stream.

If the reference is not of the same type as the object encoded in the
stream. an error will be raised.

";

%feature("docstring")  casadi::DeserializingStream::unpack(Importer &e) "

Reconstruct an object from the input stream.

If the reference is not of the same type as the object encoded in the
stream. an error will be raised.

";

%feature("docstring")  casadi::DeserializingStream::unpack(GenericType &e) "

Reconstruct an object from the input stream.

If the reference is not of the same type as the object encoded in the
stream. an error will be raised.

";

%feature("docstring")  casadi::DeserializingStream::unpack(std::ostream &s)
"

Reconstruct an object from the input stream.

If the reference is not of the same type as the object encoded in the
stream. an error will be raised.

";

%feature("docstring")  casadi::DeserializingStream::unpack(Slice &e) "

Reconstruct an object from the input stream.

If the reference is not of the same type as the object encoded in the
stream. an error will be raised.

";

%feature("docstring")  casadi::DeserializingStream::unpack(int &e) "

Reconstruct an object from the input stream.

If the reference is not of the same type as the object encoded in the
stream. an error will be raised.

";

%feature("docstring")  casadi::DeserializingStream::unpack(bool &e) "

Reconstruct an object from the input stream.

If the reference is not of the same type as the object encoded in the
stream. an error will be raised.

";

%feature("docstring")  casadi::DeserializingStream::unpack(casadi_int &e) "

Reconstruct an object from the input stream.

If the reference is not of the same type as the object encoded in the
stream. an error will be raised.

";

%feature("docstring")  casadi::DeserializingStream::unpack(size_t &e) "

Reconstruct an object from the input stream.

If the reference is not of the same type as the object encoded in the
stream. an error will be raised.

";

%feature("docstring")  casadi::DeserializingStream::unpack(std::string &e) "

Reconstruct an object from the input stream.

If the reference is not of the same type as the object encoded in the
stream. an error will be raised.

";

%feature("docstring")  casadi::DeserializingStream::unpack(double &e) "

Reconstruct an object from the input stream.

If the reference is not of the same type as the object encoded in the
stream. an error will be raised.

";

%feature("docstring")  casadi::DeserializingStream::unpack(char &e) "

Reconstruct an object from the input stream.

If the reference is not of the same type as the object encoded in the
stream. an error will be raised.

";

%feature("docstring")  casadi::DeserializingStream::unpack(std::vector< T >
&e) "

Reconstruct an object from the input stream.

If the reference is not of the same type as the object encoded in the
stream. an error will be raised.

";

%feature("docstring")  casadi::DeserializingStream::unpack(std::map< K, V >
&e) "

Reconstruct an object from the input stream.

If the reference is not of the same type as the object encoded in the
stream. an error will be raised.

";

%feature("docstring")  casadi::DeserializingStream::unpack(std::pair< A, B >
&e) "

Reconstruct an object from the input stream.

If the reference is not of the same type as the object encoded in the
stream. an error will be raised.

";

%feature("docstring")  casadi::DeserializingStream::unpack(const std::string
&descr, T &e) "

Reconstruct an object from the input stream.

If the reference is not of the same type as the object encoded in the
stream. an error will be raised.

";

%feature("docstring") casadi::DeserializingStream "

Helper class for Serialization.

Joris Gillis

C++ includes: serializing_stream.hpp ";


// File: classcasadi_1_1Determinant.xml


// File: classcasadi_1_1Diagcat.xml


// File: classcasadi_1_1Diagsplit.xml


// File: classcasadi_1_1DllLibrary.xml
%feature("docstring")  casadi::ImporterInternal::plugin_name() const  "

[INTERNAL]  Queery plugin name.

";

%feature("docstring") casadi::DllLibrary::DllLibrary(const std::string
&bin_name) "

[INTERNAL] ";

%feature("docstring")  casadi::DllLibrary::init_handle() "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::DllLibrary::get_function(const std::string
&symname)  "

[INTERNAL]  Get a function pointer for numerical evaluation.

";

%feature("docstring")  casadi::ImporterInternal::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::ImporterInternal::to_text(const std::string
&cmd, casadi_int ind=-1) const  "

[INTERNAL]  Get entry as a text.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::ImporterInternal::get_meta(const std::string
&cmd, casadi_int ind=-1) const  "

[INTERNAL]  Get entry as a text.

";

%feature("docstring")  casadi::ImporterInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Print.

";

%feature("docstring")
casadi::ImporterInternal::serialize_body(SerializingStream &s) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ImporterInternal::body(const std::string
&symname) const  "

[INTERNAL]  Get the function body, if inlined.

";

%feature("docstring")  casadi::ImporterInternal::has_function(const
std::string &symname) const  "

[INTERNAL]  Get a function pointer for numerical evaluation.

";

%feature("docstring")  casadi::ImporterInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::DllLibrary "

Dynamically linked library.

Joel Andersson

>List of available options

+---------+---------+---------------------------------+--------------------+
|   Id    |  Type   |           Description           |      Used in       |
+=========+=========+=================================+====================+
| verbose | OT_BOOL | Verbose evaluation  for         | casadi::DllLibrary |
|         |         | debugging                       |                    |
+---------+---------+---------------------------------+--------------------+

Diagrams
--------



C++ includes: importer_internal.hpp ";

%feature("docstring")  casadi::ImporterInternal::read_meta(std::istream
&file, casadi_int &offset) "

[INTERNAL]  Get meta information.

";

%feature("docstring")  casadi::DllLibrary::class_name() const  "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::ImporterInternal::init(const Dict &opts) "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::DllLibrary::~DllLibrary "

[INTERNAL] ";

%feature("docstring")  casadi::DllLibrary::finalize()  "

[INTERNAL] ";

%feature("docstring")  casadi::ImporterInternal::serialize(SerializingStream
&s) const  "

[INTERNAL] ";

%feature("docstring")  casadi::DllLibrary::library() const  "

[INTERNAL]  Get library name.

";

%feature("docstring")  casadi::DllLibrary::can_have_meta() const  "

[INTERNAL]  Can meta information be read?

";

%feature("docstring")  casadi::ImporterInternal::read_external(const
std::string &sym, bool inlined, std::istream &file, casadi_int &offset) "

[INTERNAL]  Get an external function declaration.

";

%feature("docstring")  casadi::ImporterInternal::inlined(const std::string
&symname) const  "

[INTERNAL] ";

%feature("docstring")
casadi::ImporterInternal::serialize_type(SerializingStream &s) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ImporterInternal::has_meta(const std::string
&cmd, casadi_int ind=-1) const  "

[INTERNAL]  Does an entry exist?

";


// File: classcasadi_1_1Dot.xml


// File: classcasadi_1_1Dple.xml
%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::eval(const double **arg,
double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Dple "

Internal class.

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| const_dim        | OT_BOOL         | Assume constant  | casadi::Dple     |
|                  |                 | dimension of P   |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| eps_unstable     | OT_DOUBLE       | A margin for     | casadi::Dple     |
|                  |                 | unstability      |                  |
|                  |                 | detection        |                  |
+------------------+-----------------+------------------+------------------+
| error_unstable   | OT_BOOL         | Throw an         | casadi::Dple     |
|                  |                 | exception when   |                  |
|                  |                 | it is detected   |                  |
|                  |                 | that             |                  |
|                  |                 | Product(A_i,     |                  |
|                  |                 | i=N..1)has       |                  |
|                  |                 | eigenvalues      |                  |
|                  |                 | greater than     |                  |
|                  |                 | 1-eps_unstable   |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| pos_def          | OT_BOOL         | Assume P         | casadi::Dple     |
|                  |                 | positive         |                  |
|                  |                 | definite         |                  |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: dple_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::Dple::get_reverse(casadi_int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::Dple::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")
casadi::FunctionInternal::serialize_body(SerializingStream &s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::Dple::get_forward(casadi_int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::PluginInterface< Dple  >::plugin_name() const
"

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Dple::Dple(const std::string &name, const
SpDict &st) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::Dple::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(casadi_int
ind) const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::Dple::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::Dple::has_reverse(casadi_int nadj) const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::Dple::has_forward(casadi_int nfwd) const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::Dple::~Dple "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::Dple::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::Dple::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::finalize()  "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::ProtoFunction::serialize_base_function()
const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::Dple::init(const Dict &opts)  "

[INTERNAL]  Initialize Initialize and make the object ready for setting
arguments and evaluation. This method is typically called after setting
options but before evaluating. If passed to another class (in the
constructor), this class should invoke this function when initialized.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::Dple::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::SharedObjectInternal::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")
casadi::FunctionInternal::serialize_type(SerializingStream &s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::PluginInterface< Dple
>::serialize_type(SerializingStream &s) const "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::Dple::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";


// File: classcasadi_1_1Einstein.xml


// File: classcasadi_1_1Expm.xml
%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::finalize()  "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::get_name_in(casadi_int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")
casadi::FunctionInternal::serialize_body(SerializingStream &s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::Expm::Expm(const std::string &name, const
Sparsity &A) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::Expm::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::Expm::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Expm::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::Expm::init(const Dict &opts)  "

[INTERNAL]  Initialize Initialize and make the object ready for setting
arguments and evaluation. This method is typically called after setting
options but before evaluating. If passed to another class (in the
constructor), this class should invoke this function when initialized.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::Expm::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::PluginInterface< Expm  >::plugin_name() const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::ProtoFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::Expm::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::get_name_out(casadi_int i)
"

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::Expm::get_forward(casadi_int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Expm "

Internal class.

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| const_A          | OT_BOOL         | Assume A is      | casadi::Expm     |
|                  |                 | constant.        |                  |
|                  |                 | Default: false.  |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: expm_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")
casadi::FunctionInternal::serialize_type(SerializingStream &s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::PluginInterface< Expm
>::serialize_type(SerializingStream &s) const "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::ProtoFunction::serialize_base_function()
const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::Expm::has_reverse(casadi_int nadj) const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::Expm::getJacSparsity(casadi_int iind,
casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::Expm::get_reverse(casadi_int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::Expm::has_forward(casadi_int nfwd) const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::eval(const double **arg,
double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::Expm::~Expm "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(casadi_int
ind) const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::SharedObjectInternal::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";


// File: classcasadi_1_1External.xml
%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::External::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::External::has_forward(casadi_int nfwd) const
"

[INTERNAL]  Forward mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::External::serialize_base_function() const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::External::class_name() const  "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_out(casadi_int
i) "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::External::get_reverse(casadi_int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Reverse mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")
casadi::FunctionInternal::serialize_type(SerializingStream &s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::External::factory(const std::string &name,
const std::vector< std::string > &s_in, const std::vector< std::string >
&s_out, const Function::AuxOut &aux, const Dict &opts) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::External "

[INTERNAL] C++ includes: external_impl.hpp ";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::External::External(const std::string &name,
const Importer &li) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::External::codegen_declarations(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::External::init_external() "

[INTERNAL]  Initialize members that are unique.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::ProtoFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::External::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::External::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::External::~External "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::External::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::External::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::External::has_reverse(casadi_int nadj) const
"

[INTERNAL]  Reverse mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::External::has_jacobian() const  "

[INTERNAL]  Full Jacobian.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::External::codegen_body(CodeGenerator &g)
const  "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::External::any_symbol_found() const  "

[INTERNAL]  Any symbol found?

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::eval(const double **arg,
double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::External::get_jacobian(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Full Jacobian.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_in(casadi_int
i) "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::External::get_default_in(casadi_int i) const
"

[INTERNAL]  Default inputs.

";

%feature("docstring")  casadi::FunctionInternal::finalize()  "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::External::get_forward(casadi_int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Forward mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::External::serialize_body(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";


// File: classcasadi_1_1Factory.xml
%feature("docstring")  casadi::Factory< MatType >::has_in(const std::string
&s) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Factory< MatType >::add_output(const
std::string &s, const MatType &e, bool is_diff) "

[INTERNAL] ";

%feature("docstring")  casadi::Factory< MatType >::calculate(const Dict
&opts=Dict()) "

[INTERNAL] ";

%feature("docstring")  casadi::Factory< MatType >::get_output(const
std::string &s) "

[INTERNAL] ";

%feature("docstring") casadi::Factory "

[INTERNAL] C++ includes: factory.hpp ";

%feature("docstring")  casadi::Factory< MatType >::request_output(const
std::string &s) "

[INTERNAL] ";

%feature("docstring")  casadi::Factory< MatType >::get_input(const
std::string &s) "

[INTERNAL] ";

%feature("docstring")  casadi::Factory< MatType >::add_input(const
std::string &s, const MatType &e, bool is_diff) "

[INTERNAL] ";

%feature("docstring")  casadi::Factory< MatType >::has_out(const std::string
&s) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Factory< MatType >::request_input(const
std::string &s) "

[INTERNAL] ";

%feature("docstring")  casadi::Factory< MatType >::name_out() const  "

[INTERNAL] ";

%feature("docstring") casadi::Factory< MatType >::Factory(const
Function::AuxOut &aux) "

[INTERNAL] ";

%feature("docstring")  casadi::Factory< MatType >::name_in() const  "

[INTERNAL] ";


// File: classcasadi_1_1FastNewton.xml
%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::Rootfinder::ad_forward(const std::vector< MX
> &arg, const std::vector< MX > &res, const std::vector< std::vector< MX > >
&fseed, std::vector< std::vector< MX > > &fsens, bool always_inline, bool
never_inline) const  "

[INTERNAL]  Create call to (cached) derivative function, forward mode.

";

%feature("docstring")  casadi::FastNewton::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::Rootfinder::sp_forward(const bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FastNewton::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FastNewton::solve(void *mem) const  "

[INTERNAL]   Solve the system of equations and calculate derivatives.

";

%feature("docstring") casadi::casadi_solve "

Solve the system of equations and calculate derivatives.

";

%feature("docstring")  casadi::FastNewton::casadi_solve "

Solve the system of equations and calculate derivatives.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::Rootfinder::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FastNewton::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::Rootfinder::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::Rootfinder::eval(const double **arg, double
**res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::FastNewton::~FastNewton "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring") casadi::FastNewton "

'fast_newton' plugin for Rootfinder

Implements simple newton iterations to solve an implicit function.

>List of available options

+------------+-----------+-------------------------------------------------+
|     Id     |   Type    |                   Description                   |
+============+===========+=================================================+
| abstol     | OT_DOUBLE | Stopping criterion tolerance on ||g||__inf)     |
+------------+-----------+-------------------------------------------------+
| abstolStep | OT_DOUBLE | Stopping criterion tolerance on step size       |
+------------+-----------+-------------------------------------------------+
| max_iter   | OT_INT    | Maximum number of Newton iterations to perform  |
|            |           | before returning.                               |
+------------+-----------+-------------------------------------------------+

Joris Gillis

>List of available options

+-------------------+--------------+-------------------+-------------------+
|        Id         |     Type     |    Description    |      Used in      |
+===================+==============+===================+===================+
| abstol            | OT_DOUBLE    | Stopping          | casadi::FastNewto |
|                   |              | criterion         | n                 |
|                   |              | tolerance on      |                   |
|                   |              | ||g||__inf)       |                   |
+-------------------+--------------+-------------------+-------------------+
| abstolStep        | OT_DOUBLE    | Stopping          | casadi::FastNewto |
|                   |              | criterion         | n                 |
|                   |              | tolerance on step |                   |
|                   |              | size              |                   |
+-------------------+--------------+-------------------+-------------------+
| constraints       | OT_INTVECTOR | Constrain the     | casadi::Rootfinde |
|                   |              | unknowns. 0       | r                 |
|                   |              | (default): no     |                   |
|                   |              | constraint on ui, |                   |
|                   |              | 1: ui >= 0.0, -1: |                   |
|                   |              | ui <= 0.0, 2: ui  |                   |
|                   |              | > 0.0, -2: ui <   |                   |
|                   |              | 0.0.              |                   |
+-------------------+--------------+-------------------+-------------------+
| error_on_fail     | OT_BOOL      | When the          | casadi::Rootfinde |
|                   |              | numerical process | r                 |
|                   |              | returns           |                   |
|                   |              | unsuccessfully,   |                   |
|                   |              | raise an error    |                   |
|                   |              | (default false).  |                   |
+-------------------+--------------+-------------------+-------------------+
| implicit_input    | OT_INT       | Index of the      | casadi::Rootfinde |
|                   |              | input that        | r                 |
|                   |              | corresponds to    |                   |
|                   |              | the actual root-  |                   |
|                   |              | finding           |                   |
+-------------------+--------------+-------------------+-------------------+
| implicit_output   | OT_INT       | Index of the      | casadi::Rootfinde |
|                   |              | output that       | r                 |
|                   |              | corresponds to    |                   |
|                   |              | the actual root-  |                   |
|                   |              | finding           |                   |
+-------------------+--------------+-------------------+-------------------+
| jacobian_function | OT_FUNCTION  | Function object   | casadi::Rootfinde |
|                   |              | for calculating   | r                 |
|                   |              | the Jacobian      |                   |
|                   |              | (autogenerated by |                   |
|                   |              | default)          |                   |
+-------------------+--------------+-------------------+-------------------+
| linear_solver     | OT_STRING    | User-defined      | casadi::Rootfinde |
|                   |              | linear solver     | r                 |
|                   |              | class. Needed for |                   |
|                   |              | sensitivities.    |                   |
+-------------------+--------------+-------------------+-------------------+
| linear_solver_opt | OT_DICT      | Options to be     | casadi::Rootfinde |
| ions              |              | passed to the     | r                 |
|                   |              | linear solver.    |                   |
+-------------------+--------------+-------------------+-------------------+
| max_iter          | OT_INT       | Maximum number of | casadi::FastNewto |
|                   |              | Newton iterations | n                 |
|                   |              | to perform before |                   |
|                   |              | returning.        |                   |
+-------------------+--------------+-------------------+-------------------+

Diagrams
--------



C++ includes: fast_newton.hpp ";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FastNewton::codegen_body(CodeGenerator &g)
const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FastNewton::set_work(void *mem, const double
**&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::Rootfinder::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FastNewton::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::Rootfinder::get_reverse(casadi_int nadj,
const std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FastNewton::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Rootfinder::serialize_base_function() const
"

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::OracleFunction::finalize()  "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FastNewton::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Rootfinder::get_forward(casadi_int nfwd,
const std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::OracleFunction::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::Rootfinder::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=nullptr) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FastNewton::plugin_name() const  "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::Rootfinder::has_reverse(casadi_int nadj)
const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(casadi_int
ind) const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::FastNewton::FastNewton(const std::string
&name, const Function &f) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")
casadi::FastNewton::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname)  "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::Rootfinder::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::OracleFunction::get_function() const  "

[INTERNAL]  Get list of dependency functions -1 Indicates irregularity.

";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Rootfinder::ad_reverse(const std::vector< MX
> &arg, const std::vector< MX > &res, const std::vector< std::vector< MX > >
&aseed, std::vector< std::vector< MX > > &asens, bool always_inline, bool
never_inline) const  "

[INTERNAL]  Create call to (cached) derivative function, reverse mode.

";

%feature("docstring")  casadi::Rootfinder::has_forward(casadi_int nfwd)
const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::Rootfinder::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Rootfinder::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Rootfinder::serialize_type(SerializingStream
&s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::Rootfinder::sp_reverse(bvec_t **arg, bvec_t
**res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FastNewton::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Rootfinder::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FastNewton::serialize_body(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::Rootfinder::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";


// File: classcasadi_1_1FileDeserializer.xml
%feature("docstring") casadi::FileDeserializer::FileDeserializer(const
std::string &fname) "

Advanced deserialization of CasADi objects.

FileSerializer

";

%feature("docstring") casadi::FileDeserializer "

C++ includes: serializer.hpp ";


// File: classcasadi_1_1FileSerializer.xml
%feature("docstring") casadi::FileSerializer::FileSerializer(const
std::string &fname, const Dict &opts=Dict()) "

Advanced serialization of CasADi objects.

StringSerializer, FileDeserializer

";

%feature("docstring") casadi::FileSerializer "

C++ includes: serializer.hpp ";


// File: classcasadi_1_1Find.xml


// File: classcasadi_1_1FiniteDiff.xml
%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::FiniteDiff "

[INTERNAL]  Calculate derivative using finite differences Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| abstol           | OT_DOUBLE       | Accuracy of      | casadi::FiniteDi |
|                  |                 | function outputs | ff               |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| h                | OT_DOUBLE       | Step size        | casadi::FiniteDi |
|                  |                 | [default:        | ff               |
|                  |                 | computed from    |                  |
|                  |                 | abstol]          |                  |
+------------------+-----------------+------------------+------------------+
| h_iter           | OT_INT          | Number of        | casadi::FiniteDi |
|                  |                 | iterations to    | ff               |
|                  |                 | improve on the   |                  |
|                  |                 | step-size        |                  |
|                  |                 | [default: 1 if   |                  |
|                  |                 | error estimate   |                  |
|                  |                 | available,       |                  |
|                  |                 | otherwise 0]     |                  |
+------------------+-----------------+------------------+------------------+
| h_max            | OT_DOUBLE       | Maximum step     | casadi::FiniteDi |
|                  |                 | size [default 0] | ff               |
+------------------+-----------------+------------------+------------------+
| h_min            | OT_DOUBLE       | Minimum step     | casadi::FiniteDi |
|                  |                 | size [default    | ff               |
|                  |                 | inf]             |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reltol           | OT_DOUBLE       | Accuracy of      | casadi::FiniteDi |
|                  |                 | function inputs  | ff               |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| second_order_ste | OT_DOUBLE       | Second order     | casadi::FiniteDi |
| psize            |                 | perturbation     | ff               |
|                  |                 | size [default:   |                  |
|                  |                 | 1e-3]            |                  |
+------------------+-----------------+------------------+------------------+
| smoothing        | OT_DOUBLE       | Smoothing        | casadi::FiniteDi |
|                  |                 | regularization   | ff               |
|                  |                 | [default:        |                  |
|                  |                 | machine          |                  |
|                  |                 | precision]       |                  |
+------------------+-----------------+------------------+------------------+
| u_aim            | OT_DOUBLE       | Target ratio of  | casadi::FiniteDi |
|                  |                 | roundoff error   | ff               |
|                  |                 | to truncation    |                  |
|                  |                 | error [default:  |                  |
|                  |                 | 100.]            |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: finite_differences.hpp ";

%feature("docstring")  casadi::FiniteDiff::get_default_in(casadi_int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")
casadi::FunctionInternal::serialize_type(SerializingStream &s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::FiniteDiff::eval(const double **arg, double
**res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FiniteDiff::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::FiniteDiff::FiniteDiff(const std::string
&name, casadi_int n) "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")
casadi::FiniteDiff::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::finalize()  "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::SharedObjectInternal::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FiniteDiff::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::ProtoFunction::serialize_base_function()
const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::FiniteDiff::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FiniteDiff::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FiniteDiff::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FiniteDiff::uses_output() const  "

[INTERNAL]  Is the scheme using the (nondifferentiated) output?

";

%feature("docstring")
casadi::FunctionInternal::serialize_body(SerializingStream &s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FiniteDiff::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(casadi_int
nadj, const std::string &name, const std::vector< std::string > &inames,
const std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FiniteDiff::codegen_body(CodeGenerator &g)
const  "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::ProtoFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FiniteDiff::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::has_forward(casadi_int
nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::FiniteDiff::~FiniteDiff "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FiniteDiff::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(casadi_int
nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FiniteDiff::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(casadi_int
nfwd, const std::string &name, const std::vector< std::string > &inames,
const std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";


// File: classcasadi_1_1FixedStepIntegrator.xml
%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::SharedObjectInternal::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=nullptr) const  "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname)  "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::Integrator::aug_fwd(casadi_int nfwd) const  "

[INTERNAL]  Generate a augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::Integrator::z() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::x() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::Integrator::sp_reverse(bvec_t **arg, bvec_t
**res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::Integrator::p() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::q() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FixedStepIntegrator::init_mem(void *mem)
const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::Integrator::t() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::Integrator::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::Integrator::get_reverse(casadi_int nadj,
const std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::Integrator::serialize_base_function() const
"

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FixedStepIntegrator::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::Integrator::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Integrator::setStopTime(IntegratorMemory
*mem, double tf) const  "

[INTERNAL]  Set stop time for the integration.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FixedStepIntegrator::resetB(IntegratorMemory
*mem, double t, const double *rx, const double *rz, const double *rp) const
"

[INTERNAL]  Reset the backward problem and take time to tf.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FixedStepIntegrator::create_advanced(const
Dict &opts)  "

[INTERNAL]  Helper for a more powerful 'integrator' factory

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_default_in(casadi_int
ind) const  "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::FixedStepIntegrator::~FixedStepIntegrator "

[INTERNAL]  Destructor.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FixedStepIntegrator::advance(IntegratorMemory
*mem, double t, double *x, double *z, double *q) const  "

[INTERNAL]  Advance solution in time.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Integrator::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FixedStepIntegrator::retreat(IntegratorMemory
*mem, double t, double *rx, double *rz, double *rq) const  "

[INTERNAL]  Retreat solution in time.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::Integrator::serialize_type(SerializingStream
&s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::OracleFunction::finalize()  "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FixedStepIntegrator::setupFG() "

[INTERNAL]  Setup F and G.

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::Integrator::algebraic_state_init(const MX
&x0, const MX &z0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FixedStepIntegrator::init(const Dict &opts)
"

[INTERNAL]  Initialize stage.

";

%feature("docstring")  casadi::Integrator::sp_jac_rdae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (backward
problem)

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::FixedStepIntegrator::FixedStepIntegrator(const
std::string &name, const Function &dae) "

[INTERNAL]  Constructor.

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::Integrator::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::FixedStepIntegrator "



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::FixedSte |
| s                |                 | passed down to   | pIntegrator      |
|                  |                 | the augmented    |                  |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::FixedSte |
|                  |                 | SX expressions   | pIntegrator      |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::FixedSte |
|                  |                 |                  | pIntegrator      |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::FixedSte |
| _elements        |                 | elements         | pIntegrator      |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::FixedSte |
|                  |                 | at the initial   | pIntegrator      |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::FixedSte |
|                  |                 | statistics after | pIntegrator      |
|                  |                 | integration      |                  |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::FixedSte |
|                  |                 | function solver  | pIntegrator      |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::FixedSte |
| ns               |                 | passed to the    | pIntegrator      |
|                  |                 | NLP Solver       |                  |
+------------------+-----------------+------------------+------------------+
| show_eval_warnin | OT_BOOL         | Show warnings    | casadi::OracleFu |
| gs               |                 | generated from   | nction           |
|                  |                 | function         |                  |
|                  |                 | evaluations      |                  |
|                  |                 | [true]           |                  |
+------------------+-----------------+------------------+------------------+
| simplify         | OT_BOOL         | Implement as MX  | casadi::FixedSte |
|                  |                 | Function (codege | pIntegrator      |
|                  |                 | neratable/serial |                  |
|                  |                 | izable) default: |                  |
|                  |                 | false            |                  |
+------------------+-----------------+------------------+------------------+
| simplify_options | OT_DICT         | Any options to   | casadi::FixedSte |
|                  |                 | pass to          | pIntegrator      |
|                  |                 | simplified form  |                  |
|                  |                 | Function         |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::FixedSte |
|                  |                 | time horizon     | pIntegrator      |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::FixedSte |
|                  |                 | horizon          | pIntegrator      |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: integrator_impl.hpp ";

%feature("docstring")  casadi::Integrator::aug_adj(casadi_int nadj) const  "

[INTERNAL]  Generate a augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FixedStepIntegrator::free_mem(void *mem)
const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::Integrator::has_forward(casadi_int nfwd)
const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::Integrator::eval(const double **arg, double
**res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  evaluate

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::Integrator::get_forward(casadi_int nfwd,
const std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::Integrator::sp_jac_dae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (forward
problem)

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FixedStepIntegrator::getExplicitB() const  "

[INTERNAL]  Get explicit dynamics (backward problem)

";

%feature("docstring")  casadi::FixedStepIntegrator::getExplicit() const  "

[INTERNAL]  Get explicit dynamics.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::OracleFunction::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FixedStepIntegrator::reset(IntegratorMemory
*mem, double t, const double *x, const double *z, const double *p) const  "

[INTERNAL]  Reset the forward problem.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::Integrator::algebraic_state_output(const MX
&Z) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::Integrator::has_reverse(casadi_int nadj)
const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::Integrator::print_stats(IntegratorMemory
*mem) const  "

[INTERNAL]  Print solver statistics.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")
casadi::FixedStepIntegrator::serialize_body(SerializingStream &s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::Integrator::sp_forward(const bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::Integrator::rz() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Integrator::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::OracleFunction::get_function() const  "

[INTERNAL]  Get list of dependency functions -1 Indicates irregularity.

";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::Integrator::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FixedStepIntegrator::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::PluginInterface< Integrator  >::plugin_name()
const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Integrator::rx() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::Integrator::getDerivativeOptions(bool fwd)
const  "

[INTERNAL]  Set solver specific options to generated augmented integrators.

";

%feature("docstring")  casadi::Integrator::rq() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::rp() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";


// File: classcasadi_1_1ForwardDiff.xml
%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FiniteDiff::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::ForwardDiff::calc_stepsize(double abstol)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::ForwardDiff::get_forward(casadi_int nfwd,
const std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Second order derivatives.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::ProtoFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_reverse(casadi_int
nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::ForwardDiff::class_name() const  "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::ForwardDiff "

[INTERNAL]  Calculate derivative using forward differences Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| abstol           | OT_DOUBLE       | Accuracy of      | casadi::ForwardD |
|                  |                 | function outputs | iff              |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| h                | OT_DOUBLE       | Step size        | casadi::ForwardD |
|                  |                 | [default:        | iff              |
|                  |                 | computed from    |                  |
|                  |                 | abstol]          |                  |
+------------------+-----------------+------------------+------------------+
| h_iter           | OT_INT          | Number of        | casadi::ForwardD |
|                  |                 | iterations to    | iff              |
|                  |                 | improve on the   |                  |
|                  |                 | step-size        |                  |
|                  |                 | [default: 1 if   |                  |
|                  |                 | error estimate   |                  |
|                  |                 | available,       |                  |
|                  |                 | otherwise 0]     |                  |
+------------------+-----------------+------------------+------------------+
| h_max            | OT_DOUBLE       | Maximum step     | casadi::ForwardD |
|                  |                 | size [default 0] | iff              |
+------------------+-----------------+------------------+------------------+
| h_min            | OT_DOUBLE       | Minimum step     | casadi::ForwardD |
|                  |                 | size [default    | iff              |
|                  |                 | inf]             |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reltol           | OT_DOUBLE       | Accuracy of      | casadi::ForwardD |
|                  |                 | function inputs  | iff              |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| second_order_ste | OT_DOUBLE       | Second order     | casadi::ForwardD |
| psize            |                 | perturbation     | iff              |
|                  |                 | size [default:   |                  |
|                  |                 | 1e-3]            |                  |
+------------------+-----------------+------------------+------------------+
| smoothing        | OT_DOUBLE       | Smoothing        | casadi::ForwardD |
|                  |                 | regularization   | iff              |
|                  |                 | [default:        |                  |
|                  |                 | machine          |                  |
|                  |                 | precision]       |                  |
+------------------+-----------------+------------------+------------------+
| u_aim            | OT_DOUBLE       | Target ratio of  | casadi::ForwardD |
|                  |                 | roundoff error   | iff              |
|                  |                 | to truncation    |                  |
|                  |                 | error [default:  |                  |
|                  |                 | 100.]            |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: finite_differences.hpp ";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::ForwardDiff::calc_fd(double **yk, double *y0,
double *J, double h) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ForwardDiff::calc_fd() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")
casadi::FunctionInternal::serialize_type(SerializingStream &s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::ForwardDiff::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FiniteDiff::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FiniteDiff::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::ForwardDiff::~ForwardDiff "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(casadi_int
nadj, const std::string &name, const std::vector< std::string > &inames,
const std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::ForwardDiff::pert(const std::string &k) const
"

[INTERNAL] ";

%feature("docstring")  casadi::ForwardDiff::pert(casadi_int k, double h)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::FiniteDiff::eval(const double **arg, double
**res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::ForwardDiff::ForwardDiff(const std::string
&name, casadi_int n) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FiniteDiff::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::finalize()  "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::ForwardDiff::has_err() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::ForwardDiff::has_forward(casadi_int nfwd)
const  "

[INTERNAL]  Second order derivatives.

";

%feature("docstring")
casadi::FiniteDiff::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FiniteDiff::uses_output() const  "

[INTERNAL]  Is the scheme using the (nondifferentiated) output?

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")
casadi::FunctionInternal::serialize_body(SerializingStream &s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FiniteDiff::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FiniteDiff::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FiniteDiff::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FiniteDiff::codegen_body(CodeGenerator &g)
const  "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FiniteDiff::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FiniteDiff::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::ProtoFunction::serialize_base_function()
const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::ForwardDiff::n_pert() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FiniteDiff::get_default_in(casadi_int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";


// File: classcasadi_1_1FStats.xml
%feature("docstring")  casadi::FStats::tic() "

[INTERNAL]  Start timing.

";

%feature("docstring")  casadi::FStats::reset() "

[INTERNAL]  Reset the statistics.

";

%feature("docstring") casadi::FStats::FStats() "

[INTERNAL]  Constructor.

";

%feature("docstring") casadi::FStats "

[INTERNAL]  Timer class

FStats hack; hack.tic(); .... hack.toc();

C++ includes: timing.hpp ";

%feature("docstring")  casadi::FStats::toc() "

[INTERNAL]  Stop timing.

";


// File: classcasadi_1_1Function.xml
%feature("docstring")  casadi::Function::n_instructions() const  "

Number of instruction in the algorithm (SXFunction/MXFunction)

";

%feature("docstring")  casadi::Function::nnz_in() const  "

Get number of input nonzeros.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::nnz_in(casadi_int ind) const  "

Get number of input nonzeros.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::nnz_in(const std::string &iname)
const  "

Get number of input nonzeros.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::has_spfwd() const  "

Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::Function::name() const  "

Name of the function.

";

%feature("docstring")  casadi::Function::jacobian() const  "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::casadi_jacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::casadi_jacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring")  casadi::Function::stats(int mem=0) const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Function::fold(casadi_int N, const Dict
&opts=Dict()) const  "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



Mapaccum has the following benefits over writing an equivalent for- loop:
much faster at construction time

potentially much faster compilation times (for codegen)

offers a trade-off between memory and evaluation time

The base (settable through the options dictionary, default 10), is used to
create a tower of function calls, containing unrolled for- loops of length
maximum base.

This technique is much more scalable in terms of memory-usage, but slightly
slower at evaluation, than a plain for-loop. The effect is similar to that
of a for-loop with a check-pointing instruction after each chunk of
iterations with size base.

Set base to -1 to unroll all the way; no gains in memory efficiency here.

";

%feature("docstring")  casadi::Function::sparsity_out(casadi_int ind) const
"

Get sparsity of a given output.

";

%feature("docstring")  casadi::Function::sparsity_out(const std::string
&iname) const  "

Get sparsity of a given output.

";

%feature("docstring")  casadi::Function::oracle() const  "

Get oracle.

";

%feature("docstring")  casadi::Function::instruction_id(casadi_int k) const
"

Identifier index of the instruction (SXFunction/MXFunction)

";

%feature("docstring")  casadi::Function::wrap() const  "

Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::Function::wrap_as_needed(const Dict &opts)
const  "

Wrap in a Function with options.

";

%feature("docstring")  casadi::Function::nz_from_out(const std::vector< DM >
&arg) const  "

Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::Function::convert_out(const std::vector< DM >
&arg) const  "

Convert from/to input/output lists/map.

Will raise an error when an unknown key is used or a list has incorrect
size. Does not perform sparsity checking.

";

%feature("docstring")  casadi::Function::convert_out(const DMDict &arg)
const  "

Convert from/to input/output lists/map.

Will raise an error when an unknown key is used or a list has incorrect
size. Does not perform sparsity checking.

";

%feature("docstring")  casadi::Function::convert_out(const std::vector< SX >
&arg) const  "

Convert from/to input/output lists/map.

Will raise an error when an unknown key is used or a list has incorrect
size. Does not perform sparsity checking.

";

%feature("docstring")  casadi::Function::convert_out(const SXDict &arg)
const  "

Convert from/to input/output lists/map.

Will raise an error when an unknown key is used or a list has incorrect
size. Does not perform sparsity checking.

";

%feature("docstring")  casadi::Function::convert_out(const std::vector< MX >
&arg) const  "

Convert from/to input/output lists/map.

Will raise an error when an unknown key is used or a list has incorrect
size. Does not perform sparsity checking.

";

%feature("docstring")  casadi::Function::convert_out(const MXDict &arg)
const  "

Convert from/to input/output lists/map.

Will raise an error when an unknown key is used or a list has incorrect
size. Does not perform sparsity checking.

";

%feature("docstring")  casadi::Function::numel_out() const  "

Get number of output elements.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::numel_out(casadi_int ind) const  "

Get number of output elements.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::numel_out(const std::string &oname)
const  "

Get number of output elements.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::print_dimensions(std::ostream
&stream=casadi::uout()) const  "

Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::SharedObject::get_str(bool more=false) const
"

Get string representation.

";

%feature("docstring")  casadi::Function::get_free() const  "

Get free variables as a string.

";

%feature("docstring")  casadi::SharedObject::disp(std::ostream &stream, bool
more=false) const  "

Print a description of the object.

";

%feature("docstring")  casadi::Function::name_out() const  "

Get output scheme.

";

%feature("docstring")  casadi::Function::name_out(casadi_int ind) const  "

Get output scheme name by index.

";

%feature("docstring")  casadi::Function::n_in() const  "

Get the number of function inputs.

";

%feature("docstring")  casadi::Function::mx_out(casadi_int ind) const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::mx_out(const std::string &oname)
const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::mx_out() const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::max_in(casadi_int ind) const  "

Get largest input value.

";

%feature("docstring")  casadi::Function::generate_dependencies(const
std::string &fname, const Dict &opts=Dict()) const  "

Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::Function::free_sx() const  "

Get all the free variables of the function.

";

%feature("docstring")  casadi::Function::mapaccum(const std::string &name,
casadi_int N, const Dict &opts=Dict()) const  "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



Mapaccum has the following benefits over writing an equivalent for- loop:
much faster at construction time

potentially much faster compilation times (for codegen)

offers a trade-off between memory and evaluation time

The base (settable through the options dictionary, default 10), is used to
create a tower of function calls, containing unrolled for- loops of length
maximum base.

This technique is much more scalable in terms of memory-usage, but slightly
slower at evaluation, than a plain for-loop. The effect is similar to that
of a for-loop with a check-pointing instruction after each chunk of
iterations with size base.

Set base to -1 to unroll all the way; no gains in memory efficiency here.

";

%feature("docstring")  casadi::Function::mapaccum(const std::string &name,
casadi_int N, casadi_int n_accum, const Dict &opts=Dict()) const  "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



Mapaccum has the following benefits over writing an equivalent for- loop:
much faster at construction time

potentially much faster compilation times (for codegen)

offers a trade-off between memory and evaluation time

The base (settable through the options dictionary, default 10), is used to
create a tower of function calls, containing unrolled for- loops of length
maximum base.

This technique is much more scalable in terms of memory-usage, but slightly
slower at evaluation, than a plain for-loop. The effect is similar to that
of a for-loop with a check-pointing instruction after each chunk of
iterations with size base.

Set base to -1 to unroll all the way; no gains in memory efficiency here.

";

%feature("docstring")  casadi::Function::mapaccum(const std::string &name,
casadi_int n, const std::vector< casadi_int > &accum_in, const std::vector<
casadi_int > &accum_out, const Dict &opts=Dict()) const  "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



Mapaccum has the following benefits over writing an equivalent for- loop:
much faster at construction time

potentially much faster compilation times (for codegen)

offers a trade-off between memory and evaluation time

The base (settable through the options dictionary, default 10), is used to
create a tower of function calls, containing unrolled for- loops of length
maximum base.

This technique is much more scalable in terms of memory-usage, but slightly
slower at evaluation, than a plain for-loop. The effect is similar to that
of a for-loop with a check-pointing instruction after each chunk of
iterations with size base.

Set base to -1 to unroll all the way; no gains in memory efficiency here.

";

%feature("docstring")  casadi::Function::mapaccum(const std::string &name,
casadi_int n, const std::vector< std::string > &accum_in, const std::vector<
std::string > &accum_out, const Dict &opts=Dict()) const  "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



Mapaccum has the following benefits over writing an equivalent for- loop:
much faster at construction time

potentially much faster compilation times (for codegen)

offers a trade-off between memory and evaluation time

The base (settable through the options dictionary, default 10), is used to
create a tower of function calls, containing unrolled for- loops of length
maximum base.

This technique is much more scalable in terms of memory-usage, but slightly
slower at evaluation, than a plain for-loop. The effect is similar to that
of a for-loop with a check-pointing instruction after each chunk of
iterations with size base.

Set base to -1 to unroll all the way; no gains in memory efficiency here.

";

%feature("docstring")  casadi::Function::mapaccum(casadi_int N, const Dict
&opts=Dict()) const  "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



Mapaccum has the following benefits over writing an equivalent for- loop:
much faster at construction time

potentially much faster compilation times (for codegen)

offers a trade-off between memory and evaluation time

The base (settable through the options dictionary, default 10), is used to
create a tower of function calls, containing unrolled for- loops of length
maximum base.

This technique is much more scalable in terms of memory-usage, but slightly
slower at evaluation, than a plain for-loop. The effect is similar to that
of a for-loop with a check-pointing instruction after each chunk of
iterations with size base.

Set base to -1 to unroll all the way; no gains in memory efficiency here.

";

%feature("docstring") casadi::Function::Function(const std::string &name,
const std::vector< SX > &ex_in, const std::vector< SX > &ex_out, const Dict
&opts=Dict()) "

Construct an SX function.

";

%feature("docstring") casadi::Function::Function(const std::string &name,
const std::vector< SX > &ex_in, const std::vector< SX > &ex_out, const
std::vector< std::string > &name_in, const std::vector< std::string >
&name_out, const Dict &opts=Dict()) "

Construct an SX function.

";

%feature("docstring") casadi::Function::Function(const std::string &name,
const std::map< std::string, SX > &dict, const std::vector< std::string >
&name_in, const std::vector< std::string > &name_out, const Dict
&opts=Dict()) "

Construct an SX function.

";

%feature("docstring") casadi::Function::Function(const std::string &name,
const std::vector< MX > &ex_in, const std::vector< MX > &ex_out, const Dict
&opts=Dict()) "

Construct an MX function.

";

%feature("docstring") casadi::Function::Function(const std::string &name,
const std::vector< MX > &ex_in, const std::vector< MX > &ex_out, const
std::vector< std::string > &name_in, const std::vector< std::string >
&name_out, const Dict &opts=Dict()) "

Construct an MX function.

";

%feature("docstring") casadi::Function::Function(const std::string &name,
const std::map< std::string, MX > &dict, const std::vector< std::string >
&name_in, const std::vector< std::string > &name_out, const Dict
&opts=Dict()) "

Construct an MX function.

";

%feature("docstring") casadi::Function::Function() "

Default constructor, null pointer.

";

%feature("docstring") casadi::Function::Function(const std::string &fname) "

Construct from a file.

";

%feature("docstring")  casadi::Function::numel_in() const  "

Get number of input elements.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::numel_in(casadi_int ind) const  "

Get number of input elements.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::numel_in(const std::string &iname)
const  "

Get number of input elements.

For a particular input or for all of the inputs

";

%feature("docstring")  casadi::Function::serialize(const Dict &opts=Dict())
const  "

Serialize.

";

%feature("docstring")  casadi::Function::sz_res() const  "

Get required length of res field.

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Function::generate_in(const std::string
&fname, const std::vector< DM > &arg) "

Export an input file that can be passed to generate C code with a main.

generate_out  convert_in to convert between dict/map and vector

";

%feature("docstring")  casadi::Function::generate_in(const std::string
&fname) "

Export an input file that can be passed to generate C code with a main.

generate_out  convert_in to convert between dict/map and vector

";

%feature("docstring")  casadi::Function::forward(casadi_int nfwd) const  "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out + n_in inputs and nfwd outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_in inputs
correspond to forward seeds, stacked horizontally The n_out outputs
correspond to forward sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::casadi_forward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out + n_in inputs and nfwd outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_in inputs
correspond to forward seeds, stacked horizontally The n_out outputs
correspond to forward sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::casadi_forward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out + n_in inputs and nfwd outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_in inputs
correspond to forward seeds, stacked horizontally The n_out outputs
correspond to forward sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::n_out() const  "

Get the number of function outputs.

";

%feature("docstring")  casadi::Function::instruction_output(casadi_int k)
const  "

Location in the work vector for the output of the instruction
(SXFunction/MXFunction)

";

%feature("docstring")  casadi::Function::uses_output() const  "

Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::SharedObject::print_ptr(std::ostream
&stream=casadi::uout()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring")  casadi::Function::min_in(casadi_int ind) const  "

Get smallest input value.

";

%feature("docstring")  casadi::Function::assert_size_out(casadi_int i,
casadi_int nrow, casadi_int ncol) const  "

Assert that an output dimension is equal so some given value.

";

%feature("docstring") casadi::Function::~Function "

Destructor.

";

%feature("docstring") casadi::Function::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring")  casadi::Function::index_out(const std::string &name)
const  "

Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLPSOL_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::free_mx() const  "

Get all the free variables of the function.

";

%feature("docstring")  casadi::Function::export_code(const std::string
&lang, const std::string &fname, const Dict &options=Dict()) const  "

Export function in specific language.

Only allowed for (a subset of) SX/MX Functions

";

%feature("docstring")  casadi::Function::export_code(const std::string
&lang, const Dict &options=Dict()) const  "

Export function in specific language.

Only allowed for (a subset of) SX/MX Functions

";

%feature("docstring")  casadi::Function::is_diff_in(casadi_int ind) const  "

Get differentiability of inputs/output.

";

%feature("docstring")  casadi::Function::is_diff_in() const  "

Get differentiability of inputs/output.

";

%feature("docstring")  casadi::SharedObject::class_name() const  "

Get class name.

";

%feature("docstring")  casadi::Function::instruction_input(casadi_int k)
const  "

Locations in the work vector for the inputs of the instruction
(SXFunction/MXFunction)

";

%feature("docstring")  casadi::Function::info() const  "

Obtain information about function

";

%feature("docstring")  casadi::Function::slice(const std::string &name,
const std::vector< casadi_int > &order_in, const std::vector< casadi_int >
&order_out, const Dict &opts=Dict()) const  "

returns a new function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::casadi_slice "

returns a new function with a selection of inputs/outputs of the original

";

%feature("docstring")  casadi::Function::casadi_slice "

returns a new function with a selection of inputs/outputs of the original

";

%feature("docstring")  casadi::Function::mapsum(const std::vector< MX > &x,
const std::string &parallelization="serial") const  "

Evaluate symbolically in parallel and sum (matrix graph)

Parameters:
-----------

parallelization:  Type of parallelization used: unroll|serial|openmp

";

%feature("docstring")  casadi::Function::nnz_out() const  "

Get number of output nonzeros.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::nnz_out(casadi_int ind) const  "

Get number of output nonzeros.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::nnz_out(const std::string &oname)
const  "

Get number of output nonzeros.

For a particular output or for all of the outputs

";

%feature("docstring")  casadi::Function::sparsity_jac(casadi_int iind,
casadi_int oind, bool compact=false, bool symmetric=false) const  "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::sparsity_jac(const std::string
&iind, casadi_int oind=0, bool compact=false, bool symmetric=false) const  "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::sparsity_jac(casadi_int iind, const
std::string &oind, bool compact=false, bool symmetric=false) const  "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::sparsity_jac(const std::string
&iind, const std::string &oind, bool compact=false, bool symmetric=false)
const  "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring")  casadi::Function::index_in(const std::string &name)
const  "

Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLPSOL_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring")  casadi::Function::size_out(casadi_int ind) const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::size_out(const std::string &oname)
const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::checkout() const  "

Checkout a memory object.

";

%feature("docstring")  casadi::Function::print_option(const std::string
&name, std::ostream &stream=casadi::uout()) const  "

Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::Function::hessian_old(casadi_int iind,
casadi_int oind) const  "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::hessian pre-
CasADi 3.2

";

%feature("docstring")  casadi::Function::map(const std::string &name, const
std::string &parallelization, casadi_int n, const std::vector< casadi_int >
&reduce_in, const std::vector< casadi_int > &reduce_out, const Dict
&opts=Dict()) const  "

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

";

%feature("docstring") casadi::casadi_map "

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

";

%feature("docstring")  casadi::Function::casadi_map "

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

";

%feature("docstring")  casadi::Function::map(const std::string &name, const
std::string &parallelization, casadi_int n, const std::vector< std::string >
&reduce_in, const std::vector< std::string > &reduce_out, const Dict
&opts=Dict()) const  "

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

";

%feature("docstring") casadi::casadi_map "

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

";

%feature("docstring")  casadi::Function::casadi_map "

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

";

%feature("docstring")  casadi::Function::map(casadi_int n, const
std::vector< bool > &reduce_in, const std::vector< bool >
&reduce_out=std::vector< bool >(), const Dict &opts=Dict()) const  "

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

";

%feature("docstring") casadi::casadi_map "

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

";

%feature("docstring")  casadi::Function::casadi_map "

Map with reduction A subset of the inputs are non-repeated and a subset of
the outputs summed up.

";

%feature("docstring")  casadi::Function::map(casadi_int n, const std::string
&parallelization="serial") const  "

Create a mapped version of this function.

Suppose the function has a signature of:

::

     f: (a, p) -> ( s )
  



The the mapped version has the signature:

::

     F: (A, P) -> (S )
  
      with
          A: horzcat([a0, a1, ..., a_(N-1)])
          P: horzcat([p0, p1, ..., p_(N-1)])
          S: horzcat([s0, s1, ..., s_(N-1)])
      and
          s0 <- f(a0, p0)
          s1 <- f(a1, p1)
          ...
          s_(N-1) <- f(a_(N-1), p_(N-1))
  



Parameters:
-----------

parallelization:  Type of parallelization used: unroll|serial|openmp

";

%feature("docstring") casadi::casadi_map "

Create a mapped version of this function.

Suppose the function has a signature of:

::

     f: (a, p) -> ( s )
  



The the mapped version has the signature:

::

     F: (A, P) -> (S )
  
      with
          A: horzcat([a0, a1, ..., a_(N-1)])
          P: horzcat([p0, p1, ..., p_(N-1)])
          S: horzcat([s0, s1, ..., s_(N-1)])
      and
          s0 <- f(a0, p0)
          s1 <- f(a1, p1)
          ...
          s_(N-1) <- f(a_(N-1), p_(N-1))
  



Parameters:
-----------

parallelization:  Type of parallelization used: unroll|serial|openmp

";

%feature("docstring")  casadi::Function::casadi_map "

Create a mapped version of this function.

Suppose the function has a signature of:

::

     f: (a, p) -> ( s )
  



The the mapped version has the signature:

::

     F: (A, P) -> (S )
  
      with
          A: horzcat([a0, a1, ..., a_(N-1)])
          P: horzcat([p0, p1, ..., p_(N-1)])
          S: horzcat([s0, s1, ..., s_(N-1)])
      and
          s0 <- f(a0, p0)
          s1 <- f(a1, p1)
          ...
          s_(N-1) <- f(a_(N-1), p_(N-1))
  



Parameters:
-----------

parallelization:  Type of parallelization used: unroll|serial|openmp

";

%feature("docstring")  casadi::Function::sx_in(casadi_int iind) const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::sx_in(const std::string &iname)
const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::sx_in() const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::size1_in(casadi_int ind) const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::size1_in(const std::string &iname)
const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::instructions_sx() const  "

Get the SX node corresponding to all instructions ( SXFunction)

Note: input and output instructions have no SX representation. This method
returns nan for those instructions.

";

%feature("docstring")  casadi::Function::nz_to_in(const std::vector< double
> &arg) const  "

Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::Function::sz_iw() const  "

Get required length of iw field.

";

%feature("docstring")  casadi::Function::is_a(const std::string &type, bool
recursive=true) const  "

Check if the function is of a particular type Optionally check if name
matches one of the base classes (default true)

";

%feature("docstring")  casadi::Function::name_in() const  "

Get input scheme.

";

%feature("docstring")  casadi::Function::name_in(casadi_int ind) const  "

Get input scheme name by index.

";

%feature("docstring")  casadi::Function::mx_in(casadi_int ind) const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::mx_in(const std::string &iname)
const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::mx_in() const  "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::nz_to_out(const std::vector< double
> &arg) const  "

Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::Function::reverse(casadi_int nadj) const  "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out + n_out inputs and n_in outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_out inputs
correspond to adjoint seeds, stacked horizontally The n_in outputs
correspond to adjoint sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

(n_in = n_in(), n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::casadi_reverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out + n_out inputs and n_in outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_out inputs
correspond to adjoint seeds, stacked horizontally The n_in outputs
correspond to adjoint sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

(n_in = n_in(), n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring")  casadi::Function::casadi_reverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out + n_out inputs and n_in outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_out inputs
correspond to adjoint seeds, stacked horizontally The n_in outputs
correspond to adjoint sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

(n_in = n_in(), n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Function "

Function object A Function instance is a general multiple-input, multiple-
output function where each input and output can be a sparse matrix. .

For an introduction to this class, see the CasADi user guide. Function is a
reference counted and immutable class; copying a class instance is very
cheap and its behavior (with some exceptions) is not affected by calling its
member functions. Joel Andersson >List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats() .        |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

C++ includes: function.hpp ";

%feature("docstring")  casadi::Function::instruction_MX(casadi_int k) const
"

Get the MX node corresponding to an instruction ( MXFunction)

";

%feature("docstring")  casadi::Function::release(int mem) const  "

Release a memory object.

";

%feature("docstring")  casadi::Function::generate(const std::string &fname,
const Dict &opts=Dict()) const  "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::generate(const Dict &opts=Dict())
const  "

Export / Generate C code for the function.

";

%feature("docstring")  casadi::Function::has_free() const  "

Does the function have free variables.

";

%feature("docstring")  casadi::Function::assert_size_in(casadi_int i,
casadi_int nrow, casadi_int ncol) const  "

Assert that an input dimension is equal so some given value.

";

%feature("docstring")  casadi::Function::n_nodes() const  "

Number of nodes in the algorithm.

";

%feature("docstring")  casadi::Function::is_diff_out(casadi_int ind) const
"

Get differentiability of inputs/output.

";

%feature("docstring")  casadi::Function::is_diff_out() const  "

Get differentiability of inputs/output.

";

%feature("docstring")  casadi::Function::size_in(casadi_int ind) const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::size_in(const std::string &iname)
const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::jit(const std::string &name, const
std::string &body, const std::vector< std::string > &name_in, const
std::vector< std::string > &name_out, const Dict &opts=Dict()) "

To resolve ambiguity on some compilers.

Create a just-in-time compiled function from a C language string The names
and sparsity patterns of all the inputs and outputs must be provided. If
sparsities are not provided, all inputs and outputs are assumed to be
scalar. Only specify the function body, assuming that input and output
nonzeros are stored in arrays with the specified naming convension. The data
type used is 'casadi_real', which is typically equal to 'double` or another
data type with the same API as 'double'.

Inputs may be null pointers. This means that the all entries are zero.
Outputs may be null points. This means that the corresponding result can be
ignored.

If an error occurs in the evaluation, issue \"return 1;\";

The final generated function will have a structure similar to:

casadi_int fname(const casadi_real** arg, casadi_real** res, casadi_int* iw,
casadi_real* w, void* mem) { const casadi_real *x1, *x2; casadi_real *r1,
*r2; x1 = *arg++; x2 = *arg++; r1 = *res++; r2 = *res++; <FUNCTION_BODY>
return 0; }

";

%feature("docstring")  casadi::Function::jit(const std::string &name, const
std::string &body, const std::vector< std::string > &name_in, const
std::vector< std::string > &name_out, const std::vector< Sparsity >
&sparsity_in, const std::vector< Sparsity > &sparsity_out, const Dict
&opts=Dict()) "

To resolve ambiguity on some compilers.

Create a just-in-time compiled function from a C language string The names
and sparsity patterns of all the inputs and outputs must be provided. If
sparsities are not provided, all inputs and outputs are assumed to be
scalar. Only specify the function body, assuming that input and output
nonzeros are stored in arrays with the specified naming convension. The data
type used is 'casadi_real', which is typically equal to 'double` or another
data type with the same API as 'double'.

Inputs may be null pointers. This means that the all entries are zero.
Outputs may be null points. This means that the corresponding result can be
ignored.

If an error occurs in the evaluation, issue \"return 1;\";

The final generated function will have a structure similar to:

casadi_int fname(const casadi_real** arg, casadi_real** res, casadi_int* iw,
casadi_real* w, void* mem) { const casadi_real *x1, *x2; casadi_real *r1,
*r2; x1 = *arg++; x2 = *arg++; r1 = *res++; r2 = *res++; <FUNCTION_BODY>
return 0; }

";

%feature("docstring")  casadi::Function::size2_out(casadi_int ind) const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::size2_out(const std::string &oname)
const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::jac() const  "

Calculate all Jacobian blocks Generates a function that takes all non-
differentiated inputs and outputs and calculates all Jacobian blocks. Inputs
that are not needed by the routine are all-zero sparse matrices with the
correct dimensions. Output blocks that are not calculated, e.g. if the
corresponding input or output is marked non-differentiated are also all-zero
sparse. The Jacobian blocks are sorted starting by all the blocks for the
first output, then all the blocks for the second output and so on. E.g.
f:(x,y)->(r,s) results in the function jac_f:(x,y,r,s)->(dr_dx, dr_dy,
ds_dx, ds_dy) This function is cached.

";

%feature("docstring")  casadi::Function::convert_in(const std::vector< DM >
&arg) const  "

Convert from/to input/output lists/map.

Will raise an error when an unknown key is used or a list has incorrect
size. Does not perform sparsity checking.

";

%feature("docstring")  casadi::Function::convert_in(const DMDict &arg) const
"

Convert from/to input/output lists/map.

Will raise an error when an unknown key is used or a list has incorrect
size. Does not perform sparsity checking.

";

%feature("docstring")  casadi::Function::convert_in(const std::vector< SX >
&arg) const  "

Convert from/to input/output lists/map.

Will raise an error when an unknown key is used or a list has incorrect
size. Does not perform sparsity checking.

";

%feature("docstring")  casadi::Function::convert_in(const SXDict &arg) const
"

Convert from/to input/output lists/map.

Will raise an error when an unknown key is used or a list has incorrect
size. Does not perform sparsity checking.

";

%feature("docstring")  casadi::Function::convert_in(const std::vector< MX >
&arg) const  "

Convert from/to input/output lists/map.

Will raise an error when an unknown key is used or a list has incorrect
size. Does not perform sparsity checking.

";

%feature("docstring")  casadi::Function::convert_in(const MXDict &arg) const
"

Convert from/to input/output lists/map.

Will raise an error when an unknown key is used or a list has incorrect
size. Does not perform sparsity checking.

";

%feature("docstring")  casadi::Function::size1_out(casadi_int ind) const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::size1_out(const std::string &oname)
const  "

Get output dimension.

";

%feature("docstring")  casadi::Function::generate_lifted(Function
&output_vdef_fcn, Function &output_vinit_fcn) const  "

Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::Function::sparsity_in(casadi_int ind) const
"

Get sparsity of a given input.

";

%feature("docstring")  casadi::Function::sparsity_in(const std::string
&iname) const  "

Get sparsity of a given input.

";

%feature("docstring")  casadi::Function::which_depends(const std::string
&s_in, const std::vector< std::string > &s_out, casadi_int order=1, bool
tr=false) const  "

Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::casadi_which_depends "

Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::Function::casadi_which_depends "

Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::Function::generate_out(const std::string
&fname, const std::vector< DM > &arg) "

Export an output file that can be checked with generated C code output.

generate_in  convert_out to convert between dict/map and vector

";

%feature("docstring")  casadi::Function::generate_out(const std::string
&fname) "

Export an output file that can be checked with generated C code output.

generate_in  convert_out to convert between dict/map and vector

";

%feature("docstring")  casadi::Function::call(const std::vector< DM > &arg,
std::vector< DM > &output_res, bool always_inline=false, bool
never_inline=false) const  "

Evaluate the function symbolically or numerically.

";

%feature("docstring")  casadi::Function::call(const std::vector< SX > &arg,
std::vector< SX > &output_res, bool always_inline=false, bool
never_inline=false) const  "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::call(const std::vector< MX > &arg,
std::vector< MX > &output_res, bool always_inline=false, bool
never_inline=false) const  "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::call(const DMDict &arg, DMDict
&output_res, bool always_inline=false, bool never_inline=false) const  "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::call(const SXDict &arg, SXDict
&output_res, bool always_inline=false, bool never_inline=false) const  "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::call(const MXDict &arg, MXDict
&output_res, bool always_inline=false, bool never_inline=false) const  "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::jacobian_old(casadi_int iind,
casadi_int oind) const  "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring")  casadi::Function::sz_arg() const  "

Get required length of arg field.

";

%feature("docstring")  casadi::Function::save(const std::string &fname,
const Dict &opts=Dict()) const  "

Export function in specific language.

Only allowed for (a subset of) SX/MX Functions

";

%feature("docstring")  casadi::Function::print_options(std::ostream
&stream=casadi::uout()) const  "

Print options to a stream.

";

%feature("docstring")  casadi::Function::size2_in(casadi_int ind) const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::size2_in(const std::string &iname)
const  "

Get input dimension.

";

%feature("docstring")  casadi::Function::has_sprev() const  "

Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::Function::instruction_constant(casadi_int k)
const  "

Get the floating point output argument of an instruction ( SXFunction)

";

%feature("docstring")  casadi::Function::sz_w() const  "

Get required length of w field.

";

%feature("docstring")  casadi::Function::expand() const  "

Expand a function to SX.

";

%feature("docstring") casadi::casadi_expand "

Expand a function to SX.

";

%feature("docstring")  casadi::Function::casadi_expand "

Expand a function to SX.

";

%feature("docstring")  casadi::Function::expand(const std::string &name,
const Dict &opts=Dict()) const  "

Expand a function to SX.

";

%feature("docstring") casadi::casadi_expand "

Expand a function to SX.

";

%feature("docstring")  casadi::Function::casadi_expand "

Expand a function to SX.

";

%feature("docstring")  casadi::Function::sx_out(casadi_int oind) const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::sx_out(const std::string &oname)
const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::sx_out() const  "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring")  casadi::Function::default_in(casadi_int ind) const  "

Get default input value.

";

%feature("docstring")  casadi::Function::nz_from_in(const std::vector< DM >
&arg) const  "

Convert from/to flat vector of input/output nonzeros.

";


// File: classcasadi_1_1FunctionBuffer.xml
%feature("docstring") casadi::FunctionBuffer "

Class to achieve minimal overhead function evaluations.

C++ includes: function.hpp ";

%feature("docstring") casadi::FunctionBuffer::FunctionBuffer(const Function
&f) "

Main constructor.

";

%feature("docstring")  casadi::FunctionBuffer::set_arg(casadi_int i, const
double *a, casadi_int size) "

Set input buffer for input i.

mem.set_arg(0, memoryview(a))

Note that CasADi uses 'fortran' order: column-by-column

";

%feature("docstring")  casadi::FunctionBuffer::set_res(casadi_int i, double
*a, casadi_int size) "

Set output buffer for ouput i.

mem.set_res(0, memoryview(a))

Note that CasADi uses 'fortran' order: column-by-column

";

%feature("docstring")  casadi::FunctionBuffer::ret() "

Get last return value.

";


// File: classcasadi_1_1GenericExternal.xml
%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::GenericExternal::~GenericExternal "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::External::has_jacobian() const  "

[INTERNAL]  Full Jacobian.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::External::has_forward(casadi_int nfwd) const
"

[INTERNAL]  Forward mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::External::get_default_in(casadi_int i) const
"

[INTERNAL]  Default inputs.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::External::get_reverse(casadi_int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Reverse mode derivatives.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::GenericExternal::GenericExternal(const
std::string &name, const Importer &li) "

[INTERNAL]  Constructor.

";

%feature("docstring")
casadi::GenericExternal::GenericExternal(DeserializingStream &s) "

[INTERNAL]  Deserializing constructor.

";

%feature("docstring")  casadi::GenericExternal::get_sparsity_in(casadi_int
i)  "

[INTERNAL]  Retreive sparsities.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::GenericExternal::any_symbol_found() const  "

[INTERNAL]  Any symbol found?

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::External::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")
casadi::GenericExternal::serialize_type(SerializingStream &s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::External::get_jacobian(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Full Jacobian.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::eval(const double **arg,
double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::External::serialize_base_function() const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::FunctionInternal::finalize()  "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::GenericExternal::init_external()  "

[INTERNAL]  Initialize members that are unique.

";

%feature("docstring")  casadi::External::factory(const std::string &name,
const std::vector< std::string > &s_in, const std::vector< std::string >
&s_out, const Function::AuxOut &aux, const Dict &opts) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::External::class_name() const  "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::External::serialize_body(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::External::codegen_declarations(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::External::get_forward(casadi_int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Forward mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::External::codegen_body(CodeGenerator &g)
const  "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::ProtoFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::External::has_reverse(casadi_int nadj) const
"

[INTERNAL]  Reverse mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::External::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::External::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::GenericExternal "

[INTERNAL] C++ includes: external_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::External::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::GenericExternal::get_sparsity_out(casadi_int
i)  "

[INTERNAL]  Retreive sparsities.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::GenericExternal::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";


// File: classcasadi_1_1GenericMatrix.xml


/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring")  casadi::GenericMatrixCommon::dot(const MatType &x,
const MatType &y) "

[INTERNAL]  Inner product of two matrices with x and y matrices of the same
dimension.

";

%feature("docstring") casadi::casadi_dot "

Inner product of two matrices with x and y matrices of the same dimension.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_dot "

Inner product of two matrices with x and y matrices of the same dimension.

";

%feature("docstring")  casadi::GenericMatrixCommon::is_quadratic(const
MatType &expr, const MatType &var) "

Is expr quadratic in var?

False negatives are possible (an expression may not be recognised as
quadratic while it really is), false positives not.

";

%feature("docstring") casadi::casadi_is_quadratic "

Is expr quadratic in var?

False negatives are possible (an expression may not be recognised as
quadratic while it really is), false positives not.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_is_quadratic "

Is expr quadratic in var?

False negatives are possible (an expression may not be recognised as
quadratic while it really is), false positives not.

";

%feature("docstring")  casadi::GenericMatrixCommon::solve(const MatType &A,
const MatType &b) "

[INTERNAL]   Solve a system of equations: A*x = b The solve routine works
similar to Matlab's backslash when A is square and nonsingular. The
algorithm used is the following:

A simple forward or backward substitution if A is upper or lower triangular

If the linear system is at most 3-by-3, form the inverse via minor expansion
and multiply

Permute the variables and equations as to get a (structurally) nonzero
diagonal, then perform a QR factorization without pivoting and solve the
factorized system.

Note 1: If there are entries of the linear system known to be zero, these
will be removed. Elements that are very small, or will evaluate to be zero,
can still cause numerical errors, due to the lack of pivoting (which is not
possible since cannot compare the size of entries)

Note 2: When permuting the linear system, a BLT (block lower triangular)
transformation is formed. Only the permutation part of this is however used.
An improvement would be to solve block-by-block if there are multiple BLT
blocks.

";

%feature("docstring") casadi::casadi_solve "

Solve a system of equations: A*x = b The solve routine works similar to
Matlab's backslash when A is square and nonsingular. The algorithm used is
the following:

A simple forward or backward substitution if A is upper or lower triangular

If the linear system is at most 3-by-3, form the inverse via minor expansion
and multiply

Permute the variables and equations as to get a (structurally) nonzero
diagonal, then perform a QR factorization without pivoting and solve the
factorized system.

Note 1: If there are entries of the linear system known to be zero, these
will be removed. Elements that are very small, or will evaluate to be zero,
can still cause numerical errors, due to the lack of pivoting (which is not
possible since cannot compare the size of entries)

Note 2: When permuting the linear system, a BLT (block lower triangular)
transformation is formed. Only the permutation part of this is however used.
An improvement would be to solve block-by-block if there are multiple BLT
blocks.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_solve "

Solve a system of equations: A*x = b The solve routine works similar to
Matlab's backslash when A is square and nonsingular. The algorithm used is
the following:

A simple forward or backward substitution if A is upper or lower triangular

If the linear system is at most 3-by-3, form the inverse via minor expansion
and multiply

Permute the variables and equations as to get a (structurally) nonzero
diagonal, then perform a QR factorization without pivoting and solve the
factorized system.

Note 1: If there are entries of the linear system known to be zero, these
will be removed. Elements that are very small, or will evaluate to be zero,
can still cause numerical errors, due to the lack of pivoting (which is not
possible since cannot compare the size of entries)

Note 2: When permuting the linear system, a BLT (block lower triangular)
transformation is formed. Only the permutation part of this is however used.
An improvement would be to solve block-by-block if there are multiple BLT
blocks.

";

%feature("docstring")  casadi::GenericMatrixCommon::solve(const MatType &A,
const MatType &b, const std::string &lsolver, const Dict &dict=Dict()) "

[INTERNAL]   Solve a system of equations: A*x = b.

";

%feature("docstring") casadi::casadi_solve "

Solve a system of equations: A*x = b.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_solve "

Solve a system of equations: A*x = b.

";

%feature("docstring")  casadi::GenericMatrixCommon::pinv(const MatType &A) "

[INTERNAL]  Computes the Moore-Penrose pseudo-inverse.

If the matrix A is fat (size1<size2), mul(A, pinv(A)) is unity.

pinv(A)' = (AA')^(-1) A

If the matrix A is slender (size1>size2), mul(pinv(A), A) is unity.

pinv(A) = (A'A)^(-1) A'

";

%feature("docstring") casadi::casadi_pinv "

Computes the Moore-Penrose pseudo-inverse.

If the matrix A is fat (size1<size2), mul(A, pinv(A)) is unity.

pinv(A)' = (AA')^(-1) A

If the matrix A is slender (size1>size2), mul(pinv(A), A) is unity.

pinv(A) = (A'A)^(-1) A'

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_pinv "

Computes the Moore-Penrose pseudo-inverse.

If the matrix A is fat (size1<size2), mul(A, pinv(A)) is unity.

pinv(A)' = (AA')^(-1) A

If the matrix A is slender (size1>size2), mul(pinv(A), A) is unity.

pinv(A) = (A'A)^(-1) A'

";

%feature("docstring")  casadi::GenericMatrixCommon::pinv(const MatType &A,
const std::string &lsolver, const Dict &dict=Dict()) "

[INTERNAL]  Computes the Moore-Penrose pseudo-inverse.

If the matrix A is fat (size1>size2), mul(A, pinv(A)) is unity. If the
matrix A is slender (size2<size1), mul(pinv(A), A) is unity.

";

%feature("docstring") casadi::casadi_pinv "

Computes the Moore-Penrose pseudo-inverse.

If the matrix A is fat (size1>size2), mul(A, pinv(A)) is unity. If the
matrix A is slender (size2<size1), mul(pinv(A), A) is unity.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_pinv "

Computes the Moore-Penrose pseudo-inverse.

If the matrix A is fat (size1>size2), mul(A, pinv(A)) is unity. If the
matrix A is slender (size2<size1), mul(pinv(A), A) is unity.

";

%feature("docstring")  casadi::GenericMatrixCommon::jacobian(const MatType
&ex, const MatType &arg, const Dict &opts=Dict()) "

[INTERNAL]  Calculate Jacobian.

";

%feature("docstring") casadi::casadi_jacobian "

Calculate Jacobian.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_jacobian "

Calculate Jacobian.

";

%feature("docstring")  casadi::GenericMatrixCommon::substitute_inplace(const
std::vector< MatType > &v, std::vector< MatType > &inout_vdef, std::vector<
MatType > &inout_ex, bool reverse=false) "

[INTERNAL]  Inplace substitution with piggyback expressions Substitute
variables v out of the expressions vdef sequentially, as well as out of a
number of other expressions piggyback.

";

%feature("docstring") casadi::casadi_substitute_inplace "

Inplace substitution with piggyback expressions Substitute variables v out
of the expressions vdef sequentially, as well as out of a number of other
expressions piggyback.

";

%feature("docstring")
casadi::GenericMatrixCommon::casadi_substitute_inplace "

Inplace substitution with piggyback expressions Substitute variables v out
of the expressions vdef sequentially, as well as out of a number of other
expressions piggyback.

";

%feature("docstring")  casadi::GenericMatrixCommon::simplify(const MatType
&x) "

[INTERNAL]  Simplify an expression.

";

%feature("docstring") casadi::casadi_simplify "

Simplify an expression.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_simplify "

Simplify an expression.

";

%feature("docstring")  casadi::GenericMatrixCommon::cumsum(const MatType &x,
casadi_int axis=-1) "

[INTERNAL]  Returns cumulative sum along given axis (MATLAB convention)

";

%feature("docstring") casadi::casadi_cumsum "

Returns cumulative sum along given axis (MATLAB convention)

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_cumsum "

Returns cumulative sum along given axis (MATLAB convention)

";

%feature("docstring")  casadi::GenericMatrixCommon::nnz_diag() const  "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring")  casadi::GenericMatrixCommon::conditional(const
MatType &ind, const std::vector< MatType > &x, const MatType &x_default,
bool short_circuit=false) "

[INTERNAL]  Create a switch.

If the condition

Parameters:
-----------

ind:  evaluates to the integer k, where 0<=k<f.size(), then x[k] will be
returned, otherwise

x_default:  will be returned.

";

%feature("docstring") casadi::casadi_conditional "

Create a switch.

If the condition

Parameters:
-----------

ind:  evaluates to the integer k, where 0<=k<f.size(), then x[k] will be
returned, otherwise

x_default:  will be returned.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_conditional "

Create a switch.

If the condition

Parameters:
-----------

ind:  evaluates to the integer k, where 0<=k<f.size(), then x[k] will be
returned, otherwise

x_default:  will be returned.

";

%feature("docstring")  casadi::GenericMatrixCommon::print_operator(const
MatType &xb, const std::vector< std::string > &args) "

[INTERNAL]  Get a string representation for a binary MatType, using custom
arguments.

";

%feature("docstring") casadi::casadi_print_operator "

Get a string representation for a binary MatType, using custom arguments.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_print_operator "

Get a string representation for a binary MatType, using custom arguments.

";

%feature("docstring")  casadi::GenericMatrixCommon::trace(const MatType &x)
"

[INTERNAL]   Matrix trace.

";

%feature("docstring") casadi::casadi_trace "

Matrix trace.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_trace "

Matrix trace.

";

%feature("docstring")  casadi::GenericMatrixCommon::mmax(const MatType &x) "

[INTERNAL]  Largest element in a matrix.

";

%feature("docstring") casadi::casadi_mmax "

Largest element in a matrix.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_mmax "

Largest element in a matrix.

";

%feature("docstring")  casadi::GenericMatrixCommon::get_row() const  "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::GenericMatrixCommon::n_nodes(const MatType
&A) "

[INTERNAL]  Count number of nodes

";

%feature("docstring")  casadi::GenericMatrixCommon::norm_inf(const MatType
&x) "

[INTERNAL]  Infinity-norm.

";

%feature("docstring") casadi::casadi_norm_inf "

Infinity-norm.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_norm_inf "

Infinity-norm.

";

%feature("docstring")  casadi::GenericMatrixCommon::mmin(const MatType &x) "

[INTERNAL]  Smallest element in a matrix.

";

%feature("docstring") casadi::casadi_mmin "

Smallest element in a matrix.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_mmin "

Smallest element in a matrix.

";

%feature("docstring")  casadi::GenericMatrixCommon::is_dense() const  "

Check if the matrix expression is dense.

";

%feature("docstring")  casadi::GenericMatrixCommon::tril2symm(const MatType
&a) "

Convert a lower triangular matrix to a symmetric one.

";

%feature("docstring") casadi::casadi_tril2symm "

Convert a lower triangular matrix to a symmetric one.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_tril2symm "

Convert a lower triangular matrix to a symmetric one.

";

%feature("docstring")  casadi::GenericMatrixCommon::nnz_lower() const  "

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring")  casadi::GenericMatrixCommon::diag(const MatType &A) "

[INTERNAL]  Get the diagonal of a matrix or construct a diagonal When the
input is square, the diagonal elements are returned. If the input is vector-
like, a diagonal matrix is constructed with it.

";

%feature("docstring") casadi::casadi_diag "

Get the diagonal of a matrix or construct a diagonal When the input is
square, the diagonal elements are returned. If the input is vector- like, a
diagonal matrix is constructed with it.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_diag "

Get the diagonal of a matrix or construct a diagonal When the input is
square, the diagonal elements are returned. If the input is vector- like, a
diagonal matrix is constructed with it.

";

%feature("docstring")  casadi::GenericMatrixCommon::is_linear(const MatType
&expr, const MatType &var) "

Is expr linear in var?

False negatives are possible (an expression may not be recognised as linear
while it really is), false positives not.

";

%feature("docstring") casadi::casadi_is_linear "

Is expr linear in var?

False negatives are possible (an expression may not be recognised as linear
while it really is), false positives not.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_is_linear "

Is expr linear in var?

False negatives are possible (an expression may not be recognised as linear
while it really is), false positives not.

";

%feature("docstring")  casadi::GenericMatrixCommon::unite(const MatType &A,
const MatType &B) "

[INTERNAL]  Unite two matrices no overlapping sparsity.

";

%feature("docstring") casadi::casadi_unite "

Unite two matrices no overlapping sparsity.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_unite "

Unite two matrices no overlapping sparsity.

";

%feature("docstring")  casadi::GenericMatrixCommon::rank1(const MatType &A,
const MatType &alpha, const MatType &x, const MatType &y) "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring") casadi::casadi_rank1 "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_rank1 "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring")  casadi::GenericMatrixCommon::rank1(const MatType &A,
const MatType &alpha, const MatType &x, const MatType &y) "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring") casadi::casadi_rank1 "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_rank1 "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring")  casadi::GenericMatrixCommon::gradient(const MatType
&ex, const MatType &arg, const Dict &opts=Dict()) "

Calculate Jacobian.

";

%feature("docstring") casadi::casadi_gradient "

Calculate Jacobian.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_gradient "

Calculate Jacobian.

";

%feature("docstring")  casadi::GenericMatrixCommon::gradient(const MatType
&ex, const MatType &arg, const Dict &opts=Dict()) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::GenericMatrixCommon::symvar(const MatType &x)
"

[INTERNAL]  Get all symbols contained in the supplied expression Get all
symbols on which the supplied expression depends.

See:  SXFunction::getFree(), MXFunction::getFree()

";

%feature("docstring") casadi::casadi_symvar "

Get all symbols contained in the supplied expression Get all symbols on
which the supplied expression depends.

See:  SXFunction::getFree(), MXFunction::getFree()

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_symvar "

Get all symbols contained in the supplied expression Get all symbols on
which the supplied expression depends.

See:  SXFunction::getFree(), MXFunction::getFree()

";

%feature("docstring")  casadi::GenericMatrixCommon::skew(const MatType &a) "

Generate a skew symmetric matrix from a 3-vector.

";

%feature("docstring") casadi::casadi_skew "

Generate a skew symmetric matrix from a 3-vector.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_skew "

Generate a skew symmetric matrix from a 3-vector.

";

%feature("docstring")  casadi::GenericMatrixCommon::is_scalar(bool
scalar_and_dense=false) const  "

Check if the matrix expression is scalar.

";

%feature("docstring")  casadi::GenericMatrixCommon::expm_const(const MatType
&A, const MatType &t) "

[INTERNAL] ";

%feature("docstring")  casadi::GenericMatrixCommon::columns() const  "

Get the number of columns, Octave-style syntax.

";

%feature("docstring")  casadi::GenericMatrixCommon::is_column() const  "

Check if the matrix is a column vector (i.e. size2()==1)

";

%feature("docstring")  casadi::GenericMatrixCommon::quadratic_coeff(const
MatType &expr, const MatType &var, MatType &A, MatType &b, MatType &c, bool
check=true) "

Recognizes quadratic form in scalar expression.

1/2*x' A x + b' x + c

e = 0.5*bilin(A,x,x)+dot(b,x)+c

Parameters:
-----------

check[in]:  When true (default), A is checked to be independent of x.
Provided to deal with false positive dependency checks.

";

%feature("docstring") casadi::casadi_quadratic_coeff "

Recognizes quadratic form in scalar expression.

1/2*x' A x + b' x + c

e = 0.5*bilin(A,x,x)+dot(b,x)+c

Parameters:
-----------

check[in]:  When true (default), A is checked to be independent of x.
Provided to deal with false positive dependency checks.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_quadratic_coeff "

Recognizes quadratic form in scalar expression.

1/2*x' A x + b' x + c

e = 0.5*bilin(A,x,x)+dot(b,x)+c

Parameters:
-----------

check[in]:  When true (default), A is checked to be independent of x.
Provided to deal with false positive dependency checks.

";

%feature("docstring")  casadi::GenericMatrixCommon::is_tril() const  "

Check if the matrix is lower triangular.

";

%feature("docstring")  casadi::GenericMatrixCommon::colind(casadi_int col)
const  "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::GenericMatrixCommon::is_triu() const  "

Check if the matrix is upper triangular.

";

%feature("docstring")  casadi::GenericMatrixCommon::depends_on(const MatType
&f, const MatType &arg) "

[INTERNAL]  Check if expression depends on the argument The argument must be
symbolic.

";

%feature("docstring") casadi::casadi_depends_on "

Check if expression depends on the argument The argument must be symbolic.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_depends_on "

Check if expression depends on the argument The argument must be symbolic.

";

%feature("docstring")  casadi::GenericMatrixCommon::dim(bool with_nz=false)
const  "

Get string representation of dimensions. The representation is e.g. \"4x5\"
or \"4x5,10nz\".

";

%feature("docstring")  casadi::GenericMatrixCommon::mrdivide(const MatType
&x, const MatType &n) "

[INTERNAL]   Matrix divide (cf. slash '/' in MATLAB)

";

%feature("docstring") casadi::casadi_mrdivide "

Matrix divide (cf. slash '/' in MATLAB)

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_mrdivide "

Matrix divide (cf. slash '/' in MATLAB)

";

%feature("docstring")  casadi::GenericMatrixCommon::linspace(const MatType
&a, const MatType &b, casadi_int nsteps) "

Matlab's linspace command.

";

%feature("docstring") casadi::casadi_linspace "

Matlab's linspace command.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_linspace "

Matlab's linspace command.

";

%feature("docstring")  casadi::GenericMatrixCommon::triu2symm(const MatType
&a) "

Convert a upper triangular matrix to a symmetric one.

";

%feature("docstring") casadi::casadi_triu2symm "

Convert a upper triangular matrix to a symmetric one.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_triu2symm "

Convert a upper triangular matrix to a symmetric one.

";

%feature("docstring")  casadi::GenericMatrixCommon::size1() const  "

Get the first dimension (i.e. number of rows)

";

%feature("docstring")  casadi::GenericMatrixCommon::size2() const  "

Get the second dimension (i.e. number of columns)

";

%feature("docstring")  casadi::GenericMatrixCommon::cross(const MatType &a,
const MatType &b, casadi_int dim=-1) "

Matlab's cross command.

";

%feature("docstring") casadi::casadi_cross "

Matlab's cross command.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_cross "

Matlab's cross command.

";

%feature("docstring")  casadi::GenericMatrixCommon::mldivide(const MatType
&x, const MatType &n) "

[INTERNAL]   Matrix divide (cf. backslash '\\\\' in MATLAB)

";

%feature("docstring") casadi::casadi_mldivide "

Matrix divide (cf. backslash '\\\\' in MATLAB)

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_mldivide "

Matrix divide (cf. backslash '\\\\' in MATLAB)

";

%feature("docstring")  casadi::GenericMatrixCommon::tangent(const MatType
&ex, const MatType &arg, const Dict &opts=Dict()) "

Calculate Jacobian.

";

%feature("docstring") casadi::casadi_tangent "

Calculate Jacobian.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_tangent "

Calculate Jacobian.

";

%feature("docstring")  casadi::GenericMatrixCommon::tangent(const MatType
&ex, const MatType &arg, const Dict &opts=Dict()) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::GenericMatrixCommon::substitute(const MatType
&ex, const MatType &v, const MatType &vdef) "

[INTERNAL]  Substitute variable v with expression vdef in an expression ex.

";

%feature("docstring") casadi::casadi_substitute "

Substitute variable v with expression vdef in an expression ex.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_substitute "

Substitute variable v with expression vdef in an expression ex.

";

%feature("docstring")  casadi::GenericMatrixCommon::substitute(const
std::vector< MatType > &ex, const std::vector< MatType > &v, const
std::vector< MatType > &vdef) "

[INTERNAL]  Substitute variable var with expression expr in multiple
expressions.

";

%feature("docstring") casadi::casadi_substitute "

Substitute variable var with expression expr in multiple expressions.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_substitute "

Substitute variable var with expression expr in multiple expressions.

";

%feature("docstring")  casadi::GenericMatrixCommon::inv_skew(const MatType
&a) "

Generate the 3-vector progenitor of a skew symmetric matrix.

";

%feature("docstring") casadi::casadi_inv_skew "

Generate the 3-vector progenitor of a skew symmetric matrix.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_inv_skew "

Generate the 3-vector progenitor of a skew symmetric matrix.

";

%feature("docstring")  casadi::GenericMatrixCommon::bilin(const MatType &A,
const MatType &x, const MatType &y) "

Calculate bilinear form x^T A y.

";

%feature("docstring") casadi::casadi_bilin "

Calculate bilinear form x^T A y.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_bilin "

Calculate bilinear form x^T A y.

";

%feature("docstring")  casadi::GenericMatrixCommon::bilin(const MatType &A,
const MatType &x, const MatType &y) "

Calculate bilinear form x^T A y.

";

%feature("docstring") casadi::casadi_bilin "

Calculate bilinear form x^T A y.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_bilin "

Calculate bilinear form x^T A y.

";

%feature("docstring")  casadi::GenericMatrixCommon::inv_minor(const MatType
&A) "

[INTERNAL]   Matrix inverse (experimental)

";

%feature("docstring") casadi::casadi_inv_minor "

Matrix inverse (experimental)

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_inv_minor "

Matrix inverse (experimental)

";

%feature("docstring")  casadi::GenericMatrixCommon::norm_1(const MatType &x)
"

[INTERNAL]  1-norm

";

%feature("docstring") casadi::casadi_norm_1 "

1-norm

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_norm_1 "

1-norm

";

%feature("docstring")  casadi::GenericMatrixCommon::norm_2(const MatType &x)
"

[INTERNAL]  2-norm

";

%feature("docstring") casadi::casadi_norm_2 "

2-norm

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_norm_2 "

2-norm

";

%feature("docstring")  casadi::GenericMatrixCommon::get_colind() const  "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::GenericMatrixCommon::is_empty(bool
both=false) const  "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring")  casadi::GenericMatrixCommon::is_row() const  "

Check if the matrix is a row vector (i.e. size1()==1)

";

%feature("docstring")  casadi::GenericMatrixCommon::soc(const MatType &x,
const MatType &y) "

Construct second-order-convex.

Parameters:
-----------

x:  vector expression of size n

y:  scalar expression

soc(x,y) computes [y*eye(n) x; x' y]

soc(x,y) positive semi definite <=> || x ||_2 <= y

";

%feature("docstring") casadi::casadi_soc "

Construct second-order-convex.

Parameters:
-----------

x:  vector expression of size n

y:  scalar expression

soc(x,y) computes [y*eye(n) x; x' y]

soc(x,y) positive semi definite <=> || x ||_2 <= y

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_soc "

Construct second-order-convex.

Parameters:
-----------

x:  vector expression of size n

y:  scalar expression

soc(x,y) computes [y*eye(n) x; x' y]

soc(x,y) positive semi definite <=> || x ||_2 <= y

";

%feature("docstring")  casadi::GenericMatrixCommon::soc(const MatType &x,
const MatType &y) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::GenericMatrixCommon::is_square() const  "

Check if the matrix expression is square.

";

%feature("docstring")  casadi::GenericMatrixCommon::jtimes(const MatType
&ex, const MatType &arg, const MatType &v, bool tr=false, const Dict
&opts=Dict()) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::GenericMatrixCommon::jtimes(const MatType
&ex, const MatType &arg, const MatType &v, bool tr=false, const Dict
&opts=Dict()) "

Calculate the Jacobian and multiply by a vector from the right This is
equivalent to mul(jacobian(ex, arg), v) or mul(jacobian(ex, arg).T, v) for
tr set to false and true respectively. If contrast to these expressions, it
will use directional derivatives which is typically (but not necessarily)
more efficient if the complete Jacobian is not needed and v has few rows.

";

%feature("docstring") casadi::casadi_jtimes "

Calculate the Jacobian and multiply by a vector from the right This is
equivalent to mul(jacobian(ex, arg), v) or mul(jacobian(ex, arg).T, v) for
tr set to false and true respectively. If contrast to these expressions, it
will use directional derivatives which is typically (but not necessarily)
more efficient if the complete Jacobian is not needed and v has few rows.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_jtimes "

Calculate the Jacobian and multiply by a vector from the right This is
equivalent to mul(jacobian(ex, arg), v) or mul(jacobian(ex, arg).T, v) for
tr set to false and true respectively. If contrast to these expressions, it
will use directional derivatives which is typically (but not necessarily)
more efficient if the complete Jacobian is not needed and v has few rows.

";

%feature("docstring")  casadi::GenericMatrixCommon::numel() const  "

Get the number of elements.

";

%feature("docstring")  casadi::GenericMatrixCommon::linear_coeff(const
MatType &expr, const MatType &var, MatType &A, MatType &b, bool check=true)
"

Recognizes linear form in vector expression.

A x + b

Parameters:
-----------

check[in]:  When true (default)m, A is checked to be independent of x.
Provided to deal with false positive dependency checks.

";

%feature("docstring") casadi::casadi_linear_coeff "

Recognizes linear form in vector expression.

A x + b

Parameters:
-----------

check[in]:  When true (default)m, A is checked to be independent of x.
Provided to deal with false positive dependency checks.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_linear_coeff "

Recognizes linear form in vector expression.

A x + b

Parameters:
-----------

check[in]:  When true (default)m, A is checked to be independent of x.
Provided to deal with false positive dependency checks.

";

%feature("docstring")  casadi::GenericMatrixCommon::repsum(const MatType &A,
casadi_int n, casadi_int m=1) "

Given a repeated matrix, computes the sum of repeated parts.

";

%feature("docstring") casadi::casadi_repsum "

Given a repeated matrix, computes the sum of repeated parts.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_repsum "

Given a repeated matrix, computes the sum of repeated parts.

";

%feature("docstring")  casadi::GenericMatrixCommon::einstein(const MatType
&A, const MatType &B, const MatType &C, const std::vector< casadi_int >
&dim_a, const std::vector< casadi_int > &dim_b, const std::vector<
casadi_int > &dim_c, const std::vector< casadi_int > &a, const std::vector<
casadi_int > &b, const std::vector< casadi_int > &c) "

[INTERNAL]  Compute any contraction of two dense tensors, using
index/einstein notation einstein(A, B, a, b, c) -> C.

Given two tensors, A and B, computes a third tensor C such that:

C_c = A_a * B_b

With a, b, c representing einstein indices. Instead of the classical index
labels i,j,k,... we employ -1,-2,-3,...

A, B, C are represented as CasADi vectors, with dim_a, dim_b, dim_c
indictating theire tensorial dimensions.

";

%feature("docstring") casadi::casadi_einstein "

Compute any contraction of two dense tensors, using index/einstein notation
einstein(A, B, a, b, c) -> C.

Given two tensors, A and B, computes a third tensor C such that:

C_c = A_a * B_b

With a, b, c representing einstein indices. Instead of the classical index
labels i,j,k,... we employ -1,-2,-3,...

A, B, C are represented as CasADi vectors, with dim_a, dim_b, dim_c
indictating theire tensorial dimensions.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_einstein "

Compute any contraction of two dense tensors, using index/einstein notation
einstein(A, B, a, b, c) -> C.

Given two tensors, A and B, computes a third tensor C such that:

C_c = A_a * B_b

With a, b, c representing einstein indices. Instead of the classical index
labels i,j,k,... we employ -1,-2,-3,...

A, B, C are represented as CasADi vectors, with dim_a, dim_b, dim_c
indictating theire tensorial dimensions.

";

%feature("docstring")  casadi::GenericMatrixCommon::einstein(const MatType
&A, const MatType &B, const std::vector< casadi_int > &dim_a, const
std::vector< casadi_int > &dim_b, const std::vector< casadi_int > &dim_c,
const std::vector< casadi_int > &a, const std::vector< casadi_int > &b,
const std::vector< casadi_int > &c) "

[INTERNAL]  Performs 1d linear interpolation.

The data-points to be interpolated are given as (x[i], v[i]). xq[j] is used
as interplating value

";

%feature("docstring") casadi::casadi_einstein "

Performs 1d linear interpolation.

The data-points to be interpolated are given as (x[i], v[i]). xq[j] is used
as interplating value

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_einstein "

Performs 1d linear interpolation.

The data-points to be interpolated are given as (x[i], v[i]). xq[j] is used
as interplating value

";

%feature("docstring")  casadi::GenericMatrixCommon::polyval(const MatType
&p, const MatType &x) "

[INTERNAL]  Evaluate a polynomial with coefficients p in x.

";

%feature("docstring") casadi::casadi_polyval "

Evaluate a polynomial with coefficients p in x.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_polyval "

Evaluate a polynomial with coefficients p in x.

";

%feature("docstring")  casadi::GenericMatrixCommon::nnz() const  "

Get the number of (structural) non-zero elements.

";

%feature("docstring")  casadi::GenericMatrixCommon::sym(const std::string
&name, casadi_int nrow=1, casadi_int ncol=1) "

Create an nrow-by-ncol symbolic primitive.

";

%feature("docstring")  casadi::GenericMatrixCommon::sym(const std::string
&name, const std::pair< casadi_int, casadi_int > &rc) "

Construct a symbolic primitive with given dimensions.

";

%feature("docstring")  casadi::GenericMatrixCommon::sym(const std::string
&name, const Sparsity &sp) "

Create symbolic primitive with a given sparsity pattern.

";

%feature("docstring")  casadi::GenericMatrixCommon::sym(const std::string
&name, const Sparsity &sp, casadi_int p) "

Create a vector of length p with with matrices with symbolic primitives of
given sparsity.

";

%feature("docstring")  casadi::GenericMatrixCommon::sym(const std::string
&name, casadi_int nrow, casadi_int ncol, casadi_int p) "

Create a vector of length p with nrow-by-ncol symbolic primitives.

";

%feature("docstring")  casadi::GenericMatrixCommon::sym(const std::string
&name, const Sparsity &sp, casadi_int p, casadi_int r) "

Create a vector of length r of vectors of length p with symbolic primitives
with given sparsity.

";

%feature("docstring")  casadi::GenericMatrixCommon::sym(const std::string
&name, casadi_int nrow, casadi_int ncol, casadi_int p, casadi_int r) "

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

%feature("docstring")  casadi::GenericMatrixCommon::row(casadi_int el) const
"

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::GenericMatrixCommon::diff(const MatType &x,
casadi_int n=1, casadi_int axis=-1) "

Returns difference (n-th order) along given axis (MATLAB convention)

";

%feature("docstring") casadi::casadi_diff "

Returns difference (n-th order) along given axis (MATLAB convention)

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_diff "

Returns difference (n-th order) along given axis (MATLAB convention)

";

%feature("docstring")  casadi::GenericMatrixCommon::nullspace(const MatType
&A) "

[INTERNAL]  Computes the nullspace of a matrix A.

Finds Z m-by-(m-n) such that AZ = 0 with A n-by-m with m > n

Assumes A is full rank

Inspired by Numerical Methods in Scientific Computing by Ake Bjorck

";

%feature("docstring") casadi::casadi_nullspace "

Computes the nullspace of a matrix A.

Finds Z m-by-(m-n) such that AZ = 0 with A n-by-m with m > n

Assumes A is full rank

Inspired by Numerical Methods in Scientific Computing by Ake Bjorck

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_nullspace "

Computes the nullspace of a matrix A.

Finds Z m-by-(m-n) such that AZ = 0 with A n-by-m with m > n

Assumes A is full rank

Inspired by Numerical Methods in Scientific Computing by Ake Bjorck

";

%feature("docstring")  casadi::GenericMatrixCommon::nnz_upper() const  "

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring")  casadi::GenericMatrixCommon::sumsqr(const MatType &x)
"

[INTERNAL]  Calculate sum of squares: sum_ij X_ij^2.

";

%feature("docstring") casadi::casadi_sumsqr "

Calculate sum of squares: sum_ij X_ij^2.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_sumsqr "

Calculate sum of squares: sum_ij X_ij^2.

";

%feature("docstring")  casadi::GenericMatrixCommon::norm_fro(const MatType
&x) "

[INTERNAL]  Frobenius norm.

";

%feature("docstring") casadi::casadi_norm_fro "

Frobenius norm.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_norm_fro "

Frobenius norm.

";

%feature("docstring")  casadi::GenericMatrixCommon::sparsity() const  "

Get the sparsity pattern.

";

%feature("docstring") casadi::casadi_sparsity "

Get the sparsity pattern.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_sparsity "

Get the sparsity pattern.

";

%feature("docstring")  casadi::GenericMatrixCommon::inv(const MatType &A) "

[INTERNAL]   Matrix inverse.

";

%feature("docstring") casadi::casadi_inv "

Matrix inverse.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_inv "

Matrix inverse.

";

%feature("docstring")  casadi::GenericMatrixCommon::inv(const MatType &A,
const std::string &lsolver, const Dict &options=Dict()) "

[INTERNAL]   Matrix inverse.

";

%feature("docstring") casadi::casadi_inv "

Matrix inverse.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_inv "

Matrix inverse.

";

%feature("docstring")  casadi::GenericMatrixCommon::interp1d(const
std::vector< double > &x, const MatType &v, const std::vector< double > &xq,
const std::string &mode, bool equidistant=false) "

Performs 1d linear interpolation.

The data-points to be interpolated are given as (x[i], v[i]). xq[j] is used
as interplating value

";

%feature("docstring") casadi::casadi_interp1d "

Performs 1d linear interpolation.

The data-points to be interpolated are given as (x[i], v[i]). xq[j] is used
as interplating value

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_interp1d "

Performs 1d linear interpolation.

The data-points to be interpolated are given as (x[i], v[i]). xq[j] is used
as interplating value

";

%feature("docstring")  casadi::GenericMatrixCommon::mpower(const MatType &x,
const MatType &n) "

Matrix power x^n.

";

%feature("docstring") casadi::casadi_mpower "

Matrix power x^n.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_mpower "

Matrix power x^n.

";

%feature("docstring")  casadi::GenericMatrixCommon::mpower(const MatType &x,
const MatType &y) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::GenericMatrixCommon::hessian(const MatType
&ex, const MatType &arg, const Dict &opts=Dict()) "

[INTERNAL] ";

%feature("docstring")  casadi::GenericMatrixCommon::hessian(const MatType
&ex, const MatType &arg, MatType &output_g, const Dict &opts=Dict()) "

[INTERNAL] ";

%feature("docstring")  casadi::GenericMatrixCommon::reverse(const
std::vector< MatType > &ex, const std::vector< MatType > &arg, const
std::vector< std::vector< MatType > > &v, const Dict &opts=Dict()) "

[INTERNAL]  Reverse directional derivative.

";

%feature("docstring") casadi::casadi_reverse "

Reverse directional derivative.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_reverse "

Reverse directional derivative.

";

%feature("docstring")  casadi::GenericMatrixCommon::which_depends(const
MatType &expr, const MatType &var, casadi_int order, bool tr) "

[INTERNAL]   Find out which variables enter with some order.

";

%feature("docstring") casadi::casadi_which_depends "

Find out which variables enter with some order.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_which_depends "

Find out which variables enter with some order.

";

%feature("docstring")  casadi::GenericMatrixCommon::forward(const
std::vector< MatType > &ex, const std::vector< MatType > &arg, const
std::vector< std::vector< MatType > > &v, const Dict &opts=Dict()) "

[INTERNAL]  Forward directional derivative.

";

%feature("docstring") casadi::casadi_forward "

Forward directional derivative.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_forward "

Forward directional derivative.

";

%feature("docstring")  casadi::GenericMatrixCommon::size() const  "

Get the shape.

";

%feature("docstring")  casadi::GenericMatrixCommon::size(casadi_int axis)
const  "

Get the size along a particular dimensions.

";

%feature("docstring") casadi::GenericMatrixCommon "

Matrix base class.

This is a common base class for MX and Matrix<>, introducing a uniform
syntax and implementing common functionality using the curiously recurring
template pattern (CRTP) idiom.  The class is designed with the idea that
\"everything is a matrix\", that is, also scalars and vectors. This
philosophy makes it easy to use and to interface in particularly with Python
and Matlab/Octave.  The syntax tries to stay as close as possible to the
ublas syntax when it comes to vector/matrix operations.  Index starts with
0. Index vec happens as follows: (rr, cc) -> k = rr+cc*size1() Vectors are
column vectors.  The storage format is Compressed Column Storage (CCS),
similar to that used for sparse matrices in Matlab, but unlike this format,
we do allow for elements to be structurally non-zero but numerically zero.
The sparsity pattern, which is reference counted and cached, can be accessed
with Sparsity& sparsity() Joel Andersson

C++ includes: generic_matrix.hpp ";

%feature("docstring")  casadi::GenericMatrixCommon::project(const MatType
&A, const Sparsity &sp, bool intersect=false) "

[INTERNAL]  Create a new matrix with a given sparsity pattern but with the
nonzeros taken from an existing matrix.

";

%feature("docstring") casadi::casadi_project "

Create a new matrix with a given sparsity pattern but with the nonzeros
taken from an existing matrix.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_project "

Create a new matrix with a given sparsity pattern but with the nonzeros
taken from an existing matrix.

";

%feature("docstring")  casadi::GenericMatrixCommon::expm(const MatType &A) "

[INTERNAL] ";

%feature("docstring")  casadi::GenericMatrixCommon::densify(const MatType
&x) "

[INTERNAL]  Make the matrix dense if not already.

";

%feature("docstring") casadi::casadi_densify "

Make the matrix dense if not already.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_densify "

Make the matrix dense if not already.

";

%feature("docstring")  casadi::GenericMatrixCommon::densify(const MatType
&x, const MatType &val) "

[INTERNAL]  Make the matrix dense and assign nonzeros to a value.

";

%feature("docstring") casadi::casadi_densify "

Make the matrix dense and assign nonzeros to a value.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_densify "

Make the matrix dense and assign nonzeros to a value.

";

%feature("docstring")  casadi::GenericMatrixCommon::is_vector() const  "

Check if the matrix is a row or column vector.

";

%feature("docstring")  casadi::GenericMatrixCommon::det(const MatType &A) "

[INTERNAL]   Matrix determinant (experimental)

";

%feature("docstring") casadi::casadi_det "

Matrix determinant (experimental)

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_det "

Matrix determinant (experimental)

";

%feature("docstring")  casadi::GenericMatrixCommon::shared(std::vector<
MatType > &ex, std::vector< MatType > &v, std::vector< MatType > &vdef,
const std::string &v_prefix="v_", const std::string &v_suffix="") "

[INTERNAL]  Extract shared subexpressions from an set of expressions.

";

%feature("docstring") casadi::casadi_shared "

Extract shared subexpressions from an set of expressions.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_shared "

Extract shared subexpressions from an set of expressions.

";

%feature("docstring")  casadi::GenericMatrixCommon::shared(const
std::vector< MatType > &ex, std::vector< MatType > &ex_output, std::vector<
MatType > &v, std::vector< MatType > &vdef, const std::string
&v_prefix="v_", const std::string &v_suffix="") "

[INTERNAL]  Extract shared subexpressions from an set of expressions.

";

%feature("docstring") casadi::casadi_shared "

Extract shared subexpressions from an set of expressions.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_shared "

Extract shared subexpressions from an set of expressions.

";

%feature("docstring")  casadi::GenericMatrixCommon::zeros(casadi_int nrow=1,
casadi_int ncol=1) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrixCommon::zeros(const Sparsity
&sp) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrixCommon::zeros(const std::pair<
casadi_int, casadi_int > &rc) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrixCommon::if_else(const MatType
&cond, const MatType &if_true, const MatType &if_false, bool
short_circuit=false) "

[INTERNAL]  Branching on MX nodes Ternary operator, \"cond ? if_true :
if_false\".

";

%feature("docstring") casadi::casadi_if_else "

Branching on MX nodes Ternary operator, \"cond ? if_true : if_false\".

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_if_else "

Branching on MX nodes Ternary operator, \"cond ? if_true : if_false\".

";

%feature("docstring")  casadi::GenericMatrixCommon::rows() const  "

Get the number of rows, Octave-style syntax.

";

%feature("docstring")  casadi::GenericMatrixCommon::linearize(const MatType
&f, const MatType &x, const MatType &x0, const Dict &opts=Dict()) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::GenericMatrixCommon::linearize(const MatType
&f, const MatType &x, const MatType &x0, const Dict &opts=Dict()) "

Linearize an expression.

";

%feature("docstring") casadi::casadi_linearize "

Linearize an expression.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_linearize "

Linearize an expression.

";

%feature("docstring")  casadi::GenericMatrixCommon::ones(casadi_int nrow=1,
casadi_int ncol=1) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::GenericMatrixCommon::ones(const Sparsity &sp)
"

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::GenericMatrixCommon::ones(const std::pair<
casadi_int, casadi_int > &rc) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";


// File: classcasadi_1_1GenericType.xml
%feature("docstring")  casadi::GenericType::serialize(SerializingStream &s)
const  "

Serialize an object.

";

%feature("docstring") casadi::GenericType "

Generic data type, can hold different types such as bool, casadi_int, string
etc.

Joel Andersson

C++ includes: generic_type.hpp ";


// File: classcasadi_1_1GenericTypeBase.xml
%feature("docstring") casadi::GenericTypeBase::~GenericTypeBase "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::SharedObjectInternal::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::GenericTypeBase::getType() const  "

[INTERNAL] ";

%feature("docstring")  casadi::GenericTypeBase::serialize(SerializingStream
&s) const  "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::disp(std::ostream
&stream, bool more) const  "

[INTERNAL]  Print a description of the object.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::GenericTypeBase "

[INTERNAL] C++ includes: generic_type_internal.hpp ";


// File: classcasadi_1_1GetNonzeros.xml


// File: classcasadi_1_1GetNonzerosParam.xml


// File: classcasadi_1_1GetNonzerosParamParam.xml


// File: classcasadi_1_1GetNonzerosParamSlice.xml


// File: classcasadi_1_1GetNonzerosParamVector.xml


// File: classcasadi_1_1GetNonzerosSlice.xml


// File: classcasadi_1_1GetNonzerosSlice2.xml


// File: classcasadi_1_1GetNonzerosSliceParam.xml


// File: classcasadi_1_1GetNonzerosVector.xml


// File: classcasadi_1_1GlobalOptions.xml
%feature("docstring") casadi::GlobalOptions "

Collects global CasADi options.

Note to developers: use sparingly. Global options are - in general - a
rather bad idea

this class must never be instantiated. Access its static members directly
Joris Gillis

C++ includes: global_options.hpp ";


// File: classcasadi_1_1Horzcat.xml


// File: classcasadi_1_1HorzRepmat.xml


// File: classcasadi_1_1HorzRepsum.xml


// File: classcasadi_1_1Horzsplit.xml


// File: classcasadi_1_1ImplicitFixedStepIntegrator.xml
%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::SharedObjectInternal::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::ImplicitFixedStepIntegrator::init(const Dict
&opts)  "

[INTERNAL]  Initialize stage.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::Integrator::setStopTime(IntegratorMemory
*mem, double tf) const  "

[INTERNAL]  Set stop time for the integration.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::Integrator::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::getDerivativeOptions(bool fwd)
const  "

[INTERNAL]  Set solver specific options to generated augmented integrators.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname)  "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FixedStepIntegrator::advance(IntegratorMemory
*mem, double t, double *x, double *z, double *q) const  "

[INTERNAL]  Advance solution in time.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::Integrator::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FixedStepIntegrator::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::Integrator::sp_reverse(bvec_t **arg, bvec_t
**res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator "



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::Implicit |
| s                |                 | passed down to   | FixedStepIntegra |
|                  |                 | the augmented    | tor              |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Implicit |
|                  |                 | SX expressions   | FixedStepIntegra |
|                  |                 | in problem       | tor              |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::Implicit |
|                  |                 |                  | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::Implicit |
| _elements        |                 | elements         | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::Implicit |
|                  |                 | at the initial   | FixedStepIntegra |
|                  |                 | time             | tor              |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::Implicit |
|                  |                 | statistics after | FixedStepIntegra |
|                  |                 | integration      | tor              |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::Implicit |
|                  |                 | function solver  | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::Implicit |
| ns               |                 | passed to the    | FixedStepIntegra |
|                  |                 | NLP Solver       | tor              |
+------------------+-----------------+------------------+------------------+
| show_eval_warnin | OT_BOOL         | Show warnings    | casadi::OracleFu |
| gs               |                 | generated from   | nction           |
|                  |                 | function         |                  |
|                  |                 | evaluations      |                  |
|                  |                 | [true]           |                  |
+------------------+-----------------+------------------+------------------+
| simplify         | OT_BOOL         | Implement as MX  | casadi::Implicit |
|                  |                 | Function (codege | FixedStepIntegra |
|                  |                 | neratable/serial | tor              |
|                  |                 | izable) default: |                  |
|                  |                 | false            |                  |
+------------------+-----------------+------------------+------------------+
| simplify_options | OT_DICT         | Any options to   | casadi::Implicit |
|                  |                 | pass to          | FixedStepIntegra |
|                  |                 | simplified form  | tor              |
|                  |                 | Function         |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::Implicit |
|                  |                 | time horizon     | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::Implicit |
|                  |                 | horizon          | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: integrator_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::serialize_body(SerializingStream &s)
const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::Integrator::q() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::p() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Integrator::algebraic_state_output(const MX
&Z) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::t() const  "

[INTERNAL] ";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::~ImplicitFixedStepIntegrator "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::Integrator::z() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::x() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FixedStepIntegrator::create_advanced(const
Dict &opts)  "

[INTERNAL]  Helper for a more powerful 'integrator' factory

";

%feature("docstring")  casadi::FixedStepIntegrator::reset(IntegratorMemory
*mem, double t, const double *x, const double *z, const double *p) const  "

[INTERNAL]  Reset the forward problem.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::Integrator::algebraic_state_init(const MX
&x0, const MX &z0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::Integrator::sp_jac_dae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (forward
problem)

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::Integrator::print_stats(IntegratorMemory
*mem) const  "

[INTERNAL]  Print solver statistics.

";

%feature("docstring")  casadi::OracleFunction::finalize()  "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::FixedStepIntegrator::free_mem(void *mem)
const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::ImplicitFixedStepIntegrator::getExplicitB()
const  "

[INTERNAL]  Get explicit dynamics (backward problem)

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Integrator::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::Integrator::has_forward(casadi_int nfwd)
const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::ImplicitFixedStepIntegrator::get_options()
const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FixedStepIntegrator::setupFG() "

[INTERNAL]  Setup F and G.

";

%feature("docstring")  casadi::Integrator::aug_adj(casadi_int nadj) const  "

[INTERNAL]  Generate a augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::ImplicitFixedStepIntegrator::getExplicit()
const  "

[INTERNAL]  Get explicit dynamics.

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Integrator::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::Integrator::aug_fwd(casadi_int nfwd) const  "

[INTERNAL]  Generate a augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::OracleFunction::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::OracleFunction::get_function() const  "

[INTERNAL]  Get list of dependency functions -1 Indicates irregularity.

";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::PluginInterface< Integrator  >::plugin_name()
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::Integrator::eval(const double **arg, double
**res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  evaluate

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(casadi_int
ind) const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FixedStepIntegrator::init_mem(void *mem)
const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FixedStepIntegrator::retreat(IntegratorMemory
*mem, double t, double *rx, double *rz, double *rq) const  "

[INTERNAL]  Retreat solution in time.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::Integrator::get_reverse(casadi_int nadj,
const std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::Integrator::rp() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::rq() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::has_reverse(casadi_int nadj)
const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::Integrator::get_forward(casadi_int nfwd,
const std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::Integrator::rz() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Integrator::rx() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Integrator::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::Integrator::sp_jac_rdae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (backward
problem)

";

%feature("docstring")  casadi::Integrator::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=nullptr) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::Integrator::sp_forward(const bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Integrator::serialize_type(SerializingStream
&s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FixedStepIntegrator::resetB(IntegratorMemory
*mem, double t, const double *rx, const double *rz, const double *rp) const
"

[INTERNAL]  Reset the backward problem and take time to tf.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::Integrator::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::Integrator::serialize_base_function() const
"

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::ImplicitFixedStepIntegrator(const
std::string &name, const Function &dae) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";


// File: classcasadi_1_1ImplicitToNlp.xml
%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring") casadi::ImplicitToNlp::ImplicitToNlp(const std::string
&name, const Function &f) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(casadi_int
ind) const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::Rootfinder::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::Rootfinder::sp_forward(const bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::Rootfinder::ad_forward(const std::vector< MX
> &arg, const std::vector< MX > &res, const std::vector< std::vector< MX > >
&fseed, std::vector< std::vector< MX > > &fsens, bool always_inline, bool
never_inline) const  "

[INTERNAL]  Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::ImplicitToNlp "

'nlp' plugin for Rootfinder

Use an Nlpsol as Rootfinder solver

>List of available options

+----------------+-----------+---------------------------------+
|       Id       |   Type    |           Description           |
+================+===========+=================================+
| nlpsol         | OT_STRING | Name of solver.                 |
+----------------+-----------+---------------------------------+
| nlpsol_options | OT_DICT   | Options to be passed to solver. |
+----------------+-----------+---------------------------------+

Joris Gillis

>List of available options

+-------------------+--------------+-------------------+-------------------+
|        Id         |     Type     |    Description    |      Used in      |
+===================+==============+===================+===================+
| constraints       | OT_INTVECTOR | Constrain the     | casadi::Rootfinde |
|                   |              | unknowns. 0       | r                 |
|                   |              | (default): no     |                   |
|                   |              | constraint on ui, |                   |
|                   |              | 1: ui >= 0.0, -1: |                   |
|                   |              | ui <= 0.0, 2: ui  |                   |
|                   |              | > 0.0, -2: ui <   |                   |
|                   |              | 0.0.              |                   |
+-------------------+--------------+-------------------+-------------------+
| error_on_fail     | OT_BOOL      | When the          | casadi::Rootfinde |
|                   |              | numerical process | r                 |
|                   |              | returns           |                   |
|                   |              | unsuccessfully,   |                   |
|                   |              | raise an error    |                   |
|                   |              | (default false).  |                   |
+-------------------+--------------+-------------------+-------------------+
| implicit_input    | OT_INT       | Index of the      | casadi::Rootfinde |
|                   |              | input that        | r                 |
|                   |              | corresponds to    |                   |
|                   |              | the actual root-  |                   |
|                   |              | finding           |                   |
+-------------------+--------------+-------------------+-------------------+
| implicit_output   | OT_INT       | Index of the      | casadi::Rootfinde |
|                   |              | output that       | r                 |
|                   |              | corresponds to    |                   |
|                   |              | the actual root-  |                   |
|                   |              | finding           |                   |
+-------------------+--------------+-------------------+-------------------+
| jacobian_function | OT_FUNCTION  | Function object   | casadi::Rootfinde |
|                   |              | for calculating   | r                 |
|                   |              | the Jacobian      |                   |
|                   |              | (autogenerated by |                   |
|                   |              | default)          |                   |
+-------------------+--------------+-------------------+-------------------+
| linear_solver     | OT_STRING    | User-defined      | casadi::Rootfinde |
|                   |              | linear solver     | r                 |
|                   |              | class. Needed for |                   |
|                   |              | sensitivities.    |                   |
+-------------------+--------------+-------------------+-------------------+
| linear_solver_opt | OT_DICT      | Options to be     | casadi::Rootfinde |
| ions              |              | passed to the     | r                 |
|                   |              | linear solver.    |                   |
+-------------------+--------------+-------------------+-------------------+
| nlpsol            | OT_STRING    | Name of solver.   | casadi::ImplicitT |
|                   |              |                   | oNlp              |
+-------------------+--------------+-------------------+-------------------+
| nlpsol_options    | OT_DICT      | Options to be     | casadi::ImplicitT |
|                   |              | passed to solver. | oNlp              |
+-------------------+--------------+-------------------+-------------------+

Diagrams
--------



C++ includes: implicit_to_nlp.hpp ";

%feature("docstring")  casadi::Rootfinder::has_reverse(casadi_int nadj)
const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::ImplicitToNlp::solve(void *mem) const  "

[INTERNAL]   Solve the system of equations and calculate derivatives.

";

%feature("docstring") casadi::casadi_solve "

Solve the system of equations and calculate derivatives.

";

%feature("docstring")  casadi::ImplicitToNlp::casadi_solve "

Solve the system of equations and calculate derivatives.

";

%feature("docstring")  casadi::ImplicitToNlp::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname)  "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::Rootfinder::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::Rootfinder::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::ImplicitToNlp::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::ImplicitToNlp::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::ImplicitToNlp::~ImplicitToNlp "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::Rootfinder::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::Rootfinder::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Rootfinder::get_forward(casadi_int nfwd,
const std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Rootfinder::has_forward(casadi_int nfwd)
const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::Rootfinder::serialize_type(SerializingStream
&s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::ImplicitToNlp::set_work(void *mem, const
double **&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::ImplicitToNlp::plugin_name() const  "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::Rootfinder::serialize_body(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::Rootfinder::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Rootfinder::sp_reverse(bvec_t **arg, bvec_t
**res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::Rootfinder::get_reverse(casadi_int nadj,
const std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Rootfinder::eval(const double **arg, double
**res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::Rootfinder::serialize_base_function() const
"

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::Rootfinder::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::Rootfinder::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::OracleFunction::get_function() const  "

[INTERNAL]  Get list of dependency functions -1 Indicates irregularity.

";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::finalize()  "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::Rootfinder::ad_reverse(const std::vector< MX
> &arg, const std::vector< MX > &res, const std::vector< std::vector< MX > >
&aseed, std::vector< std::vector< MX > > &asens, bool always_inline, bool
never_inline) const  "

[INTERNAL]  Create call to (cached) derivative function, reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::ImplicitToNlp::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=nullptr) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Rootfinder::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::ImplicitToNlp::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::OracleFunction::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::Rootfinder::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::ImplicitToNlp::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";


// File: classcasadi_1_1Importer.xml
%feature("docstring")  casadi::SharedObject::get_str(bool more=false) const
"

Get string representation.

";

%feature("docstring")  casadi::Importer::body(const std::string &symname)
const  "

Get the function body, if inlined.

";

%feature("docstring")  casadi::Importer::library() const  "

Get library name.

";

%feature("docstring")  casadi::Importer::serialize(SerializingStream &s)
const  "

Serialize an object.

";

%feature("docstring")  casadi::Importer::has_meta(const std::string &cmd,
casadi_int ind=-1) const  "

Does a meta entry exist?

";

%feature("docstring")  casadi::SharedObject::disp(std::ostream &stream, bool
more=false) const  "

Print a description of the object.

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring") casadi::Importer "

Importer.

Just-in-time compilation of code

General information
===================



List of plugins
===============



- clang

- shell

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Importer.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

clang
-----



Interface to the JIT compiler CLANG

>List of available options

+--------------+-----------------+-----------------------------------------+
|      Id      |      Type       |               Description               |
+==============+=================+=========================================+
| flags        | OT_STRINGVECTOR | Compile flags for the JIT compiler.     |
|              |                 | Default: None                           |
+--------------+-----------------+-----------------------------------------+
| include_path | OT_STRING       | Include paths for the JIT compiler. The |
|              |                 | include directory shipped with CasADi   |
|              |                 | will be automatically appended.         |
+--------------+-----------------+-----------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

shell
-----



Interface to the JIT compiler SHELL

>List of available options

+----------------------+-----------------+---------------------------------+
|          Id          |      Type       |           Description           |
+======================+=================+=================================+
| cleanup              | OT_BOOL         | Cleanup temporary files when    |
|                      |                 | unloading. Default: true        |
+----------------------+-----------------+---------------------------------+
| compiler             | OT_STRING       | Compiler command                |
+----------------------+-----------------+---------------------------------+
| compiler_flags       | OT_STRINGVECTOR | Alias for 'compiler_flags'      |
+----------------------+-----------------+---------------------------------+
| compiler_output_flag | OT_STRING       | Compiler flag to denote object  |
|                      |                 | output. Default: '-o '          |
+----------------------+-----------------+---------------------------------+
| compiler_setup       | OT_STRING       | Compiler setup command.         |
|                      |                 | Intended to be fixed. The       |
|                      |                 | 'flag' option is the prefered   |
|                      |                 | way to set custom flags.        |
+----------------------+-----------------+---------------------------------+
| extra_suffixes       | OT_STRINGVECTOR | List of suffixes for extra      |
|                      |                 | files that the compiler may     |
|                      |                 | generate. Default: None         |
+----------------------+-----------------+---------------------------------+
| flags                | OT_STRINGVECTOR | Compile flags for the JIT       |
|                      |                 | compiler. Default: None         |
+----------------------+-----------------+---------------------------------+
| folder               | OT_STRING       | Folder to put temporary objects |
|                      |                 | in.                             |
+----------------------+-----------------+---------------------------------+
| linker               | OT_STRING       | Linker command                  |
+----------------------+-----------------+---------------------------------+
| linker_flags         | OT_STRINGVECTOR | Linker flags for the JIT        |
|                      |                 | compiler. Default: None         |
+----------------------+-----------------+---------------------------------+
| linker_output_flag   | OT_STRING       | Linker flag to denote shared    |
|                      |                 | library output. Default: '-o '  |
+----------------------+-----------------+---------------------------------+
| linker_setup         | OT_STRING       | Linker setup command. Intended  |
|                      |                 | to be fixed. The 'flag' option  |
|                      |                 | is the prefered way to set      |
|                      |                 | custom flags.                   |
+----------------------+-----------------+---------------------------------+
| name                 | OT_STRING       | The file name used to write out |
|                      |                 | compiled objects/libraries. The |
|                      |                 | actual file names used depend   |
|                      |                 | on 'temp_suffix' and include    |
|                      |                 | extensions. Default:            |
|                      |                 | 'tmp_casadi_compiler_shell'     |
+----------------------+-----------------+---------------------------------+
| temp_suffix          | OT_BOOL         | Use a temporary (seemingly      |
|                      |                 | random) filename suffix for     |
|                      |                 | file names. This is desired for |
|                      |                 | thread-safety. This behaviour   |
|                      |                 | may defeat caching compiler     |
|                      |                 | wrappers. Default: true         |
+----------------------+-----------------+---------------------------------+

--------------------------------------------------------------------------------



Joris Gillis

C++ includes: importer.hpp ";

%feature("docstring")  casadi::Importer::plugin_name() const  "

Query plugin name.

";

%feature("docstring") casadi::Importer::Importer() "

Default constructor.

";

%feature("docstring") casadi::Importer::Importer(const std::string &name,
const std::string &compiler, const Dict &opts=Dict()) "

Importer factory.

";

%feature("docstring")  casadi::SharedObject::class_name() const  "

Get class name.

";

%feature("docstring")  casadi::Importer::get_meta(const std::string &cmd,
casadi_int ind=-1) const  "

Get entry as a text.

";

%feature("docstring")  casadi::SharedObject::print_ptr(std::ostream
&stream=casadi::uout()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring") casadi::Importer::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring")  casadi::Importer::inlined(const std::string &symname)
const  "

Check if a function is inlined.

";


// File: classcasadi_1_1InfSX.xml


// File: classcasadi_1_1Input.xml


// File: classcasadi_1_1IntegerSX.xml


// File: classcasadi_1_1Integrator.xml
%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::aug_fwd(casadi_int nfwd) const  "

[INTERNAL]  Generate a augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Integrator::z() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::x() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::Integrator::q() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::p() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::Integrator::t() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=nullptr) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname)  "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::Integrator::eval(const double **arg, double
**res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  evaluate

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::Integrator::resetB(IntegratorMemory *mem,
double t, const double *rx, const double *rz, const double *rp) const  "

[INTERNAL]  Reset the backward problem.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::serialize_body(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::Integrator::sp_reverse(bvec_t **arg, bvec_t
**res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Integrator::Integrator(const std::string
&name, const Function &oracle) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::Integrator::sp_jac_dae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (forward
problem)

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::Integrator::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::Integrator::advance(IntegratorMemory *mem,
double t, double *x, double *z, double *q) const  "

[INTERNAL]  Advance solution in time.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::Integrator::serialize_type(SerializingStream
&s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::Integrator::retreat(IntegratorMemory *mem,
double t, double *rx, double *rz, double *rq) const  "

[INTERNAL]  Retreat solution in time.

";

%feature("docstring")  casadi::Integrator::has_reverse(casadi_int nadj)
const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(casadi_int
ind) const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::Integrator "

Internal storage for integrator related data.

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::Integrat |
| s                |                 | passed down to   | or               |
|                  |                 | the augmented    |                  |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Integrat |
|                  |                 | SX expressions   | or               |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::Integrat |
|                  |                 |                  | or               |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::Integrat |
| _elements        |                 | elements         | or               |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::Integrat |
|                  |                 | at the initial   | or               |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::Integrat |
|                  |                 | statistics after | or               |
|                  |                 | integration      |                  |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::Integrat |
|                  |                 | function solver  | or               |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::Integrat |
| ns               |                 | passed to the    | or               |
|                  |                 | NLP Solver       |                  |
+------------------+-----------------+------------------+------------------+
| show_eval_warnin | OT_BOOL         | Show warnings    | casadi::OracleFu |
| gs               |                 | generated from   | nction           |
|                  |                 | function         |                  |
|                  |                 | evaluations      |                  |
|                  |                 | [true]           |                  |
+------------------+-----------------+------------------+------------------+
| simplify         | OT_BOOL         | Implement as MX  | casadi::Integrat |
|                  |                 | Function (codege | or               |
|                  |                 | neratable/serial |                  |
|                  |                 | izable) default: |                  |
|                  |                 | false            |                  |
+------------------+-----------------+------------------+------------------+
| simplify_options | OT_DICT         | Any options to   | casadi::Integrat |
|                  |                 | pass to          | or               |
|                  |                 | simplified form  |                  |
|                  |                 | Function         |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::Integrat |
|                  |                 | time horizon     | or               |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::Integrat |
|                  |                 | horizon          | or               |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: integrator_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::Integrator::setStopTime(IntegratorMemory
*mem, double tf) const  "

[INTERNAL]  Set stop time for the integration.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::Integrator::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Integrator::getDerivativeOptions(bool fwd)
const  "

[INTERNAL]  Set solver specific options to generated augmented integrators.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::SharedObjectInternal::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::Integrator::sp_jac_rdae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (backward
problem)

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::Integrator::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Integrator::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::Integrator::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Integrator::algebraic_state_output(const MX
&Z) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::algebraic_state_init(const MX
&x0, const MX &z0) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::Integrator::aug_adj(casadi_int nadj) const  "

[INTERNAL]  Generate a augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring")  casadi::Integrator::create_advanced(const Dict &opts)
"

[INTERNAL]  Helper for a more powerful 'integrator' factory

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::OracleFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::Integrator::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::Integrator::~Integrator "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Integrator::print_stats(IntegratorMemory
*mem) const  "

[INTERNAL]  Print solver statistics.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::PluginInterface< Integrator  >::plugin_name()
const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::OracleFunction::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::Integrator::has_forward(casadi_int nfwd)
const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::OracleFunction::finalize()  "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::Integrator::serialize_base_function() const
"

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::OracleFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::Integrator::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::OracleFunction::get_function() const  "

[INTERNAL]  Get list of dependency functions -1 Indicates irregularity.

";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::Integrator::get_forward(casadi_int nfwd,
const std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::Integrator::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::Integrator::reset(IntegratorMemory *mem,
double t, const double *x, const double *z, const double *p) const  "

[INTERNAL]  Reset the forward problem.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::Integrator::get_reverse(casadi_int nadj,
const std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::Integrator::rp() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::rq() const  "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::Integrator::rz() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::Integrator::rx() const  "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::Integrator::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::Integrator::sp_forward(const bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";


// File: classcasadi_1_1Interpolant.xml
%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::Interpolant::serialize_type(SerializingStream
&s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::Interpolant::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::Interpolant::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(casadi_int
ind) const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::finalize()  "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(casadi_int
nadj, const std::string &name, const std::vector< std::string > &inames,
const std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Interpolant::get_sparsity_out(casadi_int i)
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::Interpolant::coeff_size() const  "

[INTERNAL]  Size of the flattened coefficients vector.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::get_forward(casadi_int
nfwd, const std::string &name, const std::vector< std::string > &inames,
const std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::Interpolant::serialize_body(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::Interpolant::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Interpolant::has_parametric_grid() const  "

[INTERNAL]  Is parametric?

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::Interpolant::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::Interpolant::serialize_base_function() const
"

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::Interpolant::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(casadi_int
nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::has_forward(casadi_int
nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::Interpolant::arg_values() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::eval(const double **arg,
double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Interpolant "

Internal class

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| batch_x          | OT_INT          | Evaluate a batch | casadi::Interpol |
|                  |                 | of different     | ant              |
|                  |                 | inputs at once   |                  |
|                  |                 | (default 1).     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| inline           | OT_BOOL         | Implement the    | casadi::Interpol |
|                  |                 | lookup table in  | ant              |
|                  |                 | MX primitives.   |                  |
|                  |                 | Useful when you  |                  |
|                  |                 | need derivatives |                  |
|                  |                 | with respect to  |                  |
|                  |                 | grid and/or      |                  |
|                  |                 | coefficients.    |                  |
|                  |                 | Such derivatives |                  |
|                  |                 | are              |                  |
|                  |                 | fundamentally    |                  |
|                  |                 | dense, so use    |                  |
|                  |                 | with caution.    |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| lookup_mode      | OT_STRINGVECTOR | Specifies, for   | casadi::Interpol |
|                  |                 | each grid        | ant              |
|                  |                 | dimenion, the    |                  |
|                  |                 | lookup algorithm |                  |
|                  |                 | used to find the |                  |
|                  |                 | correct index.   |                  |
|                  |                 | 'linear' uses a  |                  |
|                  |                 | for-loop +       |                  |
|                  |                 | break; (default  |                  |
|                  |                 | when             |                  |
|                  |                 | #knots<=100),    |                  |
|                  |                 | 'exact' uses     |                  |
|                  |                 | floored division |                  |
|                  |                 | (only for        |                  |
|                  |                 | uniform grids),  |                  |
|                  |                 | 'binary' uses a  |                  |
|                  |                 | binary search.   |                  |
|                  |                 | (default when    |                  |
|                  |                 | #knots>100).     |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: interpolant_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::Interpolant::Interpolant(const std::string
&name, const std::vector< double > &grid, const std::vector< casadi_int >
&offset, const std::vector< double > &values, casadi_int m) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::Interpolant::arg_grid() const  "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::Interpolant::~Interpolant "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::Interpolant::class_name() const  "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::Interpolant::is_diff_in(casadi_int i)  "

[INTERNAL] ";

%feature("docstring")  casadi::Interpolant::has_parametric_values() const  "

[INTERNAL]  Is parametric?

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::ProtoFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::Interpolant::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::PluginInterface< Interpolant
>::plugin_name() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::Interpolant::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";


// File: classcasadi_1_1InterruptHandler.xml
%feature("docstring") casadi::InterruptHandler "

[INTERNAL]  Takes care of user interrupts (Ctrl+C)

This is an internal class.

Joris Gillis

C++ includes: casadi_interrupt.hpp ";


// File: classcasadi_1_1Inverse.xml


// File: classcasadi_1_1IOInstruction.xml


// File: classcasadi_1_1IpoptUserClass.xml
%feature("docstring")  casadi::IpoptUserClass::get_starting_point(Index n,
bool init_x, Number *x, bool init_z, Number *z_L, Number *z_U, Index m, bool
init_lambda, Number *lambda)  "

[INTERNAL]  Method to return the starting point for the algorithm

";

%feature("docstring")
casadi::IpoptUserClass::finalize_solution(SolverReturn status, Index n,
const Number *x, const Number *z_L, const Number *z_U, Index m, const Number
*g, const Number *lambda, Number obj_value, const IpoptData *ip_data,
IpoptCalculatedQuantities *ip_cq)  "

[INTERNAL]  This method is called when the algorithm is complete so the TNLP
can store/write the solution

";

%feature("docstring") casadi::IpoptUserClass "

[INTERNAL] C++ includes: ipopt_nlp.hpp ";

%feature("docstring")
casadi::IpoptUserClass::get_list_of_nonlinear_variables(Index
num_nonlin_vars, Index *pos_nonlin_vars)  "

[INTERNAL]  Specify which variables that appear in the Hessian

";

%feature("docstring")  casadi::IpoptUserClass::eval_grad_f(Index n, const
Number *x, bool new_x, Number *grad_f)  "

[INTERNAL]  Method to return the gradient of the objective

";

%feature("docstring")  casadi::IpoptUserClass::get_var_con_metadata(Index n,
StringMetaDataMapType &var_string_md, IntegerMetaDataMapType
&var_integer_md, NumericMetaDataMapType &var_numeric_md, Index m,
StringMetaDataMapType &con_string_md, IntegerMetaDataMapType
&con_integer_md, NumericMetaDataMapType &con_numeric_md)  "

[INTERNAL]  Allows setting information about variables and constraints

";

%feature("docstring") casadi::IpoptUserClass::~IpoptUserClass "

[INTERNAL] ";

%feature("docstring")  casadi::IpoptUserClass::eval_g(Index n, const Number
*x, bool new_x, Index m, Number *g)  "

[INTERNAL]  Method to return the constraint residuals

";

%feature("docstring")  casadi::IpoptUserClass::get_nlp_info(Index &n, Index
&m, Index &nnz_jac_g, Index &nnz_h_lag, IndexStyleEnum &index_style)  "

[INTERNAL]  Method to return some info about the nlp

";

%feature("docstring")  casadi::IpoptUserClass::eval_f(Index n, const Number
*x, bool new_x, Number &obj_value)  "

[INTERNAL]  Method to return the objective value

";

%feature("docstring")
casadi::IpoptUserClass::get_number_of_nonlinear_variables()  "

[INTERNAL]  Specify the number of variables that appear in the Hessian

";

%feature("docstring")  casadi::IpoptUserClass::eval_jac_g(Index n, const
Number *x, bool new_x, Index m, Index nele_jac, Index *iRow, Index *jCol,
Number *values)  "

[INTERNAL]  Method to return: 1) The structure of the Jacobian (if
\"values\" is NULL) 2) The values of the Jacobian (if \"values\" is not
NULL)

";

%feature("docstring")  casadi::IpoptUserClass::finalize_metadata(Index n,
const StringMetaDataMapType &var_string_md, const IntegerMetaDataMapType
&var_integer_md, const NumericMetaDataMapType &var_numeric_md, Index m,
const StringMetaDataMapType &con_string_md, const IntegerMetaDataMapType
&con_integer_md, const NumericMetaDataMapType &con_numeric_md)  "

[INTERNAL]  Retrieve information about variables and constraints

";

%feature("docstring")  casadi::IpoptUserClass::get_bounds_info(Index n,
Number *x_l, Number *x_u, Index m, Number *g_l, Number *g_u)  "

[INTERNAL]  Method to return the bounds for my problem

";

%feature("docstring")  casadi::IpoptUserClass::eval_h(Index n, const Number
*x, bool new_x, Number obj_factor, Index m, const Number *lambda, bool
new_lambda, Index nele_hess, Index *iRow, Index *jCol, Number *values)  "

[INTERNAL]  Method to return: 1) The structure of the hessian of the
Lagrangian (if \"values\" is NULL) 2) The values of the hessian of the
Lagrangian (if \"values\" is not NULL)

";

%feature("docstring")
casadi::IpoptUserClass::intermediate_callback(AlgorithmMode mode, Index
iter, Number obj_value, Number inf_pr, Number inf_du, Number mu, Number
d_norm, Number regularization_size, Number alpha_du, Number alpha_pr, Index
ls_trials, const IpoptData *ip_data, IpoptCalculatedQuantities *ip_cq)  "

[INTERNAL]  This method is called at every iteration

";

%feature("docstring") casadi::IpoptUserClass::IpoptUserClass(const
IpoptInterface &solver, IpoptMemory *mem) "

[INTERNAL] ";


// File: classcasadi_1_1Ipqp.xml
%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(casadi_int
nadj, const std::string &name, const std::vector< std::string > &inames,
const std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(casadi_int
nfwd, const std::string &name, const std::vector< std::string > &inames,
const std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::Conic::serialize_type(SerializingStream &s)
const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::Ipqp::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::Ipqp::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::Conic::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::has_forward(casadi_int
nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::Ipqp::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::Conic::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Ipqp::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::Conic::generateNativeCode(std::ostream &file)
const  "

[INTERNAL]  Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(casadi_int
nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::Conic::is_a(const std::string &type, bool
recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::Conic::psd_support() const  "

[INTERNAL]  Can psd constraints be treated.

";

%feature("docstring")  casadi::Ipqp::plugin_name() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring") casadi::Ipqp "

'ipqp' plugin for Conic

Solves QPs using a Mehrotra predictor-corrector interior point method

>List of available options

+-----------------------+-----------+--------------------------------------+
|          Id           |   Type    |             Description              |
+=======================+===========+======================================+
| constr_viol_tol       | OT_DOUBLE | Constraint violation tolerance       |
|                       |           | [1e-8].                              |
+-----------------------+-----------+--------------------------------------+
| dual_inf_tol          | OT_DOUBLE | Dual feasibility violation tolerance |
|                       |           | [1e-8]                               |
+-----------------------+-----------+--------------------------------------+
| linear_solver         | OT_STRING | A custom linear solver creator       |
|                       |           | function [default: ldl]              |
+-----------------------+-----------+--------------------------------------+
| linear_solver_options | OT_DICT   | Options to be passed to the linear   |
|                       |           | solver                               |
+-----------------------+-----------+--------------------------------------+
| max_iter              | OT_INT    | Maximum number of iterations [1000]. |
+-----------------------+-----------+--------------------------------------+
| min_lam               | OT_DOUBLE | Smallest multiplier treated as       |
|                       |           | inactive for the initial active set  |
|                       |           | [0].                                 |
+-----------------------+-----------+--------------------------------------+
| print_header          | OT_BOOL   | Print header [true].                 |
+-----------------------+-----------+--------------------------------------+
| print_info            | OT_BOOL   | Print info [true].                   |
+-----------------------+-----------+--------------------------------------+
| print_iter            | OT_BOOL   | Print iterations [true].             |
+-----------------------+-----------+--------------------------------------+

Joel Andersson

>List of available options

+---------------------+---------------+--------------------+---------------+
|         Id          |     Type      |    Description     |    Used in    |
+=====================+===============+====================+===============+
| constr_viol_tol     | OT_DOUBLE     | Constraint         | casadi::Ipqp  |
|                     |               | violation          |               |
|                     |               | tolerance [1e-8].  |               |
+---------------------+---------------+--------------------+---------------+
| discrete            | OT_BOOLVECTOR | Indicates which of | casadi::Conic |
|                     |               | the variables are  |               |
|                     |               | discrete, i.e.     |               |
|                     |               | integer-valued     |               |
+---------------------+---------------+--------------------+---------------+
| dual_inf_tol        | OT_DOUBLE     | Dual feasibility   | casadi::Ipqp  |
|                     |               | violation          |               |
|                     |               | tolerance [1e-8]   |               |
+---------------------+---------------+--------------------+---------------+
| error_on_fail       | OT_BOOL       | When the numerical | casadi::Conic |
|                     |               | process returns    |               |
|                     |               | unsuccessfully,    |               |
|                     |               | raise an error     |               |
|                     |               | (default false).   |               |
+---------------------+---------------+--------------------+---------------+
| linear_solver       | OT_STRING     | A custom linear    | casadi::Ipqp  |
|                     |               | solver creator     |               |
|                     |               | function [default: |               |
|                     |               | ldl]               |               |
+---------------------+---------------+--------------------+---------------+
| linear_solver_optio | OT_DICT       | Options to be      | casadi::Ipqp  |
| ns                  |               | passed to the      |               |
|                     |               | linear solver      |               |
+---------------------+---------------+--------------------+---------------+
| max_iter            | OT_INT        | Maximum number of  | casadi::Ipqp  |
|                     |               | iterations [1000]. |               |
+---------------------+---------------+--------------------+---------------+
| min_lam             | OT_DOUBLE     | Smallest           | casadi::Ipqp  |
|                     |               | multiplier treated |               |
|                     |               | as inactive for    |               |
|                     |               | the initial active |               |
|                     |               | set [0].           |               |
+---------------------+---------------+--------------------+---------------+
| print_header        | OT_BOOL       | Print header       | casadi::Ipqp  |
|                     |               | [true].            |               |
+---------------------+---------------+--------------------+---------------+
| print_info          | OT_BOOL       | Print info [true]. | casadi::Ipqp  |
+---------------------+---------------+--------------------+---------------+
| print_iter          | OT_BOOL       | Print iterations   | casadi::Ipqp  |
|                     |               | [true].            |               |
+---------------------+---------------+--------------------+---------------+
| print_problem       | OT_BOOL       | Print a numeric    | casadi::Conic |
|                     |               | description of the |               |
|                     |               | problem            |               |
+---------------------+---------------+--------------------+---------------+

Diagrams
--------



C++ includes: ipqp.hpp ";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::Conic::integer_support() const  "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::Conic::check_inputs(const double *lbx, const
double *ubx, const double *lba, const double *uba) const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::Ipqp::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Ipqp::Ipqp(const std::string &name, const
std::map< std::string, Sparsity > &st) "

[INTERNAL]  Create a new Solver.

";

%feature("docstring")  casadi::Conic::get_default_in(casadi_int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::Ipqp::solve(const double **arg, double **res,
casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]   Solve the QP.

";

%feature("docstring") casadi::casadi_solve "

Solve the QP.

";

%feature("docstring")  casadi::Ipqp::casadi_solve "

Solve the QP.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::Conic::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::Ipqp::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::Ipqp::serialize_body(SerializingStream &s)
const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::Conic::set_work(void *mem, const double
**&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::Ipqp::~Ipqp "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Conic::serialize_base_function() const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::Conic::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Conic::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::Ipqp::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::FunctionInternal::finalize()  "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Conic::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::Conic::eval(const double **arg, double **res,
casadi_int *iw, double *w, void *mem) const final "

[INTERNAL]   Solve the QP.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";


// File: classcasadi_1_1JitFunction.xml
%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::get_name_out(casadi_int i)
"

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::JitFunction::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::JitFunction::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")
casadi::FunctionInternal::serialize_type(SerializingStream &s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::eval(const double **arg,
double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::JitFunction "

[INTERNAL]

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| buffered         | OT_BOOL         | Buffer the       | casadi::JitFunct |
|                  |                 | calls, user does | ion              |
|                  |                 | not need to      |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| hess             | OT_STRING       | Function body    | casadi::JitFunct |
|                  |                 | for Hessian      | ion              |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac              | OT_STRING       | Function body    | casadi::JitFunct |
|                  |                 | for Jacobian     | ion              |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: jit_function.hpp ";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::JitFunction::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::ProtoFunction::serialize_base_function()
const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::ProtoFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::JitFunction::JitFunction(const std::string
&name, const std::string &body, const std::vector< std::string > &name_in,
const std::vector< std::string > &name_out, const std::vector< Sparsity >
&sparsity_in, const std::vector< Sparsity > &sparsity_out) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::JitFunction::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(casadi_int
ind) const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::JitFunction::codegen_body(CodeGenerator &g)
const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")
casadi::FunctionInternal::serialize_body(SerializingStream &s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(casadi_int
nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::JitFunction::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(casadi_int
nadj, const std::string &name, const std::vector< std::string > &inames,
const std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::JitFunction::has_jacobian() const  "

[INTERNAL]  Jacobian of all outputs with respect to all inputs.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::JitFunction::class_name() const  "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::has_forward(casadi_int
nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::get_forward(casadi_int
nfwd, const std::string &name, const std::vector< std::string > &inames,
const std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_out(casadi_int
i) "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_name_in(casadi_int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::JitFunction::~JitFunction "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_in(casadi_int
i) "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::JitFunction::get_jacobian(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Jacobian of all outputs with respect to all inputs.

";

%feature("docstring")  casadi::FunctionInternal::finalize()  "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";


// File: classcasadi_1_1KeyboardInterruptException.xml
%feature("docstring")  casadi::CasadiException::what() const  "

throw () Display error.

";

%feature("docstring")
casadi::KeyboardInterruptException::~KeyboardInterruptException "

throw () Destructor.

";

%feature("docstring")
casadi::KeyboardInterruptException::KeyboardInterruptException() "

Default constructor.

";

%feature("docstring") casadi::KeyboardInterruptException "

C++ includes: exception.hpp ";


// File: classcasadi_1_1LapackLu.xml
%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::LapackLu::nfact(void *mem, const double *A)
const  "

[INTERNAL]  Numeric factorization.

";

%feature("docstring")  casadi::LinsolInternal::nrow() const  "

[INTERNAL]  Get sparsity pattern.

";

%feature("docstring")  casadi::LapackLu::solve(void *mem, const double *A,
double *x, casadi_int nrhs, bool tr) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::LapackLu::init(const Dict &opts)  "

[INTERNAL]  Initialize the solver.

";

%feature("docstring") casadi::LapackLu::~LapackLu "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::LapackLu::serialize_body(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::LapackLu::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::LinsolInternal::sfact(void *mem, const double
*A) const  "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::generate(CodeGenerator &g,
const std::string &A, const std::string &x, casadi_int nrhs, bool tr) const
"

[INTERNAL]  Generate C code.

";

%feature("docstring")  casadi::LinsolInternal::linsol_eval_sx(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem, bool tr,
casadi_int nrhs) const  "

[INTERNAL]  Evaluate SX, possibly transposed.

";

%feature("docstring")  casadi::ProtoFunction::serialize_base_function()
const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::LinsolInternal::ncol() const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::LapackLu::LapackLu(const std::string &name,
const Sparsity &sp) "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::LapackLu::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::ProtoFunction::finalize() "

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::LinsolInternal::rank(void *mem, const double
*A) const  "

[INTERNAL]   Matrix rank.

";

%feature("docstring")  casadi::LinsolInternal::colind() const  "

[INTERNAL] ";

%feature("docstring")  casadi::LapackLu::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::LinsolInternal::nnz() const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")
casadi::LinsolInternal::serialize_type(SerializingStream &s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::LapackLu "

'lapacklu' plugin for Linsol

This class solves the linear system A.x=b by making an LU factorization of
A: A = L.U, with L lower and U upper triangular

>List of available options

+-----------------------------+---------+----------------------------------+
|             Id              |  Type   |           Description            |
+=============================+=========+==================================+
| allow_equilibration_failure | OT_BOOL | Non-fatal error when             |
|                             |         | equilibration fails              |
+-----------------------------+---------+----------------------------------+
| equilibration               | OT_BOOL | Equilibrate the matrix           |
+-----------------------------+---------+----------------------------------+

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| allow_equilibrat | OT_BOOL         | Non-fatal error  | casadi::LapackLu |
| ion_failure      |                 | when             |                  |
|                  |                 | equilibration    |                  |
|                  |                 | fails            |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| equilibration    | OT_BOOL         | Equilibrate the  | casadi::LapackLu |
|                  |                 | matrix           |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: lapack_lu.hpp ";

%feature("docstring")  casadi::LinsolInternal::row() const  "

[INTERNAL] ";

%feature("docstring")  casadi::LapackLu::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::LinsolInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::LinsolInternal::neig(void *mem, const double
*A) const  "

[INTERNAL]  Number of negative eigenvalues.

";

%feature("docstring")  casadi::ProtoFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";


// File: classcasadi_1_1LapackQr.xml
%feature("docstring")  casadi::LapackQr::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::LapackQr::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::LinsolInternal::sfact(void *mem, const double
*A) const  "

[INTERNAL] ";

%feature("docstring")  casadi::LapackQr::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::LinsolInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::ProtoFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::LinsolInternal::ncol() const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::LinsolInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::ProtoFunction::finalize() "

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::LapackQr::solve_batch(void *mem, const double
*A, double *x, casadi_int nrhs, bool tr) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::LinsolInternal::rank(void *mem, const double
*A) const  "

[INTERNAL]   Matrix rank.

";

%feature("docstring")  casadi::LinsolInternal::colind() const  "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::LinsolInternal::nnz() const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")
casadi::LinsolInternal::serialize_type(SerializingStream &s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::LapackQr "

'lapackqr' plugin for Linsol

This class solves the linear system A.x=b by making an QR factorization of
A: A = Q.R, with Q orthogonal and R upper triangular

>List of available options

+----------+--------+------------------------------------------------------+
|    Id    |  Type  |                     Description                      |
+==========+========+======================================================+
| max_nrhs | OT_INT | Maximum number of right-hand-sides that get          |
|          |        | processed in a single pass [default:10].             |
+----------+--------+------------------------------------------------------+

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_nrhs         | OT_INT          | Maximum number   | casadi::LapackQr |
|                  |                 | of right-hand-   |                  |
|                  |                 | sides that get   |                  |
|                  |                 | processed in a   |                  |
|                  |                 | single pass      |                  |
|                  |                 | [default:10].    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: lapack_qr.hpp ";

%feature("docstring")  casadi::LinsolInternal::row() const  "

[INTERNAL] ";

%feature("docstring")  casadi::LapackQr::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::LinsolInternal::linsol_eval_sx(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem, bool tr,
casadi_int nrhs) const  "

[INTERNAL]  Evaluate SX, possibly transposed.

";

%feature("docstring")  casadi::LinsolInternal::neig(void *mem, const double
*A) const  "

[INTERNAL]  Number of negative eigenvalues.

";

%feature("docstring")  casadi::LinsolInternal::generate(CodeGenerator &g,
const std::string &A, const std::string &x, casadi_int nrhs, bool tr) const
"

[INTERNAL]  Generate C code.

";

%feature("docstring")  casadi::ProtoFunction::serialize_base_function()
const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::LapackQr::LapackQr(const std::string &name,
const Sparsity &sp) "

[INTERNAL] ";

%feature("docstring")  casadi::LapackQr::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::LapackQr::nfact(void *mem, const double *A)
const  "

[INTERNAL]  Numeric factorization.

";

%feature("docstring")  casadi::LinsolInternal::nrow() const  "

[INTERNAL]  Get sparsity pattern.

";

%feature("docstring")  casadi::LapackQr::solve(void *mem, const double *A,
double *x, casadi_int nrhs, bool tr) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::LapackQr::~LapackQr "

[INTERNAL] ";

%feature("docstring")  casadi::LapackQr::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::LapackQr::plugin_name() const  "

[INTERNAL] ";

%feature("docstring")  casadi::LapackQr::serialize_body(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object without type information.

";


// File: classcasadi_1_1LinearInterpolant.xml
%feature("docstring")  casadi::Interpolant::get_sparsity_out(casadi_int i)
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")
casadi::LinearInterpolant::serialize_body(SerializingStream &s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::LinearInterpolant::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Full Jacobian.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::LinearInterpolant::has_jacobian() const  "

[INTERNAL]  Full Jacobian.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(casadi_int
nfwd, const std::string &name, const std::vector< std::string > &inames,
const std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::Interpolant::coeff_size() const  "

[INTERNAL]  Size of the flattened coefficients vector.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::Interpolant::arg_grid() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::Interpolant::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::Interpolant::arg_values() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::Interpolant::is_diff_in(casadi_int i)  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::LinearInterpolant::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::Interpolant::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::LinearInterpolant::LinearInterpolant(const
std::string &name, const std::vector< double > &grid, const std::vector<
casadi_int > &offset, const std::vector< double > &values, casadi_int m) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::LinearInterpolant::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::Interpolant::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(casadi_int
nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::LinearInterpolant::plugin_name() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_default_in(casadi_int
ind) const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::Interpolant::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(casadi_int
nadj, const std::string &name, const std::vector< std::string > &inames,
const std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::LinearInterpolant "

'linear' plugin for Interpolant Implements a multilinear interpolant: For
1D, the interpolating polynomial will be linear. For 2D, the interpolating
polynomial will be bilinear, etc.

>List of available options

+-------------+-----------------+------------------------------------------+
|     Id      |      Type       |               Description                |
+=============+=================+==========================================+
| lookup_mode | OT_STRINGVECTOR | Sets, for each grid dimenion, the lookup |
|             |                 | algorithm used to find the correct       |
|             |                 | index. 'linear' uses a for-loop + break; |
|             |                 | 'exact' uses floored division (only for  |
|             |                 | uniform grids).                          |
+-------------+-----------------+------------------------------------------+

Joel Andersson

>List of available options

+-------------+-----------------+---------------------+--------------------+
|     Id      |      Type       |     Description     |      Used in       |
+=============+=================+=====================+====================+
| batch_x     | OT_INT          | Evaluate a batch of | casadi::Interpolan |
|             |                 | different inputs at | t                  |
|             |                 | once (default 1).   |                    |
+-------------+-----------------+---------------------+--------------------+
| inline      | OT_BOOL         | Implement the       | casadi::Interpolan |
|             |                 | lookup table in MX  | t                  |
|             |                 | primitives. Useful  |                    |
|             |                 | when you need       |                    |
|             |                 | derivatives with    |                    |
|             |                 | respect to grid     |                    |
|             |                 | and/or              |                    |
|             |                 | coefficients. Such  |                    |
|             |                 | derivatives are     |                    |
|             |                 | fundamentally       |                    |
|             |                 | dense, so use with  |                    |
|             |                 | caution.            |                    |
+-------------+-----------------+---------------------+--------------------+
| lookup_mode | OT_STRINGVECTOR | Sets, for each grid | casadi::LinearInte |
|             |                 | dimenion, the       | rpolant            |
|             |                 | lookup algorithm    |                    |
|             |                 | used to find the    |                    |
|             |                 | correct index.      |                    |
|             |                 | 'linear' uses a     |                    |
|             |                 | for-loop + break;   |                    |
|             |                 | 'exact' uses        |                    |
|             |                 | floored division    |                    |
|             |                 | (only for uniform   |                    |
|             |                 | grids).             |                    |
+-------------+-----------------+---------------------+--------------------+

Diagrams
--------



C++ includes: linear_interpolant.hpp ";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::Interpolant::has_parametric_values() const  "

[INTERNAL]  Is parametric?

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::has_forward(casadi_int
nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::Interpolant::serialize_base_function() const
"

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::finalize()  "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::LinearInterpolant::class_name() const  "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")
casadi::LinearInterpolant::serialize_type(SerializingStream &s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::Interpolant::has_parametric_grid() const  "

[INTERNAL]  Is parametric?

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::LinearInterpolant::eval(const double **arg,
double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::Interpolant::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::LinearInterpolant::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::LinearInterpolant::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::LinearInterpolant::~LinearInterpolant "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";


// File: classcasadi_1_1LinearInterpolantJac.xml
%feature("docstring")  casadi::FunctionInternal::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::LinearInterpolantJac::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Full Jacobian.

";

%feature("docstring")  casadi::LinearInterpolantJac::init(const Dict &opts)
"

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::get_name_out(casadi_int i)
"

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::LinearInterpolantJac::~LinearInterpolantJac "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::ProtoFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::LinearInterpolantJac::class_name() const  "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(casadi_int
ind) const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::LinearInterpolantJac::has_parametric_grid()
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::FunctionInternal::get_name_in(casadi_int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::LinearInterpolantJac::eval(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")
casadi::LinearInterpolantJac::codegen_body(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_out(casadi_int
i) "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_in(casadi_int
i) "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::LinearInterpolantJac::has_parametric_values()
const  "

[INTERNAL]  Is parametric?

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")
casadi::LinearInterpolantJac::serialize_type(SerializingStream &s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(casadi_int
nadj, const std::string &name, const std::vector< std::string > &inames,
const std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::get_forward(casadi_int
nfwd, const std::string &name, const std::vector< std::string > &inames,
const std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::LinearInterpolantJac::has_jacobian() const  "

[INTERNAL]  Full Jacobian.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")
casadi::LinearInterpolantJac::serialize_base_function() const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(casadi_int
nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolantJac "

[INTERNAL]  First order derivatives

>List of available options

+-------------+-----------------+---------------------+--------------------+
|     Id      |      Type       |     Description     |      Used in       |
+=============+=================+=====================+====================+
| batch_x     | OT_INT          | Evaluate a batch of | casadi::Interpolan |
|             |                 | different inputs at | t                  |
|             |                 | once (default 1).   |                    |
+-------------+-----------------+---------------------+--------------------+
| inline      | OT_BOOL         | Implement the       | casadi::Interpolan |
|             |                 | lookup table in MX  | t                  |
|             |                 | primitives. Useful  |                    |
|             |                 | when you need       |                    |
|             |                 | derivatives with    |                    |
|             |                 | respect to grid     |                    |
|             |                 | and/or              |                    |
|             |                 | coefficients. Such  |                    |
|             |                 | derivatives are     |                    |
|             |                 | fundamentally       |                    |
|             |                 | dense, so use with  |                    |
|             |                 | caution.            |                    |
+-------------+-----------------+---------------------+--------------------+
| lookup_mode | OT_STRINGVECTOR | Sets, for each grid | casadi::LinearInte |
|             |                 | dimenion, the       | rpolantJac         |
|             |                 | lookup algorithm    |                    |
|             |                 | used to find the    |                    |
|             |                 | correct index.      |                    |
|             |                 | 'linear' uses a     |                    |
|             |                 | for-loop + break;   |                    |
|             |                 | 'exact' uses        |                    |
|             |                 | floored division    |                    |
|             |                 | (only for uniform   |                    |
|             |                 | grids).             |                    |
+-------------+-----------------+---------------------+--------------------+

Diagrams
--------



C++ includes: linear_interpolant.hpp ";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::FunctionInternal::has_forward(casadi_int
nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_n_out() "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::finalize()  "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")
casadi::FunctionInternal::serialize_body(SerializingStream &s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::get_n_in() "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::LinearInterpolantJac::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")
casadi::LinearInterpolantJac::LinearInterpolantJac(const std::string &name)
"

[INTERNAL]  Constructor.

";

%feature("docstring")
casadi::LinearInterpolantJac::LinearInterpolantJac(DeserializingStream &s) "

[INTERNAL]  Deserializing constructor.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";


// File: classcasadi_1_1Linsol.xml
%feature("docstring")  casadi::Linsol::neig(const DM &A) const  "

Number of negative eigenvalues Not available for all solvers.

";

%feature("docstring")  casadi::SharedObject::class_name() const  "

Get class name.

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Linsol::nfact(const DM &A) const  "

Numeric factorization of the linear system.

";

%feature("docstring")  casadi::Linsol::solve(const DM &A, const DM &B, bool
tr=false) const  "

Solve linear system of equations

";

%feature("docstring") casadi::casadi_solve "

Solve linear system of equations

";

%feature("docstring")  casadi::Linsol::casadi_solve "

Solve linear system of equations

";

%feature("docstring")  casadi::Linsol::solve(const MX &A, const MX &B, bool
tr=false) const  "

Solve linear system of equations

";

%feature("docstring") casadi::casadi_solve "

Solve linear system of equations

";

%feature("docstring")  casadi::Linsol::casadi_solve "

Solve linear system of equations

";

%feature("docstring") casadi::Linsol::Linsol() "

Default constructor.

";

%feature("docstring") casadi::Linsol::Linsol(const std::string &name, const
std::string &solver, const Sparsity &sp, const Dict &opts=Dict()) "

Constructor.

";

%feature("docstring") casadi::Linsol::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::Linsol "

Linear solver Create a solver for linear systems of equations Solves the
linear system A*X = B or A^T*X = B for X with A square and non- singular.

If A is structurally singular, an error will be thrown during init. If A is
numerically singular, the prepare step will fail.

General information
===================



List of plugins
===============



- csparsecholesky

- csparse

- ma27

- lapacklu

- lapackqr

- mumps

- ldl

- qr

- tridiag

- symbolicqr

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Linsol.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

csparsecholesky
---------------



Linsol with CSparseCholesky Interface

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

csparse
-------



Linsol with CSparse Interface

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

ma27
----



Interface to the sparse direct linear solver MA27 Works for symmetric
indefinite systems Partly adopted from qpOASES 3.2 Joel Andersson

--------------------------------------------------------------------------------

lapacklu
--------



This class solves the linear system A.x=b by making an LU factorization of
A: A = L.U, with L lower and U upper triangular

>List of available options

+-----------------------------+---------+----------------------------------+
|             Id              |  Type   |           Description            |
+=============================+=========+==================================+
| allow_equilibration_failure | OT_BOOL | Non-fatal error when             |
|                             |         | equilibration fails              |
+-----------------------------+---------+----------------------------------+
| equilibration               | OT_BOOL | Equilibrate the matrix           |
+-----------------------------+---------+----------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

lapackqr
--------



This class solves the linear system A.x=b by making an QR factorization of
A: A = Q.R, with Q orthogonal and R upper triangular

>List of available options

+----------+--------+------------------------------------------------------+
|    Id    |  Type  |                     Description                      |
+==========+========+======================================================+
| max_nrhs | OT_INT | Maximum number of right-hand-sides that get          |
|          |        | processed in a single pass [default:10].             |
+----------+--------+------------------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

mumps
-----



Interface to the sparse direct linear solver MUMPS Works for symmetric
indefinite systems Joel Andersson

>List of available options

+-----------+---------+-------------------+
|    Id     |  Type   |    Description    |
+===========+=========+===================+
| posdef    | OT_BOOL | Positive definite |
+-----------+---------+-------------------+
| symmetric | OT_BOOL | Symmetric matrix  |
+-----------+---------+-------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

ldl
---



Linear solver using sparse direct LDL factorization

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

qr --



Linear solver using sparse direct QR factorization

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

tridiag
-------



Linear solver for tridiagonal matrices

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

symbolicqr
----------



Linear solver for sparse least-squares problems Inspired
fromhttps://github.com/scipy/scipy/blob/v0.14.0/scipy/sparse/linalg/isolve/lsqr.py#L96

Linsol based on QR factorization with sparsity pattern based reordering
without partial pivoting

>List of available options

+-------+---------+----------------------------------------------------+
|  Id   |  Type   |                    Description                     |
+=======+=========+====================================================+
| fopts | OT_DICT | Options to be passed to generated function objects |
+-------+---------+----------------------------------------------------+

--------------------------------------------------------------------------------



Joel Andersson

C++ includes: linsol.hpp ";

%feature("docstring")  casadi::Linsol::sfact(const DM &A) const  "

Symbolic factorization of the linear system, e.g. selecting pivots.

";

%feature("docstring")  casadi::Linsol::rank(const DM &A) const  "

Matrix rank Not available for all solvers.

";

%feature("docstring")  casadi::SharedObject::disp(std::ostream &stream, bool
more=false) const  "

Print a description of the object.

";

%feature("docstring")  casadi::SharedObject::get_str(bool more=false) const
"

Get string representation.

";

%feature("docstring")  casadi::Linsol::stats(int mem=1) const  "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring")  casadi::Linsol::plugin_name() const  "

Query plugin name.

";

%feature("docstring")  casadi::SharedObject::print_ptr(std::ostream
&stream=casadi::uout()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring")  casadi::Linsol::sparsity() const  "

Get linear system sparsity.

";

%feature("docstring") casadi::casadi_sparsity "

Get linear system sparsity.

";

%feature("docstring")  casadi::Linsol::casadi_sparsity "

Get linear system sparsity.

";


// File: classcasadi_1_1LinsolLdl.xml
%feature("docstring")  casadi::LinsolInternal::nnz() const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::LinsolInternal::ncol() const  "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::row() const  "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolLdl::serialize_body(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::LinsolInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::LinsolLdl::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::LinsolInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::LinsolLdl::neig(void *mem, const double *A)
const  "

[INTERNAL]  Number of negative eigenvalues.

";

%feature("docstring")  casadi::LinsolLdl::rank(void *mem, const double *A)
const  "

[INTERNAL]   Matrix rank.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::LinsolLdl::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::LinsolLdl::~LinsolLdl "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolLdl::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::LinsolLdl::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")
casadi::LinsolInternal::serialize_type(SerializingStream &s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::LinsolLdl::LinsolLdl(const std::string &name,
const Sparsity &sp) "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::LinsolLdl "

'ldl' plugin for LinsolInternal

>List of available options

+-------------+---------+-----------------------------------------------+
|     Id      |  Type   |                  Description                  |
+=============+=========+===============================================+
| incomplete  | OT_BOOL | Incomplete factorization, without any fill-in |
+-------------+---------+-----------------------------------------------+
| preordering | OT_BOOL | Approximate minimal degree (AMD) preordering  |
+-------------+---------+-----------------------------------------------+

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::ProtoFun |
|                  |                 | for derivative   | ction            |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::ProtoFun |
|                  |                 | for sparsity     | ction            |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::ProtoFun |
|                  |                 |                  | ction            |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::ProtoFun |
|                  |                 | compiler plugin  | ction            |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::ProtoFun |
|                  |                 | CasADi's AD. Use | ction            |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::ProtoFun |
|                  |                 | a derivative of  | ction            |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::ProtoFun |
|                  |                 | file upon first  | ction            |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::ProtoFun |
|                  |                 | dump             | ction            |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::ProtoFun |
|                  |                 | format to dump   | ction            |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::ProtoFun |
|                  |                 | values of inputs | ction            |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::ProtoFun |
|                  |                 | values of        | ction            |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::ProtoFun |
|                  |                 | derivative       | ction            |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::ProtoFun |
|                  |                 | derivative       | ction            |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::ProtoFun |
|                  |                 | derivative       | ction            |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::ProtoFun |
|                  |                 | derivative       | ction            |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::ProtoFun |
|                  |                 | finite           | ction            |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::ProtoFun |
|                  |                 | passed to the    | ction            |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::ProtoFun |
|                  |                 | passed to a      | ction            |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::ProtoFun |
|                  |                 | option           | ction            |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| incomplete       | OT_BOOL         | Incomplete       | casadi::LinsolLd |
|                  |                 | factorization,   | l                |
|                  |                 | without any      |                  |
|                  |                 | fill-in          |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::ProtoFun |
|                  |                 | option (ignored) | ction            |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::ProtoFun |
|                  |                 | when the         | ction            |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::ProtoFun |
|                  |                 | each input if it | ction            |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::ProtoFun |
|                  |                 | each output if   | ction            |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::ProtoFun |
|                  |                 | for a number of  | ction            |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::ProtoFun |
|                  |                 | compiler to      | ction            |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::ProtoFun |
|                  |                 | temporary source | ction            |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::ProtoFun |
|                  |                 | used to write    | ction            |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::ProtoFun |
|                  |                 | passed to the    | ction            |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::ProtoFun |
|                  |                 | behaviour when   | ction            |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::ProtoFun |
|                  |                 | (seemingly       | ction            |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::ProtoFun |
|                  |                 | maximum number   | ction            |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::ProtoFun |
|                  |                 |                  | ction            |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::ProtoFun |
|                  |                 | option (ignored) | ction            |
+------------------+-----------------+------------------+------------------+
| preordering      | OT_BOOL         | Approximate      | casadi::LinsolLd |
|                  |                 | minimal degree   | l                |
|                  |                 | (AMD)            |                  |
|                  |                 | preordering      |                  |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::ProtoFun |
|                  |                 | values of inputs | ction            |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::ProtoFun |
|                  |                 | values of        | ction            |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::ProtoFun |
|                  |                 | information      | ction            |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::ProtoFun |
|                  |                 | information      | ction            |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::ProtoFun |
|                  |                 | when NaN or Inf  | ction            |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::ProtoFun |
|                  |                 | passed to a      | ction            |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::ProtoFun |
|                  |                 | field that can   | ction            |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::ProtoFun |
|                  |                 | evaluation  for  | ction            |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: linsol_ldl.hpp ";

%feature("docstring")  casadi::LinsolLdl::nfact(void *mem, const double *A)
const  "

[INTERNAL]  Numeric factorization.

";

%feature("docstring")  casadi::LinsolLdl::sfact(void *mem, const double *A)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::LinsolInternal::linsol_eval_sx(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem, bool tr,
casadi_int nrhs) const  "

[INTERNAL]  Evaluate SX, possibly transposed.

";

%feature("docstring")  casadi::LinsolLdl::generate(CodeGenerator &g, const
std::string &A, const std::string &x, casadi_int nrhs, bool tr) const  "

[INTERNAL]  Generate C code.

";

%feature("docstring")  casadi::ProtoFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::ProtoFunction::finalize() "

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::LinsolLdl::plugin_name() const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::LinsolLdl::solve(void *mem, const double *A,
double *x, casadi_int nrhs, bool tr) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::serialize_base_function()
const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::LinsolInternal::nrow() const  "

[INTERNAL]  Get sparsity pattern.

";

%feature("docstring")  casadi::LinsolLdl::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::LinsolInternal::colind() const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::LinsolLdl::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";


// File: classcasadi_1_1LinsolQr.xml
%feature("docstring")  casadi::LinsolInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::LinsolInternal::neig(void *mem, const double
*A) const  "

[INTERNAL]  Number of negative eigenvalues.

";

%feature("docstring")  casadi::LinsolQr::solve(void *mem, const double *A,
double *x, casadi_int nrhs, bool tr) const  "

[INTERNAL] ";

%feature("docstring") casadi::LinsolQr "

'qr' plugin for LinsolInternal

>List of available options

+-------+-----------+------------------------------------------------------+
|  Id   |   Type    |                     Description                      |
+=======+===========+======================================================+
| cache | OT_DOUBLE | Amount of factorisations to remember (thread-local)  |
|       |           | [0]                                                  |
+-------+-----------+------------------------------------------------------+
| eps   | OT_DOUBLE | Minimum R entry before singularity is declared       |
|       |           | [1e-12]                                              |
+-------+-----------+------------------------------------------------------+

>List of available options

+-------+-----------+-----------------------------------+------------------+
|  Id   |   Type    |            Description            |     Used in      |
+=======+===========+===================================+==================+
| cache | OT_DOUBLE | Amount of factorisations to       | casadi::LinsolQr |
|       |           | remember (thread-local) [0]       |                  |
+-------+-----------+-----------------------------------+------------------+
| eps   | OT_DOUBLE | Minimum R entry before            | casadi::LinsolQr |
|       |           | singularity is declared [1e-12]   |                  |
+-------+-----------+-----------------------------------+------------------+

Diagrams
--------



C++ includes: linsol_qr.hpp ";

%feature("docstring")  casadi::LinsolQr::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::LinsolQr::serialize_body(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::LinsolQr::plugin_name() const  "

[INTERNAL] ";

%feature("docstring") casadi::LinsolQr::~LinsolQr "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::ncol() const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::LinsolQr::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::LinsolQr::finalize()  "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::ProtoFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::LinsolQr::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::LinsolQr::nfact(void *mem, const double *A)
const  "

[INTERNAL]  Numeric factorization.

";

%feature("docstring")  casadi::ProtoFunction::serialize_base_function()
const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::LinsolInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::LinsolQr::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::LinsolInternal::nnz() const  "

[INTERNAL] ";

%feature("docstring")
casadi::LinsolInternal::serialize_type(SerializingStream &s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::ProtoFunction::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::LinsolInternal::linsol_eval_sx(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem, bool tr,
casadi_int nrhs) const  "

[INTERNAL]  Evaluate SX, possibly transposed.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::LinsolInternal::nrow() const  "

[INTERNAL]  Get sparsity pattern.

";

%feature("docstring")  casadi::LinsolInternal::rank(void *mem, const double
*A) const  "

[INTERNAL]   Matrix rank.

";

%feature("docstring")  casadi::LinsolInternal::row() const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::LinsolInternal::colind() const  "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolQr::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::LinsolQr::sfact(void *mem, const double *A)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolQr::generate(CodeGenerator &g, const
std::string &A, const std::string &x, casadi_int nrhs, bool tr) const  "

[INTERNAL]  Generate C code.

";

%feature("docstring")  casadi::LinsolQr::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring") casadi::LinsolQr::LinsolQr(const std::string &name,
const Sparsity &sp) "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";


// File: classcasadi_1_1LinsolTridiag.xml
%feature("docstring")  casadi::LinsolInternal::nnz() const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")
casadi::LinsolInternal::serialize_type(SerializingStream &s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::LinsolTridiag::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::ProtoFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::LinsolTridiag::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::LinsolInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::LinsolInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::LinsolInternal::rank(void *mem, const double
*A) const  "

[INTERNAL]   Matrix rank.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::ProtoFunction::serialize_base_function()
const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::ProtoFunction::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::ProtoFunction::finalize() "

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::ProtoFunction::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::LinsolTridiag::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::LinsolTridiag::solve(void *mem, const double
*A, double *x, casadi_int nrhs, bool tr) const  "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolTridiag::nfact(void *mem, const double
*A) const  "

[INTERNAL]  Numeric factorization.

";

%feature("docstring")  casadi::LinsolTridiag::sfact(void *mem, const double
*A) const  "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolTridiag::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::LinsolTridiag::LinsolTridiag(const std::string
&name, const Sparsity &sp) "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolTridiag::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::LinsolInternal::row() const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::LinsolInternal::nrow() const  "

[INTERNAL]  Get sparsity pattern.

";

%feature("docstring")  casadi::LinsolInternal::colind() const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::LinsolInternal::neig(void *mem, const double
*A) const  "

[INTERNAL]  Number of negative eigenvalues.

";

%feature("docstring")  casadi::LinsolInternal::linsol_eval_sx(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem, bool tr,
casadi_int nrhs) const  "

[INTERNAL]  Evaluate SX, possibly transposed.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::LinsolTridiag::generate(CodeGenerator &g,
const std::string &A, const std::string &x, casadi_int nrhs, bool tr) const
"

[INTERNAL]  Generate C code.

";

%feature("docstring")  casadi::LinsolInternal::ncol() const  "

[INTERNAL] ";

%feature("docstring") casadi::LinsolTridiag "

[INTERNAL]  'tridiag' plugin for LinsolInternal

C++ includes: linsol_tridiag.hpp ";

%feature("docstring")
casadi::LinsolInternal::serialize_body(SerializingStream &s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::LinsolTridiag::plugin_name() const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::LinsolTridiag::~LinsolTridiag "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";


// File: classcasadi_1_1Logger.xml
%feature("docstring") casadi::Logger "

Keeps track of logging output to screen and/or files. All printout from
CasADi routines should go through this files.

Joel Andersson

C++ includes: casadi_logger.hpp ";


// File: classcasadi_1_1Low.xml


// File: classcasadi_1_1Lsqr.xml
%feature("docstring")  casadi::LinsolInternal::row() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Lsqr::nfact(void *mem, const double *A) const
"

[INTERNAL]  Numeric factorization.

";

%feature("docstring")  casadi::LinsolInternal::sfact(void *mem, const double
*A) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Lsqr::generate(CodeGenerator &g, const
std::string &A, const std::string &x, casadi_int nrhs, bool tr) const  "

[INTERNAL]  Generate C code.

";

%feature("docstring")  casadi::Lsqr::solve(void *mem, const double *A,
double *x, casadi_int nrhs, bool tr) const  "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::nnz() const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::ProtoFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::LinsolInternal::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::LinsolInternal::neig(void *mem, const double
*A) const  "

[INTERNAL]  Number of negative eigenvalues.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::LinsolInternal::colind() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Lsqr::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::ProtoFunction::serialize_base_function()
const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::ProtoFunction::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::LinsolInternal::rank(void *mem, const double
*A) const  "

[INTERNAL]   Matrix rank.

";

%feature("docstring")
casadi::LinsolInternal::serialize_type(SerializingStream &s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::Lsqr::~Lsqr "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::linsol_eval_sx(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem, bool tr,
casadi_int nrhs) const  "

[INTERNAL]  Evaluate SX, possibly transposed.

";

%feature("docstring")  casadi::Lsqr::plugin_name() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Lsqr::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::ProtoFunction::finalize() "

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::LinsolInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::Lsqr "

[INTERNAL]  'symbolicqr' plugin for Linsol

Linear solver for sparse least-squares problems Inspired
fromhttps://github.com/scipy/scipy/blob/v0.14.0/scipy/sparse/linalg/isolve/lsqr.py#L96

Linsol based on QR factorization with sparsity pattern based reordering
without partial pivoting

>List of available options

+-------+---------+----------------------------------------------------+
|  Id   |  Type   |                    Description                     |
+=======+=========+====================================================+
| fopts | OT_DICT | Options to be passed to generated function objects |
+-------+---------+----------------------------------------------------+

Joel Andersson

C++ includes: lsqr.hpp ";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::ProtoFunction::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::Lsqr::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::LinsolInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")
casadi::LinsolInternal::serialize_body(SerializingStream &s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::LinsolInternal::nrow() const  "

[INTERNAL]  Get sparsity pattern.

";

%feature("docstring")  casadi::Lsqr::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::Lsqr::Lsqr(const std::string &name, const
Sparsity &sp) "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::ncol() const  "

[INTERNAL] ";


// File: classcasadi_1_1Map.xml
%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::Map::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::Map::has_forward(casadi_int nfwd) const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::Map::has_reverse(casadi_int nadj) const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::Map::eval(const double **arg, double **res,
casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate the function numerically.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::Map "

[INTERNAL]  Evaluate in parallel Joel Andersson

C++ includes: map.hpp ";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::Map::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::Map::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::Map::sp_reverse(bvec_t **arg, bvec_t **res,
casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::Map::codegen_body(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::Map::class_name() const  "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::ProtoFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::Map::get_default_in(casadi_int ind) const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::Map::eval_sx(const SXElem **arg, SXElem
**res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  evaluate symbolically while also propagating directional
derivatives

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::Map::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Map::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::Map::codegen_declarations(CodeGenerator &g)
const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::Map::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::Map::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Map::get_function(const std::string &name)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Map::serialize_type(SerializingStream &s)
const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Map::parallelization() const  "

[INTERNAL]  Type of parallellization.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Map::~Map "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::Map::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::Map::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::Map::get_reverse(casadi_int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::Map::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::finalize()  "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::Map::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::Map::eval_gen(const T **arg, T **res,
casadi_int *iw, T *w, int mem=0) const  "

[INTERNAL]  Evaluate or propagate sparsities.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::Map::serialize_body(SerializingStream &s)
const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::Map::sp_forward(const bvec_t **arg, bvec_t
**res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::Map::get_forward(casadi_int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::Map::is_a(const std::string &type, bool
recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::Map::info() const  "

[INTERNAL]  Obtain information about node

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Map::serialize_base_function() const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::Map::has_function(const std::string &fname)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";


// File: classcasadi_1_1MapSum.xml
%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::MapSum::serialize_base_function() const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::MapSum::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::MapSum::get_reverse(casadi_int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::MapSum::parallelization() const  "

[INTERNAL]  Type of parallellization.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::MapSum::has_reverse(casadi_int nadj) const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::MapSum::class_name() const  "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::MapSum::eval_sx(const SXElem **arg, SXElem
**res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  evaluate symbolically while also propagating directional
derivatives

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::MapSum::eval_gen(const T **arg, T **res,
casadi_int *iw, T *w, int mem=0) const  "

[INTERNAL]  Evaluate or propagate sparsities.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::MapSum::has_forward(casadi_int nfwd) const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::MapSum::get_default_in(casadi_int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::MapSum::sp_reverse(bvec_t **arg, bvec_t
**res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::MapSum::codegen_declarations(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::MapSum::~MapSum "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::MapSum "

[INTERNAL]   Map with reduce_in/reduce_out Joris Gillis

C++ includes: mapsum.hpp ";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::MapSum::get_forward(casadi_int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::ProtoFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::MapSum::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::MapSum::serialize_type(SerializingStream &s)
const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::MapSum::sp_forward(const bvec_t **arg, bvec_t
**res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::MapSum::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::MapSum::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::MapSum::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::MapSum::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::MapSum::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::MapSum::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::MapSum::codegen_body(CodeGenerator &g) const
"

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::MapSum::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::finalize()  "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::MapSum::eval(const double **arg, double
**res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate the function numerically.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::MapSum::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::MapSum::serialize_body(SerializingStream &s)
const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";


// File: classcasadi_1_1Matrix.xml


/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring")  casadi::MatrixCommon::taylor(const MatrixCommon
&ex, const MatrixCommon &x, const MatrixCommon &a, casadi_int order=1) "

univariate Taylor series expansion

Calculate the Taylor expansion of expression 'ex' up to order 'order' with
respect to variable 'x' around the point 'a'

$(x)=f(a)+f'(a)(x-a)+f''(a)\\\\frac
{(x-a)^2}{2!}+f'''(a)\\\\frac{(x-a)^3}{3!}+\\\\ldots$

Example usage:

::

>>   x



";

%feature("docstring") casadi::casadi_taylor "

univariate Taylor series expansion

Calculate the Taylor expansion of expression 'ex' up to order 'order' with
respect to variable 'x' around the point 'a'

$(x)=f(a)+f'(a)(x-a)+f''(a)\\\\frac
{(x-a)^2}{2!}+f'''(a)\\\\frac{(x-a)^3}{3!}+\\\\ldots$

Example usage:

::

>>   x



";

%feature("docstring")  casadi::MatrixCommon::casadi_taylor "

univariate Taylor series expansion

Calculate the Taylor expansion of expression 'ex' up to order 'order' with
respect to variable 'x' around the point 'a'

$(x)=f(a)+f'(a)(x-a)+f''(a)\\\\frac
{(x-a)^2}{2!}+f'''(a)\\\\frac{(x-a)^3}{3!}+\\\\ldots$

Example usage:

::

>>   x



";

%feature("docstring")  casadi::MatrixCommon::taylor(const MatrixCommon &ex,
const MatrixCommon &x) "

[INTERNAL]  univariate Taylor series expansion

Calculate the Taylor expansion of expression 'ex' up to order 'order' with
respect to variable 'x' around the point 'a'

$(x)=f(a)+f'(a)(x-a)+f''(a)\\\\frac
{(x-a)^2}{2!}+f'''(a)\\\\frac{(x-a)^3}{3!}+\\\\ldots$

Example usage:

::

>>   x



";

%feature("docstring") casadi::casadi_taylor "

univariate Taylor series expansion

Calculate the Taylor expansion of expression 'ex' up to order 'order' with
respect to variable 'x' around the point 'a'

$(x)=f(a)+f'(a)(x-a)+f''(a)\\\\frac
{(x-a)^2}{2!}+f'''(a)\\\\frac{(x-a)^3}{3!}+\\\\ldots$

Example usage:

::

>>   x



";

%feature("docstring")  casadi::MatrixCommon::casadi_taylor "

univariate Taylor series expansion

Calculate the Taylor expansion of expression 'ex' up to order 'order' with
respect to variable 'x' around the point 'a'

$(x)=f(a)+f'(a)(x-a)+f''(a)\\\\frac
{(x-a)^2}{2!}+f'''(a)\\\\frac{(x-a)^3}{3!}+\\\\ldots$

Example usage:

::

>>   x



";

%feature("docstring")  casadi::MatrixCommon::print_scalar(std::ostream
&stream) const  "

Print scalar.

";

%feature("docstring")  casadi::GenericMatrixCommon::nnz_upper() const "

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring")  casadi::MatrixCommon::is_constant() const  "

Check if the matrix is constant (note that false negative answers are
possible)

";

%feature("docstring")  casadi::MatrixCommon::mtaylor(const MatrixCommon &ex,
const MatrixCommon &x, const MatrixCommon &a, casadi_int order=1) "

multivariate Taylor series expansion

Do Taylor expansions until the aggregated order of a term is equal to
'order'. The aggregated order of $x^n y^m$ equals $n+m$.

";

%feature("docstring") casadi::casadi_mtaylor "

multivariate Taylor series expansion

Do Taylor expansions until the aggregated order of a term is equal to
'order'. The aggregated order of $x^n y^m$ equals $n+m$.

";

%feature("docstring")  casadi::MatrixCommon::casadi_mtaylor "

multivariate Taylor series expansion

Do Taylor expansions until the aggregated order of a term is equal to
'order'. The aggregated order of $x^n y^m$ equals $n+m$.

";

%feature("docstring")  casadi::MatrixCommon::mtaylor(const MatrixCommon &ex,
const MatrixCommon &x, const MatrixCommon &a, casadi_int order, const
std::vector< casadi_int > &order_contributions) "

multivariate Taylor series expansion

Do Taylor expansions until the aggregated order of a term is equal to
'order'. The aggregated order of $x^n y^m$ equals $n+m$.

The argument order_contributions can denote how match each variable
contributes to the aggregated order. If x=[x, y] and order_contributions=[1,
2], then the aggregated order of $x^n y^m$ equals $1n+2m$.

Example usage

$ \\\\sin(b+a)+\\\\cos(b+a)(x-a)+\\\\cos(b+a)(y-b) $ $ y+x-(x^3+3y x^2+3 y^2
x+y^3)/6 $ $ (-3 x^2 y-x^3)/6+y+x $

";

%feature("docstring") casadi::casadi_mtaylor "

multivariate Taylor series expansion

Do Taylor expansions until the aggregated order of a term is equal to
'order'. The aggregated order of $x^n y^m$ equals $n+m$.

The argument order_contributions can denote how match each variable
contributes to the aggregated order. If x=[x, y] and order_contributions=[1,
2], then the aggregated order of $x^n y^m$ equals $1n+2m$.

Example usage

$ \\\\sin(b+a)+\\\\cos(b+a)(x-a)+\\\\cos(b+a)(y-b) $ $ y+x-(x^3+3y x^2+3 y^2
x+y^3)/6 $ $ (-3 x^2 y-x^3)/6+y+x $

";

%feature("docstring")  casadi::MatrixCommon::casadi_mtaylor "

multivariate Taylor series expansion

Do Taylor expansions until the aggregated order of a term is equal to
'order'. The aggregated order of $x^n y^m$ equals $n+m$.

The argument order_contributions can denote how match each variable
contributes to the aggregated order. If x=[x, y] and order_contributions=[1,
2], then the aggregated order of $x^n y^m$ equals $1n+2m$.

Example usage

$ \\\\sin(b+a)+\\\\cos(b+a)(x-a)+\\\\cos(b+a)(y-b) $ $ y+x-(x^3+3y x^2+3 y^2
x+y^3)/6 $ $ (-3 x^2 y-x^3)/6+y+x $

";

%feature("docstring")  casadi::MatrixCommon::get_elements() const  "

Get all elements.

";

%feature("docstring")  casadi::MatrixCommon::set(const MatrixCommon &m, bool
ind1, const Slice &rr) "

Set a submatrix, single argument

";

%feature("docstring")  casadi::MatrixCommon::set(const MatrixCommon &m, bool
ind1, const MatrixCommon &rr) "

Set a submatrix, single argument

";

%feature("docstring")  casadi::MatrixCommon::set(const MatrixCommon &m, bool
ind1, const Sparsity &sp) "

Set a submatrix, single argument

";

%feature("docstring")  casadi::MatrixCommon::set(const MatrixCommon &m, bool
ind1, const Slice &rr, const Slice &cc) "

Set a submatrix, two arguments

";

%feature("docstring")  casadi::MatrixCommon::set(const MatrixCommon &m, bool
ind1, const Slice &rr, const MatrixCommon &cc) "

Set a submatrix, two arguments

";

%feature("docstring")  casadi::MatrixCommon::set(const MatrixCommon &m, bool
ind1, const MatrixCommon &rr, const Slice &cc) "

Set a submatrix, two arguments

";

%feature("docstring")  casadi::MatrixCommon::set(const MatrixCommon &m, bool
ind1, const MatrixCommon &rr, const MatrixCommon &cc) "

Set a submatrix, two arguments

";

%feature("docstring")  casadi::GenericMatrixCommon::nnz() const "

Get the number of (structural) non-zero elements.

";

%feature("docstring")  casadi::MatrixCommon::remove(const std::vector<
casadi_int > &rr, const std::vector< casadi_int > &cc) "

Remove columns and rows Remove/delete rows and/or columns of a matrix.

";

%feature("docstring")  casadi::MatrixCommon::get(MatrixCommon &output_m,
bool ind1, const Slice &rr) const  "

Get a submatrix, single argument

";

%feature("docstring")  casadi::MatrixCommon::get(MatrixCommon &output_m,
bool ind1, const MatrixCommon &rr) const  "

Get a submatrix, single argument

";

%feature("docstring")  casadi::MatrixCommon::get(MatrixCommon &output_m,
bool ind1, const Sparsity &sp) const  "

Get a submatrix, single argument

";

%feature("docstring")  casadi::MatrixCommon::get(MatrixCommon &output_m,
bool ind1, const Slice &rr, const Slice &cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  casadi::MatrixCommon::get(MatrixCommon &output_m,
bool ind1, const Slice &rr, const MatrixCommon &cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  casadi::MatrixCommon::get(MatrixCommon &output_m,
bool ind1, const MatrixCommon &rr, const Slice &cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  casadi::MatrixCommon::get(MatrixCommon &output_m,
bool ind1, const MatrixCommon &rr, const MatrixCommon &cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  casadi::MatrixCommon::export_code(const std::string
&lang, std::ostream &stream=casadi::uout(), const Dict &options=Dict())
const  "

Export matrix in specific language.

lang: only 'matlab' supported for now

::

  * options:
  *   inline: Indicates if you want everything on a single line (default: False)
  *   name: Name of exported variable (default: 'm')
  *   indent_level: Level of indentation (default: 0)
  *   spoof_zero: Replace numerical zero by a 1e-200 (default: false)
  *               might be needed for matlab sparse construct,
  *               which doesn't allow numerical zero
  * 



";

%feature("docstring")  casadi::MatrixCommon::from_file(const std::string
&filename, const std::string &format_hint="") "

Export numerical matrix to file

Supported formats:



::

  *   - .mtx   Matrix Market (sparse)
  *   - .txt   Ascii full precision representation (sparse)
  *            Whitespace separated, aligned.
  *            Comments with # % or /
  *            Uses C locale
  *            Structural zeros represented by 00
  *            Does not scale well for large sparse matrices
  * 



";

%feature("docstring")  casadi::MatrixCommon::set_width(casadi_int width) "

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring")  casadi::MatrixCommon::sanity_check(bool
complete=false) const  "

[DEPRECATED] Correctness is checked during construction

";

%feature("docstring")  casadi::MatrixCommon::rand(casadi_int nrow=1,
casadi_int ncol=1) "

Create a matrix with uniformly distributed random numbers.

";

%feature("docstring")  casadi::MatrixCommon::rand(const Sparsity &sp) "

Create a matrix with uniformly distributed random numbers.

";

%feature("docstring")  casadi::MatrixCommon::rand(const std::pair<
casadi_int, casadi_int > &rc) "

Create a matrix with uniformly distributed random numbers.

";

%feature("docstring")  casadi::MatrixCommon::print_split(std::vector<
std::string > &output_nz, std::vector< std::string > &output_inter) const  "

Get strings corresponding to the nonzeros and the interdependencies.

";

%feature("docstring")  casadi::MatrixCommon::chol(const MatrixCommon &A) "

Obtain a Cholesky factorisation of a matrix Performs and LDL transformation
[L,D] = ldl(A) and returns diag(sqrt(D))*L'.

";

%feature("docstring") casadi::casadi_chol "

Obtain a Cholesky factorisation of a matrix Performs and LDL transformation
[L,D] = ldl(A) and returns diag(sqrt(D))*L'.

";

%feature("docstring")  casadi::MatrixCommon::casadi_chol "

Obtain a Cholesky factorisation of a matrix Performs and LDL transformation
[L,D] = ldl(A) and returns diag(sqrt(D))*L'.

";

%feature("docstring")  casadi::MatrixCommon::set_precision(casadi_int
precision) "

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring")  casadi::GenericMatrixCommon::is_tril() const "

Check if the matrix is lower triangular.

";

%feature("docstring")  casadi::MatrixCommon::is_integer() const  "

Check if the matrix is integer-valued (note that false negative answers are
possible)

";

%feature("docstring")  casadi::GenericMatrixCommon::numel() const "

Get the number of elements.

";

%feature("docstring")  casadi::GenericMatrixCommon::is_triu() const "

Check if the matrix is upper triangular.

";

%feature("docstring")  casadi::SX::is_op(casadi_int op) const  "

Is it a certain operation.

";

%feature("docstring")  casadi::SX::is_regular() const  "

Checks if expression does not contain NaN or Inf.

";

%feature("docstring")  casadi::MatrixCommon::set_nz(const MatrixCommon &m,
bool ind1, const Slice &k) "

Set a set of nonzeros

";

%feature("docstring")  casadi::MatrixCommon::set_nz(const MatrixCommon &m,
bool ind1, const MatrixCommon &k) "

Set a set of nonzeros

";

%feature("docstring")  casadi::GenericMatrixCommon::nnz_diag() const "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring")  casadi::GenericMatrixCommon::gradient(const
MatrixCommon &ex, const MatrixCommon &arg, const Dict &opts=Dict()) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::SX::op() const  "

Get operation type.

";

%feature("docstring")  casadi::MatrixCommon::pw_const(const MatrixCommon &t,
const MatrixCommon &tval, const MatrixCommon &val) "

Create a piecewise constant function Create a piecewise constant function
with n=val.size() intervals.

Inputs:

Parameters:
-----------

t:  a scalar variable (e.g. time)

tval:  vector with the discrete values of t at the interval transitions
(length n-1)

val:  vector with the value of the function for each interval (length n)

";

%feature("docstring") casadi::casadi_pw_const "

Create a piecewise constant function Create a piecewise constant function
with n=val.size() intervals.

Inputs:

Parameters:
-----------

t:  a scalar variable (e.g. time)

tval:  vector with the discrete values of t at the interval transitions
(length n-1)

val:  vector with the value of the function for each interval (length n)

";

%feature("docstring")  casadi::MatrixCommon::casadi_pw_const "

Create a piecewise constant function Create a piecewise constant function
with n=val.size() intervals.

Inputs:

Parameters:
-----------

t:  a scalar variable (e.g. time)

tval:  vector with the discrete values of t at the interval transitions
(length n-1)

val:  vector with the value of the function for each interval (length n)

";

%feature("docstring")  casadi::GenericMatrixCommon::sparsity() const "

Get the sparsity pattern.

";

%feature("docstring") casadi::casadi_sparsity "

Get the sparsity pattern.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_sparsity "

Get the sparsity pattern.

";

%feature("docstring")  casadi::MatrixCommon::ldl(const MatrixCommon &A,
MatrixCommon &D, MatrixCommon &LT, std::vector< casadi_int > &p, bool
amd=true) "

Sparse LDL^T factorization Returns D and the strictly upper triangular
entries of L^T I.e. ones on the diagonal are ignored. Only guarenteed to
work for positive definite matrices.

";

%feature("docstring") casadi::casadi_ldl "

Sparse LDL^T factorization Returns D and the strictly upper triangular
entries of L^T I.e. ones on the diagonal are ignored. Only guarenteed to
work for positive definite matrices.

";

%feature("docstring")  casadi::MatrixCommon::casadi_ldl "

Sparse LDL^T factorization Returns D and the strictly upper triangular
entries of L^T I.e. ones on the diagonal are ignored. Only guarenteed to
work for positive definite matrices.

";

%feature("docstring")  casadi::MatrixCommon::get_sparsity() const  "

Get an owning reference to the sparsity pattern.

";

%feature("docstring")  casadi::GenericMatrixCommon::bilin(const MatrixCommon
&A, const MatrixCommon &x, const MatrixCommon &y) "

Calculate bilinear form x^T A y.

";

%feature("docstring") casadi::casadi_bilin "

Calculate bilinear form x^T A y.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_bilin "

Calculate bilinear form x^T A y.

";

%feature("docstring")  casadi::MatrixCommon::expand(const MatrixCommon &ex,
MatrixCommon &weights, MatrixCommon &terms) "

Expand the expression as a weighted sum (with constant weights)

";

%feature("docstring") casadi::casadi_expand "

Expand the expression as a weighted sum (with constant weights)

";

%feature("docstring")  casadi::MatrixCommon::casadi_expand "

Expand the expression as a weighted sum (with constant weights)

";

%feature("docstring")  casadi::GenericMatrixCommon::mpower(const
MatrixCommon &x, const MatrixCommon &y) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::GenericMatrixCommon::dim(bool with_nz=false)
const "

Get string representation of dimensions. The representation is e.g. \"4x5\"
or \"4x5,10nz\".

";

%feature("docstring")  casadi::MatrixCommon::get_nz(MatrixCommon &output_m,
bool ind1, const Slice &k) const  "

Get a set of nonzeros

";

%feature("docstring")  casadi::MatrixCommon::get_nz(MatrixCommon &output_m,
bool ind1, const MatrixCommon &k) const  "

Get a set of nonzeros

";

%feature("docstring")  casadi::GenericMatrixCommon::columns() const "

Get the number of columns, Octave-style syntax.

";

%feature("docstring")  casadi::MatrixCommon::is_one() const  "

check if the matrix is 1 (note that false negative answers are possible)

";

%feature("docstring")  casadi::MatrixCommon::T() const  "

Transpose the matrix.

";

%feature("docstring")  casadi::SX::is_smooth() const  "

Check if smooth.

";

%feature("docstring")  casadi::MatrixCommon::norm_inf_mul(const MatrixCommon
&x, const MatrixCommon &y) "

Inf-norm of a Matrix-Matrix product.

";

%feature("docstring") casadi::casadi_norm_inf_mul "

Inf-norm of a Matrix-Matrix product.

";

%feature("docstring")  casadi::MatrixCommon::casadi_norm_inf_mul "

Inf-norm of a Matrix-Matrix product.

";

%feature("docstring")  casadi::GenericMatrixCommon::rows() const "

Get the number of rows, Octave-style syntax.

";

%feature("docstring")  casadi::MatrixCommon::is_minus_one() const  "

check if the matrix is -1 (note that false negative answers are possible)

";

%feature("docstring")  casadi::MatrixCommon::eig_symbolic(const MatrixCommon
&m) "

Attempts to find the eigenvalues of a symbolic matrix This will only work
for up to 3x3 matrices.

";

%feature("docstring") casadi::casadi_eig_symbolic "

Attempts to find the eigenvalues of a symbolic matrix This will only work
for up to 3x3 matrices.

";

%feature("docstring")  casadi::MatrixCommon::casadi_eig_symbolic "

Attempts to find the eigenvalues of a symbolic matrix This will only work
for up to 3x3 matrices.

";

%feature("docstring")  casadi::SX::info() const  "

Obtain information about sparsity

";

%feature("docstring")  casadi::MatrixCommon::triangle(const MatrixCommon &x)
"

triangle function

\\\\[ \\\\begin {cases} \\\\Lambda(x) = 0 & |x| >= 1 \\\\\\\\ \\\\Lambda(x)
= 1-|x| & |x| < 1 \\\\end {cases} \\\\]

";

%feature("docstring") casadi::casadi_triangle "

triangle function

\\\\[ \\\\begin {cases} \\\\Lambda(x) = 0 & |x| >= 1 \\\\\\\\ \\\\Lambda(x)
= 1-|x| & |x| < 1 \\\\end {cases} \\\\]

";

%feature("docstring")  casadi::MatrixCommon::casadi_triangle "

triangle function

\\\\[ \\\\begin {cases} \\\\Lambda(x) = 0 & |x| >= 1 \\\\\\\\ \\\\Lambda(x)
= 1-|x| & |x| < 1 \\\\end {cases} \\\\]

";

%feature("docstring")  casadi::SX::n_dep() const  "

Get the number of dependencies of a binary SXElem Only defined if symbolic
scalar.

";

%feature("docstring")  casadi::GenericMatrixCommon::is_dense() const "

Check if the matrix expression is dense.

";

%feature("docstring")  casadi::MatrixCommon::print_sparse(std::ostream
&stream, bool truncate=true) const  "

Print sparse matrix style.

";

%feature("docstring")  casadi::GenericMatrixCommon::nnz_lower() const "

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring")  casadi::MatrixCommon::erase(const std::vector<
casadi_int > &rr, const std::vector< casadi_int > &cc, bool ind1=false) "

Erase a submatrix (leaving structural zeros in its place) Erase rows and/or
columns of a matrix.

";

%feature("docstring")  casadi::MatrixCommon::erase(const std::vector<
casadi_int > &rr, bool ind1=false) "

Erase a submatrix (leaving structural zeros in its place) Erase elements of
a matrix.

";

%feature("docstring")  casadi::MatrixCommon::any(const MatrixCommon &x) "

Returns true only if any element in the matrix is true.

";

%feature("docstring") casadi::casadi_any "

Returns true only if any element in the matrix is true.

";

%feature("docstring")  casadi::MatrixCommon::casadi_any "

Returns true only if any element in the matrix is true.

";

%feature("docstring")  casadi::MatrixCommon::inf(const Sparsity &sp) "

create a matrix with all inf

";

%feature("docstring")  casadi::MatrixCommon::inf(casadi_int nrow=1,
casadi_int ncol=1) "

create a matrix with all inf

";

%feature("docstring")  casadi::MatrixCommon::inf(const std::pair<
casadi_int, casadi_int > &rc) "

create a matrix with all inf

";

%feature("docstring")  casadi::SX::element_hash() const  "

Returns a number that is unique for a given symbolic scalar.

Only defined if symbolic scalar.

";

%feature("docstring")  casadi::MatrixCommon::scalar_matrix(casadi_int op,
const MatrixCommon &x, const MatrixCommon &y) "

[INTERNAL]  Create nodes by their ID.

";

%feature("docstring")  casadi::MatrixCommon::print_vector(std::ostream
&stream, bool truncate=true) const  "

Print vector-style.

";

%feature("docstring")  casadi::GenericMatrixCommon::ones(casadi_int nrow=1,
casadi_int ncol=1) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::GenericMatrixCommon::ones(const Sparsity &sp)
"

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::GenericMatrixCommon::ones(const std::pair<
casadi_int, casadi_int > &rc) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::MatrixCommon::has_zeros() const  "

Check if the matrix has any zero entries which are not structural zeros.

";

%feature("docstring")  casadi::MatrixCommon::heaviside(const MatrixCommon
&x) "

Heaviside function.

\\\\[ \\\\begin {cases} H(x) = 0 & x<0 \\\\\\\\ H(x) = 1/2 & x=0 \\\\\\\\
H(x) = 1 & x>0 \\\\\\\\ \\\\end {cases} \\\\]

";

%feature("docstring") casadi::casadi_heaviside "

Heaviside function.

\\\\[ \\\\begin {cases} H(x) = 0 & x<0 \\\\\\\\ H(x) = 1/2 & x=0 \\\\\\\\
H(x) = 1 & x>0 \\\\\\\\ \\\\end {cases} \\\\]

";

%feature("docstring")  casadi::MatrixCommon::casadi_heaviside "

Heaviside function.

\\\\[ \\\\begin {cases} H(x) = 0 & x<0 \\\\\\\\ H(x) = 1/2 & x=0 \\\\\\\\
H(x) = 1 & x>0 \\\\\\\\ \\\\end {cases} \\\\]

";

%feature("docstring")  casadi::MatrixCommon::poly_roots(const MatrixCommon
&p) "

Attempts to find the roots of a polynomial.

This will only work for polynomials up to order 3 It is assumed that the
roots are real.

";

%feature("docstring") casadi::casadi_poly_roots "

Attempts to find the roots of a polynomial.

This will only work for polynomials up to order 3 It is assumed that the
roots are real.

";

%feature("docstring")  casadi::MatrixCommon::casadi_poly_roots "

Attempts to find the roots of a polynomial.

This will only work for polynomials up to order 3 It is assumed that the
roots are real.

";

%feature("docstring")  casadi::GenericMatrixCommon::row(casadi_int el) const
"

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::GenericMatrixCommon::zeros(casadi_int nrow=1,
casadi_int ncol=1) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrixCommon::zeros(const Sparsity
&sp) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrixCommon::zeros(const std::pair<
casadi_int, casadi_int > &rc) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrixCommon::rank1(const MatrixCommon
&A, const MatrixCommon &alpha, const MatrixCommon &x, const MatrixCommon &y)
"

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring") casadi::casadi_rank1 "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_rank1 "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring") casadi::MatrixCommon "

Sparse matrix class. SX and DM are specializations.

General sparse matrix class that is designed with the idea that \"everything
is a matrix\", that is, also scalars and vectors. This philosophy makes it
easy to use and to interface in particularly with Python and Matlab/Octave.
Index starts with 0. Index vec happens as follows: (rr, cc) -> k =
rr+cc*size1() Vectors are column vectors.  The storage format is Compressed
Column Storage (CCS), similar to that used for sparse matrices in Matlab,
but unlike this format, we do allow for elements to be structurally non-zero
but numerically zero.  Matrix<Scalar> is polymorphic with a
std::vector<Scalar> that contain all non-identical-zero elements. The
sparsity can be accessed with Sparsity& sparsity() Joel Andersson

C++ includes: casadi_common.hpp ";

%feature("docstring")  casadi::SX::dep(casadi_int ch=0) const  "

Get expressions of the children of the expression Only defined if symbolic
scalar. Wraps SXElem SXElem::dep(casadi_int ch=0) const.

";

%feature("docstring")  casadi::MatrixCommon::is_zero() const  "

check if the matrix is 0 (note that false negative answers are possible)

";

%feature("docstring")  casadi::MatrixCommon::evalf(const MatrixCommon &expr)
"

Evaluates the expression numerically.

An error is raised when the expression contains symbols

";

%feature("docstring") casadi::casadi_evalf "

Evaluates the expression numerically.

An error is raised when the expression contains symbols

";

%feature("docstring")  casadi::MatrixCommon::casadi_evalf "

Evaluates the expression numerically.

An error is raised when the expression contains symbols

";

%feature("docstring")  casadi::SX::is_leaf() const  "

Check if SX is a leaf of the SX graph.

Only defined if symbolic scalar.

";

%feature("docstring")  casadi::MatrixCommon::qr(const MatrixCommon &A,
MatrixCommon &Q, MatrixCommon &R) "

QR factorization using the modified Gram-Schmidt algorithm More stable than
the classical Gram-Schmidt, but may break down if the rows of A are nearly
linearly dependent See J. Demmel: Applied Numerical Linear Algebra
(algorithm 3.1.). Note that in SWIG, Q and R are returned by value.

";

%feature("docstring") casadi::casadi_qr "

QR factorization using the modified Gram-Schmidt algorithm More stable than
the classical Gram-Schmidt, but may break down if the rows of A are nearly
linearly dependent See J. Demmel: Applied Numerical Linear Algebra
(algorithm 3.1.). Note that in SWIG, Q and R are returned by value.

";

%feature("docstring")  casadi::MatrixCommon::casadi_qr "

QR factorization using the modified Gram-Schmidt algorithm More stable than
the classical Gram-Schmidt, but may break down if the rows of A are nearly
linearly dependent See J. Demmel: Applied Numerical Linear Algebra
(algorithm 3.1.). Note that in SWIG, Q and R are returned by value.

";

%feature("docstring")  casadi::GenericMatrixCommon::colind(casadi_int col)
const "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::MatrixCommon::poly_coeff(const MatrixCommon
&f, const MatrixCommon &x) "

extracts polynomial coefficients from an expression

Parameters:
-----------

ex:  Scalar expression that represents a polynomial

x:  Scalar symbol that the polynomial is build up with

";

%feature("docstring") casadi::casadi_poly_coeff "

extracts polynomial coefficients from an expression

Parameters:
-----------

ex:  Scalar expression that represents a polynomial

x:  Scalar symbol that the polynomial is build up with

";

%feature("docstring")  casadi::MatrixCommon::casadi_poly_coeff "

extracts polynomial coefficients from an expression

Parameters:
-----------

ex:  Scalar expression that represents a polynomial

x:  Scalar symbol that the polynomial is build up with

";

%feature("docstring")  casadi::MatrixCommon::print_dense(std::ostream
&stream, bool truncate=true) const  "

Print dense matrix-stype.

";

%feature("docstring")  casadi::MatrixCommon::has_nz(casadi_int rr,
casadi_int cc) const  "

Returns true if the matrix has a non-zero at location rr, cc.

";

%feature("docstring")  casadi::MatrixCommon::matrix_scalar(casadi_int op,
const MatrixCommon &x, const MatrixCommon &y) "

[INTERNAL]  Create nodes by their ID.

";

%feature("docstring")  casadi::MatrixCommon::nan(const Sparsity &sp) "

create a matrix with all nan

";

%feature("docstring")  casadi::MatrixCommon::nan(casadi_int nrow=1,
casadi_int ncol=1) "

create a matrix with all nan

";

%feature("docstring")  casadi::MatrixCommon::nan(const std::pair<
casadi_int, casadi_int > &rc) "

create a matrix with all nan

";

%feature("docstring")  casadi::SX::is_commutative() const  "

Check whether a binary SX is commutative.

Only defined if symbolic scalar.

";

%feature("docstring")  casadi::SX::is_valid_input() const  "

Check if matrix can be used to define function inputs. Sparse matrices can
return true if all non-zero elements are symbolic.

";

%feature("docstring")  casadi::GenericMatrixCommon::size2() const "

Get the second dimension (i.e. number of columns)

";

%feature("docstring")  casadi::GenericMatrixCommon::size() const "

Get the shape.

";

%feature("docstring")  casadi::GenericMatrixCommon::size(casadi_int axis)
const "

Get the size along a particular dimensions.

";

%feature("docstring")  casadi::MatrixCommon::pw_lin(const MatrixCommon &t,
const MatrixCommon &tval, const MatrixCommon &val) "

t a scalar variable (e.g. time)

Create a piecewise linear function Create a piecewise linear function:

Inputs: tval vector with the the discrete values of t (monotonically
increasing) val vector with the corresponding function values (same length
as tval)

";

%feature("docstring") casadi::casadi_pw_lin "

t a scalar variable (e.g. time)

Create a piecewise linear function Create a piecewise linear function:

Inputs: tval vector with the the discrete values of t (monotonically
increasing) val vector with the corresponding function values (same length
as tval)

";

%feature("docstring")  casadi::MatrixCommon::casadi_pw_lin "

t a scalar variable (e.g. time)

Create a piecewise linear function Create a piecewise linear function:

Inputs: tval vector with the the discrete values of t (monotonically
increasing) val vector with the corresponding function values (same length
as tval)

";

%feature("docstring")  casadi::GenericMatrixCommon::jtimes(const
MatrixCommon &ex, const MatrixCommon &arg, const MatrixCommon &v, bool
tr=false, const Dict &opts=Dict()) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::GenericMatrixCommon::size1() const "

Get the first dimension (i.e. number of rows)

";

%feature("docstring")  casadi::MatrixCommon::serialize() const  "

Serialize.

";

%feature("docstring")  casadi::MatrixCommon::serialize(SerializingStream &s)
const  "

Serialize an object.

";

%feature("docstring")  casadi::MatrixCommon::to_file(const std::string
&filename, const std::string &format="") const  "

Export numerical matrix to file

Supported formats:



::

  *   - .mtx   Matrix Market (sparse)
  *   - .txt   Ascii full precision representation (sparse)
  *            Whitespace separated, aligned.
  *            Comments with # % or /
  *            Uses C locale
  *            Structural zeros represented by 00
  *            Does not scale well for large sparse matrices
  * 



";

%feature("docstring")  casadi::GenericMatrixCommon::is_row() const "

Check if the matrix is a row vector (i.e. size1()==1)

";

%feature("docstring") casadi::MatrixCommon::__nonzero__ "

Returns the truth value of a Matrix.

";

%feature("docstring")  casadi::MatrixCommon::all(const MatrixCommon &x) "

Returns true only if every element in the matrix is true.

";

%feature("docstring") casadi::casadi_all "

Returns true only if every element in the matrix is true.

";

%feature("docstring")  casadi::MatrixCommon::casadi_all "

Returns true only if every element in the matrix is true.

";

%feature("docstring")  casadi::GenericMatrixCommon::soc(const MatrixCommon
&x, const MatrixCommon &y) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::GenericMatrixCommon::is_square() const "

Check if the matrix expression is square.

";

%feature("docstring")  casadi::GenericMatrixCommon::tangent(const
MatrixCommon &ex, const MatrixCommon &arg, const Dict &opts=Dict()) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::MatrixCommon::qr_solve(const MatrixCommon &b,
const MatrixCommon &v, const MatrixCommon &r, const MatrixCommon &beta,
const std::vector< casadi_int > &prinv, const std::vector< casadi_int > &pc,
bool tr=false) "

Solve using a sparse QR factorization.

";

%feature("docstring") casadi::casadi_qr_solve "

Solve using a sparse QR factorization.

";

%feature("docstring")  casadi::MatrixCommon::casadi_qr_solve "

Solve using a sparse QR factorization.

";

%feature("docstring")  casadi::MatrixCommon::is_eye() const  "

check if the matrix is an identity matrix (note that false negative answers
are possible)

";

%feature("docstring")  casadi::MatrixCommon::adj(const MatrixCommon &A) "

Matrix adjoint.

";

%feature("docstring") casadi::casadi_adj "

Matrix adjoint.

";

%feature("docstring")  casadi::MatrixCommon::casadi_adj "

Matrix adjoint.

";

%feature("docstring")  casadi::GenericMatrixCommon::is_empty(bool
both=false) const "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring")  casadi::MatrixCommon::gauss_quadrature(const
MatrixCommon &f, const MatrixCommon &x, const MatrixCommon &a, const
MatrixCommon &b, casadi_int order=5) "

Integrate f from a to b using Gaussian quadrature with n points.

";

%feature("docstring") casadi::casadi_gauss_quadrature "

Integrate f from a to b using Gaussian quadrature with n points.

";

%feature("docstring")  casadi::MatrixCommon::casadi_gauss_quadrature "

Integrate f from a to b using Gaussian quadrature with n points.

";

%feature("docstring")  casadi::MatrixCommon::gauss_quadrature(const
MatrixCommon &f, const MatrixCommon &x, const MatrixCommon &a, const
MatrixCommon &b, casadi_int order, const MatrixCommon &w) "

Matrix adjoint.

";

%feature("docstring") casadi::casadi_gauss_quadrature "

Matrix adjoint.

";

%feature("docstring")  casadi::MatrixCommon::casadi_gauss_quadrature "

Matrix adjoint.

";

%feature("docstring")  casadi::GenericMatrixCommon::linearize(const
MatrixCommon &f, const MatrixCommon &x, const MatrixCommon &x0, const Dict
&opts=Dict()) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::MatrixCommon::unary(casadi_int op, const
MatrixCommon &x) "

[INTERNAL]  Create nodes by their ID.

";

%feature("docstring")  casadi::SX::reset_input() const  "

[INTERNAL]  Reset the marker for an input expression.

";

%feature("docstring")  casadi::MatrixCommon::qr_sparse(const MatrixCommon
&A, MatrixCommon &V, MatrixCommon &R, MatrixCommon &beta, std::vector<
casadi_int > &prinv, std::vector< casadi_int > &pc, bool amd=true) "

Sparse direct QR factorization See T. Davis: Direct Methods for Sparse
Linear Systems.

";

%feature("docstring") casadi::casadi_qr_sparse "

Sparse direct QR factorization See T. Davis: Direct Methods for Sparse
Linear Systems.

";

%feature("docstring")  casadi::MatrixCommon::casadi_qr_sparse "

Sparse direct QR factorization See T. Davis: Direct Methods for Sparse
Linear Systems.

";

%feature("docstring")  casadi::GenericMatrixCommon::get_row() const "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::MatrixCommon::enlarge(casadi_int nrow,
casadi_int ncol, const std::vector< casadi_int > &rr, const std::vector<
casadi_int > &cc, bool ind1=false) "

Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

";

%feature("docstring")  casadi::MatrixCommon::rectangle(const MatrixCommon
&x) "

rectangle function

\\\\[ \\\\begin {cases} \\\\Pi(x) = 1 & |x| < 1/2 \\\\\\\\ \\\\Pi(x) = 1/2 &
|x| = 1/2 \\\\\\\\ \\\\Pi(x) = 0 & |x| > 1/2 \\\\\\\\ \\\\end {cases} \\\\]

Also called: gate function, block function, band function, pulse function,
window function

";

%feature("docstring") casadi::casadi_rectangle "

rectangle function

\\\\[ \\\\begin {cases} \\\\Pi(x) = 1 & |x| < 1/2 \\\\\\\\ \\\\Pi(x) = 1/2 &
|x| = 1/2 \\\\\\\\ \\\\Pi(x) = 0 & |x| > 1/2 \\\\\\\\ \\\\end {cases} \\\\]

Also called: gate function, block function, band function, pulse function,
window function

";

%feature("docstring")  casadi::MatrixCommon::casadi_rectangle "

rectangle function

\\\\[ \\\\begin {cases} \\\\Pi(x) = 1 & |x| < 1/2 \\\\\\\\ \\\\Pi(x) = 1/2 &
|x| = 1/2 \\\\\\\\ \\\\Pi(x) = 0 & |x| > 1/2 \\\\\\\\ \\\\end {cases} \\\\]

Also called: gate function, block function, band function, pulse function,
window function

";

%feature("docstring")  casadi::MatrixCommon::get_str(bool more=false) const
"

Get string representation.

";

%feature("docstring")  casadi::MatrixCommon::minor(const MatrixCommon &x,
casadi_int i, casadi_int j) "

Get the (i,j) minor matrix.

";

%feature("docstring") casadi::casadi_minor "

Get the (i,j) minor matrix.

";

%feature("docstring")  casadi::MatrixCommon::casadi_minor "

Get the (i,j) minor matrix.

";

%feature("docstring")  casadi::SX::is_symbolic() const  "

Check if symbolic (Dense) Sparse matrices invariable return false.

";

%feature("docstring")  casadi::GenericMatrixCommon::is_column() const "

Check if the matrix is a column vector (i.e. size2()==1)

";

%feature("docstring") casadi::MatrixCommon::MatrixCommon() "

constructors

empty 0-by-0 matrix constructor

";

%feature("docstring") casadi::MatrixCommon::MatrixCommon(const MatrixCommon
&m) "

Copy constructor.

";

%feature("docstring") casadi::MatrixCommon::MatrixCommon(casadi_int nrow,
casadi_int ncol) "

Create a sparse matrix with all structural zeros.

";

%feature("docstring") casadi::MatrixCommon::MatrixCommon(const Sparsity &sp)
"

Create a sparse matrix from a sparsity pattern. Same as
Matrix::ones(sparsity)

";

%feature("docstring") casadi::MatrixCommon::MatrixCommon(const Sparsity &sp,
const MatrixCommon &d) "

Construct matrix with a given sparsity and nonzeros.

";

%feature("docstring") casadi::MatrixCommon::MatrixCommon(double val) "

This constructor enables implicit type conversion from a numeric type.

";

%feature("docstring") casadi::MatrixCommon::MatrixCommon(const std::vector<
std::vector< double > > &m) "

Dense matrix constructor with data given as vector of vectors.

";

%feature("docstring") casadi::MatrixCommon::MatrixCommon(const std::vector<
A > &x) "

Create an expression from a vector.

";

%feature("docstring") casadi::MatrixCommon::MatrixCommon(const MatrixCommon
&x) "

Create a matrix from another matrix with a different entry type Assumes that
the scalar conversion is valid.

";

%feature("docstring")  casadi::MatrixCommon::cofactor(const MatrixCommon &x,
casadi_int i, casadi_int j) "

Get the (i,j) cofactor matrix.

";

%feature("docstring") casadi::casadi_cofactor "

Get the (i,j) cofactor matrix.

";

%feature("docstring")  casadi::MatrixCommon::casadi_cofactor "

Get the (i,j) cofactor matrix.

";

%feature("docstring")  casadi::MatrixCommon::ramp(const MatrixCommon &x) "

ramp function

\\\\[ \\\\begin {cases} R(x) = 0 & x <= 1 \\\\\\\\ R(x) = x & x > 1 \\\\\\\\
\\\\end {cases} \\\\]

Also called: slope function

";

%feature("docstring") casadi::casadi_ramp "

ramp function

\\\\[ \\\\begin {cases} R(x) = 0 & x <= 1 \\\\\\\\ R(x) = x & x > 1 \\\\\\\\
\\\\end {cases} \\\\]

Also called: slope function

";

%feature("docstring")  casadi::MatrixCommon::casadi_ramp "

ramp function

\\\\[ \\\\begin {cases} R(x) = 0 & x <= 1 \\\\\\\\ R(x) = x & x > 1 \\\\\\\\
\\\\end {cases} \\\\]

Also called: slope function

";

%feature("docstring")  casadi::GenericMatrixCommon::sym(const std::string
&name, casadi_int nrow=1, casadi_int ncol=1) "

Create an nrow-by-ncol symbolic primitive.

";

%feature("docstring")  casadi::GenericMatrixCommon::sym(const std::string
&name, const std::pair< casadi_int, casadi_int > &rc) "

Construct a symbolic primitive with given dimensions.

";

%feature("docstring")  casadi::GenericMatrixCommon::sym(const std::string
&name, const Sparsity &sp) "

Create symbolic primitive with a given sparsity pattern.

";

%feature("docstring")  casadi::GenericMatrixCommon::sym(const std::string
&name, const Sparsity &sp, casadi_int p) "

Create a vector of length p with with matrices with symbolic primitives of
given sparsity.

";

%feature("docstring")  casadi::GenericMatrixCommon::sym(const std::string
&name, casadi_int nrow, casadi_int ncol, casadi_int p) "

Create a vector of length p with nrow-by-ncol symbolic primitives.

";

%feature("docstring")  casadi::GenericMatrixCommon::sym(const std::string
&name, const Sparsity &sp, casadi_int p, casadi_int r) "

Create a vector of length r of vectors of length p with symbolic primitives
with given sparsity.

";

%feature("docstring")  casadi::GenericMatrixCommon::sym(const std::string
&name, casadi_int nrow, casadi_int ncol, casadi_int p, casadi_int r) "

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

%feature("docstring")  casadi::GenericMatrixCommon::is_vector() const "

Check if the matrix is a row or column vector.

";

%feature("docstring")  casadi::MatrixCommon::matrix_matrix(casadi_int op,
const MatrixCommon &x, const MatrixCommon &y) "

[INTERNAL]  Create nodes by their ID.

";

%feature("docstring")  casadi::MatrixCommon::binary(casadi_int op, const
MatrixCommon &x, const MatrixCommon &y) "

[INTERNAL]  Create nodes by their ID.

";

%feature("docstring")  casadi::MatrixCommon::set_scientific(bool scientific)
"

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring")  casadi::MatrixCommon::get_nonzeros() const  "

Get all nonzeros.

Implementation of Matrix::get_nonzeros (in public API)

";

%feature("docstring")  casadi::MatrixCommon::disp(std::ostream &stream, bool
more=false) const  "

Print a representation of the object.

";

%feature("docstring")  casadi::SX::has_duplicates() const  "

[INTERNAL]  Detect duplicate symbolic expressions If there are symbolic
primitives appearing more than once, the function will return true and the
names of the duplicate expressions will be passed to casadi_warning. Note:
Will mark the node using SXElem::set_temp. Make sure to call reset_input()
after usage.

";

%feature("docstring")  casadi::SX::name() const  "

Get name (only if symbolic scalar)

";

%feature("docstring")  casadi::MatrixCommon::sparsify(const MatrixCommon &A,
double tol=0) "

Make a matrix sparse by removing numerical zeros.

";

%feature("docstring") casadi::casadi_sparsify "

Make a matrix sparse by removing numerical zeros.

";

%feature("docstring")  casadi::MatrixCommon::casadi_sparsify "

Make a matrix sparse by removing numerical zeros.

";

%feature("docstring")  casadi::GenericMatrixCommon::is_scalar(bool
scalar_and_dense=false) const "

Check if the matrix expression is scalar.

";

%feature("docstring")  casadi::GenericMatrixCommon::get_colind() const "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::MatrixCommon::ldl_solve(const MatrixCommon
&b, const MatrixCommon &D, const MatrixCommon &LT, const std::vector<
casadi_int > &p) "

Solve using a sparse LDL^T factorization.

";

%feature("docstring") casadi::casadi_ldl_solve "

Solve using a sparse LDL^T factorization.

";

%feature("docstring")  casadi::MatrixCommon::casadi_ldl_solve "

Solve using a sparse LDL^T factorization.

";


// File: classcasadi_1_1MinusInfSX.xml


// File: classcasadi_1_1MinusOneSX.xml


// File: classcasadi_1_1MMax.xml


// File: classcasadi_1_1MMin.xml


// File: classcasadi_1_1Monitor.xml


// File: classcasadi_1_1MultipleOutput.xml


// File: classcasadi_1_1Multiplication.xml


// File: classcasadi_1_1MX.xml


/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring")  casadi::MX::get_output(casadi_int oind) const  "

Get an output.

";

%feature("docstring")  casadi::SharedObject::disp(std::ostream &stream, bool
more=false) const  "

Print a description of the object.

";

%feature("docstring")  casadi::MX::attachAssert(const MX &y, const
std::string &fail_message="") const  "

returns itself, but with an assertion attached

If y does not evaluate to 1, a runtime error is raised

";

%feature("docstring")  casadi::GenericMatrixCommon::jtimes(const MX &ex,
const MX &arg, const MX &v, bool tr=false, const Dict &opts=Dict()) "

Functions called by friend functions defined here

";

%feature("docstring") casadi::MX "

MX - Matrix expression.

The MX class is used to build up trees made up from MXNodes. It is a more
general graph representation than the scalar expression, SX, and much less
efficient for small objects. On the other hand, the class allows much more
general operations than does SX, in particular matrix valued operations and
calls to arbitrary differentiable functions.

The MX class is designed to have identical syntax with the Matrix<> template
class, and uses DM (i.e. Matrix<double>) as its internal representation of
the values at a node. By keeping the syntaxes identical, it is possible to
switch from one class to the other, as well as inlining MX functions to
SXElem functions.

Note that an operation is always \"lazy\", making a matrix multiplication
will create a matrix multiplication node, not perform the actual
multiplication.

Joel Andersson

C++ includes: mx.hpp ";

%feature("docstring")  casadi::MX::bspline_dual(const std::vector< double >
&x, const std::vector< std::vector< double > > &knots, const std::vector<
casadi_int > &degree, const Dict &opts=Dict()) "

Find first nonzero If failed, returns the number of rows.

";

%feature("docstring")  casadi::MX::erase(const std::vector< casadi_int >
&rr, const std::vector< casadi_int > &cc, bool ind1=false) "

Erase a submatrix (leaving structural zeros in its place) Erase rows and/or
columns of a matrix.

";

%feature("docstring")  casadi::MX::erase(const std::vector< casadi_int >
&rr, bool ind1=false) "

Erase a submatrix (leaving structural zeros in its place) Erase elements of
a matrix.

";

%feature("docstring")  casadi::MX::monitor(const std::string &comment) const
"

Monitor an expression Returns itself, but with the side effect of printing
the nonzeros along with a comment.

";

%feature("docstring")  casadi::MX::primitives() const  "

Get primitives.

";

%feature("docstring")  casadi::SharedObject::print_ptr(std::ostream
&stream=casadi::uout()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring")  casadi::GenericMatrixCommon::columns() const "

Get the number of columns, Octave-style syntax.

";

%feature("docstring")  casadi::MX::is_constant() const  "

Check if constant.

";

%feature("docstring")  casadi::MX::is_output() const  "

Check if evaluation output.

";

%feature("docstring")  casadi::MX::set(const MX &m, bool ind1, const Slice
&rr) "

Set a submatrix, single argument

";

%feature("docstring")  casadi::MX::set(const MX &m, bool ind1, const
MatrixCommon &rr) "

Set a submatrix, single argument

";

%feature("docstring")  casadi::MX::set(const MX &m, bool ind1, const
Sparsity &sp) "

Set a submatrix, single argument

";

%feature("docstring")  casadi::MX::is_valid_input() const  "

Check if matrix can be used to define function inputs. Valid inputs for
MXFunctions are combinations of Reshape, concatenations and SymbolicMX.

";

%feature("docstring")  casadi::MX::evalf(const MX &expr) "

[INTERNAL]  Evaluates the expression numerically.

An error is raised when the expression contains symbols

";

%feature("docstring") casadi::casadi_evalf "

Evaluates the expression numerically.

An error is raised when the expression contains symbols

";

%feature("docstring")  casadi::MX::casadi_evalf "

Evaluates the expression numerically.

An error is raised when the expression contains symbols

";

%feature("docstring")  casadi::MX::inv_node(const MX &x) "

[INTERNAL]   Inverse node.

";

%feature("docstring") casadi::casadi_inv_node "

Inverse node.

";

%feature("docstring")  casadi::MX::casadi_inv_node "

Inverse node.

";

%feature("docstring")  casadi::MX::binary(casadi_int op, const MX &x, const
MX &y) "

Create nodes by their ID.

";

%feature("docstring")  casadi::GenericMatrixCommon::sparsity() const "

Get the sparsity pattern.

";

%feature("docstring") casadi::casadi_sparsity "

Get the sparsity pattern.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_sparsity "

Get the sparsity pattern.

";

%feature("docstring")  casadi::GenericMatrixCommon::is_tril() const "

Check if the matrix is lower triangular.

";

%feature("docstring")  casadi::GenericMatrixCommon::gradient(const MX &ex,
const MX &arg, const Dict &opts=Dict()) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::MX::n_out() const  "

Number of outputs.

";

%feature("docstring")  casadi::GenericMatrixCommon::size1() const "

Get the first dimension (i.e. number of rows)

";

%feature("docstring")  casadi::GenericMatrixCommon::linearize(const MX &f,
const MX &x, const MX &x0, const Dict &opts=Dict()) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::MX::is_op(casadi_int op) const  "

Is it a certain operation.

";

%feature("docstring")  casadi::GenericMatrixCommon::is_triu() const "

Check if the matrix is upper triangular.

";

%feature("docstring") casadi::MX::~MX "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::MX::lift(const MX &x, const MX &x_guess) "

[INTERNAL]  Lift the expression Experimental feature.

";

%feature("docstring")  casadi::MX::set_nz(const MX &m, bool ind1, const
Slice &kk) "

Set a set of nonzeros

";

%feature("docstring")  casadi::MX::set_nz(const MX &m, bool ind1, const
MatrixCommon &kk) "

Set a set of nonzeros

";

%feature("docstring")  casadi::MX::set_nz(const MX &m, bool ind1, const MX
&kk) "

Set a set of nonzeros

";

%feature("docstring")  casadi::MX::set_nz(const MX &m, bool ind1, casadi_int
kk) "

Set a set of nonzeros

";

%feature("docstring")  casadi::GenericMatrixCommon::size2() const "

Get the second dimension (i.e. number of columns)

";

%feature("docstring")  casadi::MX::set_temp(casadi_int t) const  "

[INTERNAL]  Set the temporary variable.

";

%feature("docstring")  casadi::GenericMatrixCommon::rows() const "

Get the number of rows, Octave-style syntax.

";

%feature("docstring")  casadi::MX::is_one() const  "

check if zero (note that false negative answers are possible)

";

%feature("docstring")  casadi::GenericMatrixCommon::is_empty(bool
both=false) const "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring")  casadi::MX::get_nz(MX &output_m, bool ind1, const
Slice &kk) const  "

Get a set of nonzeros

";

%feature("docstring")  casadi::MX::get_nz(MX &output_m, bool ind1, const
MatrixCommon &kk) const  "

Get a set of nonzeros

";

%feature("docstring")  casadi::MX::get_nz(MX &output_m, bool ind1, const MX
&kk) const  "

Get a set of nonzeros

";

%feature("docstring")  casadi::MX::get_nz(MX &output_m, bool ind1,
casadi_int kk) const  "

Get a set of nonzeros

";

%feature("docstring")  casadi::MX::get_nz(MX &output_m, bool ind1, const MX
&inner, const Slice &outer) const  "

Get a set of nonzeros

";

%feature("docstring")  casadi::MX::get_nz(MX &output_m, bool ind1, const
Slice &inner, const MX &outer) const  "

Get a set of nonzeros

";

%feature("docstring")  casadi::MX::get_nz(MX &output_m, bool ind1, const MX
&inner, const MX &outer) const  "

Get a set of nonzeros

";

%feature("docstring")  casadi::MX::low(const MX &v, const MX &p, const Dict
&options=Dict()) "

[INTERNAL]   Find first nonzero If failed, returns the number of rows.

";

%feature("docstring") casadi::casadi_low "

Find first nonzero If failed, returns the number of rows.

";

%feature("docstring")  casadi::MX::casadi_low "

Find first nonzero If failed, returns the number of rows.

";

%feature("docstring")  casadi::GenericMatrixCommon::ones(casadi_int nrow=1,
casadi_int ncol=1) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::GenericMatrixCommon::ones(const Sparsity &sp)
"

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::GenericMatrixCommon::ones(const std::pair<
casadi_int, casadi_int > &rc) "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring")  casadi::MX::is_transpose() const  "

Is the expression a transpose?

";

%feature("docstring")  casadi::GenericMatrixCommon::is_scalar(bool
scalar_and_dense=false) const "

Check if the matrix expression is scalar.

";

%feature("docstring")  casadi::MX::is_binary() const  "

Is binary operation.

";

%feature("docstring")  casadi::MX::convexify(const MX &H, const Dict
&opts=Dict()) "

[INTERNAL]   Find first nonzero If failed, returns the number of rows.

";

%feature("docstring") casadi::casadi_convexify "

Find first nonzero If failed, returns the number of rows.

";

%feature("docstring")  casadi::MX::casadi_convexify "

Find first nonzero If failed, returns the number of rows.

";

%feature("docstring")  casadi::MX::inf(const Sparsity &sp) "

create a matrix with all inf

";

%feature("docstring")  casadi::MX::inf(casadi_int nrow=1, casadi_int ncol=1)
"

create a matrix with all inf

";

%feature("docstring")  casadi::MX::inf(const std::pair< casadi_int,
casadi_int > &rc) "

create a matrix with all inf

";

%feature("docstring")  casadi::GenericMatrixCommon::colind(casadi_int col)
const "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::MX::is_symbolic() const  "

Check if symbolic.

";

%feature("docstring")  casadi::MX::is_eye() const  "

check if identity

";

%feature("docstring")  casadi::MX::join_primitives(const std::vector< MX >
&v) const  "

Join an expression along symbolic primitives.

";

%feature("docstring")  casadi::MX::reset_input() const  "

[INTERNAL]  Reset the marker for an input expression.

";

%feature("docstring")  casadi::GenericMatrixCommon::get_colind() const "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::MX::is_multiplication() const  "

Check if multiplication.

";

%feature("docstring")  casadi::GenericMatrixCommon::nnz() const "

Get the number of (structural) non-zero elements.

";

%feature("docstring")  casadi::MX::find(const MX &x) "

[INTERNAL]   Find first nonzero If failed, returns the number of rows.

";

%feature("docstring") casadi::casadi_find "

Find first nonzero If failed, returns the number of rows.

";

%feature("docstring")  casadi::MX::casadi_find "

Find first nonzero If failed, returns the number of rows.

";

%feature("docstring")  casadi::GenericMatrixCommon::dim(bool with_nz=false)
const "

Get string representation of dimensions. The representation is e.g. \"4x5\"
or \"4x5,10nz\".

";

%feature("docstring")  casadi::MX::is_minus_one() const  "

check if zero (note that false negative answers are possible)

";

%feature("docstring")  casadi::GenericMatrixCommon::get_row() const "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::MX::is_call() const  "

Check if evaluation.

";

%feature("docstring")  casadi::GenericMatrixCommon::nnz_upper() const "

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring")  casadi::MX::get_temp() const  "

[INTERNAL]  Get the temporary variable

";

%feature("docstring") casadi::MX::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring")  casadi::GenericMatrixCommon::zeros(casadi_int nrow=1,
casadi_int ncol=1) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrixCommon::zeros(const Sparsity
&sp) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::GenericMatrixCommon::zeros(const std::pair<
casadi_int, casadi_int > &rc) "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring")  casadi::MX::is_zero() const  "

check if zero (note that false negative answers are possible)

";

%feature("docstring")  casadi::SharedObject::get_str(bool more=false) const
"

Get string representation.

";

%feature("docstring")  casadi::GenericMatrixCommon::size() const "

Get the shape.

";

%feature("docstring")  casadi::GenericMatrixCommon::size(casadi_int axis)
const "

Get the size along a particular dimensions.

";

%feature("docstring")  casadi::MX::T() const  "

Transpose the matrix.

";

%feature("docstring")  casadi::GenericMatrixCommon::is_vector() const "

Check if the matrix is a row or column vector.

";

%feature("docstring")  casadi::MX::matrix_expand(const MX &e, const
std::vector< MX > &boundary=std::vector< MX >(), const Dict &options=Dict())
"

[INTERNAL]  Expand MX graph to SXFunction call.

Expand the given expression e, optionally supplying expressions contained in
it at which expansion should stop.

";

%feature("docstring") casadi::casadi_matrix_expand "

Expand MX graph to SXFunction call.

Expand the given expression e, optionally supplying expressions contained in
it at which expansion should stop.

";

%feature("docstring")  casadi::MX::casadi_matrix_expand "

Expand MX graph to SXFunction call.

Expand the given expression e, optionally supplying expressions contained in
it at which expansion should stop.

";

%feature("docstring")  casadi::MX::matrix_expand(const std::vector< MX > &e,
const std::vector< MX > &boundary=std::vector< MX >(), const Dict
&options=Dict()) "

[INTERNAL]  Expand MX graph to SXFunction call.

Expand the given expression e, optionally supplying expressions contained in
it at which expansion should stop.

";

%feature("docstring") casadi::casadi_matrix_expand "

Expand MX graph to SXFunction call.

Expand the given expression e, optionally supplying expressions contained in
it at which expansion should stop.

";

%feature("docstring")  casadi::MX::casadi_matrix_expand "

Expand MX graph to SXFunction call.

Expand the given expression e, optionally supplying expressions contained in
it at which expansion should stop.

";

%feature("docstring")  casadi::MX::nan(const Sparsity &sp) "

create a matrix with all nan

";

%feature("docstring")  casadi::MX::nan(casadi_int nrow=1, casadi_int ncol=1)
"

create a matrix with all nan

";

%feature("docstring")  casadi::MX::nan(const std::pair< casadi_int,
casadi_int > &rc) "

create a matrix with all nan

";

%feature("docstring")  casadi::GenericMatrixCommon::row(casadi_int el) const
"

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring")  casadi::MX::n_dep() const  "

Get the number of dependencies of a binary SXElem.

";

%feature("docstring")  casadi::MX::bspline(const MX &x, const DM &coeffs,
const std::vector< std::vector< double > > &knots, const std::vector<
casadi_int > &degree, casadi_int m, const Dict &opts=Dict()) "

[INTERNAL]   Find first nonzero If failed, returns the number of rows.

";

%feature("docstring") casadi::casadi_bspline "

Find first nonzero If failed, returns the number of rows.

";

%feature("docstring")  casadi::MX::casadi_bspline "

Find first nonzero If failed, returns the number of rows.

";

%feature("docstring")  casadi::MX::bspline(const MX &x, const MX &coeffs,
const std::vector< std::vector< double > > &knots, const std::vector<
casadi_int > &degree, casadi_int m, const Dict &opts=Dict()) "

[INTERNAL]   Find first nonzero If failed, returns the number of rows.

";

%feature("docstring") casadi::casadi_bspline "

Find first nonzero If failed, returns the number of rows.

";

%feature("docstring")  casadi::MX::casadi_bspline "

Find first nonzero If failed, returns the number of rows.

";

%feature("docstring")  casadi::MX::has_duplicates() const  "

[INTERNAL]  Detect duplicate symbolic expressions If there are symbolic
primitives appearing more than once, the function will return true and the
names of the duplicate expressions will be passed to casadi_warning. Note:
Will mark the node using MX::set_temp. Make sure to call reset_input() after
usage.

";

%feature("docstring")  casadi::SharedObject::class_name() const  "

Get class name.

";

%feature("docstring")  casadi::MX::is_norm() const  "

Check if norm.

";

%feature("docstring")  casadi::GenericMatrixCommon::mpower(const MX &x,
const MX &y) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::GenericMatrixCommon::numel() const "

Get the number of elements.

";

%feature("docstring")  casadi::MX::enlarge(casadi_int nrow, casadi_int ncol,
const std::vector< casadi_int > &rr, const std::vector< casadi_int > &cc,
bool ind1=false) "

Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

";

%feature("docstring")  casadi::GenericMatrixCommon::sym(const std::string
&name, casadi_int nrow=1, casadi_int ncol=1) "

Create an nrow-by-ncol symbolic primitive.

";

%feature("docstring")  casadi::GenericMatrixCommon::sym(const std::string
&name, const std::pair< casadi_int, casadi_int > &rc) "

Construct a symbolic primitive with given dimensions.

";

%feature("docstring")  casadi::GenericMatrixCommon::sym(const std::string
&name, const Sparsity &sp) "

Create symbolic primitive with a given sparsity pattern.

";

%feature("docstring")  casadi::GenericMatrixCommon::sym(const std::string
&name, const Sparsity &sp, casadi_int p) "

Create a vector of length p with with matrices with symbolic primitives of
given sparsity.

";

%feature("docstring")  casadi::GenericMatrixCommon::sym(const std::string
&name, casadi_int nrow, casadi_int ncol, casadi_int p) "

Create a vector of length p with nrow-by-ncol symbolic primitives.

";

%feature("docstring")  casadi::GenericMatrixCommon::sym(const std::string
&name, const Sparsity &sp, casadi_int p, casadi_int r) "

Create a vector of length r of vectors of length p with symbolic primitives
with given sparsity.

";

%feature("docstring")  casadi::GenericMatrixCommon::sym(const std::string
&name, casadi_int nrow, casadi_int ncol, casadi_int p, casadi_int r) "

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

%feature("docstring")  casadi::GenericMatrixCommon::tangent(const MX &ex,
const MX &arg, const Dict &opts=Dict()) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::MX::serialize(SerializingStream &s) const  "

Serialize an object.

";

%feature("docstring")  casadi::GenericMatrixCommon::is_square() const "

Check if the matrix expression is square.

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, const Slice
&rr) const  "

Get a submatrix, single argument

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, const
MatrixCommon &rr) const  "

Get a submatrix, single argument

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, const
Sparsity &sp) const  "

Get a submatrix, single argument

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, const MX
&rr) const  "

Get a submatrix, single argument

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, const
casadi_int rr) const  "

Get a submatrix, single argument

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, const Slice
&rr, const Slice &cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, const Slice
&rr, const MatrixCommon &cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, const Slice
&rr, casadi_int cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, const
MatrixCommon &rr, const Slice &cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, casadi_int
rr, const Slice &cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, const
MatrixCommon &rr, const MatrixCommon &cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, casadi_int
rr, casadi_int cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, const MX
&rr, const Slice &cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, const Slice
&rr, const MX &cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  casadi::MX::get(MX &output_m, bool ind1, const MX
&rr, const MX &cc) const  "

Get a submatrix, two arguments

";

%feature("docstring")  casadi::MX::einstein(const MX &A, const MX &B, const
MX &C, const std::vector< casadi_int > &dim_a, const std::vector< casadi_int
> &dim_b, const std::vector< casadi_int > &dim_c, const std::vector<
casadi_int > &a, const std::vector< casadi_int > &b, const std::vector<
casadi_int > &c) "

Computes an einstein dense tensor contraction.

Computes the product: C_c = A_a + B_b where a b c are index/einstein
notation in an encoded form

For example, an matrix-matrix product may be written as: C_ij = A_ik B_kj

The encoded form uses strictly negative numbers to indicate labels. For the
above example, we would have: a {-1, -3} b {-3, -2} c {-1 -2}

";

%feature("docstring") casadi::casadi_einstein "

Computes an einstein dense tensor contraction.

Computes the product: C_c = A_a + B_b where a b c are index/einstein
notation in an encoded form

For example, an matrix-matrix product may be written as: C_ij = A_ik B_kj

The encoded form uses strictly negative numbers to indicate labels. For the
above example, we would have: a {-1, -3} b {-3, -2} c {-1 -2}

";

%feature("docstring")  casadi::MX::casadi_einstein "

Computes an einstein dense tensor contraction.

Computes the product: C_c = A_a + B_b where a b c are index/einstein
notation in an encoded form

For example, an matrix-matrix product may be written as: C_ij = A_ik B_kj

The encoded form uses strictly negative numbers to indicate labels. For the
above example, we would have: a {-1, -3} b {-3, -2} c {-1 -2}

";

%feature("docstring")  casadi::MX::einstein(const MX &A, const MX &B, const
std::vector< casadi_int > &dim_a, const std::vector< casadi_int > &dim_b,
const std::vector< casadi_int > &dim_c, const std::vector< casadi_int > &a,
const std::vector< casadi_int > &b, const std::vector< casadi_int > &c) "

Computes an einstein dense tensor contraction.

Computes the product: C_c = A_a + B_b where a b c are index/einstein
notation in an encoded form

For example, an matrix-matrix product may be written as: C_ij = A_ik B_kj

The encoded form uses strictly negative numbers to indicate labels. For the
above example, we would have: a {-1, -3} b {-3, -2} c {-1 -2}

";

%feature("docstring") casadi::casadi_einstein "

Computes an einstein dense tensor contraction.

Computes the product: C_c = A_a + B_b where a b c are index/einstein
notation in an encoded form

For example, an matrix-matrix product may be written as: C_ij = A_ik B_kj

The encoded form uses strictly negative numbers to indicate labels. For the
above example, we would have: a {-1, -3} b {-3, -2} c {-1 -2}

";

%feature("docstring")  casadi::MX::casadi_einstein "

Computes an einstein dense tensor contraction.

Computes the product: C_c = A_a + B_b where a b c are index/einstein
notation in an encoded form

For example, an matrix-matrix product may be written as: C_ij = A_ik B_kj

The encoded form uses strictly negative numbers to indicate labels. For the
above example, we would have: a {-1, -3} b {-3, -2} c {-1 -2}

";

%feature("docstring")  casadi::GenericMatrixCommon::is_column() const "

Check if the matrix is a column vector (i.e. size2()==1)

";

%feature("docstring") casadi::MX::__nonzero__ "

Returns the truth value of an MX expression.

";

%feature("docstring")  casadi::MX::name() const  "

Get the name.

";

%feature("docstring")  casadi::MX::info() const  "

Obtain information about node

";

%feature("docstring")  casadi::MX::which_function() const  "

Get function - only valid when is_call() is true.

";

%feature("docstring") casadi::MX::MX() "

Default constructor.

";

%feature("docstring") casadi::MX::MX(casadi_int nrow, casadi_int ncol) "

Create a sparse matrix with all structural zeros.

";

%feature("docstring") casadi::MX::MX(const Sparsity &sp) "

Create a sparse matrix from a sparsity pattern. Same as MX::ones(sparsity)

";

%feature("docstring") casadi::MX::MX(const Sparsity &sp, const MX &val) "

Construct matrix with a given sparsity and nonzeros.

";

%feature("docstring") casadi::MX::MX(const Sparsity &sp, const std::string
&fname) "

Construct matrix with a given sparsity and a file with nonzeros.

";

%feature("docstring") casadi::MX::MX(double x) "

Create scalar constant (also implicit type conversion)

";

%feature("docstring") casadi::MX::MX(const MX &x) "

Copy constructor.

";

%feature("docstring") casadi::MX::MX(const MatrixCommon &x) "

Create sparse matrix constant (also implicit type conversion)

";

%feature("docstring")  casadi::GenericMatrixCommon::soc(const MX &x, const
MX &y) "

Functions called by friend functions defined here

";

%feature("docstring")  casadi::GenericMatrixCommon::rank1(const MX &A, const
MX &alpha, const MX &x, const MX &y) "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring") casadi::casadi_rank1 "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_rank1 "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring")  casadi::GenericMatrixCommon::bilin(const MX &A, const
MX &x, const MX &y) "

Calculate bilinear form x^T A y.

";

%feature("docstring") casadi::casadi_bilin "

Calculate bilinear form x^T A y.

";

%feature("docstring")  casadi::GenericMatrixCommon::casadi_bilin "

Calculate bilinear form x^T A y.

";

%feature("docstring")  casadi::GenericMatrixCommon::nnz_lower() const "

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring")  casadi::MX::is_unary() const  "

Is unary operation.

";

%feature("docstring")  casadi::MX::is_commutative() const  "

Check if commutative operation.

";

%feature("docstring")  casadi::MX::mapping() const  "

Get an IM representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring")  casadi::MX::split_primitives(const MX &x) const  "

Split up an expression along symbolic primitives.

";

%feature("docstring")  casadi::MX::graph_substitute(const MX &ex, const
std::vector< MX > &v, const std::vector< MX > &vdef) "

[INTERNAL]  Substitute single expression in graph Substitute variable v with
expression vdef in an expression ex, preserving nodes.

";

%feature("docstring") casadi::casadi_graph_substitute "

Substitute single expression in graph Substitute variable v with expression
vdef in an expression ex, preserving nodes.

";

%feature("docstring")  casadi::MX::casadi_graph_substitute "

Substitute single expression in graph Substitute variable v with expression
vdef in an expression ex, preserving nodes.

";

%feature("docstring")  casadi::MX::graph_substitute(const std::vector< MX >
&ex, const std::vector< MX > &v, const std::vector< MX > &vdef) "

[INTERNAL]  Substitute multiple expressions in graph Substitute variable var
with expression expr in multiple expressions, preserving nodes.

";

%feature("docstring") casadi::casadi_graph_substitute "

Substitute multiple expressions in graph Substitute variable var with
expression expr in multiple expressions, preserving nodes.

";

%feature("docstring")  casadi::MX::casadi_graph_substitute "

Substitute multiple expressions in graph Substitute variable var with
expression expr in multiple expressions, preserving nodes.

";

%feature("docstring")  casadi::GenericMatrixCommon::is_dense() const "

Check if the matrix expression is dense.

";

%feature("docstring")  casadi::MX::op() const  "

Get operation type.

";

%feature("docstring")  casadi::MX::n_primitives() const  "

Get the number of primitives for MXFunction inputs/outputs.

";

%feature("docstring")  casadi::MX::dep(casadi_int ch=0) const  "

Get the nth dependency as MX.

";

%feature("docstring")  casadi::MX::get_sparsity() const  "

Get an owning reference to the sparsity pattern.

";

%feature("docstring")  casadi::GenericMatrixCommon::nnz_diag() const "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring")  casadi::MX::unary(casadi_int op, const MX &x) "

Create nodes by their ID.

";

%feature("docstring")  casadi::MX::which_output() const  "

Get the index of evaluation output - only valid when is_output() is true.

";

%feature("docstring")  casadi::MX::is_regular() const  "

Checks if expression does not contain NaN or Inf.

";

%feature("docstring")  casadi::GenericMatrixCommon::is_row() const "

Check if the matrix is a row vector (i.e. size1()==1)

";


// File: classcasadi_1_1MXFunction.xml


// File: classcasadi_1_1NanSX.xml


// File: classcasadi_1_1Newton.xml
%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname)  "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::Newton::Newton(const std::string &name, const
Function &f) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::Rootfinder::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::Rootfinder::get_reverse(casadi_int nadj,
const std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(casadi_int
ind) const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=nullptr) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::Newton::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::Rootfinder::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::Rootfinder::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::Newton::plugin_name() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Rootfinder::sp_forward(const bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::Rootfinder::serialize_base_function() const
"

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::Newton::serialize_body(SerializingStream &s)
const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::Newton::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::OracleFunction::get_function() const  "

[INTERNAL]  Get list of dependency functions -1 Indicates irregularity.

";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::Rootfinder::serialize_type(SerializingStream
&s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::Newton::~Newton "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::OracleFunction::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::Rootfinder::ad_forward(const std::vector< MX
> &arg, const std::vector< MX > &res, const std::vector< std::vector< MX > >
&fseed, std::vector< std::vector< MX > > &fsens, bool always_inline, bool
never_inline) const  "

[INTERNAL]  Create call to (cached) derivative function, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::Rootfinder::sp_reverse(bvec_t **arg, bvec_t
**res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::Rootfinder::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::Rootfinder::ad_reverse(const std::vector< MX
> &arg, const std::vector< MX > &res, const std::vector< std::vector< MX > >
&aseed, std::vector< std::vector< MX > > &asens, bool always_inline, bool
never_inline) const  "

[INTERNAL]  Create call to (cached) derivative function, reverse mode.

";

%feature("docstring")  casadi::Rootfinder::has_reverse(casadi_int nadj)
const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Newton "

'newton' plugin for Rootfinder

Implements simple newton iterations to solve an implicit function.

>List of available options

+-----------------+-----------+--------------------------------------------+
|       Id        |   Type    |                Description                 |
+=================+===========+============================================+
| abstol          | OT_DOUBLE | Stopping criterion tolerance on max(|F|)   |
+-----------------+-----------+--------------------------------------------+
| abstolStep      | OT_DOUBLE | Stopping criterion tolerance on step size  |
+-----------------+-----------+--------------------------------------------+
| line_search     | OT_BOOL   | Enable line-search (default: true)         |
+-----------------+-----------+--------------------------------------------+
| max_iter        | OT_INT    | Maximum number of Newton iterations to     |
|                 |           | perform before returning.                  |
+-----------------+-----------+--------------------------------------------+
| print_iteration | OT_BOOL   | Print information about each iteration     |
+-----------------+-----------+--------------------------------------------+

Joris Gillis

>List of available options

+-------------------+--------------+-------------------+-------------------+
|        Id         |     Type     |    Description    |      Used in      |
+===================+==============+===================+===================+
| abstol            | OT_DOUBLE    | Stopping          | casadi::Newton    |
|                   |              | criterion         |                   |
|                   |              | tolerance on      |                   |
|                   |              | max(|F|)          |                   |
+-------------------+--------------+-------------------+-------------------+
| abstolStep        | OT_DOUBLE    | Stopping          | casadi::Newton    |
|                   |              | criterion         |                   |
|                   |              | tolerance on step |                   |
|                   |              | size              |                   |
+-------------------+--------------+-------------------+-------------------+
| constraints       | OT_INTVECTOR | Constrain the     | casadi::Rootfinde |
|                   |              | unknowns. 0       | r                 |
|                   |              | (default): no     |                   |
|                   |              | constraint on ui, |                   |
|                   |              | 1: ui >= 0.0, -1: |                   |
|                   |              | ui <= 0.0, 2: ui  |                   |
|                   |              | > 0.0, -2: ui <   |                   |
|                   |              | 0.0.              |                   |
+-------------------+--------------+-------------------+-------------------+
| error_on_fail     | OT_BOOL      | When the          | casadi::Rootfinde |
|                   |              | numerical process | r                 |
|                   |              | returns           |                   |
|                   |              | unsuccessfully,   |                   |
|                   |              | raise an error    |                   |
|                   |              | (default false).  |                   |
+-------------------+--------------+-------------------+-------------------+
| implicit_input    | OT_INT       | Index of the      | casadi::Rootfinde |
|                   |              | input that        | r                 |
|                   |              | corresponds to    |                   |
|                   |              | the actual root-  |                   |
|                   |              | finding           |                   |
+-------------------+--------------+-------------------+-------------------+
| implicit_output   | OT_INT       | Index of the      | casadi::Rootfinde |
|                   |              | output that       | r                 |
|                   |              | corresponds to    |                   |
|                   |              | the actual root-  |                   |
|                   |              | finding           |                   |
+-------------------+--------------+-------------------+-------------------+
| jacobian_function | OT_FUNCTION  | Function object   | casadi::Rootfinde |
|                   |              | for calculating   | r                 |
|                   |              | the Jacobian      |                   |
|                   |              | (autogenerated by |                   |
|                   |              | default)          |                   |
+-------------------+--------------+-------------------+-------------------+
| line_search       | OT_BOOL      | Enable line-      | casadi::Newton    |
|                   |              | search (default:  |                   |
|                   |              | true)             |                   |
+-------------------+--------------+-------------------+-------------------+
| linear_solver     | OT_STRING    | User-defined      | casadi::Rootfinde |
|                   |              | linear solver     | r                 |
|                   |              | class. Needed for |                   |
|                   |              | sensitivities.    |                   |
+-------------------+--------------+-------------------+-------------------+
| linear_solver_opt | OT_DICT      | Options to be     | casadi::Rootfinde |
| ions              |              | passed to the     | r                 |
|                   |              | linear solver.    |                   |
+-------------------+--------------+-------------------+-------------------+
| max_iter          | OT_INT       | Maximum number of | casadi::Newton    |
|                   |              | Newton iterations |                   |
|                   |              | to perform before |                   |
|                   |              | returning.        |                   |
+-------------------+--------------+-------------------+-------------------+
| print_iteration   | OT_BOOL      | Print information | casadi::Newton    |
|                   |              | about each        |                   |
|                   |              | iteration         |                   |
+-------------------+--------------+-------------------+-------------------+

Diagrams
--------



C++ includes: newton.hpp ";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::Newton::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::Rootfinder::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::Rootfinder::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::Newton::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::Rootfinder::get_forward(casadi_int nfwd,
const std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::Rootfinder::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::Newton::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::Newton::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::Rootfinder::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::Rootfinder::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::Newton::set_work(void *mem, const double
**&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::Newton::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::Rootfinder::has_forward(casadi_int nfwd)
const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::Rootfinder::eval(const double **arg, double
**res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::Newton::solve(void *mem) const  "

[INTERNAL]   Solve the system of equations and calculate derivatives.

";

%feature("docstring") casadi::casadi_solve "

Solve the system of equations and calculate derivatives.

";

%feature("docstring")  casadi::Newton::casadi_solve "

Solve the system of equations and calculate derivatives.

";

%feature("docstring")  casadi::OracleFunction::finalize()  "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";


// File: classcasadi_1_1NlpBuilder.xml


/*  Symbolic representation of the NLP  */

/* Data members

*/ %feature("docstring") casadi::NlpBuilder "

A symbolic NLP representation.

Joel Andersson

C++ includes: nlp_builder.hpp ";

%feature("docstring")  casadi::NlpBuilder::type_name() const  "

Readable name of the class.

";

%feature("docstring")  casadi::NlpBuilder::import_nl(const std::string
&filename, const Dict &opts=Dict()) "

Import an .nl file.

";

%feature("docstring")  casadi::NlpBuilder::get_str(bool more=false) const  "

Get string representation.

";

%feature("docstring")  casadi::NlpBuilder::disp(std::ostream &stream, bool
more=false) const  "

Print a description of the object.

";


// File: classcasadi_1_1Nlpsol.xml
%feature("docstring")  casadi::Nlpsol::callback(NlpsolMemory *m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Nlpsol::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::OracleFunction::get_function() const  "

[INTERNAL]  Get list of dependency functions -1 Indicates irregularity.

";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::serialize_type(SerializingStream &s)
const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::Nlpsol::Nlpsol(const std::string &name, const
Function &oracle) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::Nlpsol::disp_more(std::ostream &stream) const
"

[INTERNAL]  Print description.

";

%feature("docstring")  casadi::Nlpsol::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::Nlpsol::getReducedHessian() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::Nlpsol::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::Nlpsol::get_reverse(casadi_int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates reverse mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Nlpsol::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::Nlpsol::nlpsol_codegen_body(CodeGenerator &g)
const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::OracleFunction::finalize()  "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::Nlpsol::eval(const double **arg, double
**res, casadi_int *iw, double *w, void *mem) const final "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::Nlpsol::setOptionsFromFile(const std::string
&file) "

[INTERNAL]  Read options from parameter xml.

";

%feature("docstring")  casadi::Nlpsol::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::Nlpsol::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Nlpsol::serialize_body(SerializingStream &s)
const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::Nlpsol::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::Nlpsol::get_forward(casadi_int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates forward mode derivatives.

";

%feature("docstring")  casadi::Nlpsol::is_a(const std::string &type, bool
recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::serialize_base_function() const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::Nlpsol::set_work(void *mem, const double
**&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::Nlpsol::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::Nlpsol::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::Nlpsol::kkt() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::solve(void *mem) const  "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Nlpsol::has_forward(casadi_int nfwd) const  "

[INTERNAL]  Generate a function that calculates forward mode derivatives.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=nullptr) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::Nlpsol::has_reverse(casadi_int nadj) const  "

[INTERNAL]  Generate a function that calculates reverse mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::Nlpsol::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::Nlpsol::get_default_in(casadi_int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::OracleFunction::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Nlpsol "

NLP solver storage class.

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| bound_consistenc | OT_BOOL         | Ensure that      | casadi::Nlpsol   |
| y                |                 | primal-dual      |                  |
|                  |                 | solution is      |                  |
|                  |                 | consistent with  |                  |
|                  |                 | the bounds       |                  |
+------------------+-----------------+------------------+------------------+
| calc_f           | OT_BOOL         | Calculate 'f' in | casadi::Nlpsol   |
|                  |                 | the Nlpsol base  |                  |
|                  |                 | class            |                  |
+------------------+-----------------+------------------+------------------+
| calc_g           | OT_BOOL         | Calculate 'g' in | casadi::Nlpsol   |
|                  |                 | the Nlpsol base  |                  |
|                  |                 | class            |                  |
+------------------+-----------------+------------------+------------------+
| calc_lam_p       | OT_BOOL         | Calculate        | casadi::Nlpsol   |
|                  |                 | 'lam_p' in the   |                  |
|                  |                 | Nlpsol base      |                  |
|                  |                 | class            |                  |
+------------------+-----------------+------------------+------------------+
| calc_lam_x       | OT_BOOL         | Calculate        | casadi::Nlpsol   |
|                  |                 | 'lam_x' in the   |                  |
|                  |                 | Nlpsol base      |                  |
|                  |                 | class            |                  |
+------------------+-----------------+------------------+------------------+
| calc_multipliers | OT_BOOL         | Calculate        | casadi::Nlpsol   |
|                  |                 | Lagrange         |                  |
|                  |                 | multipliers in   |                  |
|                  |                 | the Nlpsol base  |                  |
|                  |                 | class            |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| discrete         | OT_BOOLVECTOR   | Indicates which  | casadi::Nlpsol   |
|                  |                 | of the variables |                  |
|                  |                 | are discrete,    |                  |
|                  |                 | i.e. integer-    |                  |
|                  |                 | valued           |                  |
+------------------+-----------------+------------------+------------------+
| error_on_fail    | OT_BOOL         | When the         | casadi::Nlpsol   |
|                  |                 | numerical        |                  |
|                  |                 | process returns  |                  |
|                  |                 | unsuccessfully,  |                  |
|                  |                 | raise an error   |                  |
|                  |                 | (default false). |                  |
+------------------+-----------------+------------------+------------------+
| eval_errors_fata | OT_BOOL         | When errors      | casadi::Nlpsol   |
| l                |                 | occur during     |                  |
|                  |                 | evaluation of    |                  |
|                  |                 | f,g,...,stop the |                  |
|                  |                 | iterations       |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::OracleFu |
|                  |                 | SX expressions   | nction           |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| ignore_check_vec | OT_BOOL         | If set to true,  | casadi::Nlpsol   |
|                  |                 | the input shape  |                  |
|                  |                 | of F will not be |                  |
|                  |                 | checked.         |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_FUNCTION     | A function that  | casadi::Nlpsol   |
| ck               |                 | will be called   |                  |
|                  |                 | at each          |                  |
|                  |                 | iteration with   |                  |
|                  |                 | the solver as    |                  |
|                  |                 | input. Check     |                  |
|                  |                 | documentation of |                  |
|                  |                 | Callback .       |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_BOOL         | If set to true,  | casadi::Nlpsol   |
| ck_ignore_errors |                 | errors thrown by |                  |
|                  |                 | iteration_callba |                  |
|                  |                 | ck will be       |                  |
|                  |                 | ignored.         |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_INT          | Only call the    | casadi::Nlpsol   |
| ck_step          |                 | callback         |                  |
|                  |                 | function every   |                  |
|                  |                 | few iterations.  |                  |
+------------------+-----------------+------------------+------------------+
| min_lam          | OT_DOUBLE       | Minimum allowed  | casadi::Nlpsol   |
|                  |                 | multiplier value |                  |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| no_nlp_grad      | OT_BOOL         | Prevent the      | casadi::Nlpsol   |
|                  |                 | creation of the  |                  |
|                  |                 | 'nlp_grad'       |                  |
|                  |                 | function         |                  |
+------------------+-----------------+------------------+------------------+
| oracle_options   | OT_DICT         | Options to be    | casadi::Nlpsol   |
|                  |                 | passed to the    |                  |
|                  |                 | oracle function  |                  |
+------------------+-----------------+------------------+------------------+
| sens_linsol      | OT_STRING       | Linear solver    | casadi::Nlpsol   |
|                  |                 | used for         |                  |
|                  |                 | parametric       |                  |
|                  |                 | sensitivities    |                  |
|                  |                 | (default 'qr').  |                  |
+------------------+-----------------+------------------+------------------+
| sens_linsol_opti | OT_DICT         | Linear solver    | casadi::Nlpsol   |
| ons              |                 | options used for |                  |
|                  |                 | parametric       |                  |
|                  |                 | sensitivities.   |                  |
+------------------+-----------------+------------------+------------------+
| show_eval_warnin | OT_BOOL         | Show warnings    | casadi::OracleFu |
| gs               |                 | generated from   | nction           |
|                  |                 | function         |                  |
|                  |                 | evaluations      |                  |
|                  |                 | [true]           |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| verbose_init     | OT_BOOL         | Print out timing | casadi::Nlpsol   |
|                  |                 | information      |                  |
|                  |                 | about the        |                  |
|                  |                 | different stages |                  |
|                  |                 | of               |                  |
|                  |                 | initialization   |                  |
+------------------+-----------------+------------------+------------------+
| warn_initial_bou | OT_BOOL         | Warn if the      | casadi::Nlpsol   |
| nds              |                 | initial guess    |                  |
|                  |                 | does not satisfy |                  |
|                  |                 | LBX and UBX      |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: nlpsol_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Nlpsol::check_inputs(void *mem) const  "

[INTERNAL]  Check if the inputs correspond to a well-posed problem.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::PluginInterface< Nlpsol  >::plugin_name()
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::Nlpsol::class_name() const  "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::Nlpsol::~Nlpsol "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::Nlpsol::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname)  "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::Nlpsol::integer_support() const  "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::Nlpsol::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::Nlpsol::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";


// File: classcasadi_1_1NonZeros.xml
%feature("docstring") casadi::NonZeros< M, K >::NonZeros(M &mat, const K &k)
"

Constructor.

";

%feature("docstring") casadi::NonZeros "

Access to a set of nonzeros.

NonZeros class for Matrix NonZeros is the return type for operator[] of the
Matrix class, it allows access to the value as well as changing the parent
object Joel Andersson

C++ includes: nonzeros.hpp ";


// File: classcasadi_1_1Norm.xml


// File: classcasadi_1_1Norm1.xml


// File: classcasadi_1_1Norm2.xml


// File: classcasadi_1_1NormF.xml


// File: classcasadi_1_1NormInf.xml


// File: classcasadi_1_1OmpMap.xml
%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::Map::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::OmpMap::eval(const double **arg, double
**res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate the function numerically.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::Map::eval_sx(const SXElem **arg, SXElem
**res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  evaluate symbolically while also propagating directional
derivatives

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Map::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::OmpMap::OmpMap(const std::string &name, const
Function &f, casadi_int n) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::OmpMap::~OmpMap "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::Map::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Map::get_function(const std::string &name)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::OmpMap::is_a(const std::string &type, bool
recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::Map::codegen_declarations(CodeGenerator &g)
const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::Map::sp_reverse(bvec_t **arg, bvec_t **res,
casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::Map::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::Map::serialize_body(SerializingStream &s)
const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::Map::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::Map::has_forward(casadi_int nfwd) const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::Map::get_reverse(casadi_int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Map::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Map::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::OmpMap "

[INTERNAL]  A map Evaluate in parallel using OpenMP Note: Do not use this
class with much more than the intended number of threads for the parallel
evaluation as it will cause excessive memory use.

Joel Andersson

C++ includes: map.hpp ";

%feature("docstring")  casadi::Map::sp_forward(const bvec_t **arg, bvec_t
**res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::Map::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::OmpMap::codegen_body(CodeGenerator &g) const
"

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::Map::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::OmpMap::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::Map::get_default_in(casadi_int ind) const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Map::has_reverse(casadi_int nadj) const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::Map::eval_gen(const T **arg, T **res,
casadi_int *iw, T *w, int mem=0) const  "

[INTERNAL]  Evaluate or propagate sparsities.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::ProtoFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::finalize()  "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::Map::serialize_type(SerializingStream &s)
const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::OmpMap::parallelization() const  "

[INTERNAL]  Type of parallellization.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::Map::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::Map::has_function(const std::string &fname)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::Map::serialize_base_function() const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::Map::info() const  "

[INTERNAL]  Obtain information about node

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::OmpMap::class_name() const  "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::Map::get_forward(casadi_int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";


// File: classcasadi_1_1OneSX.xml


// File: classcasadi_1_1Opti.xml
%feature("docstring")  casadi::Opti::stats() const  "

Get statistics.

nlpsol stats are passed as-is. No stability can be guaranteed about this
part of the API

";

%feature("docstring")  casadi::Opti::f() const  "

Get objective expression.

";

%feature("docstring")  casadi::Opti::g() const  "

Get all (scalarised) constraint expressions as a column vector.

";

%feature("docstring")  casadi::Opti::debug() const  "

Get a copy with advanced functionality.

You get access to more methods, but you have no guarantees about API
stability

The copy is effectively a deep copy: Updating the state of the copy does not
update the original.

";

%feature("docstring")  casadi::Opti::solve_limited() "

Crunch the numbers; solve the problem.

Allows the solver to return without error when an iteration or time limit is
reached

";

%feature("docstring") casadi::Opti::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring")  casadi::Opti::parameter(casadi_int n=1, casadi_int
m=1, const std::string &attribute="full") "

Create a parameter (symbol); fixed during optimization.

The order of creation does not matter. It is not required for parameter to
actualy appear in the optimization problem. Parameters that do appear, must
be given a value before the problem can be solved.

Parameters:
-----------

n:  number of rows (default 1)

m:  number of columnss (default 1)

attribute:  'full' (default) or 'symmetric'

";

%feature("docstring")  casadi::Opti::p() const  "

Get all (scalarised) parameters as a symbolic column vector.

";

%feature("docstring")  casadi::Opti::set_value(const MX &x, const DM &v) "

Set value of parameter.

Each parameter must be given a value before 'solve' can be called

";

%feature("docstring")  casadi::Opti::set_value(const std::vector< MX >
&assignments) "

Set value of parameter.

Each parameter must be given a value before 'solve' can be called

";

%feature("docstring")  casadi::Opti::lam_g() const  "

Get all (scalarised) dual variables as a symbolic column vector.

Useful for obtaining the Lagrange Hessian:

::

  * sol.value(hessian(opti.f+opti.lam_g'*opti.g,opti.x)) % MATLAB
  * sol.value(hessian(opti.f+dot(opti.lam_g,opti.g),opti.x)[0]) # Python
  * 



";

%feature("docstring")  casadi::Opti::solve() "

Crunch the numbers; solve the problem.

";

%feature("docstring") casadi::casadi_solve "

Crunch the numbers; solve the problem.

";

%feature("docstring")  casadi::Opti::casadi_solve "

Crunch the numbers; solve the problem.

";

%feature("docstring")  casadi::Opti::x() const  "

Get all (scalarised) decision variables as a symbolic column vector.

";

%feature("docstring")  casadi::Opti::initial() const  "

get assignment expressions for initial values

";

%feature("docstring")  casadi::Opti::get_str(bool more=false) const  "

Get string representation.

";

%feature("docstring")  casadi::Opti::np() const  "

Number of (scalarised) parameters.

";

%feature("docstring")  casadi::Opti::set_initial(const MX &x, const DM &v) "

Set initial guess for decision variables

::

  * opti.set_initial(x, 2)
  * opti.set_initial(10*x(1), 2)
  * 



";

%feature("docstring")  casadi::Opti::set_initial(const std::vector< MX >
&assignments) "

Set initial guess for decision variables

::

  * opti.set_initial(x, 2)
  * opti.set_initial(10*x(1), 2)
  * 



";

%feature("docstring")  casadi::Opti::callback_class(OptiCallback *callback)
"

Helper methods for callback()

Do not use directly.

";

%feature("docstring")  casadi::Opti::callback_class() "

Helper methods for callback()

Do not use directly.

";

%feature("docstring")  casadi::Opti::nx() const  "

Number of (scalarised) decision variables.

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Opti::ng() const  "

Number of (scalarised) constraints.

";

%feature("docstring") casadi::Opti::Opti(const std::string
&problem_type="nlp") "

Create Opti Context.

Parameters:
-----------

problem_type:  of optimization 'nlp' or 'conic' (default nlp)

";

%feature("docstring")  casadi::Opti::type_name() const  "

Readable name of the class.

";

%feature("docstring")  casadi::Opti::value(const MX &x, const std::vector<
MX > &values=std::vector< MX >()) const  "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring")  casadi::Opti::value(const DM &x, const std::vector<
MX > &values=std::vector< MX >()) const  "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring")  casadi::Opti::value(const SX &x, const std::vector<
MX > &values=std::vector< MX >()) const  "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring")  casadi::Opti::variable(casadi_int n=1, casadi_int
m=1, const std::string &attribute="full") "

Create a decision variable (symbol)

The order of creation matters. The order will be reflected in the
optimization problem. It is not required for decision variables to actualy
appear in the optimization problem.

Parameters:
-----------

n:  number of rows (default 1)

m:  number of columnss (default 1)

attribute:  'full' (default) or 'symmetric'

";

%feature("docstring") casadi::Opti "

A simplified interface for NLP modeling/solving.

This class offers a view with model description facilities The API is
guaranteed to be stable.

Example NLP:

::

    opti = casadi.Opti();
  
    x = opti.variable();
    y = opti.variable();
  
    opti.minimize(  (y-x^2)^2   );
    opti.subject_to( x^2+y^2==1 );
    opti.subject_to(     x+y>=1 );
  
    opti.solver('ipopt');
    sol = opti.solve();
  
    sol.value(x)
    sol.value(y)



Example parametric NLP:

::

    opti = casadi.Opti();
  
    x = opti.variable(2,1);
    p = opti.parameter();
  
    opti.minimize(  (p*x(2)-x(1)^2)^2   );
    opti.subject_to( 1<=sum(x)<=2 );
  
    opti.solver('ipopt');
  
    opti.set_value(p, 3);
    sol = opti.solve();
    sol.value(x)
  
    opti.set_value(p, 5);
    sol = opti.solve();
    sol.value(x)



Joris Gillis, Erik Lambrechts, Joel Andersson

C++ includes: optistack.hpp ";

%feature("docstring")  casadi::Opti::lbg() const  "

Get all (scalarised) bounds on constraints as a column vector.

";

%feature("docstring")  casadi::Opti::return_status() const  "

Get return status of solver passed as-is from nlpsol No stability can be
guaranteed about this part of the API.

";

%feature("docstring")  casadi::Opti::copy() const  "

Get a copy of the.

The copy is effectively a deep copy: Updating the state of the copy does not
update the original.

";

%feature("docstring") casadi::casadi_copy "

Get a copy of the.

The copy is effectively a deep copy: Updating the state of the copy does not
update the original.

";

%feature("docstring")  casadi::Opti::casadi_copy "

Get a copy of the.

The copy is effectively a deep copy: Updating the state of the copy does not
update the original.

";

%feature("docstring")  casadi::SharedObject::class_name() const  "

Get class name.

";

%feature("docstring")  casadi::Opti::subject_to(const MX &g) "

Add constraints.

Examples:

::

  * \\\\begin{itemize}
  * opti.subject_to( sqrt(x+y) >= 1);
  * opti.subject_to( sqrt(x+y) > 1)}: same as above
  * opti.subject_to( 1<= sqrt(x+y) )}: same as above
  * opti.subject_to( 5*x+y==1 )}: equality
  *
  * Python
  * opti.subject_to([x*y>=1,x==3])
  * opti.subject_to(opti.bounded(0,x,1))
  *
  * MATLAB
  * opti.subject_to({x*y>=1,x==3})
  * opti.subject_to( 0<=x<=1 )
  * 



Related functionalities: opti.lbg,opti.g,opti.ubg represent the vector of
flattened constraints

opti.debug.show_infeasibilities() may be used to inspect which constraints
are violated

";

%feature("docstring")  casadi::Opti::subject_to(const std::vector< MX > &g)
"

Add constraints.

Examples:

::

  * \\\\begin{itemize}
  * opti.subject_to( sqrt(x+y) >= 1);
  * opti.subject_to( sqrt(x+y) > 1)}: same as above
  * opti.subject_to( 1<= sqrt(x+y) )}: same as above
  * opti.subject_to( 5*x+y==1 )}: equality
  *
  * Python
  * opti.subject_to([x*y>=1,x==3])
  * opti.subject_to(opti.bounded(0,x,1))
  *
  * MATLAB
  * opti.subject_to({x*y>=1,x==3})
  * opti.subject_to( 0<=x<=1 )
  * 



Related functionalities: opti.lbg,opti.g,opti.ubg represent the vector of
flattened constraints

opti.debug.show_infeasibilities() may be used to inspect which constraints
are violated

";

%feature("docstring")  casadi::Opti::subject_to() "

Clear constraints.

";

%feature("docstring")  casadi::Opti::minimize(const MX &f) "

Set objective.

Objective must be a scalar. Default objective: 0 When method is called
multiple times, the last call takes effect

";

%feature("docstring")  casadi::Opti::value_variables() const  "

get assignment expressions for latest values

";

%feature("docstring")  casadi::Opti::user_dict(const MX &m) const  "

Get user data.

";

%feature("docstring")  casadi::Opti::to_function(const std::string &name,
const std::vector< MX > &args, const std::vector< MX > &res, const Dict
&opts=Dict()) "

Create a CasADi Function from the Opti solver.

";

%feature("docstring")  casadi::Opti::advanced() const  "

Get a copy with advanced functionality.

You get access to more methods, but you have no guarantees about API
stability

The copy is effectively a deep copy: Updating the state of the copy does not
update the original.

";

%feature("docstring")  casadi::Opti::solver(const std::string &solver, const
Dict &plugin_options=Dict(), const Dict &solver_options=Dict()) "

Set a solver.

Parameters:
-----------

solver:  any of the nlpsol plugins can be used here In practice, not all
nlpsol plugins may be supported yet

options:  passed on to nlpsol plugin No stability can be guaranteed about
this part of the API

options:  to be passed to nlpsol solver No stability can be guaranteed about
this part of the API

";

%feature("docstring") casadi::casadi_solver "

Set a solver.

Parameters:
-----------

solver:  any of the nlpsol plugins can be used here In practice, not all
nlpsol plugins may be supported yet

options:  passed on to nlpsol plugin No stability can be guaranteed about
this part of the API

options:  to be passed to nlpsol solver No stability can be guaranteed about
this part of the API

";

%feature("docstring")  casadi::Opti::casadi_solver "

Set a solver.

Parameters:
-----------

solver:  any of the nlpsol plugins can be used here In practice, not all
nlpsol plugins may be supported yet

options:  passed on to nlpsol plugin No stability can be guaranteed about
this part of the API

options:  to be passed to nlpsol solver No stability can be guaranteed about
this part of the API

";

%feature("docstring")  casadi::Opti::dual(const MX &m) const  "

get the dual variable

m must be a constraint expression. The returned value is still a symbolic
expression. Use value on it to obtain the numerical value.

";

%feature("docstring")  casadi::SharedObject::print_ptr(std::ostream
&stream=casadi::uout()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring")  casadi::Opti::disp(std::ostream &stream, bool
more=false) const  "

Print representation.

";

%feature("docstring")  casadi::Opti::update_user_dict(const MX &m, const
Dict &meta) "

add user data Add arbitrary data in the form of a dictionary to symbols or
constraints

";


// File: classcasadi_1_1OptiAdvanced.xml
%feature("docstring")  casadi::Opti::dual(const MX &m) const  "

get the dual variable

m must be a constraint expression. The returned value is still a symbolic
expression. Use value on it to obtain the numerical value.

";

%feature("docstring")  casadi::Opti::parameter(casadi_int n=1, casadi_int
m=1, const std::string &attribute="full") "

Create a parameter (symbol); fixed during optimization.

The order of creation does not matter. It is not required for parameter to
actualy appear in the optimization problem. Parameters that do appear, must
be given a value before the problem can be solved.

Parameters:
-----------

n:  number of rows (default 1)

m:  number of columnss (default 1)

attribute:  'full' (default) or 'symmetric'

";

%feature("docstring")  casadi::Opti::lam_g() const  "

Get all (scalarised) dual variables as a symbolic column vector.

Useful for obtaining the Lagrange Hessian:

::

  * sol.value(hessian(opti.f+opti.lam_g'*opti.g,opti.x)) % MATLAB
  * sol.value(hessian(opti.f+dot(opti.lam_g,opti.g),opti.x)[0]) # Python
  * 



";

%feature("docstring")  casadi::SharedObject::class_name() const  "

Get class name.

";

%feature("docstring")  casadi::OptiAdvanced::canon_expr(const MX &expr)
const  "

Interpret an expression (for internal use only)

";

%feature("docstring")  casadi::OptiAdvanced::get_meta_con(const MX &m) const
"

Get meta-data of symbol (for internal use only)

";

%feature("docstring")  casadi::OptiAdvanced::set_meta(const MX &m, const
MetaVar &meta) "

Set meta-data of an expression.

";

%feature("docstring")  casadi::Opti::user_dict(const MX &m) const  "

Get user data.

";

%feature("docstring") casadi::OptiAdvanced::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring")  casadi::Opti::disp(std::ostream &stream, bool
more=false) const  "

Print representation.

";

%feature("docstring")  casadi::OptiAdvanced::set_meta_con(const MX &m, const
MetaCon &meta) "

Set meta-data of an expression.

";

%feature("docstring")  casadi::Opti::variable(casadi_int n=1, casadi_int
m=1, const std::string &attribute="full") "

Create a decision variable (symbol)

The order of creation matters. The order will be reflected in the
optimization problem. It is not required for decision variables to actualy
appear in the optimization problem.

Parameters:
-----------

n:  number of rows (default 1)

m:  number of columnss (default 1)

attribute:  'full' (default) or 'symmetric'

";

%feature("docstring")  casadi::Opti::value_variables() const  "

get assignment expressions for latest values

";

%feature("docstring")  casadi::Opti::solve() "

Crunch the numbers; solve the problem.

";

%feature("docstring") casadi::casadi_solve "

Crunch the numbers; solve the problem.

";

%feature("docstring")  casadi::Opti::casadi_solve "

Crunch the numbers; solve the problem.

";

%feature("docstring")  casadi::Opti::copy() const  "

Get a copy of the.

The copy is effectively a deep copy: Updating the state of the copy does not
update the original.

";

%feature("docstring") casadi::casadi_copy "

Get a copy of the.

The copy is effectively a deep copy: Updating the state of the copy does not
update the original.

";

%feature("docstring")  casadi::Opti::casadi_copy "

Get a copy of the.

The copy is effectively a deep copy: Updating the state of the copy does not
update the original.

";

%feature("docstring") casadi::OptiAdvanced "

C++ includes: optistack.hpp ";

%feature("docstring")  casadi::Opti::value(const MX &x, const std::vector<
MX > &values=std::vector< MX >()) const  "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring")  casadi::Opti::value(const DM &x, const std::vector<
MX > &values=std::vector< MX >()) const  "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring")  casadi::Opti::value(const SX &x, const std::vector<
MX > &values=std::vector< MX >()) const  "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring")  casadi::OptiAdvanced::casadi_solver() const  "

Get the underlying CasADi solver of the Opti stack.

";

%feature("docstring")  casadi::Opti::update_user_dict(const MX &m, const
Dict &meta) "

add user data Add arbitrary data in the form of a dictionary to symbols or
constraints

";

%feature("docstring")  casadi::Opti::set_initial(const MX &x, const DM &v) "

Set initial guess for decision variables

::

  * opti.set_initial(x, 2)
  * opti.set_initial(10*x(1), 2)
  * 



";

%feature("docstring")  casadi::Opti::set_initial(const std::vector< MX >
&assignments) "

Set initial guess for decision variables

::

  * opti.set_initial(x, 2)
  * opti.set_initial(10*x(1), 2)
  * 



";

%feature("docstring") casadi::OptiAdvanced::~OptiAdvanced "

Destructor.

";

%feature("docstring")  casadi::Opti::callback_class(OptiCallback *callback)
"

Helper methods for callback()

Do not use directly.

";

%feature("docstring")  casadi::Opti::callback_class() "

Helper methods for callback()

Do not use directly.

";

%feature("docstring")  casadi::Opti::get_str(bool more=false) const  "

Get string representation.

";

%feature("docstring")  casadi::Opti::to_function(const std::string &name,
const std::vector< MX > &args, const std::vector< MX > &res, const Dict
&opts=Dict()) "

Create a CasADi Function from the Opti solver.

";

%feature("docstring")  casadi::Opti::lbg() const  "

Get all (scalarised) bounds on constraints as a column vector.

";

%feature("docstring")  casadi::Opti::ng() const  "

Number of (scalarised) constraints.

";

%feature("docstring")  casadi::OptiAdvanced::get_meta(const MX &m) const  "

Get meta-data of symbol (for internal use only)

";

%feature("docstring")  casadi::Opti::subject_to(const MX &g) "

Add constraints.

Examples:

::

  * \\\\begin{itemize}
  * opti.subject_to( sqrt(x+y) >= 1);
  * opti.subject_to( sqrt(x+y) > 1)}: same as above
  * opti.subject_to( 1<= sqrt(x+y) )}: same as above
  * opti.subject_to( 5*x+y==1 )}: equality
  *
  * Python
  * opti.subject_to([x*y>=1,x==3])
  * opti.subject_to(opti.bounded(0,x,1))
  *
  * MATLAB
  * opti.subject_to({x*y>=1,x==3})
  * opti.subject_to( 0<=x<=1 )
  * 



Related functionalities: opti.lbg,opti.g,opti.ubg represent the vector of
flattened constraints

opti.debug.show_infeasibilities() may be used to inspect which constraints
are violated

";

%feature("docstring")  casadi::Opti::subject_to(const std::vector< MX > &g)
"

Add constraints.

Examples:

::

  * \\\\begin{itemize}
  * opti.subject_to( sqrt(x+y) >= 1);
  * opti.subject_to( sqrt(x+y) > 1)}: same as above
  * opti.subject_to( 1<= sqrt(x+y) )}: same as above
  * opti.subject_to( 5*x+y==1 )}: equality
  *
  * Python
  * opti.subject_to([x*y>=1,x==3])
  * opti.subject_to(opti.bounded(0,x,1))
  *
  * MATLAB
  * opti.subject_to({x*y>=1,x==3})
  * opti.subject_to( 0<=x<=1 )
  * 



Related functionalities: opti.lbg,opti.g,opti.ubg represent the vector of
flattened constraints

opti.debug.show_infeasibilities() may be used to inspect which constraints
are violated

";

%feature("docstring")  casadi::Opti::subject_to() "

Clear constraints.

";

%feature("docstring")  casadi::Opti::initial() const  "

get assignment expressions for initial values

";

%feature("docstring")  casadi::Opti::type_name() const  "

Readable name of the class.

";

%feature("docstring")  casadi::Opti::nx() const  "

Number of (scalarised) decision variables.

";

%feature("docstring")  casadi::Opti::set_value(const MX &x, const DM &v) "

Set value of parameter.

Each parameter must be given a value before 'solve' can be called

";

%feature("docstring")  casadi::Opti::set_value(const std::vector< MX >
&assignments) "

Set value of parameter.

Each parameter must be given a value before 'solve' can be called

";

%feature("docstring")  casadi::Opti::debug() const  "

Get a copy with advanced functionality.

You get access to more methods, but you have no guarantees about API
stability

The copy is effectively a deep copy: Updating the state of the copy does not
update the original.

";

%feature("docstring")  casadi::SharedObject::print_ptr(std::ostream
&stream=casadi::uout()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring")  casadi::Opti::np() const  "

Number of (scalarised) parameters.

";

%feature("docstring")  casadi::OptiAdvanced::symvar() const  "

Get symbols present in expression.

Returned vector is ordered according to the order of variable()/parameter()
calls used to create the variables

";

%feature("docstring") casadi::casadi_symvar "

Get symbols present in expression.

Returned vector is ordered according to the order of variable()/parameter()
calls used to create the variables

";

%feature("docstring")  casadi::OptiAdvanced::casadi_symvar "

Get symbols present in expression.

Returned vector is ordered according to the order of variable()/parameter()
calls used to create the variables

";

%feature("docstring")  casadi::OptiAdvanced::symvar(const MX &expr) const  "

Get symbols present in expression.

Returned vector is ordered according to the order of variable()/parameter()
calls used to create the variables

";

%feature("docstring") casadi::casadi_symvar "

Get symbols present in expression.

Returned vector is ordered according to the order of variable()/parameter()
calls used to create the variables

";

%feature("docstring")  casadi::OptiAdvanced::casadi_symvar "

Get symbols present in expression.

Returned vector is ordered according to the order of variable()/parameter()
calls used to create the variables

";

%feature("docstring")  casadi::OptiAdvanced::symvar(const MX &expr,
VariableType type) const  "

Get symbols present in expression.

Returned vector is ordered according to the order of variable()/parameter()
calls used to create the variables

";

%feature("docstring") casadi::casadi_symvar "

Get symbols present in expression.

Returned vector is ordered according to the order of variable()/parameter()
calls used to create the variables

";

%feature("docstring")  casadi::OptiAdvanced::casadi_symvar "

Get symbols present in expression.

Returned vector is ordered according to the order of variable()/parameter()
calls used to create the variables

";

%feature("docstring")  casadi::Opti::advanced() const  "

Get a copy with advanced functionality.

You get access to more methods, but you have no guarantees about API
stability

The copy is effectively a deep copy: Updating the state of the copy does not
update the original.

";

%feature("docstring")  casadi::Opti::f() const  "

Get objective expression.

";

%feature("docstring")  casadi::Opti::g() const  "

Get all (scalarised) constraint expressions as a column vector.

";

%feature("docstring")  casadi::Opti::stats() const  "

Get statistics.

nlpsol stats are passed as-is. No stability can be guaranteed about this
part of the API

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Opti::return_status() const  "

Get return status of solver passed as-is from nlpsol No stability can be
guaranteed about this part of the API.

";

%feature("docstring")  casadi::Opti::solve_limited() "

Crunch the numbers; solve the problem.

Allows the solver to return without error when an iteration or time limit is
reached

";

%feature("docstring")  casadi::OptiAdvanced::bake() "

Fix the structure of the optimization problem.

";

%feature("docstring")  casadi::OptiAdvanced::is_parametric(const MX &expr)
const  "

return true if expression is only dependant on Opti parameters, not
variables

";

%feature("docstring")  casadi::Opti::p() const  "

Get all (scalarised) parameters as a symbolic column vector.

";

%feature("docstring")  casadi::Opti::solver(const std::string &solver, const
Dict &plugin_options=Dict(), const Dict &solver_options=Dict()) "

Set a solver.

Parameters:
-----------

solver:  any of the nlpsol plugins can be used here In practice, not all
nlpsol plugins may be supported yet

options:  passed on to nlpsol plugin No stability can be guaranteed about
this part of the API

options:  to be passed to nlpsol solver No stability can be guaranteed about
this part of the API

";

%feature("docstring") casadi::casadi_solver "

Set a solver.

Parameters:
-----------

solver:  any of the nlpsol plugins can be used here In practice, not all
nlpsol plugins may be supported yet

options:  passed on to nlpsol plugin No stability can be guaranteed about
this part of the API

options:  to be passed to nlpsol solver No stability can be guaranteed about
this part of the API

";

%feature("docstring")  casadi::Opti::casadi_solver "

Set a solver.

Parameters:
-----------

solver:  any of the nlpsol plugins can be used here In practice, not all
nlpsol plugins may be supported yet

options:  passed on to nlpsol plugin No stability can be guaranteed about
this part of the API

options:  to be passed to nlpsol solver No stability can be guaranteed about
this part of the API

";

%feature("docstring")  casadi::Opti::minimize(const MX &f) "

Set objective.

Objective must be a scalar. Default objective: 0 When method is called
multiple times, the last call takes effect

";

%feature("docstring")  casadi::Opti::x() const  "

Get all (scalarised) decision variables as a symbolic column vector.

";


// File: classcasadi_1_1OptiCallback.xml
%feature("docstring") casadi::OptiCallback "

C++ includes: optistack.hpp ";


// File: classcasadi_1_1OptiSol.xml
%feature("docstring")  casadi::OptiSol::value_variables() const  "

get assignment expressions for the optimal solution

";

%feature("docstring")  casadi::OptiSol::stats() const  "

Get statistics.

nlpsol stats are passed as-is. No stability can be guaranteed about this
part of the API

";

%feature("docstring")  casadi::OptiSol::value(const MX &x, const
std::vector< MX > &values=std::vector< MX >()) const  "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring")  casadi::OptiSol::value(const DM &x, const
std::vector< MX > &values=std::vector< MX >()) const  "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring")  casadi::OptiSol::value(const SX &x, const
std::vector< MX > &values=std::vector< MX >()) const  "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring") casadi::OptiSol "

A simplified interface for NLP modeling/solving.

This class offers a view with solution retrieval facilities The API is
guaranteed to be stable.

Joris Gillis, Erik Lambrechts

C++ includes: optistack.hpp ";


// File: classcasadi_1_1OracleFunction.xml
%feature("docstring")  casadi::FunctionInternal::get_reverse(casadi_int
nadj, const std::string &name, const std::vector< std::string > &inames,
const std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::has_forward(casadi_int
nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_out(casadi_int
i) "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::OracleFunction::~OracleFunction "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::OracleFunction::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::SharedObjectInternal::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::get_name_out(casadi_int i)
"

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(casadi_int
nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::eval(const double **arg,
double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::get_sparsity_in(casadi_int
i) "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::OracleFunction::get_function() const  "

[INTERNAL]  Get list of dependency functions -1 Indicates irregularity.

";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_n_in() "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::OracleFunction::serialize_body(SerializingStream &s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(casadi_int
ind) const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::ProtoFunction::serialize_base_function()
const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=nullptr) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(casadi_int
nfwd, const std::string &name, const std::vector< std::string > &inames,
const std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::OracleFunction::finalize()  "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::OracleFunction "

[INTERNAL]  Base class for functions that perform calculation with an
oracle.

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::OracleFu |
|                  |                 | SX expressions   | nction           |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| show_eval_warnin | OT_BOOL         | Show warnings    | casadi::OracleFu |
| gs               |                 | generated from   | nction           |
|                  |                 | function         |                  |
|                  |                 | evaluations      |                  |
|                  |                 | [true]           |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: oracle_function.hpp ";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::OracleFunction::init(const Dict &opts)  "

[INTERNAL]  Initialize

";

%feature("docstring")  casadi::OracleFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::get_n_out() "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")
casadi::FunctionInternal::serialize_type(SerializingStream &s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname)  "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::get_name_in(casadi_int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::OracleFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::OracleFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::OracleFunction::OracleFunction(const
std::string &name, const Function &oracle) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";


// File: classcasadi_1_1Output.xml


// File: classcasadi_1_1Polynomial.xml
%feature("docstring") casadi::Polynomial "

Helper class for differentiating and integrating polynomials.

Joel Andersson

C++ includes: polynomial.hpp ";

%feature("docstring")  casadi::Polynomial::derivative() const  "

Create a new polynomial for the derivative.

";

%feature("docstring") casadi::Polynomial::Polynomial(double scalar=1) "

Construct a constant polynomial.

";

%feature("docstring") casadi::Polynomial::Polynomial(double p0, double p1) "

Construct a linear polynomial.

";

%feature("docstring") casadi::Polynomial::Polynomial(double p0, double p1,
double p2) "

Construct a quadratic polynomial.

";

%feature("docstring") casadi::Polynomial::Polynomial(double p0, double p1,
double p2, double p3) "

Construct a cubic polynomial.

";

%feature("docstring") casadi::Polynomial::Polynomial(const std::vector< T >
&coeff) "

Construct from a vector of polynomial coefficients.

";

%feature("docstring")  casadi::Polynomial::type_name() const  "

Readable name of the class.

";

%feature("docstring")  casadi::Polynomial::anti_derivative() const  "

Create a new polynomial for the anti-derivative (primitive function)

";

%feature("docstring")  casadi::Polynomial::scalar() const  "

Get scalar value (error if degree()!=0)

";

%feature("docstring")  casadi::Polynomial::degree() const  "

Degree of the polynomial.

";

%feature("docstring")  casadi::Polynomial::disp(std::ostream &stream, bool
more=false) const  "

Print a description of the object.

";

%feature("docstring")  casadi::Polynomial::trim() "

Remove excess zeros.

";


// File: classcasadi_1_1Project.xml


// File: classcasadi_1_1ProtoFunction.xml


// File: classcasadi_1_1QpToNlp.xml
%feature("docstring")  casadi::Conic::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::QpToNlp::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::Conic::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::QpToNlp::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::Conic::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::Conic::eval(const double **arg, double **res,
casadi_int *iw, double *w, void *mem) const final "

[INTERNAL]   Solve the QP.

";

%feature("docstring") casadi::QpToNlp::~QpToNlp "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::Conic::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Conic::get_default_in(casadi_int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring") casadi::QpToNlp "

'nlpsol' plugin for Conic

Solve QPs using an Nlpsol Use the 'nlpsol' option to specify the NLP solver
to use.

>List of available options

+----------------+-----------+---------------------------------+
|       Id       |   Type    |           Description           |
+================+===========+=================================+
| nlpsol         | OT_STRING | Name of solver.                 |
+----------------+-----------+---------------------------------+
| nlpsol_options | OT_DICT   | Options to be passed to solver. |
+----------------+-----------+---------------------------------+

Joris Gillis

>List of available options

+----------------+---------------+-----------------------+-----------------+
|       Id       |     Type      |      Description      |     Used in     |
+================+===============+=======================+=================+
| discrete       | OT_BOOLVECTOR | Indicates which of    | casadi::Conic   |
|                |               | the variables are     |                 |
|                |               | discrete, i.e.        |                 |
|                |               | integer-valued        |                 |
+----------------+---------------+-----------------------+-----------------+
| error_on_fail  | OT_BOOL       | When the numerical    | casadi::Conic   |
|                |               | process returns       |                 |
|                |               | unsuccessfully, raise |                 |
|                |               | an error (default     |                 |
|                |               | false).               |                 |
+----------------+---------------+-----------------------+-----------------+
| nlpsol         | OT_STRING     | Name of solver.       | casadi::QpToNlp |
+----------------+---------------+-----------------------+-----------------+
| nlpsol_options | OT_DICT       | Options to be passed  | casadi::QpToNlp |
|                |               | to solver.            |                 |
+----------------+---------------+-----------------------+-----------------+
| print_problem  | OT_BOOL       | Print a numeric       | casadi::Conic   |
|                |               | description of the    |                 |
|                |               | problem               |                 |
+----------------+---------------+-----------------------+-----------------+

Diagrams
--------



C++ includes: qp_to_nlp.hpp ";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::Conic::serialize_base_function() const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::Conic::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::Conic::check_inputs(const double *lbx, const
double *ubx, const double *lba, const double *uba) const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::QpToNlp::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(casadi_int
nfwd, const std::string &name, const std::vector< std::string > &inames,
const std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::QpToNlp::plugin_name() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::QpToNlp::serialize_body(SerializingStream &s)
const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::Conic::psd_support() const  "

[INTERNAL]  Can psd constraints be treated.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::Conic::set_work(void *mem, const double
**&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::QpToNlp::solve(const double **arg, double
**res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]   Solve the QP.

";

%feature("docstring") casadi::casadi_solve "

Solve the QP.

";

%feature("docstring")  casadi::QpToNlp::casadi_solve "

Solve the QP.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::QpToNlp::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::QpToNlp::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::Conic::serialize_type(SerializingStream &s)
const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(casadi_int
nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::Conic::integer_support() const  "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring")  casadi::QpToNlp::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::Conic::is_a(const std::string &type, bool
recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::QpToNlp::QpToNlp(const std::string &name,
const std::map< std::string, Sparsity > &st) "

[INTERNAL]  Create a new Solver.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::Conic::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::Conic::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::has_forward(casadi_int
nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::Conic::generateNativeCode(std::ostream &file)
const  "

[INTERNAL]  Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::finalize()  "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(casadi_int
nadj, const std::string &name, const std::vector< std::string > &inames,
const std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";


// File: classcasadi_1_1Qrqp.xml
%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::Conic::is_a(const std::string &type, bool
recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Conic::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::Conic::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Conic::eval(const double **arg, double **res,
casadi_int *iw, double *w, void *mem) const final "

[INTERNAL]   Solve the QP.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::Qrqp::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::Qrqp::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::Conic::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::Conic::integer_support() const  "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::Qrqp::solve(const double **arg, double **res,
casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]   Solve the QP.

";

%feature("docstring") casadi::casadi_solve "

Solve the QP.

";

%feature("docstring")  casadi::Qrqp::casadi_solve "

Solve the QP.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::get_forward(casadi_int
nfwd, const std::string &name, const std::vector< std::string > &inames,
const std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::Qrqp::serialize_body(SerializingStream &s)
const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Conic::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::Qrqp::plugin_name() const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::Conic::generateNativeCode(std::ostream &file)
const  "

[INTERNAL]  Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Conic::serialize_base_function() const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(casadi_int
nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(casadi_int
nadj, const std::string &name, const std::vector< std::string > &inames,
const std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::Qrqp::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::has_forward(casadi_int
nfwd) const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Qrqp::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::Qrqp::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Qrqp "

'qrqp' plugin for Conic

Solve QPs using an active-set method

>List of available options

+-----------------+-----------+--------------------------------------------+
|       Id        |   Type    |                Description                 |
+=================+===========+============================================+
| constr_viol_tol | OT_DOUBLE | Constraint violation tolerance [1e-8].     |
+-----------------+-----------+--------------------------------------------+
| dual_inf_tol    | OT_DOUBLE | Dual feasibility violation tolerance       |
|                 |           | [1e-8]                                     |
+-----------------+-----------+--------------------------------------------+
| max_iter        | OT_INT    | Maximum number of iterations [1000].       |
+-----------------+-----------+--------------------------------------------+
| min_lam         | OT_DOUBLE | Smallest multiplier treated as inactive    |
|                 |           | for the initial active set [0].            |
+-----------------+-----------+--------------------------------------------+
| print_header    | OT_BOOL   | Print header [true].                       |
+-----------------+-----------+--------------------------------------------+
| print_info      | OT_BOOL   | Print info [true].                         |
+-----------------+-----------+--------------------------------------------+
| print_iter      | OT_BOOL   | Print iterations [true].                   |
+-----------------+-----------+--------------------------------------------+
| print_lincomb   | OT_BOOL   | Print dependant linear combinations of     |
|                 |           | constraints [false]. Printed numbers are   |
|                 |           | 0-based indices into the vector of [simple |
|                 |           | bounds;linear bounds]                      |
+-----------------+-----------+--------------------------------------------+

Joel Andersson

>List of available options

+-----------------+---------------+------------------------+---------------+
|       Id        |     Type      |      Description       |    Used in    |
+=================+===============+========================+===============+
| constr_viol_tol | OT_DOUBLE     | Constraint violation   | casadi::Qrqp  |
|                 |               | tolerance [1e-8].      |               |
+-----------------+---------------+------------------------+---------------+
| discrete        | OT_BOOLVECTOR | Indicates which of the | casadi::Conic |
|                 |               | variables are          |               |
|                 |               | discrete, i.e.         |               |
|                 |               | integer-valued         |               |
+-----------------+---------------+------------------------+---------------+
| dual_inf_tol    | OT_DOUBLE     | Dual feasibility       | casadi::Qrqp  |
|                 |               | violation tolerance    |               |
|                 |               | [1e-8]                 |               |
+-----------------+---------------+------------------------+---------------+
| error_on_fail   | OT_BOOL       | When the numerical     | casadi::Conic |
|                 |               | process returns        |               |
|                 |               | unsuccessfully, raise  |               |
|                 |               | an error (default      |               |
|                 |               | false).                |               |
+-----------------+---------------+------------------------+---------------+
| max_iter        | OT_INT        | Maximum number of      | casadi::Qrqp  |
|                 |               | iterations [1000].     |               |
+-----------------+---------------+------------------------+---------------+
| min_lam         | OT_DOUBLE     | Smallest multiplier    | casadi::Qrqp  |
|                 |               | treated as inactive    |               |
|                 |               | for the initial active |               |
|                 |               | set [0].               |               |
+-----------------+---------------+------------------------+---------------+
| print_header    | OT_BOOL       | Print header [true].   | casadi::Qrqp  |
+-----------------+---------------+------------------------+---------------+
| print_info      | OT_BOOL       | Print info [true].     | casadi::Qrqp  |
+-----------------+---------------+------------------------+---------------+
| print_iter      | OT_BOOL       | Print iterations       | casadi::Qrqp  |
|                 |               | [true].                |               |
+-----------------+---------------+------------------------+---------------+
| print_lincomb   | OT_BOOL       | Print dependant linear | casadi::Qrqp  |
|                 |               | combinations of        |               |
|                 |               | constraints [false].   |               |
|                 |               | Printed numbers are    |               |
|                 |               | 0-based indices into   |               |
|                 |               | the vector of [simple  |               |
|                 |               | bounds;linear bounds]  |               |
+-----------------+---------------+------------------------+---------------+
| print_problem   | OT_BOOL       | Print a numeric        | casadi::Conic |
|                 |               | description of the     |               |
|                 |               | problem                |               |
+-----------------+---------------+------------------------+---------------+

Diagrams
--------



C++ includes: qrqp.hpp ";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::Qrqp::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Qrqp::~Qrqp "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Conic::check_inputs(const double *lbx, const
double *ubx, const double *lba, const double *uba) const  "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::finalize()  "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::Conic::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::Conic::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::Conic::set_work(void *mem, const double
**&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::Conic::get_default_in(casadi_int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::Qrqp::codegen_body(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Qrqp::Qrqp(const std::string &name, const
std::map< std::string, Sparsity > &st) "

[INTERNAL]  Create a new Solver.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Conic::psd_support() const  "

[INTERNAL]  Can psd constraints be treated.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::Qrqp::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::Conic::serialize_type(SerializingStream &s)
const  "

[INTERNAL]  Serialize type information.

";


// File: classcasadi_1_1Qrsqp.xml
%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::is_a(const std::string &type, bool
recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::OracleFunction::get_function() const  "

[INTERNAL]  Get list of dependency functions -1 Indicates irregularity.

";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::Nlpsol::setOptionsFromFile(const std::string
&file) "

[INTERNAL]  Read options from parameter xml.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::Nlpsol::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::Nlpsol::serialize_body(SerializingStream &s)
const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::Nlpsol::nlpsol_codegen_body(CodeGenerator &g)
const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring") casadi::Qrsqp::~Qrsqp "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::Nlpsol::serialize_base_function() const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::Nlpsol::kkt() const  "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::Nlpsol::integer_support() const  "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring") casadi::Qrsqp "

'sqsqp' plugin for Nlpsol

A textbook SQPMethod

>List of available options

+--------------------+---------------+--------------------+----------------+
|         Id         |     Type      |    Description     |    Used in     |
+====================+===============+====================+================+
| beta               | OT_DOUBLE     | Line-search        | casadi::Qrsqp  |
|                    |               | parameter,         |                |
|                    |               | restoration factor |                |
|                    |               | of stepsize        |                |
+--------------------+---------------+--------------------+----------------+
| bound_consistency  | OT_BOOL       | Ensure that        | casadi::Nlpsol |
|                    |               | primal-dual        |                |
|                    |               | solution is        |                |
|                    |               | consistent with    |                |
|                    |               | the bounds         |                |
+--------------------+---------------+--------------------+----------------+
| c1                 | OT_DOUBLE     | Armijo condition,  | casadi::Qrsqp  |
|                    |               | coefficient of     |                |
|                    |               | decrease in merit  |                |
+--------------------+---------------+--------------------+----------------+
| calc_f             | OT_BOOL       | Calculate 'f' in   | casadi::Nlpsol |
|                    |               | the Nlpsol base    |                |
|                    |               | class              |                |
+--------------------+---------------+--------------------+----------------+
| calc_g             | OT_BOOL       | Calculate 'g' in   | casadi::Nlpsol |
|                    |               | the Nlpsol base    |                |
|                    |               | class              |                |
+--------------------+---------------+--------------------+----------------+
| calc_lam_p         | OT_BOOL       | Calculate 'lam_p'  | casadi::Nlpsol |
|                    |               | in the Nlpsol base |                |
|                    |               | class              |                |
+--------------------+---------------+--------------------+----------------+
| calc_lam_x         | OT_BOOL       | Calculate 'lam_x'  | casadi::Nlpsol |
|                    |               | in the Nlpsol base |                |
|                    |               | class              |                |
+--------------------+---------------+--------------------+----------------+
| calc_multipliers   | OT_BOOL       | Calculate Lagrange | casadi::Nlpsol |
|                    |               | multipliers in the |                |
|                    |               | Nlpsol base class  |                |
+--------------------+---------------+--------------------+----------------+
| discrete           | OT_BOOLVECTOR | Indicates which of | casadi::Nlpsol |
|                    |               | the variables are  |                |
|                    |               | discrete, i.e.     |                |
|                    |               | integer-valued     |                |
+--------------------+---------------+--------------------+----------------+
| error_on_fail      | OT_BOOL       | When the numerical | casadi::Nlpsol |
|                    |               | process returns    |                |
|                    |               | unsuccessfully,    |                |
|                    |               | raise an error     |                |
|                    |               | (default false).   |                |
+--------------------+---------------+--------------------+----------------+
| eval_errors_fatal  | OT_BOOL       | When errors occur  | casadi::Nlpsol |
|                    |               | during evaluation  |                |
|                    |               | of f,g,...,stop    |                |
|                    |               | the iterations     |                |
+--------------------+---------------+--------------------+----------------+
| hessian_approximat | OT_STRING     | limited-           | casadi::Qrsqp  |
| ion                |               | memory|exact       |                |
+--------------------+---------------+--------------------+----------------+
| ignore_check_vec   | OT_BOOL       | If set to true,    | casadi::Nlpsol |
|                    |               | the input shape of |                |
|                    |               | F will not be      |                |
|                    |               | checked.           |                |
+--------------------+---------------+--------------------+----------------+
| iteration_callback | OT_FUNCTION   | A function that    | casadi::Nlpsol |
|                    |               | will be called at  |                |
|                    |               | each iteration     |                |
|                    |               | with the solver as |                |
|                    |               | input. Check       |                |
|                    |               | documentation of   |                |
|                    |               | Callback .         |                |
+--------------------+---------------+--------------------+----------------+
| iteration_callback | OT_BOOL       | If set to true,    | casadi::Nlpsol |
| _ignore_errors     |               | errors thrown by   |                |
|                    |               | iteration_callback |                |
|                    |               | will be ignored.   |                |
+--------------------+---------------+--------------------+----------------+
| iteration_callback | OT_INT        | Only call the      | casadi::Nlpsol |
| _step              |               | callback function  |                |
|                    |               | every few          |                |
|                    |               | iterations.        |                |
+--------------------+---------------+--------------------+----------------+
| lbfgs_memory       | OT_INT        | Size of L-BFGS     | casadi::Qrsqp  |
|                    |               | memory.            |                |
+--------------------+---------------+--------------------+----------------+
| max_iter           | OT_INT        | Maximum number of  | casadi::Qrsqp  |
|                    |               | SQP iterations     |                |
+--------------------+---------------+--------------------+----------------+
| max_iter_ls        | OT_INT        | Maximum number of  | casadi::Qrsqp  |
|                    |               | linesearch         |                |
|                    |               | iterations         |                |
+--------------------+---------------+--------------------+----------------+
| merit_memory       | OT_INT        | Size of memory to  | casadi::Qrsqp  |
|                    |               | store history of   |                |
|                    |               | merit function     |                |
|                    |               | values             |                |
+--------------------+---------------+--------------------+----------------+
| min_iter           | OT_INT        | Minimum number of  | casadi::Qrsqp  |
|                    |               | SQP iterations     |                |
+--------------------+---------------+--------------------+----------------+
| min_lam            | OT_DOUBLE     | Minimum allowed    | casadi::Nlpsol |
|                    |               | multiplier value   |                |
+--------------------+---------------+--------------------+----------------+
| min_step_size      | OT_DOUBLE     | The size (inf-     | casadi::Qrsqp  |
|                    |               | norm) of the step  |                |
|                    |               | size should not    |                |
|                    |               | become smaller     |                |
|                    |               | than this.         |                |
+--------------------+---------------+--------------------+----------------+
| no_nlp_grad        | OT_BOOL       | Prevent the        | casadi::Nlpsol |
|                    |               | creation of the    |                |
|                    |               | 'nlp_grad'         |                |
|                    |               | function           |                |
+--------------------+---------------+--------------------+----------------+
| oracle_options     | OT_DICT       | Options to be      | casadi::Nlpsol |
|                    |               | passed to the      |                |
|                    |               | oracle function    |                |
+--------------------+---------------+--------------------+----------------+
| print_header       | OT_BOOL       | Print the header   | casadi::Qrsqp  |
|                    |               | with problem       |                |
|                    |               | statistics         |                |
+--------------------+---------------+--------------------+----------------+
| print_iteration    | OT_BOOL       | Print the          | casadi::Qrsqp  |
|                    |               | iterations         |                |
+--------------------+---------------+--------------------+----------------+
| qpsol              | OT_STRING     | The QP solver to   | casadi::Qrsqp  |
|                    |               | be used by the SQP |                |
|                    |               | method [qrqp]      |                |
+--------------------+---------------+--------------------+----------------+
| qpsol_options      | OT_DICT       | Options to be      | casadi::Qrsqp  |
|                    |               | passed to the QP   |                |
|                    |               | solver             |                |
+--------------------+---------------+--------------------+----------------+
| regularize         | OT_BOOL       | Automatic          | casadi::Qrsqp  |
|                    |               | regularization of  |                |
|                    |               | Lagrange Hessian.  |                |
+--------------------+---------------+--------------------+----------------+
| sens_linsol        | OT_STRING     | Linear solver used | casadi::Nlpsol |
|                    |               | for parametric     |                |
|                    |               | sensitivities      |                |
|                    |               | (default 'qr').    |                |
+--------------------+---------------+--------------------+----------------+
| sens_linsol_option | OT_DICT       | Linear solver      | casadi::Nlpsol |
| s                  |               | options used for   |                |
|                    |               | parametric         |                |
|                    |               | sensitivities.     |                |
+--------------------+---------------+--------------------+----------------+
| tol_du             | OT_DOUBLE     | Stopping criterion | casadi::Qrsqp  |
|                    |               | for dual           |                |
|                    |               | infeasability      |                |
+--------------------+---------------+--------------------+----------------+
| tol_pr             | OT_DOUBLE     | Stopping criterion | casadi::Qrsqp  |
|                    |               | for primal         |                |
|                    |               | infeasibility      |                |
+--------------------+---------------+--------------------+----------------+
| verbose_init       | OT_BOOL       | Print out timing   | casadi::Nlpsol |
|                    |               | information about  |                |
|                    |               | the different      |                |
|                    |               | stages of          |                |
|                    |               | initialization     |                |
+--------------------+---------------+--------------------+----------------+
| warn_initial_bound | OT_BOOL       | Warn if the        | casadi::Nlpsol |
| s                  |               | initial guess does |                |
|                    |               | not satisfy LBX    |                |
|                    |               | and UBX            |                |
+--------------------+---------------+--------------------+----------------+

Diagrams
--------



C++ includes: qrsqp.hpp ";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::Nlpsol::disp_more(std::ostream &stream) const
"

[INTERNAL]  Print description.

";

%feature("docstring")  casadi::Qrsqp::set_work(void *mem, const double
**&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=nullptr) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::Nlpsol::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::Nlpsol::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::OracleFunction::finalize()  "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::OracleFunction::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::Qrsqp::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::Qrsqp::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::Nlpsol::getReducedHessian() "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::get_default_in(casadi_int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::Nlpsol::check_inputs(void *mem) const  "

[INTERNAL]  Check if the inputs correspond to a well-posed problem.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::Nlpsol::has_forward(casadi_int nfwd) const  "

[INTERNAL]  Generate a function that calculates forward mode derivatives.

";

%feature("docstring")  casadi::Nlpsol::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Nlpsol::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::Nlpsol::get_forward(casadi_int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates forward mode derivatives.

";

%feature("docstring")  casadi::Qrsqp::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::Qrsqp::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::Nlpsol::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::Qrsqp::print_iteration() const  "

[INTERNAL]  Print iteration header.

";

%feature("docstring")  casadi::Qrsqp::print_iteration(casadi_int iter,
double obj, double pr_inf, double du_inf, double dx_norm, double rg,
casadi_int ls_trials, bool ls_success) const  "

[INTERNAL]  Print iteration.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::Qrsqp::Qrsqp(const std::string &name, const
Function &nlp) "

[INTERNAL] ";

%feature("docstring")  casadi::Qrsqp::solve_QP(QrsqpMemory *m, const double
*H, const double *g, const double *lbdz, const double *ubdz, const double
*A, double *x_opt, double *dlam) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::Nlpsol::eval(const double **arg, double
**res, casadi_int *iw, double *w, void *mem) const final "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::Qrsqp::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::Nlpsol::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::Qrsqp::solve(void *mem) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname)  "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::Nlpsol::serialize_type(SerializingStream &s)
const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::Qrsqp::getConic() const  "

[INTERNAL]  Access Conic.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Qrsqp::plugin_name() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::get_reverse(casadi_int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates reverse mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Nlpsol::has_reverse(casadi_int nadj) const  "

[INTERNAL]  Generate a function that calculates reverse mode derivatives.

";

%feature("docstring")  casadi::Nlpsol::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::Nlpsol::callback(NlpsolMemory *m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Qrsqp::class_name() const  "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";


// File: classcasadi_1_1Rank1.xml


// File: classcasadi_1_1RealtypeSX.xml


// File: classcasadi_1_1Reshape.xml


// File: classcasadi_1_1Rootfinder.xml
%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::Rootfinder::serialize_body(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=nullptr) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::Rootfinder::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::Rootfinder::has_reverse(casadi_int nadj)
const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(casadi_int
ind) const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::Rootfinder::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::Rootfinder::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::Rootfinder::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::OracleFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::Rootfinder::serialize_type(SerializingStream
&s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::Rootfinder::Rootfinder(const std::string
&name, const Function &oracle) "

[INTERNAL]  Constructor.

Parameters:
-----------

f:   Function mapping from (n+1) inputs to 1 output.

";

%feature("docstring")  casadi::Rootfinder::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::OracleFunction::get_function() const  "

[INTERNAL]  Get list of dependency functions -1 Indicates irregularity.

";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Rootfinder::has_forward(casadi_int nfwd)
const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Rootfinder::solve(void *mem) const  "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::Rootfinder::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::OracleFunction::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::Rootfinder::ad_forward(const std::vector< MX
> &arg, const std::vector< MX > &res, const std::vector< std::vector< MX > >
&fseed, std::vector< std::vector< MX > > &fsens, bool always_inline, bool
never_inline) const  "

[INTERNAL]  Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::Rootfinder::~Rootfinder "

[INTERNAL]  Destructor.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::Rootfinder::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::Rootfinder::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::Rootfinder "

Internal class.

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| constraints      | OT_INTVECTOR    | Constrain the    | casadi::Rootfind |
|                  |                 | unknowns. 0      | er               |
|                  |                 | (default): no    |                  |
|                  |                 | constraint on    |                  |
|                  |                 | ui, 1: ui >=     |                  |
|                  |                 | 0.0, -1: ui <=   |                  |
|                  |                 | 0.0, 2: ui >     |                  |
|                  |                 | 0.0, -2: ui <    |                  |
|                  |                 | 0.0.             |                  |
+------------------+-----------------+------------------+------------------+
| error_on_fail    | OT_BOOL         | When the         | casadi::Rootfind |
|                  |                 | numerical        | er               |
|                  |                 | process returns  |                  |
|                  |                 | unsuccessfully,  |                  |
|                  |                 | raise an error   |                  |
|                  |                 | (default false). |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::OracleFu |
|                  |                 | SX expressions   | nction           |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| implicit_input   | OT_INT          | Index of the     | casadi::Rootfind |
|                  |                 | input that       | er               |
|                  |                 | corresponds to   |                  |
|                  |                 | the actual root- |                  |
|                  |                 | finding          |                  |
+------------------+-----------------+------------------+------------------+
| implicit_output  | OT_INT          | Index of the     | casadi::Rootfind |
|                  |                 | output that      | er               |
|                  |                 | corresponds to   |                  |
|                  |                 | the actual root- |                  |
|                  |                 | finding          |                  |
+------------------+-----------------+------------------+------------------+
| jacobian_functio | OT_FUNCTION     | Function object  | casadi::Rootfind |
| n                |                 | for calculating  | er               |
|                  |                 | the Jacobian     |                  |
|                  |                 | (autogenerated   |                  |
|                  |                 | by default)      |                  |
+------------------+-----------------+------------------+------------------+
| linear_solver    | OT_STRING       | User-defined     | casadi::Rootfind |
|                  |                 | linear solver    | er               |
|                  |                 | class. Needed    |                  |
|                  |                 | for              |                  |
|                  |                 | sensitivities.   |                  |
+------------------+-----------------+------------------+------------------+
| linear_solver_op | OT_DICT         | Options to be    | casadi::Rootfind |
| tions            |                 | passed to the    | er               |
|                  |                 | linear solver.   |                  |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| show_eval_warnin | OT_BOOL         | Show warnings    | casadi::OracleFu |
| gs               |                 | generated from   | nction           |
|                  |                 | function         |                  |
|                  |                 | evaluations      |                  |
|                  |                 | [true]           |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: rootfinder_impl.hpp ";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::OracleFunction::finalize()  "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::Rootfinder::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::Rootfinder::sp_forward(const bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::OracleFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::SharedObjectInternal::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::Rootfinder::sp_reverse(bvec_t **arg, bvec_t
**res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::PluginInterface< Rootfinder  >::plugin_name()
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::Rootfinder::ad_reverse(const std::vector< MX
> &arg, const std::vector< MX > &res, const std::vector< std::vector< MX > >
&aseed, std::vector< std::vector< MX > > &asens, bool always_inline, bool
never_inline) const  "

[INTERNAL]  Create call to (cached) derivative function, reverse mode.

";

%feature("docstring")  casadi::Rootfinder::serialize_base_function() const
"

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname)  "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::Rootfinder::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::Rootfinder::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::Rootfinder::get_forward(casadi_int nfwd,
const std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::Rootfinder::set_work(void *mem, const double
**&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::Rootfinder::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::Rootfinder::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::Rootfinder::eval(const double **arg, double
**res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::Rootfinder::get_reverse(casadi_int nadj,
const std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";


// File: classcasadi_1_1RungeKutta.xml
%feature("docstring")  casadi::Integrator::rx() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::rz() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::RungeKutta::~RungeKutta "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::Integrator::serialize_base_function() const
"

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::Integrator::rq() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::rp() const  "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname)  "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::Integrator::has_forward(casadi_int nfwd)
const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::Integrator::aug_fwd(casadi_int nfwd) const  "

[INTERNAL]  Generate a augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::OracleFunction::finalize()  "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::Integrator::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::RungeKutta::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FixedStepIntegrator::create_advanced(const
Dict &opts)  "

[INTERNAL]  Helper for a more powerful 'integrator' factory

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::Integrator::print_stats(IntegratorMemory
*mem) const  "

[INTERNAL]  Print solver statistics.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::Integrator::setStopTime(IntegratorMemory
*mem, double tf) const  "

[INTERNAL]  Set stop time for the integration.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::Integrator::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FixedStepIntegrator::getExplicit() const  "

[INTERNAL]  Get explicit dynamics.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::Integrator::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::Integrator::sp_jac_rdae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (backward
problem)

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::Integrator::p() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::q() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::t() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::z() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Integrator::x() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::RungeKutta::RungeKutta(const std::string
&name, const Function &dae) "

[INTERNAL]  Constructor.

";

%feature("docstring")  casadi::Integrator::sp_forward(const bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::RungeKutta::serialize_body(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Integrator::get_forward(casadi_int nfwd,
const std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::Integrator::sp_jac_dae() "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (forward
problem)

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::OracleFunction::get_function() const  "

[INTERNAL]  Get list of dependency functions -1 Indicates irregularity.

";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Integrator::algebraic_state_output(const MX
&Z) const  "

[INTERNAL] ";

%feature("docstring")  casadi::RungeKutta::setupFG()  "

[INTERNAL]  Setup F and G.

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FixedStepIntegrator::retreat(IntegratorMemory
*mem, double t, double *rx, double *rz, double *rq) const  "

[INTERNAL]  Retreat solution in time.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FixedStepIntegrator::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FixedStepIntegrator::advance(IntegratorMemory
*mem, double t, double *x, double *z, double *q) const  "

[INTERNAL]  Advance solution in time.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::RungeKutta "

[INTERNAL]  'rk' plugin for Integrator

Fixed-step explicit Runge-Kutta integrator for ODEs Currently implements
RK4.

The method is still under development

Joel Andersson

C++ includes: runge_kutta.hpp ";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::Integrator::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::Integrator::sp_reverse(bvec_t **arg, bvec_t
**res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::OracleFunction::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::Integrator::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::Integrator::has_reverse(casadi_int nadj)
const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FixedStepIntegrator::getExplicitB() const  "

[INTERNAL]  Get explicit dynamics (backward problem)

";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::Integrator::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::Integrator::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FixedStepIntegrator::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::Integrator::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FixedStepIntegrator::resetB(IntegratorMemory
*mem, double t, const double *rx, const double *rz, const double *rp) const
"

[INTERNAL]  Reset the backward problem and take time to tf.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(casadi_int
ind) const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Integrator::serialize_type(SerializingStream
&s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::Integrator::eval(const double **arg, double
**res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  evaluate

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=nullptr) const  "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::Integrator::algebraic_state_init(const MX
&x0, const MX &z0) const  "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::Integrator::get_reverse(casadi_int nadj,
const std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FixedStepIntegrator::reset(IntegratorMemory
*mem, double t, const double *x, const double *z, const double *p) const  "

[INTERNAL]  Reset the forward problem.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FixedStepIntegrator::init_mem(void *mem)
const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::RungeKutta::init(const Dict &opts)  "

[INTERNAL]  Initialize stage.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::Integrator::getDerivativeOptions(bool fwd)
const  "

[INTERNAL]  Set solver specific options to generated augmented integrators.

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::OracleFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::Integrator::aug_adj(casadi_int nadj) const  "

[INTERNAL]  Generate a augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::RungeKutta::plugin_name() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FixedStepIntegrator::free_mem(void *mem)
const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";


// File: classcasadi_1_1ScopedTiming.xml
%feature("docstring") casadi::ScopedTiming::~ScopedTiming "

[INTERNAL] ";

%feature("docstring") casadi::ScopedTiming "

[INTERNAL] C++ includes: timing.hpp ";

%feature("docstring") casadi::ScopedTiming::ScopedTiming(FStats &f) "

[INTERNAL] ";


// File: classcasadi_1_1Scpgen.xml
%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::Nlpsol::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Scpgen::eval_vec(ScpgenMemory *m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Scpgen::eval_res(ScpgenMemory *m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::Nlpsol::nlpsol_codegen_body(CodeGenerator &g)
const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::Scpgen::eval_mat(ScpgenMemory *m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::Nlpsol::disp_more(std::ostream &stream) const
"

[INTERNAL]  Print description.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::get_reverse(casadi_int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates reverse mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::OracleFunction::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::Scpgen::Scpgen(const std::string &name, const
Function &nlp) "

[INTERNAL] ";

%feature("docstring")  casadi::Scpgen::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::Nlpsol::setOptionsFromFile(const std::string
&file) "

[INTERNAL]  Read options from parameter xml.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::OracleFunction::finalize()  "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::Nlpsol::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::Scpgen::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::Nlpsol::integer_support() const  "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::Scpgen::set_work(void *mem, const double
**&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::Scpgen::primalInfeasibility(ScpgenMemory *m)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Nlpsol::get_forward(casadi_int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates forward mode derivatives.

";

%feature("docstring")  casadi::Scpgen::getConic() const  "

[INTERNAL]  Access qpsol.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::Scpgen::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::Nlpsol::serialize_body(SerializingStream &s)
const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::Scpgen::solve(void *mem) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Nlpsol::has_reverse(casadi_int nadj) const  "

[INTERNAL]  Generate a function that calculates reverse mode derivatives.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::Scpgen::dualInfeasibility(ScpgenMemory *m)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::Scpgen::class_name() const  "

[INTERNAL]  Get type name.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::Scpgen::solve_qp(ScpgenMemory *m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::Scpgen::eval_exp(ScpgenMemory *m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::Nlpsol::get_default_in(casadi_int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::Scpgen::regularize(ScpgenMemory *m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::Nlpsol::callback(NlpsolMemory *m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::Nlpsol::serialize_base_function() const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::Scpgen::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Nlpsol::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::Nlpsol::serialize_type(SerializingStream &s)
const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::Nlpsol::check_inputs(void *mem) const  "

[INTERNAL]  Check if the inputs correspond to a well-posed problem.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::Nlpsol::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::Nlpsol::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::OracleFunction::get_function() const  "

[INTERNAL]  Get list of dependency functions -1 Indicates irregularity.

";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::Nlpsol::getReducedHessian() "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::Nlpsol::kkt() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::eval(const double **arg, double
**res, casadi_int *iw, double *w, void *mem) const final "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname)  "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Scpgen::line_search(ScpgenMemory *m,
casadi_int &ls_iter, bool &ls_success) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::Nlpsol::has_forward(casadi_int nfwd) const  "

[INTERNAL]  Generate a function that calculates forward mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::Scpgen::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=nullptr) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::Nlpsol::is_a(const std::string &type, bool
recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::Scpgen::plugin_name() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::Scpgen::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::Scpgen "

'scpgen' plugin for Nlpsol

A structure-exploiting sequential quadratic programming (to be come
sequential convex programming) method for nonlinear programming.

>List of available options

+-----------------------+-----------------+--------------------------------+
|          Id           |      Type       |          Description           |
+=======================+=================+================================+
| beta                  | OT_DOUBLE       | Line-search parameter,         |
|                       |                 | restoration factor of stepsize |
+-----------------------+-----------------+--------------------------------+
| c1                    | OT_DOUBLE       | Armijo condition, coefficient  |
|                       |                 | of decrease in merit           |
+-----------------------+-----------------+--------------------------------+
| codegen               | OT_BOOL         | C-code generation              |
+-----------------------+-----------------+--------------------------------+
| hessian_approximation | OT_STRING       | gauss-newton|exact             |
+-----------------------+-----------------+--------------------------------+
| lbfgs_memory          | OT_INT          | Size of L-BFGS memory.         |
+-----------------------+-----------------+--------------------------------+
| max_iter              | OT_INT          | Maximum number of SQP          |
|                       |                 | iterations                     |
+-----------------------+-----------------+--------------------------------+
| max_iter_ls           | OT_INT          | Maximum number of linesearch   |
|                       |                 | iterations                     |
+-----------------------+-----------------+--------------------------------+
| merit_memsize         | OT_INT          | Size of memory to store        |
|                       |                 | history of merit function      |
|                       |                 | values                         |
+-----------------------+-----------------+--------------------------------+
| merit_start           | OT_DOUBLE       | Lower bound for the merit      |
|                       |                 | function parameter             |
+-----------------------+-----------------+--------------------------------+
| name_x                | OT_STRINGVECTOR | Names of the variables.        |
+-----------------------+-----------------+--------------------------------+
| print_header          | OT_BOOL         | Print the header with problem  |
|                       |                 | statistics                     |
+-----------------------+-----------------+--------------------------------+
| print_x               | OT_INTVECTOR    | Which variables to print.      |
+-----------------------+-----------------+--------------------------------+
| qpsol                 | OT_STRING       | The QP solver to be used by    |
|                       |                 | the SQP method                 |
+-----------------------+-----------------+--------------------------------+
| qpsol_options         | OT_DICT         | Options to be passed to the QP |
|                       |                 | solver                         |
+-----------------------+-----------------+--------------------------------+
| reg_threshold         | OT_DOUBLE       | Threshold for the              |
|                       |                 | regularization.                |
+-----------------------+-----------------+--------------------------------+
| regularize            | OT_BOOL         | Automatic regularization of    |
|                       |                 | Lagrange Hessian.              |
+-----------------------+-----------------+--------------------------------+
| tol_du                | OT_DOUBLE       | Stopping criterion for dual    |
|                       |                 | infeasability                  |
+-----------------------+-----------------+--------------------------------+
| tol_pr                | OT_DOUBLE       | Stopping criterion for primal  |
|                       |                 | infeasibility                  |
+-----------------------+-----------------+--------------------------------+
| tol_pr_step           | OT_DOUBLE       | Stopping criterion for the     |
|                       |                 | step size                      |
+-----------------------+-----------------+--------------------------------+
| tol_reg               | OT_DOUBLE       | Stopping criterion for         |
|                       |                 | regularization                 |
+-----------------------+-----------------+--------------------------------+

Joel Andersson, Attila Kozma and Joris Gillis

>List of available options

+-------------------+-----------------+-------------------+----------------+
|        Id         |      Type       |    Description    |    Used in     |
+===================+=================+===================+================+
| beta              | OT_DOUBLE       | Line-search       | casadi::Scpgen |
|                   |                 | parameter,        |                |
|                   |                 | restoration       |                |
|                   |                 | factor of         |                |
|                   |                 | stepsize          |                |
+-------------------+-----------------+-------------------+----------------+
| bound_consistency | OT_BOOL         | Ensure that       | casadi::Nlpsol |
|                   |                 | primal-dual       |                |
|                   |                 | solution is       |                |
|                   |                 | consistent with   |                |
|                   |                 | the bounds        |                |
+-------------------+-----------------+-------------------+----------------+
| c1                | OT_DOUBLE       | Armijo condition, | casadi::Scpgen |
|                   |                 | coefficient of    |                |
|                   |                 | decrease in merit |                |
+-------------------+-----------------+-------------------+----------------+
| calc_f            | OT_BOOL         | Calculate 'f' in  | casadi::Nlpsol |
|                   |                 | the Nlpsol base   |                |
|                   |                 | class             |                |
+-------------------+-----------------+-------------------+----------------+
| calc_g            | OT_BOOL         | Calculate 'g' in  | casadi::Nlpsol |
|                   |                 | the Nlpsol base   |                |
|                   |                 | class             |                |
+-------------------+-----------------+-------------------+----------------+
| calc_lam_p        | OT_BOOL         | Calculate 'lam_p' | casadi::Nlpsol |
|                   |                 | in the Nlpsol     |                |
|                   |                 | base class        |                |
+-------------------+-----------------+-------------------+----------------+
| calc_lam_x        | OT_BOOL         | Calculate 'lam_x' | casadi::Nlpsol |
|                   |                 | in the Nlpsol     |                |
|                   |                 | base class        |                |
+-------------------+-----------------+-------------------+----------------+
| calc_multipliers  | OT_BOOL         | Calculate         | casadi::Nlpsol |
|                   |                 | Lagrange          |                |
|                   |                 | multipliers in    |                |
|                   |                 | the Nlpsol base   |                |
|                   |                 | class             |                |
+-------------------+-----------------+-------------------+----------------+
| codegen           | OT_BOOL         | C-code generation | casadi::Scpgen |
+-------------------+-----------------+-------------------+----------------+
| discrete          | OT_BOOLVECTOR   | Indicates which   | casadi::Nlpsol |
|                   |                 | of the variables  |                |
|                   |                 | are discrete,     |                |
|                   |                 | i.e. integer-     |                |
|                   |                 | valued            |                |
+-------------------+-----------------+-------------------+----------------+
| error_on_fail     | OT_BOOL         | When the          | casadi::Nlpsol |
|                   |                 | numerical process |                |
|                   |                 | returns           |                |
|                   |                 | unsuccessfully,   |                |
|                   |                 | raise an error    |                |
|                   |                 | (default false).  |                |
+-------------------+-----------------+-------------------+----------------+
| eval_errors_fatal | OT_BOOL         | When errors occur | casadi::Nlpsol |
|                   |                 | during evaluation |                |
|                   |                 | of f,g,...,stop   |                |
|                   |                 | the iterations    |                |
+-------------------+-----------------+-------------------+----------------+
| hessian_approxima | OT_STRING       | gauss-            | casadi::Scpgen |
| tion              |                 | newton|exact      |                |
+-------------------+-----------------+-------------------+----------------+
| ignore_check_vec  | OT_BOOL         | If set to true,   | casadi::Nlpsol |
|                   |                 | the input shape   |                |
|                   |                 | of F will not be  |                |
|                   |                 | checked.          |                |
+-------------------+-----------------+-------------------+----------------+
| iteration_callbac | OT_FUNCTION     | A function that   | casadi::Nlpsol |
| k                 |                 | will be called at |                |
|                   |                 | each iteration    |                |
|                   |                 | with the solver   |                |
|                   |                 | as input. Check   |                |
|                   |                 | documentation of  |                |
|                   |                 | Callback .        |                |
+-------------------+-----------------+-------------------+----------------+
| iteration_callbac | OT_BOOL         | If set to true,   | casadi::Nlpsol |
| k_ignore_errors   |                 | errors thrown by  |                |
|                   |                 | iteration_callbac |                |
|                   |                 | k will be         |                |
|                   |                 | ignored.          |                |
+-------------------+-----------------+-------------------+----------------+
| iteration_callbac | OT_INT          | Only call the     | casadi::Nlpsol |
| k_step            |                 | callback function |                |
|                   |                 | every few         |                |
|                   |                 | iterations.       |                |
+-------------------+-----------------+-------------------+----------------+
| lbfgs_memory      | OT_INT          | Size of L-BFGS    | casadi::Scpgen |
|                   |                 | memory.           |                |
+-------------------+-----------------+-------------------+----------------+
| max_iter          | OT_INT          | Maximum number of | casadi::Scpgen |
|                   |                 | SQP iterations    |                |
+-------------------+-----------------+-------------------+----------------+
| max_iter_ls       | OT_INT          | Maximum number of | casadi::Scpgen |
|                   |                 | linesearch        |                |
|                   |                 | iterations        |                |
+-------------------+-----------------+-------------------+----------------+
| merit_memsize     | OT_INT          | Size of memory to | casadi::Scpgen |
|                   |                 | store history of  |                |
|                   |                 | merit function    |                |
|                   |                 | values            |                |
+-------------------+-----------------+-------------------+----------------+
| merit_start       | OT_DOUBLE       | Lower bound for   | casadi::Scpgen |
|                   |                 | the merit         |                |
|                   |                 | function          |                |
|                   |                 | parameter         |                |
+-------------------+-----------------+-------------------+----------------+
| min_lam           | OT_DOUBLE       | Minimum allowed   | casadi::Nlpsol |
|                   |                 | multiplier value  |                |
+-------------------+-----------------+-------------------+----------------+
| name_x            | OT_STRINGVECTOR | Names of the      | casadi::Scpgen |
|                   |                 | variables.        |                |
+-------------------+-----------------+-------------------+----------------+
| no_nlp_grad       | OT_BOOL         | Prevent the       | casadi::Nlpsol |
|                   |                 | creation of the   |                |
|                   |                 | 'nlp_grad'        |                |
|                   |                 | function          |                |
+-------------------+-----------------+-------------------+----------------+
| oracle_options    | OT_DICT         | Options to be     | casadi::Nlpsol |
|                   |                 | passed to the     |                |
|                   |                 | oracle function   |                |
+-------------------+-----------------+-------------------+----------------+
| print_header      | OT_BOOL         | Print the header  | casadi::Scpgen |
|                   |                 | with problem      |                |
|                   |                 | statistics        |                |
+-------------------+-----------------+-------------------+----------------+
| print_x           | OT_INTVECTOR    | Which variables   | casadi::Scpgen |
|                   |                 | to print.         |                |
+-------------------+-----------------+-------------------+----------------+
| qpsol             | OT_STRING       | The QP solver to  | casadi::Scpgen |
|                   |                 | be used by the    |                |
|                   |                 | SQP method        |                |
+-------------------+-----------------+-------------------+----------------+
| qpsol_options     | OT_DICT         | Options to be     | casadi::Scpgen |
|                   |                 | passed to the QP  |                |
|                   |                 | solver            |                |
+-------------------+-----------------+-------------------+----------------+
| reg_threshold     | OT_DOUBLE       | Threshold for the | casadi::Scpgen |
|                   |                 | regularization.   |                |
+-------------------+-----------------+-------------------+----------------+
| regularize        | OT_BOOL         | Automatic         | casadi::Scpgen |
|                   |                 | regularization of |                |
|                   |                 | Lagrange Hessian. |                |
+-------------------+-----------------+-------------------+----------------+
| sens_linsol       | OT_STRING       | Linear solver     | casadi::Nlpsol |
|                   |                 | used for          |                |
|                   |                 | parametric        |                |
|                   |                 | sensitivities     |                |
|                   |                 | (default 'qr').   |                |
+-------------------+-----------------+-------------------+----------------+
| sens_linsol_optio | OT_DICT         | Linear solver     | casadi::Nlpsol |
| ns                |                 | options used for  |                |
|                   |                 | parametric        |                |
|                   |                 | sensitivities.    |                |
+-------------------+-----------------+-------------------+----------------+
| tol_du            | OT_DOUBLE       | Stopping          | casadi::Scpgen |
|                   |                 | criterion for     |                |
|                   |                 | dual              |                |
|                   |                 | infeasability     |                |
+-------------------+-----------------+-------------------+----------------+
| tol_pr            | OT_DOUBLE       | Stopping          | casadi::Scpgen |
|                   |                 | criterion for     |                |
|                   |                 | primal            |                |
|                   |                 | infeasibility     |                |
+-------------------+-----------------+-------------------+----------------+
| tol_pr_step       | OT_DOUBLE       | Stopping          | casadi::Scpgen |
|                   |                 | criterion for the |                |
|                   |                 | step size         |                |
+-------------------+-----------------+-------------------+----------------+
| tol_reg           | OT_DOUBLE       | Stopping          | casadi::Scpgen |
|                   |                 | criterion for     |                |
|                   |                 | regularization    |                |
+-------------------+-----------------+-------------------+----------------+
| verbose_init      | OT_BOOL         | Print out timing  | casadi::Nlpsol |
|                   |                 | information about |                |
|                   |                 | the different     |                |
|                   |                 | stages of         |                |
|                   |                 | initialization    |                |
+-------------------+-----------------+-------------------+----------------+
| warn_initial_boun | OT_BOOL         | Warn if the       | casadi::Nlpsol |
| ds                |                 | initial guess     |                |
|                   |                 | does not satisfy  |                |
|                   |                 | LBX and UBX       |                |
+-------------------+-----------------+-------------------+----------------+

Diagrams
--------



C++ includes: scpgen.hpp ";

%feature("docstring")  casadi::Nlpsol::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::Scpgen::~Scpgen "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::Scpgen::printIteration(ScpgenMemory *m,
std::ostream &stream) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Scpgen::printIteration(ScpgenMemory *m,
std::ostream &stream, casadi_int iter, double obj, double pr_inf, double
du_inf, double rg, casadi_int ls_trials, bool ls_success) const  "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";


// File: classcasadi_1_1SerializerBase.xml
%feature("docstring") casadi::SerializerBase "

C++ includes: serializer.hpp ";


// File: classcasadi_1_1SerializingStream.xml
%feature("docstring")  casadi::SerializingStream::pack(const Sparsity &e) "

Serializes an object to the output stream.

";

%feature("docstring")  casadi::SerializingStream::pack(const MX &e) "

Serializes an object to the output stream.

";

%feature("docstring")  casadi::SerializingStream::pack(const SXElem &e) "

Serializes an object to the output stream.

";

%feature("docstring")  casadi::SerializingStream::pack(const Linsol &e) "

Serializes an object to the output stream.

";

%feature("docstring")  casadi::SerializingStream::pack(const MatrixCommon
&e) "

Serializes an object to the output stream.

";

%feature("docstring")  casadi::SerializingStream::pack(const Function &e) "

Serializes an object to the output stream.

";

%feature("docstring")  casadi::SerializingStream::pack(const Importer &e) "

Serializes an object to the output stream.

";

%feature("docstring")  casadi::SerializingStream::pack(const Slice &e) "

Serializes an object to the output stream.

";

%feature("docstring")  casadi::SerializingStream::pack(const GenericType &e)
"

Serializes an object to the output stream.

";

%feature("docstring")  casadi::SerializingStream::pack(std::istream &s) "

Serializes an object to the output stream.

";

%feature("docstring")  casadi::SerializingStream::pack(int e) "

Serializes an object to the output stream.

";

%feature("docstring")  casadi::SerializingStream::pack(bool e) "

Serializes an object to the output stream.

";

%feature("docstring")  casadi::SerializingStream::pack(casadi_int e) "

Serializes an object to the output stream.

";

%feature("docstring")  casadi::SerializingStream::pack(size_t e) "

Serializes an object to the output stream.

";

%feature("docstring")  casadi::SerializingStream::pack(double e) "

Serializes an object to the output stream.

";

%feature("docstring")  casadi::SerializingStream::pack(const std::string &e)
"

Serializes an object to the output stream.

";

%feature("docstring")  casadi::SerializingStream::pack(char e) "

Serializes an object to the output stream.

";

%feature("docstring")  casadi::SerializingStream::pack(const std::vector< T
> &e) "

Serializes an object to the output stream.

";

%feature("docstring")  casadi::SerializingStream::pack(const std::map< K, V
> &e) "

Serializes an object to the output stream.

";

%feature("docstring")  casadi::SerializingStream::pack(const std::pair< A, B
> &e) "

Serializes an object to the output stream.

";

%feature("docstring")  casadi::SerializingStream::pack(const std::string
&descr, const T &e) "

Serializes an object to the output stream.

";

%feature("docstring")  casadi::SerializingStream::pack(const std::string
&descr, T &e) "

Serializes an object to the output stream.

";

%feature("docstring") casadi::SerializingStream "

Helper class for Serialization.

Joris Gillis

C++ includes: serializing_stream.hpp ";

%feature("docstring")
casadi::SerializingStream::SerializingStream(std::ostream &out) "

Constructor.

";


// File: classcasadi_1_1SetNonzeros.xml


// File: classcasadi_1_1SetNonzerosParam.xml


// File: classcasadi_1_1SetNonzerosParamParam.xml


// File: classcasadi_1_1SetNonzerosParamSlice.xml


// File: classcasadi_1_1SetNonzerosParamVector.xml


// File: classcasadi_1_1SetNonzerosSlice.xml


// File: classcasadi_1_1SetNonzerosSlice2.xml


// File: classcasadi_1_1SetNonzerosSliceParam.xml


// File: classcasadi_1_1SetNonzerosVector.xml


// File: classcasadi_1_1SharedObject.xml
%feature("docstring")  casadi::SharedObject::class_name() const  "

Get class name.

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::SharedObject::print_ptr(std::ostream
&stream=casadi::uout()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring")  casadi::SharedObject::disp(std::ostream &stream, bool
more=false) const  "

Print a description of the object.

";

%feature("docstring")  casadi::SharedObject::get_str(bool more=false) const
"

Get string representation.

";

%feature("docstring") casadi::SharedObject "

SharedObject implements a reference counting framework similar for efficient
and easily-maintained memory management.

To use the class, both the SharedObject class (the public class), and the
SharedObjectInternal class (the internal class) must be inherited from. It
can be done in two different files and together with memory management, this
approach provides a clear distinction of which methods of the class are to
be considered \"public\", i.e. methods for public use that can be considered
to remain over time with small changes, and the internal memory.

When interfacing a software, which typically includes including some header
file, this is best done only in the file where the internal class is
defined, to avoid polluting the global namespace and other side effects.

The default constructor always means creating a null pointer to an internal
class only. To allocate an internal class (this works only when the internal
class isn't abstract), use the constructor with arguments.

The copy constructor and the assignment operator perform shallow copies
only, to make a deep copy you must use the clone method explicitly. This
will give a shared pointer instance.

In an inheritance hierarchy, you can cast down automatically, e.g. (
SXFunction is a child class of Function): SXFunction derived(...); Function
base = derived;

To cast up, use the shared_cast template function, which works analogously
to dynamic_cast, static_cast, const_cast etc, e.g.: SXFunction derived(...);
Function base = derived; SXFunction derived_from_base =
shared_cast<SXFunction>(base);

A failed shared_cast will result in a null pointer (cf. dynamic_cast)

Joel Andersson

C++ includes: shared_object.hpp ";

%feature("docstring") casadi::SharedObject::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";


// File: classcasadi_1_1ShellCompiler.xml
%feature("docstring")  casadi::ImporterInternal::read_external(const
std::string &sym, bool inlined, std::istream &file, casadi_int &offset) "

[INTERNAL]  Get an external function declaration.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::ShellCompiler::~ShellCompiler "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::ImporterInternal::finalize() "

[INTERNAL] ";

%feature("docstring")
casadi::ImporterInternal::serialize_body(SerializingStream &s) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ImporterInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Print.

";

%feature("docstring")
casadi::ImporterInternal::serialize_type(SerializingStream &s) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ShellCompiler::plugin_name() const  "

[INTERNAL]  Get name of plugin.

";

%feature("docstring")  casadi::ImporterInternal::construct(const Dict &opts)
"

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::ImporterInternal::to_text(const std::string
&cmd, casadi_int ind=-1) const  "

[INTERNAL]  Get entry as a text.

";

%feature("docstring")  casadi::ShellCompiler::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::ShellCompiler::get_function(const std::string
&symname)  "

[INTERNAL]  Get a function pointer for numerical evaluation.

";

%feature("docstring")  casadi::ShellCompiler::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::ImporterInternal::serialize(SerializingStream
&s) const  "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::ShellCompiler::library() const  "

[INTERNAL]  Get library name.

";

%feature("docstring")  casadi::ShellCompiler::class_name() const  "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::ImporterInternal::get_meta(const std::string
&cmd, casadi_int ind=-1) const  "

[INTERNAL]  Get entry as a text.

";

%feature("docstring")  casadi::ImporterInternal::has_function(const
std::string &symname) const  "

[INTERNAL]  Get a function pointer for numerical evaluation.

";

%feature("docstring")  casadi::ImporterInternal::body(const std::string
&symname) const  "

[INTERNAL]  Get the function body, if inlined.

";

%feature("docstring")  casadi::ImporterInternal::has_meta(const std::string
&cmd, casadi_int ind=-1) const  "

[INTERNAL]  Does an entry exist?

";

%feature("docstring") casadi::ShellCompiler "

'shell' plugin for Importer

Joel Andersson  Interface to the JIT compiler SHELL

>List of available options

+----------------------+-----------------+---------------------------------+
|          Id          |      Type       |           Description           |
+======================+=================+=================================+
| cleanup              | OT_BOOL         | Cleanup temporary files when    |
|                      |                 | unloading. Default: true        |
+----------------------+-----------------+---------------------------------+
| compiler             | OT_STRING       | Compiler command                |
+----------------------+-----------------+---------------------------------+
| compiler_flags       | OT_STRINGVECTOR | Alias for 'compiler_flags'      |
+----------------------+-----------------+---------------------------------+
| compiler_output_flag | OT_STRING       | Compiler flag to denote object  |
|                      |                 | output. Default: '-o '          |
+----------------------+-----------------+---------------------------------+
| compiler_setup       | OT_STRING       | Compiler setup command.         |
|                      |                 | Intended to be fixed. The       |
|                      |                 | 'flag' option is the prefered   |
|                      |                 | way to set custom flags.        |
+----------------------+-----------------+---------------------------------+
| extra_suffixes       | OT_STRINGVECTOR | List of suffixes for extra      |
|                      |                 | files that the compiler may     |
|                      |                 | generate. Default: None         |
+----------------------+-----------------+---------------------------------+
| flags                | OT_STRINGVECTOR | Compile flags for the JIT       |
|                      |                 | compiler. Default: None         |
+----------------------+-----------------+---------------------------------+
| folder               | OT_STRING       | Folder to put temporary objects |
|                      |                 | in.                             |
+----------------------+-----------------+---------------------------------+
| linker               | OT_STRING       | Linker command                  |
+----------------------+-----------------+---------------------------------+
| linker_flags         | OT_STRINGVECTOR | Linker flags for the JIT        |
|                      |                 | compiler. Default: None         |
+----------------------+-----------------+---------------------------------+
| linker_output_flag   | OT_STRING       | Linker flag to denote shared    |
|                      |                 | library output. Default: '-o '  |
+----------------------+-----------------+---------------------------------+
| linker_setup         | OT_STRING       | Linker setup command. Intended  |
|                      |                 | to be fixed. The 'flag' option  |
|                      |                 | is the prefered way to set      |
|                      |                 | custom flags.                   |
+----------------------+-----------------+---------------------------------+
| name                 | OT_STRING       | The file name used to write out |
|                      |                 | compiled objects/libraries. The |
|                      |                 | actual file names used depend   |
|                      |                 | on 'temp_suffix' and include    |
|                      |                 | extensions. Default:            |
|                      |                 | 'tmp_casadi_compiler_shell'     |
+----------------------+-----------------+---------------------------------+
| temp_suffix          | OT_BOOL         | Use a temporary (seemingly      |
|                      |                 | random) filename suffix for     |
|                      |                 | file names. This is desired for |
|                      |                 | thread-safety. This behaviour   |
|                      |                 | may defeat caching compiler     |
|                      |                 | wrappers. Default: true         |
+----------------------+-----------------+---------------------------------+

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| cleanup          | OT_BOOL         | Cleanup          | casadi::ShellCom |
|                  |                 | temporary files  | piler            |
|                  |                 | when unloading.  |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Compiler command | casadi::ShellCom |
|                  |                 |                  | piler            |
+------------------+-----------------+------------------+------------------+
| compiler_flags   | OT_STRINGVECTOR | Alias for        | casadi::ShellCom |
|                  |                 | 'compiler_flags' | piler            |
+------------------+-----------------+------------------+------------------+
| compiler_output_ | OT_STRING       | Compiler flag to | casadi::ShellCom |
| flag             |                 | denote object    | piler            |
|                  |                 | output. Default: |                  |
|                  |                 | '-o '            |                  |
+------------------+-----------------+------------------+------------------+
| compiler_setup   | OT_STRING       | Compiler setup   | casadi::ShellCom |
|                  |                 | command.         | piler            |
|                  |                 | Intended to be   |                  |
|                  |                 | fixed. The       |                  |
|                  |                 | 'flag' option is |                  |
|                  |                 | the prefered way |                  |
|                  |                 | to set custom    |                  |
|                  |                 | flags.           |                  |
+------------------+-----------------+------------------+------------------+
| extra_suffixes   | OT_STRINGVECTOR | List of suffixes | casadi::ShellCom |
|                  |                 | for extra files  | piler            |
|                  |                 | that the         |                  |
|                  |                 | compiler may     |                  |
|                  |                 | generate.        |                  |
|                  |                 | Default: None    |                  |
+------------------+-----------------+------------------+------------------+
| flags            | OT_STRINGVECTOR | Compile flags    | casadi::ShellCom |
|                  |                 | for the JIT      | piler            |
|                  |                 | compiler.        |                  |
|                  |                 | Default: None    |                  |
+------------------+-----------------+------------------+------------------+
| folder           | OT_STRING       | Folder to put    | casadi::ShellCom |
|                  |                 | temporary        | piler            |
|                  |                 | objects in.      |                  |
+------------------+-----------------+------------------+------------------+
| linker           | OT_STRING       | Linker command   | casadi::ShellCom |
|                  |                 |                  | piler            |
+------------------+-----------------+------------------+------------------+
| linker_flags     | OT_STRINGVECTOR | Linker flags for | casadi::ShellCom |
|                  |                 | the JIT          | piler            |
|                  |                 | compiler.        |                  |
|                  |                 | Default: None    |                  |
+------------------+-----------------+------------------+------------------+
| linker_output_fl | OT_STRING       | Linker flag to   | casadi::ShellCom |
| ag               |                 | denote shared    | piler            |
|                  |                 | library output.  |                  |
|                  |                 | Default: '-o '   |                  |
+------------------+-----------------+------------------+------------------+
| linker_setup     | OT_STRING       | Linker setup     | casadi::ShellCom |
|                  |                 | command.         | piler            |
|                  |                 | Intended to be   |                  |
|                  |                 | fixed. The       |                  |
|                  |                 | 'flag' option is |                  |
|                  |                 | the prefered way |                  |
|                  |                 | to set custom    |                  |
|                  |                 | flags.           |                  |
+------------------+-----------------+------------------+------------------+
| name             | OT_STRING       | The file name    | casadi::ShellCom |
|                  |                 | used to write    | piler            |
|                  |                 | out compiled obj |                  |
|                  |                 | ects/libraries.  |                  |
|                  |                 | The actual file  |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on        |                  |
|                  |                 | 'temp_suffix'    |                  |
|                  |                 | and include      |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default: 'tmp_ca |                  |
|                  |                 | sadi_compiler_sh |                  |
|                  |                 | ell'             |                  |
+------------------+-----------------+------------------+------------------+
| temp_suffix      | OT_BOOL         | Use a temporary  | casadi::ShellCom |
|                  |                 | (seemingly       | piler            |
|                  |                 | random) filename |                  |
|                  |                 | suffix for file  |                  |
|                  |                 | names. This is   |                  |
|                  |                 | desired for      |                  |
|                  |                 | thread-safety.   |                  |
|                  |                 | This behaviour   |                  |
|                  |                 | may defeat       |                  |
|                  |                 | caching compiler |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Importer |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: shell_compiler.hpp ";

%feature("docstring")  casadi::ImporterInternal::read_meta(std::istream
&file, casadi_int &offset) "

[INTERNAL]  Get meta information.

";

%feature("docstring")  casadi::ImporterInternal::can_have_meta() const  "

[INTERNAL]  Can meta information be read?

";

%feature("docstring")  casadi::ImporterInternal::inlined(const std::string
&symname) const  "

[INTERNAL] ";

%feature("docstring") casadi::ShellCompiler::ShellCompiler(const std::string
&name) "

[INTERNAL]  Constructor.

";


// File: classcasadi_1_1Slice.xml
%feature("docstring")  casadi::Slice::is_scalar(casadi_int len) const  "

Is the slice a scalar.

";

%feature("docstring")  casadi::Slice::serialize(SerializingStream &s) const
"

Serialize an object.

";

%feature("docstring")  casadi::Slice::disp(std::ostream &stream, bool
more=false) const  "

Print a description of the object.

";

%feature("docstring")  casadi::Slice::scalar(casadi_int len) const  "

Get scalar (if is_scalar)

";

%feature("docstring")  casadi::Slice::size() const  "

Get number of elements.

";

%feature("docstring") casadi::Slice "

Class representing a Slice.

Note that Python or Octave do not need to use this class. They can just use
slicing utility from the host language ( M[0:6] in Python, M(1:7) )

C++ includes: slice.hpp ";

%feature("docstring")  casadi::Slice::info() const  "

Obtain information

";

%feature("docstring")  casadi::Slice::all() const  "

Get a vector of indices.

";

%feature("docstring") casadi::casadi_all "

Get a vector of indices.

";

%feature("docstring")  casadi::Slice::casadi_all "

Get a vector of indices.

";

%feature("docstring")  casadi::Slice::all(casadi_int len, bool ind1=false)
const  "

Get a vector of indices.

";

%feature("docstring") casadi::casadi_all "

Get a vector of indices.

";

%feature("docstring")  casadi::Slice::casadi_all "

Get a vector of indices.

";

%feature("docstring")  casadi::Slice::all(const Slice &outer, casadi_int
len) const  "

Get a vector of indices (nested slice)

";

%feature("docstring") casadi::casadi_all "

Get a vector of indices (nested slice)

";

%feature("docstring")  casadi::Slice::casadi_all "

Get a vector of indices (nested slice)

";

%feature("docstring")  casadi::Slice::apply(casadi_int len, bool ind1=false)
const  "

Apply concrete length.

";

%feature("docstring")  casadi::Slice::is_empty() const  "

Check if slice is empty.

";

%feature("docstring") casadi::Slice::Slice() "

Default constructor - all elements.

";

%feature("docstring") casadi::Slice::Slice(casadi_int i, bool ind1=false) "

A single element (explicit to avoid ambiguity with IM overload.

";

%feature("docstring") casadi::Slice::Slice(casadi_int start, casadi_int
stop, casadi_int step=1) "

A slice.

";

%feature("docstring")  casadi::Slice::type_name() const  "

Get name of the class.

";

%feature("docstring")  casadi::Slice::get_str(bool more=false) const  "

Get string representation.

";


// File: classcasadi_1_1SlicotDple.xml
%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::Dple::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::ProtoFunction::serialize_base_function()
const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::SlicotDple::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")  casadi::SlicotDple::plugin_name() const  "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::Dple::get_forward(casadi_int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::Dple::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")
casadi::FunctionInternal::serialize_type(SerializingStream &s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::PluginInterface< Dple
>::serialize_type(SerializingStream &s) const "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")
casadi::FunctionInternal::serialize_body(SerializingStream &s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::SlicotDple::eval(const double **arg, double
**res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::Dple::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring") casadi::SlicotDple::SlicotDple() "

[INTERNAL]  Constructor.

";

%feature("docstring") casadi::SlicotDple::SlicotDple(const std::string
&name, const SpDict &st) "

[INTERNAL]  Constructor.

Parameters:
-----------

st:

Problem structure.

";

%feature("docstring") casadi::SlicotDple::SlicotDple(const SpDict &st) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::SlicotDple "

'slicot' plugin for Dple

An efficient solver for Discrete Periodic Lyapunov Equations using SLICOT

An efficient solver for Discrete Periodic Lyapunov Equations using SLICOT

Uses Periodic Schur Decomposition ('psd') and does not assume positive
definiteness. Based on Periodic Lyapunov equations: some applications and
new algorithms. Int. J. Control, vol. 67, pp. 69-87, 1997.

Overview of the method: J. Gillis Practical Methods for Approximate Robust
Periodic Optimal Control ofNonlinear Mechanical Systems, PhD Thesis,
KULeuven, 2015

>List of available options

+-----------------------+-----------+--------------------------------------+
|          Id           |   Type    |             Description              |
+=======================+===========+======================================+
| linear_solver         | OT_STRING | User-defined linear solver class.    |
|                       |           | Needed for sensitivities.            |
+-----------------------+-----------+--------------------------------------+
| linear_solver_options | OT_DICT   | Options to be passed to the linear   |
|                       |           | solver.                              |
+-----------------------+-----------+--------------------------------------+
| psd_num_zero          | OT_DOUBLE | Numerical zero used in Periodic      |
|                       |           | Schur decomposition with slicot.This |
|                       |           | option is needed when your systems   |
|                       |           | has Floquet multiplierszero or close |
|                       |           | to zero                              |
+-----------------------+-----------+--------------------------------------+

Joris Gillis

>List of available options

+--------------------+-----------+--------------------+--------------------+
|         Id         |   Type    |    Description     |      Used in       |
+====================+===========+====================+====================+
| const_dim          | OT_BOOL   | Assume constant    | casadi::Dple       |
|                    |           | dimension of P     |                    |
+--------------------+-----------+--------------------+--------------------+
| eps_unstable       | OT_DOUBLE | A margin for       | casadi::Dple       |
|                    |           | unstability        |                    |
|                    |           | detection          |                    |
+--------------------+-----------+--------------------+--------------------+
| error_unstable     | OT_BOOL   | Throw an exception | casadi::Dple       |
|                    |           | when it is         |                    |
|                    |           | detected that      |                    |
|                    |           | Product(A_i,       |                    |
|                    |           | i=N..1)has         |                    |
|                    |           | eigenvalues        |                    |
|                    |           | greater than       |                    |
|                    |           | 1-eps_unstable     |                    |
+--------------------+-----------+--------------------+--------------------+
| linear_solver      | OT_STRING | User-defined       | casadi::SlicotDple |
|                    |           | linear solver      |                    |
|                    |           | class. Needed for  |                    |
|                    |           | sensitivities.     |                    |
+--------------------+-----------+--------------------+--------------------+
| linear_solver_opti | OT_DICT   | Options to be      | casadi::SlicotDple |
| ons                |           | passed to the      |                    |
|                    |           | linear solver.     |                    |
+--------------------+-----------+--------------------+--------------------+
| pos_def            | OT_BOOL   | Assume P positive  | casadi::Dple       |
|                    |           | definite           |                    |
+--------------------+-----------+--------------------+--------------------+
| psd_num_zero       | OT_DOUBLE | Numerical zero     | casadi::SlicotDple |
|                    |           | used in Periodic   |                    |
|                    |           | Schur              |                    |
|                    |           | decomposition with |                    |
|                    |           | slicot.This option |                    |
|                    |           | is needed when     |                    |
|                    |           | your systems has   |                    |
|                    |           | Floquet            |                    |
|                    |           | multiplierszero or |                    |
|                    |           | close to zero      |                    |
+--------------------+-----------+--------------------+--------------------+

Diagrams
--------



C++ includes: slicot_dple.hpp ";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::ProtoFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::SlicotDple::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::SlicotDple::~SlicotDple "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::Dple::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::SlicotDple::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::Dple::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::SlicotDple::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::Dple::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::SlicotDple::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(casadi_int
ind) const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::finalize()  "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::SlicotDple::set_work(void *mem, const double
**&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::Dple::has_reverse(casadi_int nadj) const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::Dple::has_forward(casadi_int nfwd) const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::SlicotDple::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Dple::get_reverse(casadi_int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";


// File: classcasadi_1_1SlicotExpm.xml
%feature("docstring")  casadi::SlicotExpm::plugin_name() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::ProtoFunction::serialize_base_function()
const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::Expm::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")
casadi::FunctionInternal::serialize_type(SerializingStream &s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::PluginInterface< Expm
>::serialize_type(SerializingStream &s) const "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::SlicotExpm::SlicotExpm() "

[INTERNAL]  Constructor.

";

%feature("docstring") casadi::SlicotExpm::SlicotExpm(const std::string
&name, const Sparsity &A) "

[INTERNAL]  Constructor.

Parameters:
-----------

st:

Problem structure.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::Expm::get_reverse(casadi_int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::Expm::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::Expm::getJacSparsity(casadi_int iind,
casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::finalize()  "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::SlicotExpm "

[INTERNAL]  'slicot' plugin for Expm

An efficient solver for Discrete Periodic Lyapunov Equations using SLICOT

Joris Gillis

C++ includes: slicot_expm.hpp ";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::SlicotExpm::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::SlicotExpm::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::SlicotExpm::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Expm::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::SlicotExpm::~SlicotExpm "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::get_name_out(casadi_int i)
"

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::ProtoFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::Expm::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Expm::has_forward(casadi_int nfwd) const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::SlicotExpm::set_work(void *mem, const double
**&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::Expm::get_forward(casadi_int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")
casadi::FunctionInternal::serialize_body(SerializingStream &s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(casadi_int
ind) const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::Expm::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::SlicotExpm::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::SlicotExpm::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::Expm::has_reverse(casadi_int nadj) const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")
casadi::FunctionInternal::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::codegen_body(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::get_name_in(casadi_int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::SlicotExpm::eval(const double **arg, double
**res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";


// File: classcasadi_1_1Smoothing.xml
%feature("docstring") casadi::Smoothing "

[INTERNAL]  Calculate derivative using 3th order smoothing scheme Joel
Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| abstol           | OT_DOUBLE       | Accuracy of      | casadi::Smoothin |
|                  |                 | function outputs | g                |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| h                | OT_DOUBLE       | Step size        | casadi::Smoothin |
|                  |                 | [default:        | g                |
|                  |                 | computed from    |                  |
|                  |                 | abstol]          |                  |
+------------------+-----------------+------------------+------------------+
| h_iter           | OT_INT          | Number of        | casadi::Smoothin |
|                  |                 | iterations to    | g                |
|                  |                 | improve on the   |                  |
|                  |                 | step-size        |                  |
|                  |                 | [default: 1 if   |                  |
|                  |                 | error estimate   |                  |
|                  |                 | available,       |                  |
|                  |                 | otherwise 0]     |                  |
+------------------+-----------------+------------------+------------------+
| h_max            | OT_DOUBLE       | Maximum step     | casadi::Smoothin |
|                  |                 | size [default 0] | g                |
+------------------+-----------------+------------------+------------------+
| h_min            | OT_DOUBLE       | Minimum step     | casadi::Smoothin |
|                  |                 | size [default    | g                |
|                  |                 | inf]             |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reltol           | OT_DOUBLE       | Accuracy of      | casadi::Smoothin |
|                  |                 | function inputs  | g                |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| second_order_ste | OT_DOUBLE       | Second order     | casadi::Smoothin |
| psize            |                 | perturbation     | g                |
|                  |                 | size [default:   |                  |
|                  |                 | 1e-3]            |                  |
+------------------+-----------------+------------------+------------------+
| smoothing        | OT_DOUBLE       | Smoothing        | casadi::Smoothin |
|                  |                 | regularization   | g                |
|                  |                 | [default:        |                  |
|                  |                 | machine          |                  |
|                  |                 | precision]       |                  |
+------------------+-----------------+------------------+------------------+
| u_aim            | OT_DOUBLE       | Target ratio of  | casadi::Smoothin |
|                  |                 | roundoff error   | g                |
|                  |                 | to truncation    |                  |
|                  |                 | error [default:  |                  |
|                  |                 | 100.]            |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: finite_differences.hpp ";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::Smoothing::calc_fd(double **yk, double *y0,
double *J, double h) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Smoothing::calc_fd() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FiniteDiff::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FiniteDiff::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::ProtoFunction::serialize_base_function()
const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::FiniteDiff::get_default_in(casadi_int ind)
const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FiniteDiff::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::Smoothing::has_err() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")
casadi::FunctionInternal::serialize_type(SerializingStream &s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FiniteDiff::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FiniteDiff::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::Smoothing::pert(const std::string &k) const
"

[INTERNAL] ";

%feature("docstring")  casadi::Smoothing::pert(casadi_int k, double h) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FiniteDiff::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::Smoothing::Smoothing(const std::string &name,
casadi_int n) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FiniteDiff::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::finalize()  "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")
casadi::FunctionInternal::serialize_body(SerializingStream &s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FiniteDiff::codegen_body(CodeGenerator &g)
const  "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::Smoothing::class_name() const  "

[INTERNAL]  Get type name.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::ProtoFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::Smoothing::get_forward(casadi_int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Second order derivatives.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::FunctionInternal::get_reverse(casadi_int
nadj, const std::string &name, const std::vector< std::string > &inames,
const std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FiniteDiff::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FiniteDiff::uses_output() const  "

[INTERNAL]  Is the scheme using the (nondifferentiated) output?

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FiniteDiff::codegen_declarations(CodeGenerator &g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::has_reverse(casadi_int
nadj) const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FiniteDiff::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FiniteDiff::eval(const double **arg, double
**res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::Smoothing::n_pert() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::Smoothing::~Smoothing "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::Smoothing::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::Smoothing::has_forward(casadi_int nfwd) const
"

[INTERNAL]  Second order derivatives.

";

%feature("docstring")  casadi::Smoothing::calc_stepsize(double abstol) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";


// File: classcasadi_1_1Solve.xml


// File: classcasadi_1_1SparseStorage.xml
%feature("docstring")  casadi::SparseStorage< DataType >::has_nz(casadi_int
rr, casadi_int cc) const  "

[INTERNAL]  Returns true if the matrix has a non-zero at location rr, cc.

";

%feature("docstring")  casadi::SparseStorage< DataType >::elem(casadi_int
rr, casadi_int cc) "

[INTERNAL]  get a reference to an element

";

%feature("docstring")  casadi::SparseStorage< DataType >::clear() "

[INTERNAL] ";

%feature("docstring")  casadi::SparseStorage< DataType >::reserve(casadi_int
nnz) "

[INTERNAL] ";

%feature("docstring")  casadi::SparseStorage< DataType >::reserve(casadi_int
nnz, casadi_int ncol) "

[INTERNAL] ";

%feature("docstring")  casadi::SparseStorage< DataType >::resize(casadi_int
nrow, casadi_int ncol) "

[INTERNAL] ";

%feature("docstring") casadi::SparseStorage "

[INTERNAL] C++ includes: sparse_storage.hpp ";

%feature("docstring")  casadi::SparseStorage< DataType >::sparsity() const
"

[INTERNAL]  Const access the sparsity - reference to data member.

";

%feature("docstring") casadi::casadi_sparsity "

Const access the sparsity - reference to data member.

";

%feature("docstring")  casadi::SparseStorage< DataType >::casadi_sparsity "

Const access the sparsity - reference to data member.

";

%feature("docstring") casadi::SparseStorage< DataType >::SparseStorage(const
Sparsity &sparsity, const DataType &val=DataType(0)) "

[INTERNAL]  Sparse matrix with a given sparsity

";

%feature("docstring") casadi::SparseStorage< DataType >::SparseStorage() "

[INTERNAL]  constructors

empty 0-by-0 matrix constructor

";

%feature("docstring") casadi::SparseStorage< DataType >::SparseStorage(const
SparseStorage< DataType > &m) "

[INTERNAL]  Copy constructor.

";

%feature("docstring")  casadi::SparseStorage< DataType >::nonzeros() "

[INTERNAL]  Access the non-zero elements.

";

%feature("docstring")  casadi::SparseStorage< DataType >::nonzeros() const
"

[INTERNAL]  Const access the non-zero elements.

";


// File: classcasadi_1_1Sparsify.xml


// File: classcasadi_1_1Sparsity.xml


/*  Check if two sparsity patterns are identical  */

/*  Size and element counting  */ %feature("docstring")
casadi::Sparsity::enlargeRows(casadi_int nrow, const std::vector< casadi_int
> &rr, bool ind1=false) "

Enlarge the matrix along the first dimension (i.e. insert rows)

";

%feature("docstring") casadi::Sparsity "

General sparsity class.

The storage format is a compressed column storage (CCS) format.  In this
format, the structural non-zero elements are stored in column-major order,
starting from the upper left corner of the matrix and ending in the lower
right corner.

In addition to the dimension ( size1(), size2()), (i.e. the number of rows
and the number of columns respectively), there are also two vectors of
integers:

\"colind\" [length size2()+1], which contains the index to the first non-
zero element on or after the corresponding column. All the non-zero elements
of a particular i are thus the elements with index el that fulfills:
colind[i] <= el < colind[i+1].

\"row\" [same length as the number of non-zero elements, nnz()] The rows for
each of the structural non-zeros.

Note that with this format, it is cheap to loop over all the non-zero
elements of a particular column, at constant time per element, but expensive
to jump to access a location (i, j).

If the matrix is dense, i.e. length(row) == size1()*size2(), the format
reduces to standard dense column major format, which allows access to an
arbitrary element in constant time.

Since the object is reference counted (it inherits from SharedObject),
several matrices are allowed to share the same sparsity pattern.

The implementations of methods marked as such in this class has been taken
from the CSparse package and modified to fit CasADi data structures and
separation of sparsity pattern calculation and numerical evaluation. These
functions are Copyright(c) Timothy A. Davis, 2006-2009 and licensed as a
derivative work under the GNU LGPL

See:   Matrix

Joel Andersson

C++ includes: sparsity.hpp ";

%feature("docstring")  casadi::Sparsity::largest_first() const  "

Order the columns by decreasing degree.

";

%feature("docstring")  casadi::Sparsity::dim(bool with_nz=false) const  "

Get the dimension as a string.

";

%feature("docstring")  casadi::Sparsity::is_reshape(const Sparsity &y) const
"

Check if the sparsity is a reshape of another.

";

%feature("docstring")  casadi::Sparsity::add_nz(casadi_int rr, casadi_int
cc) "

Get the index of a non-zero element Add the element if it does not exist and
copy object if it's not unique.

";

%feature("docstring")  casadi::Sparsity::is_scalar(bool
scalar_and_dense=false) const  "

Is scalar?

";

%feature("docstring")  casadi::Sparsity::rowsSequential(bool strictly=true)
const  "

Do the rows appear sequentially on each column.

Parameters:
-----------

strictly:  if true, then do not allow multiple entries

";

%feature("docstring")  casadi::Sparsity::get_diag(std::vector< casadi_int >
&output_mapping) const  "

Get the diagonal of the matrix/create a diagonal matrix (mapping will
contain the nonzero mapping) When the input is square, the diagonal elements
are returned. If the input is vector-like, a diagonal matrix is constructed
with it.

";

%feature("docstring")  casadi::Sparsity::btf(std::vector< casadi_int >
&output_rowperm, std::vector< casadi_int > &output_colperm, std::vector<
casadi_int > &output_rowblock, std::vector< casadi_int > &output_colblock,
std::vector< casadi_int > &output_coarse_rowblock, std::vector< casadi_int >
&output_coarse_colblock) const  "

Calculate the block triangular form (BTF) See Direct Methods for Sparse
Linear Systems by Davis (2006).

The function computes the Dulmage-Mendelsohn decomposition, which allows you
to reorder the rows and columns of a matrix to bring it into block
triangular form (BTF).

It will not consider the distance of off-diagonal elements to the diagonal:
there is no guarantee you will get a block-diagonal matrix if you supply a
randomly permuted block-diagonal matrix.

If your matrix is symmetrical, this method is of limited use; permutation
can make it non-symmetric.

See:   scc  The implementation is a modified version of cs_dmperm in CSparse
Copyright(c) Timothy A. Davis, 2006-2009 Licensed as a derivative work under
the GNU LGPL

";

%feature("docstring")  casadi::Sparsity::is_triu() const  "

Is upper triangular?

";

%feature("docstring")  casadi::Sparsity::qr_sparse(Sparsity &output_V,
Sparsity &output_R, std::vector< casadi_int > &output_prinv, std::vector<
casadi_int > &output_pc, bool amd=true) const  "

Symbolic QR factorization Returns the sparsity pattern of V (compact
representation of Q) and R as well as vectors needed for the numerical
factorization and solution. The implementation is a modified version of
CSparse Copyright(c) Timothy A. Davis, 2006-2009 Licensed as a derivative
work under the GNU LGPL.

";

%feature("docstring") casadi::casadi_qr_sparse "

Symbolic QR factorization Returns the sparsity pattern of V (compact
representation of Q) and R as well as vectors needed for the numerical
factorization and solution. The implementation is a modified version of
CSparse Copyright(c) Timothy A. Davis, 2006-2009 Licensed as a derivative
work under the GNU LGPL.

";

%feature("docstring")  casadi::Sparsity::casadi_qr_sparse "

Symbolic QR factorization Returns the sparsity pattern of V (compact
representation of Q) and R as well as vectors needed for the numerical
factorization and solution. The implementation is a modified version of
CSparse Copyright(c) Timothy A. Davis, 2006-2009 Licensed as a derivative
work under the GNU LGPL.

";

%feature("docstring")  casadi::Sparsity::is_vector() const  "

Check if the pattern is a row or column vector.

";

%feature("docstring")  casadi::Sparsity::resize(casadi_int nrow, casadi_int
ncol) "

Resize.

";

%feature("docstring")  casadi::SharedObject::disp(std::ostream &stream, bool
more=false) const  "

Print a description of the object.

";

%feature("docstring")  casadi::Sparsity::find(bool ind1=false) const  "

Get the location of all non-zero elements as they would appear in a Dense
matrix A : DenseMatrix 4 x 3 B : SparseMatrix 4 x 3 , 5 structural non-
zeros.

k = A.find() A[k] will contain the elements of A that are non-zero in B

Inverse of nonzeros.

";

%feature("docstring") casadi::casadi_find "

Get the location of all non-zero elements as they would appear in a Dense
matrix A : DenseMatrix 4 x 3 B : SparseMatrix 4 x 3 , 5 structural non-
zeros.

k = A.find() A[k] will contain the elements of A that are non-zero in B

Inverse of nonzeros.

";

%feature("docstring")  casadi::Sparsity::casadi_find "

Get the location of all non-zero elements as they would appear in a Dense
matrix A : DenseMatrix 4 x 3 B : SparseMatrix 4 x 3 , 5 structural non-
zeros.

k = A.find() A[k] will contain the elements of A that are non-zero in B

Inverse of nonzeros.

";

%feature("docstring")  casadi::Sparsity::nnz_diag() const  "

Number of non-zeros on the diagonal, i.e. the number of elements (i, j) with
j==i.

";

%feature("docstring")  casadi::Sparsity::bw_lower() const  "

Lower half-bandwidth.

";

%feature("docstring")  casadi::Sparsity::T() const  "

Transpose the matrix.

";

%feature("docstring")  casadi::Sparsity::repr_el(casadi_int k) const  "

Describe the nonzero location k as a string.

";

%feature("docstring") casadi::Sparsity::Sparsity(casadi_int dummy=0) "

Default constructor.

";

%feature("docstring") casadi::Sparsity::Sparsity(casadi_int nrow, casadi_int
ncol) "

Pattern with all structural zeros.

";

%feature("docstring") casadi::Sparsity::Sparsity(casadi_int nrow, casadi_int
ncol, const std::vector< casadi_int > &colind, const std::vector< casadi_int
> &row, bool order_rows=false) "

Construct from sparsity pattern vectors given in compressed column storage
format.

";

%feature("docstring") casadi::Sparsity::Sparsity(const std::pair<
casadi_int, casadi_int > &rc) "

Create a sparse matrix with all structural zeros.

";

%feature("docstring")  casadi::Sparsity::to_file(const std::string
&filename, const std::string &format_hint="") const  "

Export sparsity pattern to file

Supported formats: .mtx Matrix Market

";

%feature("docstring")  casadi::Sparsity::colind(casadi_int cc) const  "

Get a reference to the colindex of column cc (see class description)

";

%feature("docstring")  casadi::Sparsity::is_stacked(const Sparsity &y,
casadi_int n) const  "

Check if pattern is horizontal repeat of another.

";

%feature("docstring")  casadi::Sparsity::is_row() const  "

Check if the pattern is a row vector (i.e. size1()==1)

";

%feature("docstring")  casadi::Sparsity::numel() const  "

The total number of elements, including structural zeros, i.e.
size2()*size1() Beware of overflow.

See:   nnz()

";

%feature("docstring")  casadi::Sparsity::columns() const  "

Get the number of columns, Octave-style syntax.

";

%feature("docstring")  casadi::Sparsity::unite(const Sparsity &y) const  "

Union of two sparsity patterns.

";

%feature("docstring") casadi::casadi_unite "

Union of two sparsity patterns.

";

%feature("docstring")  casadi::Sparsity::casadi_unite "

Union of two sparsity patterns.

";

%feature("docstring")  casadi::Sparsity::is_transpose(const Sparsity &y)
const  "

Check if the sparsity is the transpose of another.

";

%feature("docstring")  casadi::Sparsity::get_triplet(std::vector< casadi_int
> &output_row, std::vector< casadi_int > &output_col) const  "

Get the sparsity in sparse triplet format.

";

%feature("docstring")  casadi::Sparsity::is_square() const  "

Is square?

";

%feature("docstring")  casadi::Sparsity::appendColumns(const Sparsity &sp) "

Append another sparsity patten horizontally.

";

%feature("docstring")  casadi::Sparsity::ldl(std::vector< casadi_int >
&output_p, bool amd=true) const  "

Symbolic LDL factorization Returns the sparsity pattern of L^T.

The implementation is a modified version of LDL Copyright(c) Timothy A.
Davis, 2005-2013 Licensed as a derivative work under the GNU LGPL

";

%feature("docstring") casadi::casadi_ldl "

Symbolic LDL factorization Returns the sparsity pattern of L^T.

The implementation is a modified version of LDL Copyright(c) Timothy A.
Davis, 2005-2013 Licensed as a derivative work under the GNU LGPL

";

%feature("docstring")  casadi::Sparsity::casadi_ldl "

Symbolic LDL factorization Returns the sparsity pattern of L^T.

The implementation is a modified version of LDL Copyright(c) Timothy A.
Davis, 2005-2013 Licensed as a derivative work under the GNU LGPL

";

%feature("docstring")  casadi::Sparsity::get_ccs(std::vector< casadi_int >
&output_colind, std::vector< casadi_int > &output_row) const  "

Get the sparsity in compressed column storage (CCS) format.

";

%feature("docstring")  casadi::Sparsity::removeDuplicates(std::vector<
casadi_int > &INOUT) "

Remove duplicate entries.

The same indices will be removed from the mapping vector, which must have
the same length as the number of nonzeros

";

%feature("docstring")  casadi::Sparsity::is_empty(bool both=false) const  "

Check if the sparsity is empty.

A sparsity is considered empty if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring")  casadi::Sparsity::export_code(const std::string
&lang, std::ostream &stream=casadi::uout(), const Dict &options=Dict())
const  "

Export matrix in specific language.

lang: only 'matlab' supported for now

::

   * options:
   *   inline: Indicates if you want everything on a single line (default: False)
   *   name: Name of exported variable (default: 'sp')
   *   as_matrix: Matlab does not have a sparsity object. (default: false)
  *               With this option true, a numeric matrix will be constructed
   * 



";

%feature("docstring")  casadi::SharedObject::get_str(bool more=false) const
"

Get string representation.

";

%feature("docstring")  casadi::Sparsity::makeDense(std::vector< casadi_int >
&output_mapping) const  "

Make a patten dense.

";

%feature("docstring")  casadi::Sparsity::pattern_inverse() const  "

Take the inverse of a sparsity pattern; flip zeros and non-zeros.

";

%feature("docstring")  casadi::Sparsity::dense(casadi_int nrow, casadi_int
ncol=1) "

Create a dense rectangular sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::dense(const std::pair< casadi_int,
casadi_int > &rc) "

Create a dense rectangular sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::spy_matlab(const std::string
&mfile) const  "

Generate a script for Matlab or Octave which visualizes the sparsity using
the spy command.

";

%feature("docstring")  casadi::Sparsity::diag(casadi_int nrow) "

Create diagonal sparsity pattern.

";

%feature("docstring") casadi::casadi_diag "

Create diagonal sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::casadi_diag "

Create diagonal sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::diag(casadi_int nrow, casadi_int
ncol) "

Create diagonal sparsity pattern.

";

%feature("docstring") casadi::casadi_diag "

Create diagonal sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::casadi_diag "

Create diagonal sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::diag(const std::pair< casadi_int,
casadi_int > &rc) "

Create diagonal sparsity pattern.

";

%feature("docstring") casadi::casadi_diag "

Create diagonal sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::casadi_diag "

Create diagonal sparsity pattern.

";

%feature("docstring")  casadi::SharedObject::print_ptr(std::ostream
&stream=casadi::uout()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring")  casadi::Sparsity::get_crs(std::vector< casadi_int >
&output_rowind, std::vector< casadi_int > &output_col) const  "

Get the sparsity in compressed row storage (CRS) format.

";

%feature("docstring")  casadi::Sparsity::serialize() const  "

Serialize.

";

%feature("docstring")  casadi::Sparsity::serialize(SerializingStream &s)
const  "

Serialize an object.

";

%feature("docstring")  casadi::Sparsity::sub(const std::vector< casadi_int >
&rr, const std::vector< casadi_int > &cc, std::vector< casadi_int >
&output_mapping, bool ind1=false) const  "

Get a submatrix.

Returns the sparsity of the submatrix, with a mapping such that submatrix[k]
= originalmatrix[mapping[k]]

";

%feature("docstring")  casadi::Sparsity::sub(const std::vector< casadi_int >
&rr, const Sparsity &sp, std::vector< casadi_int > &output_mapping, bool
ind1=false) const  "

Get a set of elements.

Returns the sparsity of the corresponding elements, with a mapping such that
submatrix[k] = originalmatrix[mapping[k]]

";

%feature("docstring")  casadi::Sparsity::unit(casadi_int n, casadi_int el) "

Create the sparsity pattern for a unit vector of length n and a nonzero on
position el.

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::Sparsity::append(const Sparsity &sp) "

Append another sparsity patten vertically (NOTE: only efficient if vector)

";

%feature("docstring")  casadi::Sparsity::combine(const Sparsity &y, bool
f0x_is_zero, bool function0_is_zero) const  "

Combine two sparsity patterns Returns the new sparsity pattern as well as a
mapping with the same length as the number of non-zero elements The mapping
matrix contains the arguments for each nonzero, the first bit indicates if
the first argument is nonzero, the second bit indicates if the second
argument is nonzero (note that none of, one of or both of the arguments can
be nonzero)

";

%feature("docstring")  casadi::Sparsity::nnz() const  "

Get the number of (structural) non-zeros.

See:   numel()

";

%feature("docstring")  casadi::Sparsity::intersect(const Sparsity &y) const
"

Intersection of two sparsity patterns Returns the new sparsity pattern as
well as a mapping with the same length as the number of non-zero elements
The value is 1 if the non-zero comes from the first (i.e. this) object, 2 if
it is from the second and 3 (i.e. 1 | 2) if from both.

";

%feature("docstring")  casadi::Sparsity::row(casadi_int el) const  "

Get the row of a non-zero element.

";

%feature("docstring")  casadi::Sparsity::is_column() const  "

Check if the pattern is a column vector (i.e. size2()==1)

";

%feature("docstring")  casadi::Sparsity::get_colind() const  "

Get the column index for each column Together with the row-vector, one
obtains the sparsity pattern in the column compressed format.

";

%feature("docstring")  casadi::Sparsity::get_row() const  "

Get the row for each non-zero entry Together with the column-vector, this
vector gives the sparsity of the matrix in sparse triplet format, and
together with the colind vector, one obtains the sparsity in column
compressed format.

";

%feature("docstring")  casadi::Sparsity::is_symmetric() const  "

Is symmetric?

";

%feature("docstring")  casadi::Sparsity::is_subset(const Sparsity &rhs)
const  "

Is subset?

";

%feature("docstring")  casadi::Sparsity::has_nz(casadi_int rr, casadi_int
cc) const  "

Returns true if the pattern has a non-zero at location rr, cc.

";

%feature("docstring")  casadi::Sparsity::transpose(std::vector< casadi_int >
&output_mapping, bool invert_mapping=false) const  "

Transpose the matrix and get the reordering of the non-zero entries.

Parameters:
-----------

mapping:  the non-zeros of the original matrix for each non-zero of the new
matrix

";

%feature("docstring") casadi::casadi_transpose "

Transpose the matrix and get the reordering of the non-zero entries.

Parameters:
-----------

mapping:  the non-zeros of the original matrix for each non-zero of the new
matrix

";

%feature("docstring")  casadi::Sparsity::casadi_transpose "

Transpose the matrix and get the reordering of the non-zero entries.

Parameters:
-----------

mapping:  the non-zeros of the original matrix for each non-zero of the new
matrix

";

%feature("docstring")  casadi::Sparsity::pmult(const std::vector< casadi_int
> &p, bool permute_rows=true, bool permute_columns=true, bool
invert_permutation=false) const  "

Permute rows and/or columns Multiply the sparsity with a permutation matrix
from the left and/or from the right P * A * trans(P), A * trans(P) or A *
trans(P) with P defined by an index vector containing the row for each col.
As an alternative, P can be transposed (inverted).

";

%feature("docstring")  casadi::Sparsity::is_diag() const  "

Is diagonal?

";

%feature("docstring")  casadi::Sparsity::amd() const  "

Approximate minimal degree preordering Fill-reducing ordering applied to the
sparsity pattern of a linear system prior to factorization. The system must
be symmetric, for an unsymmetric matrix A, first form the square of the
pattern, A'*A.

The implementation is a modified version of cs_amd in CSparse Copyright(c)
Timothy A. Davis, 2006-2009 Licensed as a derivative work under the GNU LGPL

";

%feature("docstring")  casadi::SharedObject::class_name() const  "

Get class name.

";

%feature("docstring")  casadi::Sparsity::nnz_lower(bool strictly=false)
const  "

Number of non-zeros in the lower triangular half, i.e. the number of
elements (i, j) with j<=i.

";

%feature("docstring")  casadi::Sparsity::get_lower() const  "

Get nonzeros in lower triangular part.

";

%feature("docstring")  casadi::Sparsity::is_singular() const  "

Check whether the sparsity-pattern indicates structural singularity.

";

%feature("docstring")  casadi::Sparsity::is_dense() const  "

Is dense?

";

%feature("docstring")  casadi::Sparsity::sanity_check(bool complete=false)
const  "

[DEPRECATED] Correctness of sparsity patterns are checked during
construction

";

%feature("docstring")  casadi::Sparsity::compressed(const std::vector<
casadi_int > &v, bool order_rows=false) "

Create from a single vector containing the pattern in compressed column
storage format: The format: The first two entries are the number of rows
(nrow) and columns (ncol) The next ncol+1 entries are the column offsets
(colind). Note that the last element, colind[ncol], gives the number of
nonzeros The last colind[ncol] entries are the row indices

";

%feature("docstring")  casadi::Sparsity::uni_coloring(const Sparsity
&AT=Sparsity(), casadi_int cutoff=std::numeric_limits< casadi_int >::max())
const  "

Perform a unidirectional coloring: A greedy distance-2 coloring algorithm
(Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN)

";

%feature("docstring")  casadi::Sparsity::star_coloring(casadi_int
ordering=1, casadi_int cutoff=std::numeric_limits< casadi_int >::max())
const  "

Perform a star coloring of a symmetric matrix: A greedy distance-2 coloring
algorithm Algorithm 4.1 in What Color Is Your Jacobian? Graph Coloring for
Computing Derivatives A. H. GEBREMEDHIN, F. MANNE, A. POTHEN SIAM Rev.,
47(4), 629705 (2006)

Ordering options: None (0), largest first (1)

";

%feature("docstring")  casadi::Sparsity::density() const  "

The percentage of nonzero Equivalent to (100.0 * nnz())/numel(), but avoids
overflow.

";

%feature("docstring")  casadi::Sparsity::enlarge(casadi_int nrow, casadi_int
ncol, const std::vector< casadi_int > &rr, const std::vector< casadi_int >
&cc, bool ind1=false) "

Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

For the matrices A to B A(m, n) length(jj)=m , length(ii)=n B(nrow, ncol)

A=enlarge(m, n, ii, jj) makes sure that

B[jj, ii] == A

";

%feature("docstring")  casadi::Sparsity::compress() const  "

Compress a sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::scc(std::vector< casadi_int >
&output_index, std::vector< casadi_int > &output_offset) const  "

Find the strongly connected components of the bigraph defined by the
sparsity pattern of a square matrix.

See Direct Methods for Sparse Linear Systems by Davis (2006). Returns:
Number of components

Offset for each components (length: 1 + number of components)

Indices for each components, component i has indices index[offset[i]], ...,
index[offset[i+1]]

In the case that the matrix is symmetric, the result has a particular
interpretation: Given a symmetric matrix A and n = A.scc(p, r)

=> A[p, p] will appear block-diagonal with n blocks and with the indices of
the block boundaries to be found in r.

The implementation is a modified version of cs_scc in CSparse Copyright(c)
Timothy A. Davis, 2006-2009 Licensed as a derivative work under the GNU LGPL

";

%feature("docstring")  casadi::Sparsity::info() const  "

Obtain information about sparsity

";

%feature("docstring")  casadi::Sparsity::get_upper() const  "

Get nonzeros in upper triangular part.

";

%feature("docstring")  casadi::Sparsity::dfs(casadi_int j, casadi_int top,
std::vector< casadi_int > &INOUT, std::vector< casadi_int > &INOUT, const
std::vector< casadi_int > &pinv, std::vector< bool > &INOUT) const  "

Depth-first search on the adjacency graph of the sparsity See Direct Methods
for Sparse Linear Systems by Davis (2006).

";

%feature("docstring")  casadi::Sparsity::is_tril() const  "

Is lower triangular?

";

%feature("docstring")  casadi::Sparsity::size2() const  "

Get the number of columns.

";

%feature("docstring")  casadi::Sparsity::get_col() const  "

Get the column for each non-zero entry Together with the row-vector, this
vector gives the sparsity of the matrix in sparse triplet format, i.e. the
column and row for each non-zero elements.

";

%feature("docstring")  casadi::Sparsity::size1() const  "

Get the number of rows.

";

%feature("docstring")  casadi::Sparsity::star_coloring2(casadi_int
ordering=1, casadi_int cutoff=std::numeric_limits< casadi_int >::max())
const  "

Perform a star coloring of a symmetric matrix: A new greedy distance-2
coloring algorithm Algorithm 4.1 in NEW ACYCLIC AND STAR COLORING ALGORITHMS
WITH APPLICATION TO COMPUTING HESSIANS A. H. GEBREMEDHIN, A. TARAFDAR, F.
MANNE, A. POTHEN SIAM J. SCI. COMPUT. Vol. 29, No. 3, pp. 10421072 (2007)

Ordering options: None (0), largest first (1)

";

%feature("docstring")  casadi::Sparsity::spy(std::ostream
&stream=casadi::uout()) const  "

Print a textual representation of sparsity.

";

%feature("docstring")  casadi::Sparsity::postfix_dim() const  "

Dimension string as a postfix to a name Rules:

Dense and scalar: \"\"

0-by-0: \"[]\"

Dense column vector: \"[5]\"

Dense matrix: \"[5x10]\"

Otherwise: \"[5x10,3nz]\"

";

%feature("docstring")  casadi::Sparsity::enlargeColumns(casadi_int ncol,
const std::vector< casadi_int > &cc, bool ind1=false) "

Enlarge the matrix along the second dimension (i.e. insert columns)

";

%feature("docstring")  casadi::Sparsity::rows() const  "

Get the number of rows, Octave-style syntax.

";

%feature("docstring") casadi::Sparsity::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring")  casadi::Sparsity::size() const  "

Get the shape.

";

%feature("docstring")  casadi::Sparsity::size(casadi_int axis) const  "

Get the size along a particular dimensions.

";

%feature("docstring")  casadi::Sparsity::etree(bool ata=false) const  "

Calculate the elimination tree See Direct Methods for Sparse Linear Systems
by Davis (2006). If the parameter ata is false, the algorithm is equivalent
to MATLAB's etree(A), except that the indices are zero- based. If ata is
true, the algorithm is equivalent to MATLAB's etree(A, 'col').

The implementation is a modified version of cs_etree in CSparse Copyright(c)
Timothy A. Davis, 2006-2009 Licensed as a derivative work under the GNU LGPL

";

%feature("docstring")  casadi::Sparsity::get_nz(casadi_int rr, casadi_int
cc) const  "

Get the index of an existing non-zero element return -1 if the element does
not exist.

";

%feature("docstring")  casadi::Sparsity::get_nz(const std::vector<
casadi_int > &rr, const std::vector< casadi_int > &cc) const  "

Get a set of non-zero element return -1 if the element does not exist.

";

%feature("docstring")  casadi::Sparsity::get_nz(std::vector< casadi_int >
&INOUT) const  "

Get the nonzero index for a set of elements The index vector is used both
for input and outputs and must be sorted by increasing nonzero index, i.e.
column-wise. Elements not found in the sparsity pattern are set to -1.

";

%feature("docstring")  casadi::Sparsity::erase(const std::vector< casadi_int
> &rr, const std::vector< casadi_int > &cc, bool ind1=false) "

Erase rows and/or columns of a matrix.

";

%feature("docstring")  casadi::Sparsity::erase(const std::vector< casadi_int
> &rr, bool ind1=false) "

Erase elements of a matrix.

";

%feature("docstring")  casadi::Sparsity::bw_upper() const  "

Upper half-bandwidth.

";

%feature("docstring")  casadi::Sparsity::scalar(bool dense_scalar=true) "

Create a scalar sparsity pattern.

";

%feature("docstring")  casadi::Sparsity::nnz_upper(bool strictly=false)
const  "

Number of non-zeros in the upper triangular half, i.e. the number of
elements (i, j) with j>=i.

";


// File: classcasadi_1_1Split.xml


// File: classcasadi_1_1Sqpmethod.xml
%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::Nlpsol::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::Sqpmethod::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::Sqpmethod::codegen_qp_solve(CodeGenerator
&cg, const std::string &H, const std::string &g, const std::string &lbdz,
const std::string &ubdz, const std::string &A, const std::string &x_opt,
const std::string &dlam) const  "

[INTERNAL] ";

%feature("docstring")  casadi::OracleFunction::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the work vectors.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::Sqpmethod::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::Nlpsol::has_reverse(casadi_int nadj) const  "

[INTERNAL]  Generate a function that calculates reverse mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::Nlpsol::get_reverse(casadi_int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates reverse mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::Sqpmethod::codegen_body(CodeGenerator &g)
const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Sqpmethod "

'sqpmethod' plugin for Nlpsol

A textbook SQPMethod

>List of available options

+-----------------------+-------------+------------------------------------+
|          Id           |    Type     |            Description             |
+=======================+=============+====================================+
| beta                  | OT_DOUBLE   | Line-search parameter, restoration |
|                       |             | factor of stepsize                 |
+-----------------------+-------------+------------------------------------+
| c1                    | OT_DOUBLE   | Armijo condition, coefficient of   |
|                       |             | decrease in merit                  |
+-----------------------+-------------+------------------------------------+
| convexify_margin      | OT_DOUBLE   | When using a convexification       |
|                       |             | strategy, make sure that the       |
|                       |             | smallest eigenvalue is at least    |
|                       |             | this (default: 1e-7).              |
+-----------------------+-------------+------------------------------------+
| convexify_strategy    | OT_STRING   | NONE|regularize|eigen-reflect      |
|                       |             | |eigen-clip. Strategy to convexify |
|                       |             | the Lagrange Hessian before        |
|                       |             | passing it to the solver.          |
+-----------------------+-------------+------------------------------------+
| hess_lag              | OT_FUNCTION | Function for calculating the       |
|                       |             | Hessian of the Lagrangian          |
|                       |             | (autogenerated by default)         |
+-----------------------+-------------+------------------------------------+
| hessian_approximation | OT_STRING   | limited-memory|exact               |
+-----------------------+-------------+------------------------------------+
| jac_fg                | OT_FUNCTION | Function for calculating the       |
|                       |             | gradient of the objective and      |
|                       |             | Jacobian of the constraints        |
|                       |             | (autogenerated by default)         |
+-----------------------+-------------+------------------------------------+
| lbfgs_memory          | OT_INT      | Size of L-BFGS memory.             |
+-----------------------+-------------+------------------------------------+
| max_iter              | OT_INT      | Maximum number of SQP iterations   |
+-----------------------+-------------+------------------------------------+
| max_iter_eig          | OT_DOUBLE   | Maximum number of iterations to    |
|                       |             | compute an eigenvalue              |
|                       |             | decomposition (default: 50).       |
+-----------------------+-------------+------------------------------------+
| max_iter_ls           | OT_INT      | Maximum number of linesearch       |
|                       |             | iterations                         |
+-----------------------+-------------+------------------------------------+
| merit_memory          | OT_INT      | Size of memory to store history of |
|                       |             | merit function values              |
+-----------------------+-------------+------------------------------------+
| min_iter              | OT_INT      | Minimum number of SQP iterations   |
+-----------------------+-------------+------------------------------------+
| min_step_size         | OT_DOUBLE   | The size (inf-norm) of the step    |
|                       |             | size should not become smaller     |
|                       |             | than this.                         |
+-----------------------+-------------+------------------------------------+
| print_header          | OT_BOOL     | Print the header with problem      |
|                       |             | statistics                         |
+-----------------------+-------------+------------------------------------+
| print_iteration       | OT_BOOL     | Print the iterations               |
+-----------------------+-------------+------------------------------------+
| print_status          | OT_BOOL     | Print a status message after       |
|                       |             | solving                            |
+-----------------------+-------------+------------------------------------+
| qpsol                 | OT_STRING   | The QP solver to be used by the    |
|                       |             | SQP method [qpoases]               |
+-----------------------+-------------+------------------------------------+
| qpsol_options         | OT_DICT     | Options to be passed to the QP     |
|                       |             | solver                             |
+-----------------------+-------------+------------------------------------+
| tol_du                | OT_DOUBLE   | Stopping criterion for dual        |
|                       |             | infeasability                      |
+-----------------------+-------------+------------------------------------+
| tol_pr                | OT_DOUBLE   | Stopping criterion for primal      |
|                       |             | infeasibility                      |
+-----------------------+-------------+------------------------------------+

>List of available options

+-------------------+---------------+-------------------+------------------+
|        Id         |     Type      |    Description    |     Used in      |
+===================+===============+===================+==================+
| beta              | OT_DOUBLE     | Line-search       | casadi::Sqpmetho |
|                   |               | parameter,        | d                |
|                   |               | restoration       |                  |
|                   |               | factor of         |                  |
|                   |               | stepsize          |                  |
+-------------------+---------------+-------------------+------------------+
| bound_consistency | OT_BOOL       | Ensure that       | casadi::Nlpsol   |
|                   |               | primal-dual       |                  |
|                   |               | solution is       |                  |
|                   |               | consistent with   |                  |
|                   |               | the bounds        |                  |
+-------------------+---------------+-------------------+------------------+
| c1                | OT_DOUBLE     | Armijo condition, | casadi::Sqpmetho |
|                   |               | coefficient of    | d                |
|                   |               | decrease in merit |                  |
+-------------------+---------------+-------------------+------------------+
| calc_f            | OT_BOOL       | Calculate 'f' in  | casadi::Nlpsol   |
|                   |               | the Nlpsol base   |                  |
|                   |               | class             |                  |
+-------------------+---------------+-------------------+------------------+
| calc_g            | OT_BOOL       | Calculate 'g' in  | casadi::Nlpsol   |
|                   |               | the Nlpsol base   |                  |
|                   |               | class             |                  |
+-------------------+---------------+-------------------+------------------+
| calc_lam_p        | OT_BOOL       | Calculate 'lam_p' | casadi::Nlpsol   |
|                   |               | in the Nlpsol     |                  |
|                   |               | base class        |                  |
+-------------------+---------------+-------------------+------------------+
| calc_lam_x        | OT_BOOL       | Calculate 'lam_x' | casadi::Nlpsol   |
|                   |               | in the Nlpsol     |                  |
|                   |               | base class        |                  |
+-------------------+---------------+-------------------+------------------+
| calc_multipliers  | OT_BOOL       | Calculate         | casadi::Nlpsol   |
|                   |               | Lagrange          |                  |
|                   |               | multipliers in    |                  |
|                   |               | the Nlpsol base   |                  |
|                   |               | class             |                  |
+-------------------+---------------+-------------------+------------------+
| convexify_margin  | OT_DOUBLE     | When using a      | casadi::Sqpmetho |
|                   |               | convexification   | d                |
|                   |               | strategy, make    |                  |
|                   |               | sure that the     |                  |
|                   |               | smallest          |                  |
|                   |               | eigenvalue is at  |                  |
|                   |               | least this        |                  |
|                   |               | (default: 1e-7).  |                  |
+-------------------+---------------+-------------------+------------------+
| convexify_strateg | OT_STRING     | NONE|regularize   | casadi::Sqpmetho |
| y                 |               | |eigen-reflect    | d                |
|                   |               | |eigen-clip.      |                  |
|                   |               | Strategy to       |                  |
|                   |               | convexify the     |                  |
|                   |               | Lagrange Hessian  |                  |
|                   |               | before passing it |                  |
|                   |               | to the solver.    |                  |
+-------------------+---------------+-------------------+------------------+
| discrete          | OT_BOOLVECTOR | Indicates which   | casadi::Nlpsol   |
|                   |               | of the variables  |                  |
|                   |               | are discrete,     |                  |
|                   |               | i.e. integer-     |                  |
|                   |               | valued            |                  |
+-------------------+---------------+-------------------+------------------+
| error_on_fail     | OT_BOOL       | When the          | casadi::Nlpsol   |
|                   |               | numerical process |                  |
|                   |               | returns           |                  |
|                   |               | unsuccessfully,   |                  |
|                   |               | raise an error    |                  |
|                   |               | (default false).  |                  |
+-------------------+---------------+-------------------+------------------+
| eval_errors_fatal | OT_BOOL       | When errors occur | casadi::Nlpsol   |
|                   |               | during evaluation |                  |
|                   |               | of f,g,...,stop   |                  |
|                   |               | the iterations    |                  |
+-------------------+---------------+-------------------+------------------+
| hess_lag          | OT_FUNCTION   | Function for      | casadi::Sqpmetho |
|                   |               | calculating the   | d                |
|                   |               | Hessian of the    |                  |
|                   |               | Lagrangian        |                  |
|                   |               | (autogenerated by |                  |
|                   |               | default)          |                  |
+-------------------+---------------+-------------------+------------------+
| hessian_approxima | OT_STRING     | limited-          | casadi::Sqpmetho |
| tion              |               | memory|exact      | d                |
+-------------------+---------------+-------------------+------------------+
| ignore_check_vec  | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
|                   |               | the input shape   |                  |
|                   |               | of F will not be  |                  |
|                   |               | checked.          |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_FUNCTION   | A function that   | casadi::Nlpsol   |
| k                 |               | will be called at |                  |
|                   |               | each iteration    |                  |
|                   |               | with the solver   |                  |
|                   |               | as input. Check   |                  |
|                   |               | documentation of  |                  |
|                   |               | Callback .        |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
| k_ignore_errors   |               | errors thrown by  |                  |
|                   |               | iteration_callbac |                  |
|                   |               | k will be         |                  |
|                   |               | ignored.          |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_INT        | Only call the     | casadi::Nlpsol   |
| k_step            |               | callback function |                  |
|                   |               | every few         |                  |
|                   |               | iterations.       |                  |
+-------------------+---------------+-------------------+------------------+
| jac_fg            | OT_FUNCTION   | Function for      | casadi::Sqpmetho |
|                   |               | calculating the   | d                |
|                   |               | gradient of the   |                  |
|                   |               | objective and     |                  |
|                   |               | Jacobian of the   |                  |
|                   |               | constraints       |                  |
|                   |               | (autogenerated by |                  |
|                   |               | default)          |                  |
+-------------------+---------------+-------------------+------------------+
| lbfgs_memory      | OT_INT        | Size of L-BFGS    | casadi::Sqpmetho |
|                   |               | memory.           | d                |
+-------------------+---------------+-------------------+------------------+
| max_iter          | OT_INT        | Maximum number of | casadi::Sqpmetho |
|                   |               | SQP iterations    | d                |
+-------------------+---------------+-------------------+------------------+
| max_iter_eig      | OT_DOUBLE     | Maximum number of | casadi::Sqpmetho |
|                   |               | iterations to     | d                |
|                   |               | compute an        |                  |
|                   |               | eigenvalue        |                  |
|                   |               | decomposition     |                  |
|                   |               | (default: 50).    |                  |
+-------------------+---------------+-------------------+------------------+
| max_iter_ls       | OT_INT        | Maximum number of | casadi::Sqpmetho |
|                   |               | linesearch        | d                |
|                   |               | iterations        |                  |
+-------------------+---------------+-------------------+------------------+
| merit_memory      | OT_INT        | Size of memory to | casadi::Sqpmetho |
|                   |               | store history of  | d                |
|                   |               | merit function    |                  |
|                   |               | values            |                  |
+-------------------+---------------+-------------------+------------------+
| min_iter          | OT_INT        | Minimum number of | casadi::Sqpmetho |
|                   |               | SQP iterations    | d                |
+-------------------+---------------+-------------------+------------------+
| min_lam           | OT_DOUBLE     | Minimum allowed   | casadi::Nlpsol   |
|                   |               | multiplier value  |                  |
+-------------------+---------------+-------------------+------------------+
| min_step_size     | OT_DOUBLE     | The size (inf-    | casadi::Sqpmetho |
|                   |               | norm) of the step | d                |
|                   |               | size should not   |                  |
|                   |               | become smaller    |                  |
|                   |               | than this.        |                  |
+-------------------+---------------+-------------------+------------------+
| no_nlp_grad       | OT_BOOL       | Prevent the       | casadi::Nlpsol   |
|                   |               | creation of the   |                  |
|                   |               | 'nlp_grad'        |                  |
|                   |               | function          |                  |
+-------------------+---------------+-------------------+------------------+
| oracle_options    | OT_DICT       | Options to be     | casadi::Nlpsol   |
|                   |               | passed to the     |                  |
|                   |               | oracle function   |                  |
+-------------------+---------------+-------------------+------------------+
| print_header      | OT_BOOL       | Print the header  | casadi::Sqpmetho |
|                   |               | with problem      | d                |
|                   |               | statistics        |                  |
+-------------------+---------------+-------------------+------------------+
| print_iteration   | OT_BOOL       | Print the         | casadi::Sqpmetho |
|                   |               | iterations        | d                |
+-------------------+---------------+-------------------+------------------+
| print_status      | OT_BOOL       | Print a status    | casadi::Sqpmetho |
|                   |               | message after     | d                |
|                   |               | solving           |                  |
+-------------------+---------------+-------------------+------------------+
| qpsol             | OT_STRING     | The QP solver to  | casadi::Sqpmetho |
|                   |               | be used by the    | d                |
|                   |               | SQP method        |                  |
|                   |               | [qpoases]         |                  |
+-------------------+---------------+-------------------+------------------+
| qpsol_options     | OT_DICT       | Options to be     | casadi::Sqpmetho |
|                   |               | passed to the QP  | d                |
|                   |               | solver            |                  |
+-------------------+---------------+-------------------+------------------+
| sens_linsol       | OT_STRING     | Linear solver     | casadi::Nlpsol   |
|                   |               | used for          |                  |
|                   |               | parametric        |                  |
|                   |               | sensitivities     |                  |
|                   |               | (default 'qr').   |                  |
+-------------------+---------------+-------------------+------------------+
| sens_linsol_optio | OT_DICT       | Linear solver     | casadi::Nlpsol   |
| ns                |               | options used for  |                  |
|                   |               | parametric        |                  |
|                   |               | sensitivities.    |                  |
+-------------------+---------------+-------------------+------------------+
| tol_du            | OT_DOUBLE     | Stopping          | casadi::Sqpmetho |
|                   |               | criterion for     | d                |
|                   |               | dual              |                  |
|                   |               | infeasability     |                  |
+-------------------+---------------+-------------------+------------------+
| tol_pr            | OT_DOUBLE     | Stopping          | casadi::Sqpmetho |
|                   |               | criterion for     | d                |
|                   |               | primal            |                  |
|                   |               | infeasibility     |                  |
+-------------------+---------------+-------------------+------------------+
| verbose_init      | OT_BOOL       | Print out timing  | casadi::Nlpsol   |
|                   |               | information about |                  |
|                   |               | the different     |                  |
|                   |               | stages of         |                  |
|                   |               | initialization    |                  |
+-------------------+---------------+-------------------+------------------+
| warn_initial_boun | OT_BOOL       | Warn if the       | casadi::Nlpsol   |
| ds                |               | initial guess     |                  |
|                   |               | does not satisfy  |                  |
|                   |               | LBX and UBX       |                  |
+-------------------+---------------+-------------------+------------------+

Diagrams
--------



C++ includes: sqpmethod.hpp ";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::OracleFunction::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::Sqpmethod::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::Nlpsol::get_forward(casadi_int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates forward mode derivatives.

";

%feature("docstring")  casadi::Sqpmethod::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::Sqpmethod::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::OracleFunction::get_function() const  "

[INTERNAL]  Get list of dependency functions -1 Indicates irregularity.

";

%feature("docstring")  casadi::OracleFunction::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::OracleFunction::jit_dependencies(const
std::string &fname)  "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn, const std::string &fname, bool jit=false) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::OracleFunction::set_function(const Function
&fcn) "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring")  casadi::Nlpsol::has_forward(casadi_int nfwd) const  "

[INTERNAL]  Generate a function that calculates forward mode derivatives.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::Sqpmethod::plugin_name() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::Nlpsol::setOptionsFromFile(const std::string
&file) "

[INTERNAL]  Read options from parameter xml.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::OracleFunction::finalize()  "

[INTERNAL]  Finalize initialization.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::OracleFunction::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::Nlpsol::callback(NlpsolMemory *m) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::Sqpmethod::solve(void *mem) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::OracleFunction::expand() "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::Sqpmethod::solve_QP(SqpmethodMemory *m, const
double *H, const double *g, const double *lbdz, const double *ubdz, const
double *A, double *x_opt, double *dlam) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::Sqpmethod::codegen_declarations(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::info() const  "

[INTERNAL]  Obtain information about function

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::Nlpsol::get_default_in(casadi_int ind) const
"

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::Nlpsol::nlpsol_codegen_body(CodeGenerator &g)
const  "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::OracleFunction::create_function(const
std::string &fname, const std::vector< std::string > &s_in, const
std::vector< std::string > &s_out, const Function::AuxOut
&aux=Function::AuxOut()) "

[INTERNAL]  Create an oracle function

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::Nlpsol::getReducedHessian() "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::disp_more(std::ostream &stream) const
"

[INTERNAL]  Print description.

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::Sqpmethod::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::OracleFunction::monitored(const std::string
&name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::integer_support() const  "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::OracleFunction::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::Sqpmethod::serialize_body(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Sqpmethod::getConic() const  "

[INTERNAL]  Access Conic.

";

%feature("docstring")  casadi::Nlpsol::eval(const double **arg, double
**res, casadi_int *iw, double *w, void *mem) const final "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::Nlpsol::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::eval_sx(const SXElem **arg,
SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::Sqpmethod::print_iteration() const  "

[INTERNAL]  Print iteration header.

";

%feature("docstring")  casadi::Sqpmethod::print_iteration(casadi_int iter,
double obj, double pr_inf, double du_inf, double dx_norm, double rg,
casadi_int ls_trials, bool ls_success) const  "

[INTERNAL]  Print iteration.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::Nlpsol::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::Nlpsol::kkt() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::OracleFunction::calc_function(OracleMemory
*m, const std::string &fcn, const double *const *arg=nullptr) const  "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::Nlpsol::check_inputs(void *mem) const  "

[INTERNAL]  Check if the inputs correspond to a well-posed problem.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::Nlpsol::serialize_base_function() const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::Nlpsol::serialize_type(SerializingStream &s)
const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::Nlpsol::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::Sqpmethod::set_work(void *mem, const double
**&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::Nlpsol::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::Sqpmethod::Sqpmethod(const std::string &name,
const Function &nlp) "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::Sqpmethod::class_name() const  "

[INTERNAL]  Get type name.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Sqpmethod::~Sqpmethod "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::Nlpsol::is_a(const std::string &type, bool
recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";


// File: classcasadi_1_1Logger_1_1Stream.xml
%feature("docstring") casadi::Logger::Stream "

C++ includes: casadi_logger.hpp ";


// File: classcasadi_1_1Logger_1_1Streambuf.xml
%feature("docstring") casadi::Logger::Streambuf "

C++ includes: casadi_logger.hpp ";


// File: classcasadi_1_1StringDeserializer.xml
%feature("docstring") casadi::StringDeserializer "

C++ includes: serializer.hpp ";

%feature("docstring") casadi::StringDeserializer::StringDeserializer(const
std::string &string) "

Advanced deserialization of CasADi objects.

StringDeserializer

";

%feature("docstring")  casadi::StringDeserializer::decode(const std::string
&string) "

Sets the string to deserialize objects from.

";


// File: classcasadi_1_1StringSerializer.xml
%feature("docstring")  casadi::StringSerializer::encode() "

Returns a string that holds the serialized objects.

As a side effect, this method clears the internal buffer

";

%feature("docstring") casadi::StringSerializer "

C++ includes: serializer.hpp ";


// File: classcasadi_1_1SubAssign.xml


// File: classcasadi_1_1SubIndex.xml
%feature("docstring") casadi::SubIndex "

SubIndex class for Matrix Same as the above class but for single argument
return for operator() Joel Andersson

C++ includes: submatrix.hpp ";

%feature("docstring") casadi::SubIndex< M, I >::SubIndex(M &mat, const I &i)
"

Constructor.

";


// File: classcasadi_1_1SubMatrix.xml
%feature("docstring") casadi::SubMatrix "

SubMatrix class for Matrix SubMatrix is the return type for operator() of
the Matrix class, it allows access to the value as well as changing the
parent object Joel Andersson

C++ includes: submatrix.hpp ";

%feature("docstring") casadi::SubMatrix< M, I, J >::SubMatrix(M &mat, const
I &i, const J &j) "

Constructor.

";


// File: classcasadi_1_1SubRef.xml


// File: classcasadi_1_1Switch.xml
%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::Switch::disp_more(std::ostream &stream) const
"

[INTERNAL]  Print description.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::Switch::eval(const double **arg, double
**res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically, work vectors given.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::Switch::get_forward(casadi_int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::is_a(const std::string
&type, bool recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::get_name_in(casadi_int i) "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::Switch::serialize_body(SerializingStream &s)
const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::Switch::has_forward(casadi_int nfwd) const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::ProtoFunction::serialize_base_function()
const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::Switch::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Switch::~Switch "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::Switch::info() const  "

[INTERNAL]  Obtain information about node

";

%feature("docstring")  casadi::FunctionInternal::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::Switch::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::Switch::codegen_body(CodeGenerator &g) const
"

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::get_name_out(casadi_int i)
"

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::ProtoFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::FunctionInternal::get_default_in(casadi_int
ind) const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sp_forward(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::Switch::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::Switch::codegen_declarations(CodeGenerator
&g) const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring")
casadi::FunctionInternal::serialize_type(SerializingStream &s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::Switch::class_name() const  "

[INTERNAL]  Get type name.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::FunctionInternal::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::Switch::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_function(const
std::string &name) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::Switch::eval_sx(const SXElem **arg, SXElem
**res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  evaluate symbolically while also propagating directional
derivatives

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::Switch::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Switch::Switch(const std::string &name, const
std::vector< Function > &f, const Function &f_def) "

[INTERNAL]  Constructor (generic switch)

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::Switch::has_reverse(casadi_int nadj) const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Switch "

[INTERNAL]   Switch statement Joel Andersson

C++ includes: switch.hpp ";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::Switch::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::finalize()  "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::sp_reverse(bvec_t **arg,
bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::has_function(const
std::string &fname) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::Switch::get_reverse(casadi_int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";


// File: classcasadi_1_1SXFunction.xml


// File: classcasadi_1_1SymbolicMX.xml


// File: classcasadi_1_1SymbolicQr.xml
%feature("docstring")  casadi::ProtoFunction::serialize_base_function()
const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::LinsolInternal::neig(void *mem, const double
*A) const  "

[INTERNAL]  Number of negative eigenvalues.

";

%feature("docstring")  casadi::SymbolicQr::class_name() const  "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::SymbolicQr::SymbolicQr(const std::string
&name, const Sparsity &sp) "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::SymbolicQr::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::SymbolicQr::linsol_eval_sx(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem, bool tr,
casadi_int nrhs) const  "

[INTERNAL]  Evaluate symbolically (SX)

";

%feature("docstring") casadi::SymbolicQr::~SymbolicQr "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::rank(void *mem, const double
*A) const  "

[INTERNAL]   Matrix rank.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::ProtoFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::LinsolInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::LinsolInternal::nrow() const  "

[INTERNAL]  Get sparsity pattern.

";

%feature("docstring") casadi::SymbolicQr "

'symbolicqr' plugin for Linsol

Linear solver for sparse least-squares problems Inspired
fromhttps://github.com/scipy/scipy/blob/v0.14.0/scipy/sparse/linalg/isolve/lsqr.py#L96

Linsol based on QR factorization with sparsity pattern based reordering
without partial pivoting

>List of available options

+-------+---------+----------------------------------------------------+
|  Id   |  Type   |                    Description                     |
+=======+=========+====================================================+
| fopts | OT_DICT | Options to be passed to generated function objects |
+-------+---------+----------------------------------------------------+

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| fopts            | OT_DICT         | Options to be    | casadi::Symbolic |
|                  |                 | passed to        | Qr               |
|                  |                 | generated        |                  |
|                  |                 | function objects |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: symbolic_qr.hpp ";

%feature("docstring")  casadi::LinsolInternal::nnz() const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::LinsolInternal::ncol() const  "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::generate(CodeGenerator &g,
const std::string &A, const std::string &x, casadi_int nrhs, bool tr) const
"

[INTERNAL]  Generate C code.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::SymbolicQr::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::SymbolicQr::serialize_body(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")  casadi::SymbolicQr::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::SymbolicQr::plugin_name() const  "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::ProtoFunction::finalize() "

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::SymbolicQr::solve(void *mem, const double *A,
double *x, casadi_int nrhs, bool tr) const  "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::SymbolicQr::nfact(void *mem, const double *A)
const  "

[INTERNAL]  Numeric factorization.

";

%feature("docstring")  casadi::LinsolInternal::sfact(void *mem, const double
*A) const  "

[INTERNAL] ";

%feature("docstring")  casadi::LinsolInternal::row() const  "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::SymbolicQr::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")
casadi::LinsolInternal::serialize_type(SerializingStream &s) const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::LinsolInternal::colind() const  "

[INTERNAL] ";

%feature("docstring")  casadi::SymbolicQr::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";


// File: classcasadi_1_1SymbolicSX.xml


// File: classcasadi_1_1ThreadMap.xml
%feature("docstring")  casadi::FunctionInternal::symbolicAdjSeed(casadi_int
nadj, const std::vector< MatType > &v) const  "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring")  casadi::ProtoFunction::serialize(SerializingStream
&s) const  "

[INTERNAL]  Serialize an object.

";

%feature("docstring")  casadi::ThreadMap::class_name() const  "

[INTERNAL]  Get type name.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityGen(casadi_int iind, casadi_int
oind, bool symmetric, casadi_int gr_i=1, casadi_int gr_o=1) const  "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")  casadi::FunctionInternal::self() const  "

[INTERNAL]  Get a public class instance.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_in(casadi_int ind)
const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::Map::get_sparsity_in(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_jac(casadi_int
iind, casadi_int oind, bool compact, bool symmetric) const  "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring")  casadi::FunctionInternal::project_res(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::ProtoFunction::construct(const Dict &opts) "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring")  casadi::FunctionInternal::finalize()  "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring")  casadi::FunctionInternal::jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::sx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::tocache(const Function &f,
const std::string &suffix="") const  "

[INTERNAL]  Save function to cache.

";

%feature("docstring")  casadi::FunctionInternal::disp(std::ostream &stream,
bool more) const  "

[INTERNAL]  Display object.

";

%feature("docstring")  casadi::FunctionInternal::sz_arg() const  "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring")  casadi::Map::serialize_body(SerializingStream &s)
const  "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring")
casadi::FunctionInternal::codegen_init_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring")  casadi::FunctionInternal::mapsum_mx(const
std::vector< MX > &arg, const std::string &parallelization) "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring")  casadi::FunctionInternal::check_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::size2_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::replace_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::ThreadMap::ThreadMap(const std::string &name,
const Function &f, casadi_int n) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::generate_out(const
std::string &fname, double **res) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::eval_mx(const MXVector
&arg, MXVector &res, bool always_inline, bool never_inline) const  "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")  casadi::FunctionInternal::free_sx() const  "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring")  casadi::FunctionInternal::dm_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::size_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FunctionInternal::instruction_input(casadi_int k) const  "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::signature(const std::string
&fname) const  "

[INTERNAL]  Code generate the function.

";

%feature("docstring")
casadi::FunctionInternal::codegen_incref(CodeGenerator &g) const  "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")  casadi::ProtoFunction::checkout() const  "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian(const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::eval_dm(const std::vector<
DM > &arg) const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")
casadi::FunctionInternal::print_dimensions(std::ostream &stream) const  "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const double
**arg, double **res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const SXElem
**arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::eval_gen(const bvec_t
**arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Evaluate a function, overloaded.

";

%feature("docstring")  casadi::Map::eval_gen(const T **arg, T **res,
casadi_int *iw, T *w, int mem=0) const  "

[INTERNAL]  Evaluate or propagate sparsities.

";

%feature("docstring")  casadi::FunctionInternal::get_partition(casadi_int
iind, casadi_int oind, Sparsity &D1, Sparsity &D2, bool compact, bool
symmetric, bool allow_forward, bool allow_reverse) const  "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring")  casadi::FunctionInternal::alloc(const Function &f,
bool persistent=false) "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring")  casadi::ProtoFunction::memory(int ind) const  "

[INTERNAL]  Memory objects.

";

%feature("docstring")  casadi::FunctionInternal::set_temp(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::get_options() const  "

[INTERNAL]  Options.

";

%feature("docstring")  casadi::FunctionInternal::get_max_in(casadi_int ind)
const  "

[INTERNAL]  Get largest input value.

";

%feature("docstring")  casadi::FunctionInternal::wrap_as_needed(const Dict
&opts) const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::Map::info() const  "

[INTERNAL]  Obtain information about node

";

%feature("docstring")  casadi::FunctionInternal::jacobian() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::get_free() const  "

[INTERNAL]  Print free variables.

";

%feature("docstring")  casadi::ThreadMap::parallelization() const  "

[INTERNAL]  Type of parallellization.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const MXVector
&arg, MXVector &res, casadi_int npar, bool always_inline, bool never_inline)
const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::call_gen(const std::vector<
MatrixCommon > &arg, std::vector< MatrixCommon > &res, casadi_int npar, bool
always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")  casadi::FunctionInternal::check_res(const
std::vector< M > &res, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::alloc_iw(size_t sz_iw, bool
persistent=false) "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring")  casadi::Map::get_name_out(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::matching_res(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::Map::has_forward(casadi_int nfwd) const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::FunctionInternal::which_depends(const
std::string &s_in, const std::vector< std::string > &s_out, casadi_int
order, bool tr=false) const  "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring")  casadi::FunctionInternal::sz_res() const  "

[INTERNAL]  Get required length of res field.

";

%feature("docstring")
casadi::FunctionInternal::instruction_output(casadi_int k) const  "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring")  casadi::ProtoFunction::alloc_mem() const  "

[INTERNAL]  Create memory block.

";

%feature("docstring")  casadi::FunctionInternal::reverse(casadi_int nadj)
const  "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring")  casadi::ThreadMap::init(const Dict &opts)  "

[INTERNAL]  Initialize.

";

%feature("docstring")  casadi::Map::has_reverse(casadi_int nadj) const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M >> &aseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 reverse seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_aseed(const
std::vector< std::vector< M > > &aseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::SharedObjectInternal::getCount() const  "

[INTERNAL]  Get the reference count.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::Map::get_forward(casadi_int nfwd, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring")  casadi::Map::eval_sx(const SXElem **arg, SXElem
**res, casadi_int *iw, SXElem *w, void *mem) const  "

[INTERNAL]  evaluate symbolically while also propagating directional
derivatives

";

%feature("docstring")  casadi::FunctionInternal::is_diff_out(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::project_arg(const
std::vector< M > &arg, casadi_int npar) const  "

[INTERNAL]   Project sparsities.

";

%feature("docstring")  casadi::Map::has_spfwd() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::Map::codegen_declarations(CodeGenerator &g)
const  "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring")  casadi::Map::get_name_in(casadi_int i)  "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")  casadi::FunctionInternal::call(const std::vector< M >
&arg, std::vector< M > &res, bool always_inline, bool never_inline) const  "

[INTERNAL]   Call a function, templated.

";

%feature("docstring")  casadi::FunctionInternal::map(casadi_int n, const
std::string &parallelization) const  "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring")  casadi::FunctionInternal::has_free() const  "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring")  casadi::Map::get_reverse(casadi_int nadj, const
std::string &name, const std::vector< std::string > &inames, const
std::vector< std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring")  casadi::Map::sp_forward(const bvec_t **arg, bvec_t
**res, casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring")  casadi::Map::serialize_type(SerializingStream &s)
const  "

[INTERNAL]  Serialize type information.

";

%feature("docstring")  casadi::FunctionInternal::sx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::sx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::get_min_in(casadi_int ind)
const  "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")  casadi::FunctionInternal::has_eval_dm() const  "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring")  casadi::Map::get_sparsity_out(casadi_int i)  "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")  casadi::ProtoFunction::format_time(char *buffer,
double time) const  "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring")  casadi::FunctionInternal::codegen_meta(CodeGenerator
&g) const  "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring")  casadi::FunctionInternal::all_scalar() const  "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring")  casadi::FunctionInternal::fwdViaJac(casadi_int nfwd)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::generate_lifted(Function
&vdef_fcn, Function &vinit_fcn) const  "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring")  casadi::ThreadMap::eval(const double **arg, double
**res, casadi_int *iw, double *w, void *mem) const  "

[INTERNAL]  Evaluate the function numerically.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const
std::vector< M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_arg(const std::map<
std::string, M > &arg) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::Map::has_sprev() const  "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring")  casadi::FunctionInternal::get_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::ProtoFunction::print_time(const std::map<
std::string, FStats > &fstats) const  "

[INTERNAL]  Print timing statistics.

";

%feature("docstring")  casadi::FunctionInternal::size2_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::instructions_sx() const  "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring")  casadi::FunctionInternal::nnz_in() const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nnz_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring")  casadi::Map::sp_reverse(bvec_t **arg, bvec_t **res,
casadi_int *iw, bvec_t *w, void *mem) const  "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring")  casadi::FunctionInternal::export_code(const
std::string &lang, std::ostream &stream, const Dict &options) const  "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring")  casadi::FunctionInternal::instruction_id(casadi_int
k) const  "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring")  casadi::FunctionInternal::wrap() const  "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring")  casadi::FunctionInternal::slice(const std::string
&name, const std::vector< casadi_int > &order_in, const std::vector<
casadi_int > &order_out, const Dict &opts) const  "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &fseed, std::vector< std::vector< MX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::call_forward(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &fseed, std::vector< std::vector< SX > > &fsens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem(CodeGenerator
&g, const std::string &index="mem") const  "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring")  casadi::FunctionInternal::index_out(const std::string
&name) const  "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring")  casadi::ThreadMap::is_a(const std::string &type, bool
recursive) const  "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring")  casadi::ThreadMap::codegen_body(CodeGenerator &g)
const  "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring")  casadi::Map::get_function() const  "

[INTERNAL] ";

%feature("docstring")  casadi::Map::get_function(const std::string &name)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::mx_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
DM > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_out(const std::vector<
double > &res) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::sz_iw() const  "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchicalSymm(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring")  casadi::FunctionInternal::incache(const std::string
&fname, Function &f, const std::string &suffix="") const  "

[INTERNAL]  Get function in cache.

";

%feature("docstring")  casadi::FunctionInternal::n_instructions() const  "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring")  casadi::ProtoFunction::get_stats(void *mem) const  "

[INTERNAL]  Get all statistics.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const
std::vector< M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")  casadi::FunctionInternal::convert_res(const std::map<
std::string, M > &res) const  "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring")
casadi::FunctionInternal::getJacSparsityHierarchical(casadi_int iind,
casadi_int oind) const  "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring")  casadi::FunctionInternal::codegen(CodeGenerator &g,
const std::string &fname) const  "

[INTERNAL]  Generate code the function.

";

%feature("docstring")  casadi::FunctionInternal::sparsity_out(casadi_int
ind) const  "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring")  casadi::FunctionInternal::has_jacobian_sparsity()
const  "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")  casadi::FunctionInternal::get_abstol() const  "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring")  casadi::FunctionInternal::alloc_w(size_t sz_w, bool
persistent=false) "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< MX > &arg, const std::vector< MX > &res, const std::vector<
std::vector< MX > > &aseed, std::vector< std::vector< MX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::FunctionInternal::call_reverse(const
std::vector< SX > &arg, const std::vector< SX > &res, const std::vector<
std::vector< SX > > &aseed, std::vector< std::vector< SX > > &asens, bool
always_inline, bool never_inline) const  "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring")  casadi::SharedObjectInternal::weak() "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring")  casadi::FunctionInternal::ad_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring")  casadi::FunctionInternal::codegen_mem_type() const  "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring")  casadi::Map::get_n_in()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::FunctionInternal::disp_more(std::ostream
&stream) const  "

[INTERNAL]  Print more.

";

%feature("docstring")  casadi::FunctionInternal::size1_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::fwd_seed(casadi_int nfwd)
const  "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector< DM
> &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::nz_in(const std::vector<
double > &arg) const  "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring")  casadi::FunctionInternal::definition() const  "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring")  casadi::FunctionInternal::getJacSparsity(casadi_int
iind, casadi_int oind, bool symmetric) const  "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::ThreadMap::~ThreadMap "

[INTERNAL]  Destructor.

";

%feature("docstring")  casadi::ProtoFunction::init_mem(void *mem) const  "

[INTERNAL]  Initalize memory block.

";

%feature("docstring")  casadi::FunctionInternal::codegen_name(const
CodeGenerator &g, bool ns=true) const  "

[INTERNAL]  Get name in codegen.

";

%feature("docstring")  casadi::FunctionInternal::set_work(void *mem, const
double **&arg, double **&res, casadi_int *&iw, double *&w) const  "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::numel_out(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_out() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::dm_in(casadi_int ind) const
"

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::dm_in() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::codegen_decref(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")  casadi::FunctionInternal::generate_options(bool
is_temp=false) const  "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring")  casadi::FunctionInternal::size1_out(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::mx_out(casadi_int ind)
const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")  casadi::FunctionInternal::mx_out() const  "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::FunctionInternal::instruction_constant(casadi_int k) const  "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring")  casadi::FunctionInternal::index_in(const std::string
&name) const  "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring")  casadi::FunctionInternal::size_in(casadi_int ind)
const  "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M >> &fseed, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 forward seeds.

";

%feature("docstring")  casadi::FunctionInternal::replace_fseed(const
std::vector< std::vector< M > > &fseed, casadi_int npar) const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::get_reltol() const  "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring")  casadi::Map::get_default_in(casadi_int ind) const  "

[INTERNAL]  Get default input value.

";

%feature("docstring")  casadi::FunctionInternal::matching_arg(const
std::vector< M > &arg, casadi_int &npar) const  "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring")  casadi::FunctionInternal::getAdaptorSolverName()
const  "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring")  casadi::FunctionInternal::has_jac() const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::forward(casadi_int nfwd)
const  "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring")  casadi::FunctionInternal::has_derivative() const  "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring")  casadi::FunctionInternal::get_jac(const std::string
&name, const std::vector< std::string > &inames, const std::vector<
std::string > &onames, const Dict &opts) const  "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring")  casadi::FunctionInternal::print_options(std::ostream
&stream) const  "

[INTERNAL]  Print list of options.

";

%feature("docstring")  casadi::FunctionInternal::generate_in(const
std::string &fname, const double **arg) const  "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring")  casadi::ProtoFunction::free_mem(void *mem) const  "

[INTERNAL]  Free memory block.

";

%feature("docstring")  casadi::FunctionInternal::free_mx() const  "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring")  casadi::Map::get_n_out()  "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring")  casadi::ProtoFunction::sprint(char *buf, size_t
buf_sz, const char *fmt,...) const  "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring")  casadi::FunctionInternal::jacobian_sparsity() const
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")
casadi::FunctionInternal::codegen_alloc_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring")  casadi::Map::has_codegen() const  "

[INTERNAL]  Is codegen supported?

";

%feature("docstring")  casadi::FunctionInternal::numel_in() const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::numel_in(casadi_int ind)
const  "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring")  casadi::FunctionInternal::n_nodes() const  "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring")  casadi::FunctionInternal::replace_res(const
std::vector< M > &res, casadi_int npar) const  "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring")  casadi::ProtoFunction::clear_mem() "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring")  casadi::FunctionInternal::sz_w() const  "

[INTERNAL]  Get required length of w field.

";

%feature("docstring")  casadi::Map::has_function(const std::string &fname)
const  "

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::adjViaJac(casadi_int nadj)
const  "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")  casadi::FunctionInternal::is_diff_in(casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::ProtoFunction::release(int mem) const  "

[INTERNAL]  Release a memory object.

";

%feature("docstring")  casadi::Map::serialize_base_function() const  "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")  casadi::ProtoFunction::print(const char *fmt,...)
const  "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring")  casadi::FunctionInternal::alloc_arg(size_t sz_arg,
bool persistent=false) "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring")  casadi::FunctionInternal::uses_output() const  "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring")  casadi::FunctionInternal::factory(const std::string
&name, const std::vector< std::string > &s_in, const std::vector<
std::string > &s_out, const Function::AuxOut &aux, const Dict &opts) const
"

[INTERNAL] ";

%feature("docstring")  casadi::FunctionInternal::sz_work(size_t &sz_arg,
size_t &sz_res, size_t &sz_iw, size_t &sz_w) const  "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring")  casadi::FunctionInternal::instruction_MX(casadi_int
k) const  "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring")  casadi::FunctionInternal::alloc_res(size_t sz_res,
bool persistent=false) "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring")  casadi::FunctionInternal::print_option(const
std::string &name, std::ostream &stream) const  "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring")
casadi::FunctionInternal::codegen_free_mem(CodeGenerator &g) const  "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring")  casadi::FunctionInternal::check_mat(const Sparsity
&arg, const Sparsity &inp, casadi_int &npar) "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring")  casadi::FunctionInternal::oracle() const  "

[INTERNAL]  Get oracle.

";

%feature("docstring")  casadi::FunctionInternal::symbolic_output(const
std::vector< MX > &arg) const  "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring")  casadi::FunctionInternal::setup(void *mem, const
double **arg, double **res, casadi_int *iw, double *w) const  "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring")  casadi::FunctionInternal::generate_dependencies(const
std::string &fname, const Dict &opts) const  "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring")  casadi::FunctionInternal::sp_weight() const  "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::ThreadMap "

[INTERNAL]  A map Evaluate in parallel using std::thread Note: Do not use
this class with much more than the intended number of threads for the
parallel evaluation as it will cause excessive memory use.

Joris Gillis

C++ includes: map.hpp ";

%feature("docstring")
casadi::FunctionInternal::jacobian_sparsity_filter(const Sparsity &sp) const
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring")
casadi::FunctionInternal::codegen_sparsities(CodeGenerator &g) const  "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring")  casadi::FunctionInternal::jit_dependencies(const
std::string &fname) "

[INTERNAL]  Jit dependencies.

";


// File: classcasadi_1_1Transpose.xml


// File: classcasadi_1_1UnaryMX.xml


// File: classcasadi_1_1UnarySX.xml


// File: classcasadi_1_1Vertcat.xml


// File: classcasadi_1_1Vertsplit.xml


// File: classcasadi_1_1WeakRef.xml
%feature("docstring") casadi::WeakRef "

Weak reference type A weak reference to a SharedObject.

Joel Andersson

C++ includes: shared_object.hpp ";

%feature("docstring")  casadi::WeakRef::shared() "

Get a shared (owning) reference.

";

%feature("docstring") casadi::casadi_shared "

Get a shared (owning) reference.

";

%feature("docstring")  casadi::WeakRef::casadi_shared "

Get a shared (owning) reference.

";

%feature("docstring") casadi::WeakRef::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::SharedObject::print_ptr(std::ostream
&stream=casadi::uout()) const  "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring") casadi::WeakRef::WeakRef(int dummy=0) "

Default constructor.

";

%feature("docstring") casadi::WeakRef::WeakRef(SharedObject shared) "

Construct from a shared object (also implicit type conversion)

";

%feature("docstring")  casadi::SharedObject::disp(std::ostream &stream, bool
more=false) const  "

Print a description of the object.

";

%feature("docstring")  casadi::SharedObject::get_str(bool more=false) const
"

Get string representation.

";

%feature("docstring")  casadi::SharedObject::class_name() const  "

Get class name.

";

%feature("docstring")  casadi::WeakRef::alive() const  "

Check if alive.

";


// File: classcasadi_1_1XFunction.xml


// File: classcasadi_1_1XmlFile.xml
%feature("docstring") casadi::XmlFile "

XML parser Can be used for parsing XML files into CasADi data structures.

Joel Andersson

C++ includes: xml_file.hpp ";

%feature("docstring")  casadi::SharedObject::get_str(bool more=false) const
"

Get string representation.

";

%feature("docstring") casadi::XmlFile::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring")  casadi::SharedObject::class_name() const  "

Get class name.

";

%feature("docstring")  casadi::SharedObject::is_null() const  "

Is a null pointer?

";

%feature("docstring")  casadi::SharedObject::disp(std::ostream &stream, bool
more=false) const  "

Print a description of the object.

";

%feature("docstring")  casadi::SharedObject::print_ptr(std::ostream
&stream=casadi::uout()) const  "

[INTERNAL]  Print the pointer to the internal class

";


// File: classcasadi_1_1ZeroByZero.xml


// File: classcasadi_1_1ZeroSX.xml


// File: namespaceBonmin.xml


// File: namespacecasadi.xml
%feature("docstring")  casadi::is_nondecreasing(const std::vector< T > &v) "
Check if the vector is non-decreasing.

";

%feature("docstring")  casadi::matrixName< double >() "

Get typename.

";

%feature("docstring")  casadi::complement(const std::vector< casadi_int >
&v, casadi_int size) "

Returns the list of all i in [0, size[ not found in supplied list.

The supplied vector may contain duplicates and may be non-monotonous The
supplied vector will be checked for bounds The result vector is guaranteed
to be monotonously increasing

";

%feature("docstring")  casadi::conic_option_type(const std::string &name,
const std::string &op) "

Get type info for a particular option.

";

%feature("docstring")
casadi::casadi_ipqp_predictor_prepare(casadi_ipqp_data< T1 > *d) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_qp_pr_index(casadi_qp_data< T1 > *d) "

[INTERNAL] ";

%feature("docstring")  casadi::load_expm(const std::string &name) "

Explicitly load a plugin dynamically.

";

%feature("docstring")  casadi::casadi_rank1(T1 *A, const casadi_int *sp_A,
T1 alpha, const T1 *x) "

[INTERNAL]  Adds a multiple alpha/2 of the outer product mul(x, trans(x)) to
A.

";

%feature("docstring")  casadi::casadi_rank1(T1 *A, const casadi_int *sp_A,
T1 alpha, const T1 *x, const T1 *y) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_nlpsol_work(const casadi_nlpsol_prob<
T1 > *p, casadi_int *sz_iw, casadi_int *sz_w) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_cvx_house_apply(casadi_int n,
casadi_int m, casadi_int s, T1 *A, T1 *p, const T1 *v) "

[INTERNAL]  Apply householder transform on dense A m-by-n matrix

A is modified in-place

s : stride normally equal to m when A is a submatrix of a bigger matrix, set
equal to latter's number of rows v : compact housholder factorisation
(length m) First element (always one) is used to store beta p : length n

";

%feature("docstring")  casadi::casadi_qp_kkt_residual(casadi_qp_data< T1 >
*d, T1 *r) "

[INTERNAL] ";

%feature("docstring")  casadi::detect_simple_bounds(const SX &xX, const SX
&p, const SX &g, const SX &lbg, const SX &ubg, std::vector< casadi_int >
&output_gi, SX &output_lbx, SX &output_ubx, Function &output_lam_forward,
Function &output_lam_backward) "

Detect simple bounds from general constraints.

Given parametric constraints:

::

  *   subject to lbg(p) <= g(x,p) <= ubg(p)
  * 



Returns an equivalent set

::

  *   subject to  lbg(p)(gi) <= g(x,p)(gi) <= ubg(p)(gi)
  *               lbx(p) <= x                 <= ubx(p)
  * 



Parameters:
-----------

lam_forward:  (lam_g,p)->(lam_sg,lam_x)

lam_backward:  (lam_sg,lam_x,p)->(lam_g)

";

%feature("docstring")  casadi::detect_simple_bounds(const MX &xX, const MX
&p, const MX &g, const MX &lbg, const MX &ubg, std::vector< casadi_int >
&output_gi, MX &output_lbx, MX &output_ubx, Function &output_lam_forward,
Function &output_lam_backward) "

Detect simple bounds from general constraints.

Given parametric constraints:

::

  *   subject to lbg(p) <= g(x,p) <= ubg(p)
  * 



Returns an equivalent set

::

  *   subject to  lbg(p)(gi) <= g(x,p)(gi) <= ubg(p)(gi)
  *               lbx(p) <= x                 <= ubx(p)
  * 



Parameters:
-----------

lam_forward:  (lam_g,p)->(lam_sg,lam_x)

lam_backward:  (lam_sg,lam_x,p)->(lam_g)

";

%feature("docstring")  casadi::dense_mul_tn(casadi_int n, casadi_int m,
casadi_int l, const double *A, const double *B, double *C) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_ipqp_residual(casadi_ipqp_data< T1 >
*d) "

[INTERNAL] ";

%feature("docstring")  casadi::dense_mul_nn_stride(casadi_int n, casadi_int
m, casadi_int l, const double *A, const double *B, double *C, casadi_int
strideA, casadi_int strideB, casadi_int strideC) "

[INTERNAL] ";

%feature("docstring")  casadi::dple_out() "

Get output scheme of DPLE solvers.

";

%feature("docstring")  casadi::dple_out(casadi_int ind) "

Get DPLE output scheme name by index.

";

%feature("docstring")  casadi::casadi_norm_1(casadi_int n, const T1 *x) "

[INTERNAL]  NORM_1: ||x||_1 -> return.

";

%feature("docstring")  casadi::expmsol(const std::string &name, const
std::string &solver, const Sparsity &A, const Dict &opts=Dict()) "

Performs a matrix exponentiation expm(A)

General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| const_A          | OT_BOOL         | Assume A is      | casadi::Expm     |
|                  |                 | constant.        |                  |
|                  |                 | Default: false.  |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

List of plugins
===============



- slicot

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Expm.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

slicot
------





--------------------------------------------------------------------------------



Joris Gillis

";

%feature("docstring")  casadi::casadi_qp_du(casadi_qp_data< T1 > *d) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_mtimes(const T1 *x, const casadi_int
*sp_x, const T1 *y, const casadi_int *sp_y, T1 *z, const casadi_int *sp_z,
T1 *w, casadi_int tr) "

[INTERNAL]  Sparse matrix-matrix multiplication: z <- z + x*y.

";

%feature("docstring")  casadi::casadi_interpn_weights(casadi_int ndim, const
T1 *grid, const casadi_int *offset, const T1 *x, T1 *alpha, casadi_int
*index) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_interpn_weights(casadi_int ndim, const
T1 *grid, const casadi_int *offset, const T1 *x, T1 *alpha, casadi_int
*index, const casadi_int *lookup_mode) "

[INTERNAL] ";

%feature("docstring")  casadi::integrator_n_out() "

Get the number of integrator outputs.

";

%feature("docstring")  casadi::casadi_mmax(const T1 *x, casadi_int n, T1
is_dense) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_mmax(const T1 *x, casadi_int n,
casadi_int is_dense) "

[INTERNAL] ";

%feature("docstring")  casadi::slicot_periodic_schur(casadi_int n,
casadi_int K, const double *a, double *t, double *z, double *dwork, double
*eig_real, double *eig_imag, double num_zero=0) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_qp_prepare(casadi_qp_data< T1 > *d) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_cvx_scalar(T1 epsilon, casadi_int
reflect, T1 eig) "

[INTERNAL] ";

%feature("docstring")  casadi::external(const std::string &name, const Dict
&opts=Dict()) "

Load an external function from a shared library.

Parameters:
-----------

name:  Name as in the label assigned to a CasADi Function object:
Function(name,...,...) Will be used to look up symbols/functions named eg.
<name>_eval Use nm (linux/osx) or depends.exe (win) to check which symbols
are present in your shared library

File name is assumed to be ./<name>.so

";

%feature("docstring")  casadi::external(const std::string &name, const
std::string &bin_name, const Dict &opts=Dict()) "

Load an external function from a shared library.

Parameters:
-----------

name:  Name as in the label assigned to a CasADi Function object:
Function(name,...,...) Will be used to look up symbols/functions named eg.
<name>_eval Use nm (linux/osx) or depends.exe (win) to check which symbols
are present in your shared library

bin_name:  File name of the shared library

";

%feature("docstring")  casadi::external(const std::string &name, const
Importer &li, const Dict &opts=Dict()) "

Load a just-in-time compiled external function File name given.

";

%feature("docstring")  casadi::nlpsol_n_out() "

Number of NLP solver outputs.

";

%feature("docstring")  casadi::casadi_bfgs_reset(const casadi_int *sp_h, T1
*h) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_qp_print_colcomb(casadi_qp_data< T1 >
*d, char *buf, size_t buf_sz, casadi_int j) "

[INTERNAL] ";

%feature("docstring")  casadi::collocation_coeff(const std::vector< double >
&tau, DM &output_C, DM &output_D, DM &output_B) "

Obtain collocation interpolating matrices.

A collocation method poses a polynomial Pi that interpolates exactly through
an initial state (0,X_0) and helper states at collocation points
(tau_j,Xc_j) with j=1..degree.

This function computes the linear mapping between dPi/dt and coefficients
Z=[X_0 Xc].

Parameters:
-----------

tau:  location of collocation points (length: degree), as obtained from
collocation_points

C:  interpolating coefficients to obtain derivatives. Size: (degree+1)-by-
degree

You may find the slopes of Pi at the collocation points as

::

dPi/dt @ Xc = (1/h) Z*C,



with h the length of the integration interval.

Parameters:
-----------

D:  interpolating coefficients to obtain end state. Size: (degree+1)-by-1

You may find the end point of Pi as

::

Pi @X_f = Z*D



Parameters:
-----------

B:  quadrature coefficients Size: degree-by-1

Given quadrature righ-hand-sides 'quad' evaluated at the collocation points,
you may find the integrated quadratures as

::

q = quad*B*h



";

%feature("docstring")  casadi::casadi_ipqp_step(casadi_ipqp_data< T1 > *d,
T1 alpha_pr, T1 alpha_du) "

[INTERNAL] ";

%feature("docstring")  casadi::in_range(const std::vector< T > &v,
casadi_int upper) "

Check if for each element of v holds: v_i < upper.

";

%feature("docstring")  casadi::in_range(const std::vector< T > &v,
casadi_int lower, casadi_int upper) "

Check if for each element of v holds: lower <= v_i < upper.

";

%feature("docstring")  casadi::casadi_qp_du_index(casadi_qp_data< T1 > *d) "

[INTERNAL] ";

%feature("docstring")  casadi::load_integrator(const std::string &name) "

Explicitly load a plugin dynamically.

";

%feature("docstring")  casadi::casadi_ipqp_reset(casadi_ipqp_data< T1 > *d)
"

[INTERNAL] ";

%feature("docstring")  casadi::casadi_qp_dual_blocking(casadi_qp_data< T1 >
*d) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_qp_work(const casadi_qp_prob< T1 > *p,
casadi_int *sz_iw, casadi_int *sz_w) "

[INTERNAL] ";

%feature("docstring")  casadi::expm_n_out() "

Get the number of expm solver outputs.

";

%feature("docstring")  casadi::casadi_ipqp_return_status(casadi_ipqp_flag_t
status) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_sum_viol(casadi_int n, const T1 *x,
const T1 *lb, const T1 *ub) "

[INTERNAL]  Sum of bound violations.

";

%feature("docstring")  casadi::load_nlpsol(const std::string &name) "

Explicitly load a plugin dynamically.

";

%feature("docstring")  casadi::is_increasing(const std::vector< T > &v) "

Check if the vector is strictly increasing.

";

%feature("docstring")  casadi::casadi_scal(casadi_int n, T1 alpha, T1 *x) "

[INTERNAL]  SCAL: x <- alpha*x.

";

%feature("docstring")  casadi::casadi_lsqr_solve(const T1 *A, T1 *x,
casadi_int nrhs, casadi_int tr, const casadi_int *sp, T1 *w) "

[INTERNAL] ";

%feature("docstring")  casadi::check_sos(casadi_int nx, const std::vector<
std::vector< T > > &groups, std::vector< std::vector< double > > &weights,
std::vector< casadi_int > &types) "

Check sos structure and generate defaults.

";

%feature("docstring")  casadi::casadi_ipqp_bounds(casadi_ipqp_data< T1 > *d,
const T1 *g, const T1 *lbx, const T1 *ubx, const T1 *lba, const T1 *uba) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_fill_casadi_int(casadi_int *x,
casadi_int n, casadi_int alpha) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_ipqp_init(casadi_ipqp_data< T1 > *d,
casadi_int **iw, T1 **w) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_cvx(casadi_int n, T1 *A, T1 epsilon,
T1 tol, casadi_int reflect, casadi_int max_iter, T1 *w, casadi_int *iw) "

[INTERNAL] ";

%feature("docstring")  casadi::dense_copy_stride(casadi_int n, casadi_int m,
const double *A, double *B, casadi_int strideA, casadi_int strideB) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_qp_iterate(casadi_qp_data< T1 > *d) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_qr_singular(T1 *rmin, casadi_int
*irmin, const T1 *nz_r, const casadi_int *sp_r, const casadi_int *pc, T1
eps) "

[INTERNAL] ";

%feature("docstring")  casadi::conic_options(const std::string &name) "

Get all options for a plugin.

";

%feature("docstring")
casadi::casadi_ipqp_corrector_prepare(casadi_ipqp_data< T1 > *d, T1 shift) "

[INTERNAL] ";

%feature("docstring")  casadi::load_linsol(const std::string &name) "

Explicitly load a plugin dynamically.

";

%feature("docstring")  casadi::casadi_interpn_grad(T1 *grad, casadi_int
ndim, const T1 *grid, const casadi_int *offset, const T1 *values, const T1
*x, casadi_int *iw, T1 *w) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_interpn_grad(T1 *grad, casadi_int
ndim, const T1 *grid, const casadi_int *offset, const T1 *values, const T1
*x, const casadi_int *lookup_mode, casadi_int m, casadi_int *iw, T1 *w) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_qp_calc_step(casadi_qp_data< T1 > *d)
"

[INTERNAL] ";

%feature("docstring")  casadi::has_interpolant(const std::string &name) "

Check if a particular plugin is available.

";

%feature("docstring")  casadi::conic_debug(const Function &f, const
std::string &filename) "

Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::conic_debug(const Function &f, std::ostream
&file) "

Generate native code in the interfaced language for debugging

";

%feature("docstring")  casadi::casadi_swap(casadi_int n, T1 *x, casadi_int
inc_x, T1 *y, casadi_int inc_y) "

[INTERNAL]  SWAP: x <-> y.

";

%feature("docstring")  casadi::casadi_qp_flip_check(casadi_qp_data< T1 > *d)
"

[INTERNAL] ";

%feature("docstring")  casadi::integrator(const std::string &name, const
std::string &solver, const SXDict &dae, const Dict &opts=Dict()) "

Create an ODE/DAE integrator Solves an initial value problem (IVP) coupled
to a terminal value problem with differential equation given as an implicit
ODE coupled to an algebraic equation and a set of quadratures:



::

  Initial conditions at t=t0
  x(t0)  = x0
  q(t0)  = 0
  
  Forward integration from t=t0 to t=tf
  der(x) = function(x, z, p, t)                  Forward ODE
  0 = fz(x, z, p, t)                  Forward algebraic equations
  der(q) = fq(x, z, p, t)                  Forward quadratures
  
  Terminal conditions at t=tf
  rx(tf)  = rx0
  rq(tf)  = 0
  
  Backward integration from t=tf to t=t0
  der(rx) = gx(rx, rz, rp, x, z, p, t)        Backward ODE
  0 = gz(rx, rz, rp, x, z, p, t)        Backward algebraic equations
  der(rq) = gq(rx, rz, rp, x, z, p, t)        Backward quadratures
  
  where we assume that both the forward and backwards integrations are index-1
  (i.e. dfz/dz, dgz/drz are invertible) and furthermore that
  gx, gz and gq have a linear dependency on rx, rz and rp.



General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::Integrat |
| s                |                 | passed down to   | or               |
|                  |                 | the augmented    |                  |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Integrat |
|                  |                 | SX expressions   | or               |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::Integrat |
|                  |                 |                  | or               |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::Integrat |
| _elements        |                 | elements         | or               |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::Integrat |
|                  |                 | at the initial   | or               |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::Integrat |
|                  |                 | statistics after | or               |
|                  |                 | integration      |                  |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::Integrat |
|                  |                 | function solver  | or               |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::Integrat |
| ns               |                 | passed to the    | or               |
|                  |                 | NLP Solver       |                  |
+------------------+-----------------+------------------+------------------+
| show_eval_warnin | OT_BOOL         | Show warnings    | casadi::OracleFu |
| gs               |                 | generated from   | nction           |
|                  |                 | function         |                  |
|                  |                 | evaluations      |                  |
|                  |                 | [true]           |                  |
+------------------+-----------------+------------------+------------------+
| simplify         | OT_BOOL         | Implement as MX  | casadi::Integrat |
|                  |                 | Function (codege | or               |
|                  |                 | neratable/serial |                  |
|                  |                 | izable) default: |                  |
|                  |                 | false            |                  |
+------------------+-----------------+------------------+------------------+
| simplify_options | OT_DICT         | Any options to   | casadi::Integrat |
|                  |                 | pass to          | or               |
|                  |                 | simplified form  |                  |
|                  |                 | Function         |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::Integrat |
|                  |                 | time horizon     | or               |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::Integrat |
|                  |                 | horizon          | or               |
+------------------+-----------------+------------------+------------------+

>Input scheme: casadi::IntegratorInput (INTEGRATOR_NUM_IN = 6)

+----------------+-------+-------------------------------------------------+
|   Full name    | Short |                   Description                   |
+================+=======+=================================================+
| INTEGRATOR_X0  | x0    | Differential state at the initial time.         |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_P   | p     | Parameters.                                     |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_Z0  | z0    | Initial guess for the algebraic variable.       |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RX0 | rx0   | Backward differential state at the final time.  |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RP  | rp    | Backward parameter vector.                      |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RZ0 | rz0   | Initial guess for the backwards algebraic       |
|                |       | variable.                                       |
+----------------+-------+-------------------------------------------------+

>Output scheme: casadi::IntegratorOutput (INTEGRATOR_NUM_OUT = 6)

+----------------+-------+-------------------------------------------------+
|   Full name    | Short |                   Description                   |
+================+=======+=================================================+
| INTEGRATOR_XF  | xf    | Differential state at the final time.           |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_QF  | qf    | Quadrature state at the final time.             |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_ZF  | zf    | Algebraic variable at the final time.           |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RXF | rxf   | Backward differential state at the initial      |
|                |       | time.                                           |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RQF | rqf   | Backward quadrature state at the initial time.  |
+----------------+-------+-------------------------------------------------+
| INTEGRATOR_RZF | rzf   | Backward algebraic variable at the initial      |
|                |       | time.                                           |
+----------------+-------+-------------------------------------------------+

List of plugins
===============



- cvodes

- idas

- collocation

- rk

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Integrator.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

cvodes
------



Interface to CVodes from the Sundials suite.

A call to evaluate will integrate to the end.

You can retrieve the entire state trajectory as follows, after the evaluate
call: Call reset. Then call integrate(t_i) and getOuput for a series of
times t_i.

>List of available options

+----------------------------+-----------+---------------------------------+
|             Id             |   Type    |           Description           |
+============================+===========+=================================+
| abstol                     | OT_DOUBLE | Absolute tolerence for the IVP  |
|                            |           | solution                        |
+----------------------------+-----------+---------------------------------+
| disable_internal_warnings  | OT_BOOL   | Disable SUNDIALS internal       |
|                            |           | warning messages                |
+----------------------------+-----------+---------------------------------+
| fsens_all_at_once          | OT_BOOL   | Calculate all right hand sides  |
|                            |           | of the sensitivity equations at |
|                            |           | once                            |
+----------------------------+-----------+---------------------------------+
| fsens_err_con              | OT_BOOL   | include the forward             |
|                            |           | sensitivities in all error      |
|                            |           | controls                        |
+----------------------------+-----------+---------------------------------+
| interpolation_type         | OT_STRING | Type of interpolation for the   |
|                            |           | adjoint sensitivities           |
+----------------------------+-----------+---------------------------------+
| linear_multistep_method    | OT_STRING | Integrator scheme: BDF|adams    |
+----------------------------+-----------+---------------------------------+
| linear_solver              | OT_STRING | A custom linear solver creator  |
|                            |           | function [default: qr]          |
+----------------------------+-----------+---------------------------------+
| linear_solver_options      | OT_DICT   | Options to be passed to the     |
|                            |           | linear solver                   |
+----------------------------+-----------+---------------------------------+
| max_krylov                 | OT_INT    | Maximum Krylov subspace size    |
+----------------------------+-----------+---------------------------------+
| max_multistep_order        | OT_INT    | Maximum order for the           |
|                            |           | (variable-order) multistep      |
|                            |           | method                          |
+----------------------------+-----------+---------------------------------+
| max_num_steps              | OT_INT    | Maximum number of integrator    |
|                            |           | steps                           |
+----------------------------+-----------+---------------------------------+
| max_order                  | OT_DOUBLE | Maximum order                   |
+----------------------------+-----------+---------------------------------+
| max_step_size              | OT_DOUBLE | Max step size [default: 0/inf]  |
+----------------------------+-----------+---------------------------------+
| min_step_size              | OT_DOUBLE | Min step size [default: 0/0.0]  |
+----------------------------+-----------+---------------------------------+
| newton_scheme              | OT_STRING | Linear solver scheme in the     |
|                            |           | Newton method:                  |
|                            |           | DIRECT|gmres|bcgstab|tfqmr      |
+----------------------------+-----------+---------------------------------+
| nonlin_conv_coeff          | OT_DOUBLE | Coefficient in the nonlinear    |
|                            |           | convergence test                |
+----------------------------+-----------+---------------------------------+
| nonlinear_solver_iteration | OT_STRING | Nonlinear solver type:          |
|                            |           | NEWTON|functional               |
+----------------------------+-----------+---------------------------------+
| quad_err_con               | OT_BOOL   | Should the quadratures affect   |
|                            |           | the step size control           |
+----------------------------+-----------+---------------------------------+
| reltol                     | OT_DOUBLE | Relative tolerence for the IVP  |
|                            |           | solution                        |
+----------------------------+-----------+---------------------------------+
| second_order_correction    | OT_BOOL   | Second order correction in the  |
|                            |           | augmented system Jacobian       |
|                            |           | [true]                          |
+----------------------------+-----------+---------------------------------+
| sensitivity_method         | OT_STRING | Sensitivity method:             |
|                            |           | SIMULTANEOUS|staggered          |
+----------------------------+-----------+---------------------------------+
| step0                      | OT_DOUBLE | initial step size [default:     |
|                            |           | 0/estimated]                    |
+----------------------------+-----------+---------------------------------+
| steps_per_checkpoint       | OT_INT    | Number of steps between two     |
|                            |           | consecutive checkpoints         |
+----------------------------+-----------+---------------------------------+
| stop_at_end                | OT_BOOL   | Stop the integrator at the end  |
|                            |           | of the interval                 |
+----------------------------+-----------+---------------------------------+
| use_preconditioner         | OT_BOOL   | Precondition the iterative      |
|                            |           | solver [default: true]          |
+----------------------------+-----------+---------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

idas
----



Interface to IDAS from the Sundials suite.

>List of available options

+---------------------------+-----------------+----------------------------+
|            Id             |      Type       |        Description         |
+===========================+=================+============================+
| abstol                    | OT_DOUBLE       | Absolute tolerence for the |
|                           |                 | IVP solution               |
+---------------------------+-----------------+----------------------------+
| abstolv                   | OT_DOUBLEVECTOR | Absolute tolerarance for   |
|                           |                 | each component             |
+---------------------------+-----------------+----------------------------+
| calc_ic                   | OT_BOOL         | Use IDACalcIC to get       |
|                           |                 | consistent initial         |
|                           |                 | conditions.                |
+---------------------------+-----------------+----------------------------+
| calc_icB                  | OT_BOOL         | Use IDACalcIC to get       |
|                           |                 | consistent initial         |
|                           |                 | conditions for backwards   |
|                           |                 | system [default: equal to  |
|                           |                 | calc_ic].                  |
+---------------------------+-----------------+----------------------------+
| cj_scaling                | OT_BOOL         | IDAS scaling on cj for the |
|                           |                 | user-defined linear solver |
|                           |                 | module                     |
+---------------------------+-----------------+----------------------------+
| constraints               | OT_INTVECTOR    | Constrain the solution     |
|                           |                 | y=[x,z]. 0 (default): no   |
|                           |                 | constraint on yi, 1: yi >= |
|                           |                 | 0.0, -1: yi <= 0.0, 2: yi  |
|                           |                 | > 0.0, -2: yi < 0.0.       |
+---------------------------+-----------------+----------------------------+
| disable_internal_warnings | OT_BOOL         | Disable SUNDIALS internal  |
|                           |                 | warning messages           |
+---------------------------+-----------------+----------------------------+
| first_time                | OT_DOUBLE       | First requested time as a  |
|                           |                 | fraction of the time       |
|                           |                 | interval                   |
+---------------------------+-----------------+----------------------------+
| fsens_err_con             | OT_BOOL         | include the forward        |
|                           |                 | sensitivities in all error |
|                           |                 | controls                   |
+---------------------------+-----------------+----------------------------+
| init_xdot                 | OT_DOUBLEVECTOR | Initial values for the     |
|                           |                 | state derivatives          |
+---------------------------+-----------------+----------------------------+
| interpolation_type        | OT_STRING       | Type of interpolation for  |
|                           |                 | the adjoint sensitivities  |
+---------------------------+-----------------+----------------------------+
| linear_solver             | OT_STRING       | A custom linear solver     |
|                           |                 | creator function [default: |
|                           |                 | qr]                        |
+---------------------------+-----------------+----------------------------+
| linear_solver_options     | OT_DICT         | Options to be passed to    |
|                           |                 | the linear solver          |
+---------------------------+-----------------+----------------------------+
| max_krylov                | OT_INT          | Maximum Krylov subspace    |
|                           |                 | size                       |
+---------------------------+-----------------+----------------------------+
| max_multistep_order       | OT_INT          | Maximum order for the      |
|                           |                 | (variable-order) multistep |
|                           |                 | method                     |
+---------------------------+-----------------+----------------------------+
| max_num_steps             | OT_INT          | Maximum number of          |
|                           |                 | integrator steps           |
+---------------------------+-----------------+----------------------------+
| max_order                 | OT_DOUBLE       | Maximum order              |
+---------------------------+-----------------+----------------------------+
| max_step_size             | OT_DOUBLE       | Maximim step size          |
+---------------------------+-----------------+----------------------------+
| newton_scheme             | OT_STRING       | Linear solver scheme in    |
|                           |                 | the Newton method:         |
|                           |                 | DIRECT|gmres|bcgstab|tfqmr |
+---------------------------+-----------------+----------------------------+
| nonlin_conv_coeff         | OT_DOUBLE       | Coefficient in the         |
|                           |                 | nonlinear convergence test |
+---------------------------+-----------------+----------------------------+
| quad_err_con              | OT_BOOL         | Should the quadratures     |
|                           |                 | affect the step size       |
|                           |                 | control                    |
+---------------------------+-----------------+----------------------------+
| reltol                    | OT_DOUBLE       | Relative tolerence for the |
|                           |                 | IVP solution               |
+---------------------------+-----------------+----------------------------+
| second_order_correction   | OT_BOOL         | Second order correction in |
|                           |                 | the augmented system       |
|                           |                 | Jacobian [true]            |
+---------------------------+-----------------+----------------------------+
| sensitivity_method        | OT_STRING       | Sensitivity method:        |
|                           |                 | SIMULTANEOUS|staggered     |
+---------------------------+-----------------+----------------------------+
| step0                     | OT_DOUBLE       | initial step size          |
|                           |                 | [default: 0/estimated]     |
+---------------------------+-----------------+----------------------------+
| steps_per_checkpoint      | OT_INT          | Number of steps between    |
|                           |                 | two consecutive            |
|                           |                 | checkpoints                |
+---------------------------+-----------------+----------------------------+
| stop_at_end               | OT_BOOL         | Stop the integrator at the |
|                           |                 | end of the interval        |
+---------------------------+-----------------+----------------------------+
| suppress_algebraic        | OT_BOOL         | Suppress algebraic         |
|                           |                 | variables in the error     |
|                           |                 | testing                    |
+---------------------------+-----------------+----------------------------+
| use_preconditioner        | OT_BOOL         | Precondition the iterative |
|                           |                 | solver [default: true]     |
+---------------------------+-----------------+----------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

collocation
-----------



Fixed-step implicit Runge-Kutta integrator ODE/DAE integrator based on
collocation schemes

The method is still under development

>List of available options

+---------------------------+-----------------+----------------------------+
|            Id             |      Type       |        Description         |
+===========================+=================+============================+
| augmented_options         | OT_DICT         | Options to be passed down  |
|                           |                 | to the augmented           |
|                           |                 | integrator, if one is      |
|                           |                 | constructed.               |
+---------------------------+-----------------+----------------------------+
| collocation_scheme        | OT_STRING       | Collocation scheme:        |
|                           |                 | radau|legendre             |
+---------------------------+-----------------+----------------------------+
| expand                    | OT_BOOL         | Replace MX with SX         |
|                           |                 | expressions in problem     |
|                           |                 | formulation [false]        |
+---------------------------+-----------------+----------------------------+
| grid                      | OT_DOUBLEVECTOR | Time grid                  |
+---------------------------+-----------------+----------------------------+
| interpolation_order       | OT_INT          | Order of the interpolating |
|                           |                 | polynomials                |
+---------------------------+-----------------+----------------------------+
| number_of_finite_elements | OT_INT          | Number of finite elements  |
+---------------------------+-----------------+----------------------------+
| output_t0                 | OT_BOOL         | Output the state at the    |
|                           |                 | initial time               |
+---------------------------+-----------------+----------------------------+
| print_stats               | OT_BOOL         | Print out statistics after |
|                           |                 | integration                |
+---------------------------+-----------------+----------------------------+
| rootfinder                | OT_STRING       | An implicit function       |
|                           |                 | solver                     |
+---------------------------+-----------------+----------------------------+
| rootfinder_options        | OT_DICT         | Options to be passed to    |
|                           |                 | the NLP Solver             |
+---------------------------+-----------------+----------------------------+
| simplify                  | OT_BOOL         | Implement as MX  Function  |
|                           |                 | (codegeneratable/serializa |
|                           |                 | ble) default: false        |
+---------------------------+-----------------+----------------------------+
| simplify_options          | OT_DICT         | Any options to pass to     |
|                           |                 | simplified form Function   |
|                           |                 | constructor                |
+---------------------------+-----------------+----------------------------+
| t0                        | OT_DOUBLE       | Beginning of the time      |
|                           |                 | horizon                    |
+---------------------------+-----------------+----------------------------+
| tf                        | OT_DOUBLE       | End of the time horizon    |
+---------------------------+-----------------+----------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

rk --



Fixed-step explicit Runge-Kutta integrator for ODEs Currently implements
RK4.

The method is still under development

--------------------------------------------------------------------------------



Joel Andersson

";

%feature("docstring")  casadi::casadi_ipqp_mu(casadi_ipqp_data< T1 > *d, T1
alpha) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_cvx_house_apply_symm(casadi_int n,
casadi_int k, T1 *A, T1 *p, T1 *v) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_ipqp_print_iteration(casadi_ipqp_data<
T1 > *d, char *buf, int buf_sz) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_qp_take_step(casadi_qp_data< T1 > *d)
"

[INTERNAL] ";

%feature("docstring")  casadi::conic_option_info(const std::string &name,
const std::string &op) "

Get documentation for a particular option.

";

%feature("docstring")  casadi::casadi_ipqp_maxstep(casadi_ipqp_data< T1 >
*d, T1 *alpha, casadi_int *ind) "

[INTERNAL] ";

%feature("docstring")  casadi::check_exposed(T t) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_ipqp_predictor(casadi_ipqp_data< T1 >
*d) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_interpn(casadi_int ndim, const T1
*grid, const casadi_int *offset, const T1 *values, const T1 *x, casadi_int
*iw, T1 *w) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_interpn(T1 *res, casadi_int ndim,
const T1 *grid, const casadi_int *offset, const T1 *values, const T1 *x,
const casadi_int *lookup_mode, casadi_int m, casadi_int *iw, T1 *w) "

[INTERNAL] ";

%feature("docstring")  casadi::read_matlab(std::istream &stream,
std::vector< T > &v) "

Read vector, matlab style.

";

%feature("docstring")  casadi::read_matlab(std::ifstream &file, std::vector<
std::vector< T > > &v) "

Read matrix, matlab style.

";

%feature("docstring")  casadi::casadi_iamax(casadi_int n, const T1 *x,
casadi_int inc_x) "

[INTERNAL]  IAMAX: index corresponding to the entry with the largest
absolute value.

";

%feature("docstring")  casadi::has_expm(const std::string &name) "

Check if a particular plugin is available.

";

%feature("docstring")  casadi::write_matlab(std::ostream &stream, const
std::vector< T > &v) "

Print vector, matlab style.

";

%feature("docstring")  casadi::write_matlab(std::ostream &stream, const
std::vector< std::vector< T > > &v) "

Print matrix, matlab style.

";

%feature("docstring")  casadi::casadi_sparsify(const T1 *x, T2 *y, const
casadi_int *sp_y, casadi_int tr) "

[INTERNAL]  Convert dense to sparse.

";

%feature("docstring")  casadi::hash_sparsity(casadi_int nrow, casadi_int
ncol, const std::vector< casadi_int > &colind, const std::vector< casadi_int
> &row) "

Hash a sparsity pattern.

";

%feature("docstring")  casadi::is_slice2(const std::vector< casadi_int > &v)
"

Check if an index vector can be represented more efficiently as two nested
slices.

";

%feature("docstring")  casadi::rootfinder(const std::string &name, const
std::string &solver, const SXDict &rfp, const Dict &opts=Dict()) "

Create a solver for rootfinding problems Takes a function where one of the
inputs is unknown and one of the outputs is a residual function that is
always zero, defines a new function where the the unknown input has been
replaced by a guess for the unknown and the residual output has been
replaced by the calculated value for the input.

For a function [y0, y1, ...,yi, .., yn] = F(x0, x1, ..., xj, ..., xm), where
xj is unknown and yi=0, defines a new function [y0, y1, ...,xj, .., yn] =
G(x0, x1, ..., xj_guess, ..., xm),

xj and yi must have the same dimension and d(yi)/d(xj) must be invertable.

By default, the first input is unknown and the first output is the residual.

General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| constraints      | OT_INTVECTOR    | Constrain the    | casadi::Rootfind |
|                  |                 | unknowns. 0      | er               |
|                  |                 | (default): no    |                  |
|                  |                 | constraint on    |                  |
|                  |                 | ui, 1: ui >=     |                  |
|                  |                 | 0.0, -1: ui <=   |                  |
|                  |                 | 0.0, 2: ui >     |                  |
|                  |                 | 0.0, -2: ui <    |                  |
|                  |                 | 0.0.             |                  |
+------------------+-----------------+------------------+------------------+
| error_on_fail    | OT_BOOL         | When the         | casadi::Rootfind |
|                  |                 | numerical        | er               |
|                  |                 | process returns  |                  |
|                  |                 | unsuccessfully,  |                  |
|                  |                 | raise an error   |                  |
|                  |                 | (default false). |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::OracleFu |
|                  |                 | SX expressions   | nction           |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| implicit_input   | OT_INT          | Index of the     | casadi::Rootfind |
|                  |                 | input that       | er               |
|                  |                 | corresponds to   |                  |
|                  |                 | the actual root- |                  |
|                  |                 | finding          |                  |
+------------------+-----------------+------------------+------------------+
| implicit_output  | OT_INT          | Index of the     | casadi::Rootfind |
|                  |                 | output that      | er               |
|                  |                 | corresponds to   |                  |
|                  |                 | the actual root- |                  |
|                  |                 | finding          |                  |
+------------------+-----------------+------------------+------------------+
| jacobian_functio | OT_FUNCTION     | Function object  | casadi::Rootfind |
| n                |                 | for calculating  | er               |
|                  |                 | the Jacobian     |                  |
|                  |                 | (autogenerated   |                  |
|                  |                 | by default)      |                  |
+------------------+-----------------+------------------+------------------+
| linear_solver    | OT_STRING       | User-defined     | casadi::Rootfind |
|                  |                 | linear solver    | er               |
|                  |                 | class. Needed    |                  |
|                  |                 | for              |                  |
|                  |                 | sensitivities.   |                  |
+------------------+-----------------+------------------+------------------+
| linear_solver_op | OT_DICT         | Options to be    | casadi::Rootfind |
| tions            |                 | passed to the    | er               |
|                  |                 | linear solver.   |                  |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| show_eval_warnin | OT_BOOL         | Show warnings    | casadi::OracleFu |
| gs               |                 | generated from   | nction           |
|                  |                 | function         |                  |
|                  |                 | evaluations      |                  |
|                  |                 | [true]           |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+

>Input scheme: casadi::RootfinderInput (ROOTFINDER_NUM_IN = 2)

+---------------+-------+---------------------------------+
|   Full name   | Short |           Description           |
+===============+=======+=================================+
| ROOTFINDER_X0 | x0    | Initial guess for the solution. |
+---------------+-------+---------------------------------+
| ROOTFINDER_P  | p     | Parameters.                     |
+---------------+-------+---------------------------------+

>Output scheme: casadi::RootfinderOutput (ROOTFINDER_NUM_OUT = 1)

+--------------+-------+--------------------------------------+
|  Full name   | Short |             Description              |
+==============+=======+======================================+
| ROOTFINDER_X | x     | Solution to the system of equations. |
+--------------+-------+--------------------------------------+

List of plugins
===============



- kinsol

- fast_newton

- nlpsol

- newton

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Rootfinder.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

kinsol
------



KINSOL interface from the Sundials suite

>List of available options

+---------------------------+-----------------+----------------------------+
|            Id             |      Type       |        Description         |
+===========================+=================+============================+
| abstol                    | OT_DOUBLE       | Stopping criterion         |
|                           |                 | tolerance                  |
+---------------------------+-----------------+----------------------------+
| disable_internal_warnings | OT_BOOL         | Disable KINSOL internal    |
|                           |                 | warning messages           |
+---------------------------+-----------------+----------------------------+
| exact_jacobian            | OT_BOOL         | Use exact Jacobian         |
|                           |                 | information                |
+---------------------------+-----------------+----------------------------+
| f_scale                   | OT_DOUBLEVECTOR | Equation scaling factors   |
+---------------------------+-----------------+----------------------------+
| iterative_solver          | OT_STRING       | gmres|bcgstab|tfqmr        |
+---------------------------+-----------------+----------------------------+
| linear_solver_type        | OT_STRING       | dense|banded|iterative|use |
|                           |                 | r_defined                  |
+---------------------------+-----------------+----------------------------+
| lower_bandwidth           | OT_INT          | Lower bandwidth for banded |
|                           |                 | linear solvers             |
+---------------------------+-----------------+----------------------------+
| max_iter                  | OT_INT          | Maximum number of Newton   |
|                           |                 | iterations. Putting 0 sets |
|                           |                 | the default value of       |
|                           |                 | KinSol.                    |
+---------------------------+-----------------+----------------------------+
| max_krylov                | OT_INT          | Maximum Krylov space       |
|                           |                 | dimension                  |
+---------------------------+-----------------+----------------------------+
| pretype                   | OT_STRING       | Type of preconditioner     |
+---------------------------+-----------------+----------------------------+
| strategy                  | OT_STRING       | Globalization strategy     |
+---------------------------+-----------------+----------------------------+
| u_scale                   | OT_DOUBLEVECTOR | Variable scaling factors   |
+---------------------------+-----------------+----------------------------+
| upper_bandwidth           | OT_INT          | Upper bandwidth for banded |
|                           |                 | linear solvers             |
+---------------------------+-----------------+----------------------------+
| use_preconditioner        | OT_BOOL         | Precondition an iterative  |
|                           |                 | solver                     |
+---------------------------+-----------------+----------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

fast_newton
-----------



Implements simple newton iterations to solve an implicit function.

>List of available options

+------------+-----------+-------------------------------------------------+
|     Id     |   Type    |                   Description                   |
+============+===========+=================================================+
| abstol     | OT_DOUBLE | Stopping criterion tolerance on ||g||__inf)     |
+------------+-----------+-------------------------------------------------+
| abstolStep | OT_DOUBLE | Stopping criterion tolerance on step size       |
+------------+-----------+-------------------------------------------------+
| max_iter   | OT_INT    | Maximum number of Newton iterations to perform  |
|            |           | before returning.                               |
+------------+-----------+-------------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

nlpsol
------





--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

newton
------



Implements simple newton iterations to solve an implicit function.

>List of available options

+-----------------+-----------+--------------------------------------------+
|       Id        |   Type    |                Description                 |
+=================+===========+============================================+
| abstol          | OT_DOUBLE | Stopping criterion tolerance on max(|F|)   |
+-----------------+-----------+--------------------------------------------+
| abstolStep      | OT_DOUBLE | Stopping criterion tolerance on step size  |
+-----------------+-----------+--------------------------------------------+
| line_search     | OT_BOOL   | Enable line-search (default: true)         |
+-----------------+-----------+--------------------------------------------+
| max_iter        | OT_INT    | Maximum number of Newton iterations to     |
|                 |           | perform before returning.                  |
+-----------------+-----------+--------------------------------------------+
| print_iteration | OT_BOOL   | Print information about each iteration     |
+-----------------+-----------+--------------------------------------------+

--------------------------------------------------------------------------------



Joel Andersson

";

%feature("docstring")  casadi::casadi_qp_setup(casadi_qp_prob< T1 > *p) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_ldl(const casadi_int *sp_a, const T1
*a, const casadi_int *sp_lt, T1 *lt, T1 *d, const casadi_int *p, T1 *w) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_ipqp(casadi_ipqp_data< T1 > *d) "

[INTERNAL] ";

%feature("docstring")  casadi::dple_n_in() "

Get the number of QP solver inputs.

";

%feature("docstring")  casadi::has_negative(const std::vector< T > &v) "

Check if the vector has negative entries.

";

%feature("docstring")  casadi::casadi_tri_project(const T1 *x, const
casadi_int *sp_x, T1 *y, casadi_int lower) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_cvx_symm_schur(casadi_int n, T1
*t_diag, T1 *t_off, T1 tol, casadi_int max_iter, casadi_int *trace_meta, T1
*trace) "

[INTERNAL]  Golub & Van Loan Alg. 8.3.3.

";

%feature("docstring")  casadi::to_slice2(const std::vector< casadi_int > &v)
"

Construct nested slices from an index vector (requires is_slice2(v) to be
true)

";

%feature("docstring")  casadi::casadi_qp_linesearch(casadi_qp_data< T1 > *d)
"

[INTERNAL] ";

%feature("docstring")  casadi::casadi_vfmin(const T1 *x, casadi_int n, T1 r)
"

[INTERNAL] ";

%feature("docstring")  casadi::to_slice(const IM &x, bool ind1=false) "

Convert IM to Slice.

";

%feature("docstring")  casadi::to_slice(const std::vector< casadi_int > &v,
bool ind1=false) "

Construct from an index vector (requires is_slice(v) to be true)

";

%feature("docstring")  casadi::casadi_qp_dual_breakpoints(casadi_qp_data< T1
> *d, T1 *tau_list, casadi_int *ind_list, T1 tau) "

[INTERNAL] ";

%feature("docstring")  casadi::doc_linsol(const std::string &name) "

Get the documentation string for a plugin.

";

%feature("docstring")  casadi::getcopy(const A &a, std::map<
SharedObjectInternal *, SharedObject > &already_copied) "

[INTERNAL] ";

%feature("docstring")  casadi::expm_n_in() "

Get the number of expm solver inputs.

";

%feature("docstring")  casadi::rootfinder_out() "

Get rootfinder output scheme.

";

%feature("docstring")  casadi::rootfinder_out(casadi_int ind) "

Get rootfinder output scheme name by index.

";

%feature("docstring")  casadi::conic_in() "

Get input scheme of QP solvers.

";

%feature("docstring")  casadi::conic_in(casadi_int ind) "

Get QP solver input scheme name by index.

";

%feature("docstring")  casadi::doc_expm(const std::string &name) "

Get the documentation string for a plugin.

";

%feature("docstring")  casadi::lookupvector(const std::vector< casadi_int >
&v, casadi_int size) "

Returns a vector for quickly looking up entries of supplied list.

lookupvector[i]!=-1 <=> v contains i v[lookupvector[i]] == i <=> v contains
i

Duplicates are treated by looking up last occurrence

";

%feature("docstring")  casadi::doc_dple(const std::string &name) "

Get the documentation string for a plugin.

";

%feature("docstring")  casadi::casadi_nlpsol_init(casadi_nlpsol_data< T1 >
*d, casadi_int **iw, T1 **w) "

[INTERNAL] ";

%feature("docstring")  casadi::hash_combine(std::size_t &seed, T v) "

Generate a hash value incrementally (function taken from boost)

";

%feature("docstring")  casadi::hash_combine(std::size_t &seed, const
casadi_int *v, std::size_t sz) "

Generate a hash value incrementally, array.

";

%feature("docstring")  casadi::hash_combine(std::size_t &seed, const
std::vector< casadi_int > &v) "

Generate a hash value incrementally (function taken from boost)

";

%feature("docstring")  casadi::casadi_ipqp_setup(casadi_ipqp_prob< T1 > *p,
casadi_int nx, casadi_int na) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_ipqp_solution(casadi_ipqp_data< T1 >
*d, T1 *x, T1 *lam_x, T1 *lam_a) "

[INTERNAL] ";

%feature("docstring")  casadi::rootfinder_n_in() "

Number of rootfinder inputs.

";

%feature("docstring")  casadi::casadi_sqpmethod_init(casadi_sqpmethod_data<
T1 > *d, casadi_int **iw, T1 **w) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_ipqp_sigma(casadi_ipqp_data< T1 > *d,
T1 alpha) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_qp_calc_sens(casadi_qp_data< T1 > *d,
casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::has_integrator(const std::string &name) "

Check if a particular plugin is available.

";

%feature("docstring")  casadi::casadi_bound_consistency(casadi_int n, T1 *x,
T1 *lam, const T1 *lbx, const T1 *ubx) "

[INTERNAL] ";

%feature("docstring")  casadi::dense_mul_nn2(casadi_int n, casadi_int m,
casadi_int l, const double *A, const double *B, double *C) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_central_diff(T1 **yk, T1 *y0, T1 *J,
T1 h, casadi_int n_y, const casadi_finite_diff_mem< T1 > *m) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_ipqp_print_header(casadi_ipqp_data< T1
> *d, char *buf, size_t buf_sz) "

[INTERNAL] ";

%feature("docstring")  casadi::nlpsol_options(const std::string &name) "

Get all options for a plugin.

";

%feature("docstring")  casadi::integrator_out() "

Get integrator output scheme of integrators.

";

%feature("docstring")  casadi::integrator_out(casadi_int ind) "

Get output scheme name by index.

";

%feature("docstring")  casadi::has_dple(const std::string &name) "

Check if a particular plugin is available.

";

%feature("docstring")  casadi::rootfinder_option_info(const std::string
&name, const std::string &op) "

Get documentation for a particular option.

";

%feature("docstring")  casadi::casadi_qp_enforceable(casadi_qp_data< T1 >
*d, casadi_int i, casadi_int s) "

[INTERNAL] ";

%feature("docstring")  casadi::replace_mat(const M &arg, const Sparsity
&inp, casadi_int npar) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_cvx_implicit_qr(casadi_int n, T1
*t_diag, T1 *t_off, T1 *cs) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_qp_primal_blocking(casadi_qp_data< T1
> *d) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_cvx_givens(T1 a, T1 b, T1 *c, T1 *s) "

[INTERNAL] ";

%feature("docstring")  casadi::load_interpolant(const std::string &name) "

Explicitly load a plugin dynamically.

";

%feature("docstring")  casadi::casadi_newton(const casadi_newton_mem< T1 >
*m) "

[INTERNAL] ";

%feature("docstring")  casadi::flatten_nested_vector(const std::vector<
std::vector< T > > &nested, std::vector< S > &flat) "

Flatten a nested std::vector tot a single flattened vector.

Contents of nested[i] ends up in flat[indices[i]]..flat[indices[i+1]-1]

";

%feature("docstring")  casadi::flatten_nested_vector(const std::vector<
std::vector< T > > &nested, std::vector< S > &flat, std::vector< I >
&indices) "

Flatten a nested std::vector tot a single flattened vector.

Contents of nested[i] ends up in flat[indices[i]]..flat[indices[i+1]-1]

";

%feature("docstring")  casadi::integrator_n_in() "

Get the number of integrator inputs.

";

%feature("docstring")  casadi::collocation_points(casadi_int order, const
std::string &scheme="radau") "

Obtain collocation points of specific order and scheme.

Parameters:
-----------

order:  Which order (1 to 9 supported)

scheme:  'radau' or 'legendre'

";

%feature("docstring")  casadi::conic(const std::string &name, const
std::string &solver, const SpDict &qp, const Dict &opts=Dict()) "

Create a QP solver Solves the following strictly convex problem:



::

  min          1/2 x' H x + g' x
  x
  
  subject to
  LBA <= A x <= UBA
  LBX <= x   <= UBX
  
  resize(Q x, np, np) + P >= 0 (psd)
  
  with :
  H sparse (n x n) positive definite
  g dense  (n x 1)
  A sparse (nc x n)
  Q sparse symmetric (np^2 x n)
  P sparse symmetric (np x nq)
  
  n: number of decision variables (x)
  nc: number of constraints (A)
  nq: shape of psd constraint matrix



If H is not positive-definite, the solver should throw an error.

Second-order cone constraints can be added as psd constraints through a
helper function 'soc':

x in R^n y in R

|| x ||_2 <= y

<=>

soc(x, y) psd

This can be proven with soc(x, y)=[y*I x; x' y] using the Shur complement.

General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| discrete         | OT_BOOLVECTOR   | Indicates which  | casadi::Conic    |
|                  |                 | of the variables |                  |
|                  |                 | are discrete,    |                  |
|                  |                 | i.e. integer-    |                  |
|                  |                 | valued           |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| error_on_fail    | OT_BOOL         | When the         | casadi::Conic    |
|                  |                 | numerical        |                  |
|                  |                 | process returns  |                  |
|                  |                 | unsuccessfully,  |                  |
|                  |                 | raise an error   |                  |
|                  |                 | (default false). |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_problem    | OT_BOOL         | Print a numeric  | casadi::Conic    |
|                  |                 | description of   |                  |
|                  |                 | the problem      |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

>Input scheme: casadi::ConicInput (CONIC_NUM_IN = 12)

+--------------+--------+--------------------------------------------------+
|  Full name   | Short  |                   Description                    |
+==============+========+==================================================+
| CONIC_H      | h      | The square matrix H: sparse, (n x n). Only the   |
|              |        | lower triangular part is actually used. The      |
|              |        | matrix is assumed to be symmetrical.             |
+--------------+--------+--------------------------------------------------+
| CONIC_G      | g      | The vector g: dense, (n x 1)                     |
+--------------+--------+--------------------------------------------------+
| CONIC_A      | a      | The matrix A: sparse, (nc x n) - product with x  |
|              |        | must be dense.                                   |
+--------------+--------+--------------------------------------------------+
| CONIC_LBA    | lba    | dense, (nc x 1)                                  |
+--------------+--------+--------------------------------------------------+
| CONIC_UBA    | uba    | dense, (nc x 1)                                  |
+--------------+--------+--------------------------------------------------+
| CONIC_LBX    | lbx    | dense, (n x 1)                                   |
+--------------+--------+--------------------------------------------------+
| CONIC_UBX    | ubx    | dense, (n x 1)                                   |
+--------------+--------+--------------------------------------------------+
| CONIC_X0     | x0     | dense, (n x 1)                                   |
+--------------+--------+--------------------------------------------------+
| CONIC_LAM_X0 | lam_x0 | dense                                            |
+--------------+--------+--------------------------------------------------+
| CONIC_LAM_A0 | lam_a0 | dense                                            |
+--------------+--------+--------------------------------------------------+
| CONIC_Q      | q      | The matrix Q: sparse symmetric, (np^2 x n)       |
+--------------+--------+--------------------------------------------------+
| CONIC_P      | p      | The matrix P: sparse symmetric, (np x np)        |
+--------------+--------+--------------------------------------------------+

>Output scheme: casadi::ConicOutput (CONIC_NUM_OUT = 4)

+-------------+-------+---------------------------------------------------+
|  Full name  | Short |                    Description                    |
+=============+=======+===================================================+
| CONIC_X     | x     | The primal solution.                              |
+-------------+-------+---------------------------------------------------+
| CONIC_COST  | cost  | The optimal cost.                                 |
+-------------+-------+---------------------------------------------------+
| CONIC_LAM_A | lam_a | The dual solution corresponding to linear bounds. |
+-------------+-------+---------------------------------------------------+
| CONIC_LAM_X | lam_x | The dual solution corresponding to simple bounds. |
+-------------+-------+---------------------------------------------------+

List of plugins
===============



- cbc

- clp

- cplex

- gurobi

- hpmpc

- ooqp

- osqp

- qpoases

- sqic

- superscs

- ipqp

- nlpsol

- qrqp

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Conic.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

cbc
---



Interface to Cbc solver for sparse Quadratic Programs

>List of available options

+-------------+-----------------------+------------------------------------+
|     Id      |         Type          |            Description             |
+=============+=======================+====================================+
| cbc         | OT_DICT               | Options to be passed to CBC.Three  |
|             |                       | sets of options are supported. The |
|             |                       | first can be found in              |
|             |                       | OsiSolverParameters.hpp. The       |
|             |                       | second can be found in             |
|             |                       | CbcModel.hpp. The third are        |
|             |                       | options that can be passed to      |
|             |                       | CbcMain1.                          |
+-------------+-----------------------+------------------------------------+
| hot_start   | OT_BOOL               | Hot start with x0 [Default false]. |
+-------------+-----------------------+------------------------------------+
| sos_groups  | OT_INTVECTORVECTOR    | Definition of SOS groups by        |
|             |                       | indices.                           |
+-------------+-----------------------+------------------------------------+
| sos_types   | OT_INTVECTOR          | Specify 1 or 2 for each SOS group. |
+-------------+-----------------------+------------------------------------+
| sos_weights | OT_DOUBLEVECTORVECTOR | Weights corresponding to SOS       |
|             |                       | entries.                           |
+-------------+-----------------------+------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

clp
---



Interface to Clp solver for sparse Quadratic Programs

>List of available options

+-----+---------+----------------------------------------------------------+
| Id  |  Type   |                       Description                        |
+=====+=========+==========================================================+
| clp | OT_DICT | Options to be passed to CLP. A first set of options can  |
|     |         | be found in ClpParameters.hpp. eg. 'PrimalTolerance'.    |
|     |         | There are other options in additions. 'AutomaticScaling' |
|     |         | (bool) is recognised. 'initial_solve' (default off)      |
|     |         | activates the use of Clp's initialSolve.                 |
|     |         | 'initial_solve_options' takes a dictionary with          |
|     |         | following keys (see ClpSolve.hpp): SolveType (string),   |
|     |         | PresolveType (string), NumberPasses, SpecialOptions      |
|     |         | (intvectorvector), IndependentOptions (intvectorvector). |
+-----+---------+----------------------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

cplex
-----



Interface to Cplex solver for sparse Quadratic Programs

>List of available options

+---------------+-----------------------+----------------------------------+
|      Id       |         Type          |           Description            |
+===============+=======================+==================================+
| cplex         | OT_DICT               | Options to be passed to CPLEX    |
+---------------+-----------------------+----------------------------------+
| dep_check     | OT_INT                | Detect redundant constraints.    |
+---------------+-----------------------+----------------------------------+
| dump_filename | OT_STRING             | The filename to dump to.         |
+---------------+-----------------------+----------------------------------+
| dump_to_file  | OT_BOOL               | Dumps QP to file in CPLEX        |
|               |                       | format.                          |
+---------------+-----------------------+----------------------------------+
| mip_start     | OT_BOOL               | Hot start integers with x0       |
|               |                       | [Default false].                 |
+---------------+-----------------------+----------------------------------+
| qp_method     | OT_INT                | Determines which CPLEX algorithm |
|               |                       | to use.                          |
+---------------+-----------------------+----------------------------------+
| sos_groups    | OT_INTVECTORVECTOR    | Definition of SOS groups by      |
|               |                       | indices.                         |
+---------------+-----------------------+----------------------------------+
| sos_types     | OT_INTVECTOR          | Specify 1 or 2 for each SOS      |
|               |                       | group.                           |
+---------------+-----------------------+----------------------------------+
| sos_weights   | OT_DOUBLEVECTORVECTOR | Weights corresponding to SOS     |
|               |                       | entries.                         |
+---------------+-----------------------+----------------------------------+
| tol           | OT_DOUBLE             | Tolerance of solver              |
+---------------+-----------------------+----------------------------------+
| warm_start    | OT_BOOL               | Use warm start with simplex      |
|               |                       | methods (affects only the        |
|               |                       | simplex methods).                |
+---------------+-----------------------+----------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

gurobi
------



Interface to the GUROBI Solver for quadratic programming

>List of available options

+-------------+-----------------------+------------------------------------+
|     Id      |         Type          |            Description             |
+=============+=======================+====================================+
| gurobi      | OT_DICT               | Options to be passed to gurobi.    |
+-------------+-----------------------+------------------------------------+
| sos_groups  | OT_INTVECTORVECTOR    | Definition of SOS groups by        |
|             |                       | indices.                           |
+-------------+-----------------------+------------------------------------+
| sos_types   | OT_INTVECTOR          | Specify 1 or 2 for each SOS group. |
+-------------+-----------------------+------------------------------------+
| sos_weights | OT_DOUBLEVECTORVECTOR | Weights corresponding to SOS       |
|             |                       | entries.                           |
+-------------+-----------------------+------------------------------------+
| vtype       | OT_STRINGVECTOR       | Type of variables: [CONTINUOUS|bin |
|             |                       | ary|integer|semicont|semiint]      |
+-------------+-----------------------+------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

hpmpc
-----



Interface to HMPC Solver

In order to use this interface, you must:

Decision variables must only by state and control, and the variable ordering
must be [x0 u0 x1 u1 ...]

The constraints must be in order: [ gap0 lincon0 gap1 lincon1 ]

gap: Ak+1 = Ak xk + Bk uk lincon: yk= Ck xk + Dk uk



::

         A0 B0 -I
         C0 D0
                A1 B1 -I
                C1 D1



where I must be a diagonal sparse matrix Either supply all of N, nx, ng, nu
options or rely on automatic detection

>List of available options

+----------------+--------------+------------------------------------------+
|       Id       |     Type     |               Description                |
+================+==============+==========================================+
| N              | OT_INT       | OCP horizon                              |
+----------------+--------------+------------------------------------------+
| blasfeo_target | OT_STRING    | hpmpc target                             |
+----------------+--------------+------------------------------------------+
| inf            | OT_DOUBLE    | HPMPC cannot handle infinities.          |
|                |              | Infinities will be replaced by this      |
|                |              | option's value.                          |
+----------------+--------------+------------------------------------------+
| max_iter       | OT_INT       | Max number of iterations                 |
+----------------+--------------+------------------------------------------+
| mu0            | OT_DOUBLE    | Max element in cost function as estimate |
|                |              | of max multiplier                        |
+----------------+--------------+------------------------------------------+
| ng             | OT_INTVECTOR | Number of non-dynamic constraints,       |
|                |              | length N+1                               |
+----------------+--------------+------------------------------------------+
| nu             | OT_INTVECTOR | Number of controls, length N             |
+----------------+--------------+------------------------------------------+
| nx             | OT_INTVECTOR | Number of states, length N+1             |
+----------------+--------------+------------------------------------------+
| print_level    | OT_INT       | Amount of diagnostic printing [Default:  |
|                |              | 1].                                      |
+----------------+--------------+------------------------------------------+
| target         | OT_STRING    | hpmpc target                             |
+----------------+--------------+------------------------------------------+
| tol            | OT_DOUBLE    | Tolerance in the duality measure         |
+----------------+--------------+------------------------------------------+
| warm_start     | OT_BOOL      | Use warm-starting                        |
+----------------+--------------+------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

ooqp
----



Interface to the OOQP Solver for quadratic programming The current
implementation assumes that OOQP is configured with the MA27 sparse linear
solver.

NOTE: when doing multiple calls to evaluate(), check if you need to
reInit();

>List of available options

+-------------+-----------+------------------------------------------------+
|     Id      |   Type    |                  Description                   |
+=============+===========+================================================+
| artol       | OT_DOUBLE | tolerance as provided with setArTol to OOQP    |
+-------------+-----------+------------------------------------------------+
| mutol       | OT_DOUBLE | tolerance as provided with setMuTol to OOQP    |
+-------------+-----------+------------------------------------------------+
| print_level | OT_INT    | Print level. OOQP listens to print_level 0, 10 |
|             |           | and 100                                        |
+-------------+-----------+------------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

osqp
----



Interface to the OSQP Solver for quadratic programming

>List of available options

+-------------------+---------+--------------------------------------------+
|        Id         |  Type   |                Description                 |
+===================+=========+============================================+
| osqp              | OT_DICT | const Options to be passed to osqp.        |
+-------------------+---------+--------------------------------------------+
| warm_start_dual   | OT_BOOL | Use lam_a0 and lam_x0 input to warmstart   |
|                   |         | [Default: truw].                           |
+-------------------+---------+--------------------------------------------+
| warm_start_primal | OT_BOOL | Use x0 input to warmstart [Default: true]. |
+-------------------+---------+--------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

qpoases
-------



Interface to QPOases Solver for quadratic programming

>List of available options

+-------------------------------+-----------+------------------------------+
|              Id               |   Type    |         Description          |
+===============================+===========+==============================+
| CPUtime                       | OT_DOUBLE | The maximum allowed CPU time |
|                               |           | in seconds for the whole     |
|                               |           | initialisation (and the      |
|                               |           | actually required one on     |
|                               |           | output). Disabled if unset.  |
+-------------------------------+-----------+------------------------------+
| boundRelaxation               | OT_DOUBLE | Initial relaxation of bounds |
|                               |           | to start homotopy and        |
|                               |           | initial value for far        |
|                               |           | bounds.                      |
+-------------------------------+-----------+------------------------------+
| boundTolerance                | OT_DOUBLE | If upper and lower bounds    |
|                               |           | differ less than this        |
|                               |           | tolerance, they are regarded |
|                               |           | equal, i.e. as equality      |
|                               |           | constraint.                  |
+-------------------------------+-----------+------------------------------+
| enableCholeskyRefactorisation | OT_INT    | Specifies the frequency of a |
|                               |           | full re-factorisation of     |
|                               |           | projected Hessian matrix: 0: |
|                               |           | turns them off, 1: uses them |
|                               |           | at each iteration etc.       |
+-------------------------------+-----------+------------------------------+
| enableDriftCorrection         | OT_INT    | Specifies the frequency of   |
|                               |           | drift corrections: 0: turns  |
|                               |           | them off.                    |
+-------------------------------+-----------+------------------------------+
| enableEqualities              | OT_BOOL   | Specifies whether equalities |
|                               |           | should be treated as always  |
|                               |           | active (True) or not (False) |
+-------------------------------+-----------+------------------------------+
| enableFarBounds               | OT_BOOL   | Enables the use of far       |
|                               |           | bounds.                      |
+-------------------------------+-----------+------------------------------+
| enableFlippingBounds          | OT_BOOL   | Enables the use of flipping  |
|                               |           | bounds.                      |
+-------------------------------+-----------+------------------------------+
| enableFullLITests             | OT_BOOL   | Enables condition-hardened   |
|                               |           | (but more expensive) LI      |
|                               |           | test.                        |
+-------------------------------+-----------+------------------------------+
| enableInertiaCorrection       | OT_BOOL   | Should working set be        |
|                               |           | repaired when negative       |
|                               |           | curvature is discovered      |
|                               |           | during hotstart.             |
+-------------------------------+-----------+------------------------------+
| enableNZCTests                | OT_BOOL   | Enables nonzero curvature    |
|                               |           | tests.                       |
+-------------------------------+-----------+------------------------------+
| enableRamping                 | OT_BOOL   | Enables ramping.             |
+-------------------------------+-----------+------------------------------+
| enableRegularisation          | OT_BOOL   | Enables automatic Hessian    |
|                               |           | regularisation.              |
+-------------------------------+-----------+------------------------------+
| epsDen                        | OT_DOUBLE | Denominator tolerance for    |
|                               |           | ratio tests.                 |
+-------------------------------+-----------+------------------------------+
| epsFlipping                   | OT_DOUBLE | Tolerance of squared         |
|                               |           | Cholesky diagonal factor     |
|                               |           | which triggers flipping      |
|                               |           | bound.                       |
+-------------------------------+-----------+------------------------------+
| epsIterRef                    | OT_DOUBLE | Early termination tolerance  |
|                               |           | for iterative refinement.    |
+-------------------------------+-----------+------------------------------+
| epsLITests                    | OT_DOUBLE | Tolerance for linear         |
|                               |           | independence tests.          |
+-------------------------------+-----------+------------------------------+
| epsNZCTests                   | OT_DOUBLE | Tolerance for nonzero        |
|                               |           | curvature tests.             |
+-------------------------------+-----------+------------------------------+
| epsNum                        | OT_DOUBLE | Numerator tolerance for      |
|                               |           | ratio tests.                 |
+-------------------------------+-----------+------------------------------+
| epsRegularisation             | OT_DOUBLE | Scaling factor of identity   |
|                               |           | matrix used for Hessian      |
|                               |           | regularisation.              |
+-------------------------------+-----------+------------------------------+
| finalRamping                  | OT_DOUBLE | Final value for ramping      |
|                               |           | strategy.                    |
+-------------------------------+-----------+------------------------------+
| growFarBounds                 | OT_DOUBLE | Factor to grow far bounds.   |
+-------------------------------+-----------+------------------------------+
| hessian_type                  | OT_STRING | Type of Hessian - see        |
|                               |           | qpOASES documentation [UNKNO |
|                               |           | WN|posdef|semidef|indef|zero |
|                               |           | |identity]]                  |
+-------------------------------+-----------+------------------------------+
| initialFarBounds              | OT_DOUBLE | Initial size for far bounds. |
+-------------------------------+-----------+------------------------------+
| initialRamping                | OT_DOUBLE | Start value for ramping      |
|                               |           | strategy.                    |
+-------------------------------+-----------+------------------------------+
| initialStatusBounds           | OT_STRING | Initial status of bounds at  |
|                               |           | first iteration.             |
+-------------------------------+-----------+------------------------------+
| linsol_plugin                 | OT_STRING | Linear solver plugin         |
+-------------------------------+-----------+------------------------------+
| maxDualJump                   | OT_DOUBLE | Maximum allowed jump in dual |
|                               |           | variables in linear          |
|                               |           | independence tests.          |
+-------------------------------+-----------+------------------------------+
| maxPrimalJump                 | OT_DOUBLE | Maximum allowed jump in      |
|                               |           | primal variables in nonzero  |
|                               |           | curvature tests.             |
+-------------------------------+-----------+------------------------------+
| max_schur                     | OT_INT    | Maximal number of Schur      |
|                               |           | updates [75]                 |
+-------------------------------+-----------+------------------------------+
| nWSR                          | OT_INT    | The maximum number of        |
|                               |           | working set recalculations   |
|                               |           | to be performed during the   |
|                               |           | initial homotopy. Default is |
|                               |           | 5(nx + nc)                   |
+-------------------------------+-----------+------------------------------+
| numRefinementSteps            | OT_INT    | Maximum number of iterative  |
|                               |           | refinement steps.            |
+-------------------------------+-----------+------------------------------+
| numRegularisationSteps        | OT_INT    | Maximum number of successive |
|                               |           | regularisation steps.        |
+-------------------------------+-----------+------------------------------+
| printLevel                    | OT_STRING | Defines the amount of text   |
|                               |           | output during QP solution,   |
|                               |           | see Section 5.7              |
+-------------------------------+-----------+------------------------------+
| schur                         | OT_BOOL   | Use Schur Complement         |
|                               |           | Approach [false]             |
+-------------------------------+-----------+------------------------------+
| sparse                        | OT_BOOL   | Formulate the QP using       |
|                               |           | sparse matrices. [false]     |
+-------------------------------+-----------+------------------------------+
| terminationTolerance          | OT_DOUBLE | Relative termination         |
|                               |           | tolerance to stop homotopy.  |
+-------------------------------+-----------+------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

sqic
----



Interface to the SQIC solver for quadratic programming

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

superscs
--------



Interface to the SuperSCS solver for conic programming

Joris Gillis, 2019

>List of available options

+----------+---------+-----------------------------------+
|    Id    |  Type   |            Description            |
+==========+=========+===================================+
| superscs | OT_DICT | Options to be passed to superscs. |
+----------+---------+-----------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

ipqp
----



Solves QPs using a Mehrotra predictor-corrector interior point method

>List of available options

+-----------------------+-----------+--------------------------------------+
|          Id           |   Type    |             Description              |
+=======================+===========+======================================+
| constr_viol_tol       | OT_DOUBLE | Constraint violation tolerance       |
|                       |           | [1e-8].                              |
+-----------------------+-----------+--------------------------------------+
| dual_inf_tol          | OT_DOUBLE | Dual feasibility violation tolerance |
|                       |           | [1e-8]                               |
+-----------------------+-----------+--------------------------------------+
| linear_solver         | OT_STRING | A custom linear solver creator       |
|                       |           | function [default: ldl]              |
+-----------------------+-----------+--------------------------------------+
| linear_solver_options | OT_DICT   | Options to be passed to the linear   |
|                       |           | solver                               |
+-----------------------+-----------+--------------------------------------+
| max_iter              | OT_INT    | Maximum number of iterations [1000]. |
+-----------------------+-----------+--------------------------------------+
| min_lam               | OT_DOUBLE | Smallest multiplier treated as       |
|                       |           | inactive for the initial active set  |
|                       |           | [0].                                 |
+-----------------------+-----------+--------------------------------------+
| print_header          | OT_BOOL   | Print header [true].                 |
+-----------------------+-----------+--------------------------------------+
| print_info            | OT_BOOL   | Print info [true].                   |
+-----------------------+-----------+--------------------------------------+
| print_iter            | OT_BOOL   | Print iterations [true].             |
+-----------------------+-----------+--------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

nlpsol
------



Solve QPs using an Nlpsol Use the 'nlpsol' option to specify the NLP solver
to use.

>List of available options

+----------------+-----------+---------------------------------+
|       Id       |   Type    |           Description           |
+================+===========+=================================+
| nlpsol         | OT_STRING | Name of solver.                 |
+----------------+-----------+---------------------------------+
| nlpsol_options | OT_DICT   | Options to be passed to solver. |
+----------------+-----------+---------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

qrqp
----



Solve QPs using an active-set method

>List of available options

+-----------------+-----------+--------------------------------------------+
|       Id        |   Type    |                Description                 |
+=================+===========+============================================+
| constr_viol_tol | OT_DOUBLE | Constraint violation tolerance [1e-8].     |
+-----------------+-----------+--------------------------------------------+
| dual_inf_tol    | OT_DOUBLE | Dual feasibility violation tolerance       |
|                 |           | [1e-8]                                     |
+-----------------+-----------+--------------------------------------------+
| max_iter        | OT_INT    | Maximum number of iterations [1000].       |
+-----------------+-----------+--------------------------------------------+
| min_lam         | OT_DOUBLE | Smallest multiplier treated as inactive    |
|                 |           | for the initial active set [0].            |
+-----------------+-----------+--------------------------------------------+
| print_header    | OT_BOOL   | Print header [true].                       |
+-----------------+-----------+--------------------------------------------+
| print_info      | OT_BOOL   | Print info [true].                         |
+-----------------+-----------+--------------------------------------------+
| print_iter      | OT_BOOL   | Print iterations [true].                   |
+-----------------+-----------+--------------------------------------------+
| print_lincomb   | OT_BOOL   | Print dependant linear combinations of     |
|                 |           | constraints [false]. Printed numbers are   |
|                 |           | 0-based indices into the vector of [simple |
|                 |           | bounds;linear bounds]                      |
+-----------------+-----------+--------------------------------------------+

--------------------------------------------------------------------------------



Joel Andersson

";

%feature("docstring")  casadi::casadi_qp_reset(casadi_qp_data< T1 > *d) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_qp_pr(casadi_qp_data< T1 > *d) "

[INTERNAL] ";

%feature("docstring")  casadi::doc_integrator(const std::string &name) "

Get the documentation string for a plugin.

";

%feature("docstring")  casadi::simpleIRK(Function f, casadi_int N=10,
casadi_int order=4, const std::string &scheme="radau", const std::string
&solver="newton", const Dict &solver_options=Dict()) "

Construct an implicit Runge-Kutta integrator using a collocation scheme The
constructed function has three inputs, corresponding to initial state (x0),
parameter (p) and integration time (h) and one output, corresponding to
final state (xf).

Parameters:
-----------

f:  ODE function with two inputs (x and p) and one output (xdot)

N:  Number of integrator steps

order:  Order of interpolating polynomials

scheme:   Collocation scheme, as excepted by collocationPoints function.

solver:  Solver plugin

solver_options:  Options to be passed to the solver plugin

";

%feature("docstring")  casadi::cache_check(const T1 *key, T1 *cache, int
*loc, casadi_int stride, casadi_int sz, casadi_int key_sz, T1 **val) "

[INTERNAL] ";

%feature("docstring")  casadi::nlpsol_option_type(const std::string &name,
const std::string &op) "

Get type info for a particular option.

";

%feature("docstring")  casadi::casadi_axpy(casadi_int n, T1 alpha, const T1
*x, T1 *y) "

[INTERNAL]  AXPY: y <- a*x + y.

";

%feature("docstring")  casadi::has_nlpsol(const std::string &name) "

Check if a particular plugin is available.

";

%feature("docstring")  casadi::casadi_getu(const T1 *x, const casadi_int
*sp_x, T1 *v) "

[INTERNAL]  Get the nonzeros for the upper triangular half.

";

%feature("docstring")  casadi::doc_nlpsol(const std::string &name) "

Get the documentation string for a plugin.

";

%feature("docstring")  casadi::casadi_sqpmethod_work(const
casadi_sqpmethod_prob< T1 > *p, casadi_int *sz_iw, casadi_int *sz_w) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_densify(const T1 *x, const casadi_int
*sp_x, T2 *y, casadi_int tr) "

[INTERNAL]  Convert sparse to dense.

";

%feature("docstring")  casadi::rootfinder_options(const std::string &name) "

Get all options for a plugin.

";

%feature("docstring")  casadi::zip(const std::vector< std::string > &id,
const std::vector< T > &mat) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_max_viol(casadi_int n, const T1 *x,
const T1 *lb, const T1 *ub) "

[INTERNAL]  Largest bound violation.

";

%feature("docstring")  casadi::casadi_qp_factorize(casadi_qp_data< T1 > *d)
"

[INTERNAL] ";

%feature("docstring")  casadi::collocation_interpolators(const std::vector<
double > &tau, std::vector< std::vector< double > > &output_C, std::vector<
double > &output_D) "

Obtain collocation interpolating matrices.

A collocation method poses a polynomial Pi that interpolates exactly through
an initial state (0,X_0) and helper states at collocation points
(tau_j,X(j)).

This function computes the linear mapping between dPi/dt and coefficients
Z=[X_0 X].

Parameters:
-----------

tau:  location of collocation points, as obtained from collocation_points

output_C:  interpolating coefficients to obtain derivatives. Length:
order+1, order+1



::

dPi/dt @Z_j = (1/h) Sum_i C[j][i]*Z_i,



with h the length of the integration interval.

Parameters:
-----------

output_D:  interpolating coefficients to obtain end state. Length: order+1



::

Pi @X_f = Sum_i D[i]*Z_i



";

%feature("docstring")  casadi::casadi_cvx_tri(T1 *A, casadi_int n, T1 *p) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_ipqp_sz_w(const casadi_ipqp_prob< T1 >
*p) "

[INTERNAL] ";

%feature("docstring")  casadi::is_nonincreasing(const std::vector< T > &v) "

Check if the vector is non-increasing.

";

%feature("docstring")  casadi::nlpsol_n_in() "

Number of NLP solver inputs.

";

%feature("docstring")  casadi::matrixName() "

Get typename.

";

%feature("docstring")  casadi::load_dple(const std::string &name) "

Explicitly load a plugin dynamically.

";

%feature("docstring")  casadi::ConstantSX_deserialize(DeserializingStream
&s) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_qp_expand_step(casadi_qp_data< T1 >
*d) "

[INTERNAL] ";

%feature("docstring")  casadi::integrator_in() "

Get input scheme of integrators.

";

%feature("docstring")  casadi::integrator_in(casadi_int ind) "

Get integrator input scheme name by index.

";

%feature("docstring")  casadi::is_regular(const std::vector< T > &v) "

Checks if array does not contain NaN or Inf.

";

%feature("docstring")  casadi::is_regular(N_Vector v) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_vfmax(const T1 *x, casadi_int n, T1 r)
"

[INTERNAL] ";

%feature("docstring")  casadi::casadi_regularize(const casadi_int *sp_h, T1
*h, T1 reg) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_ldl_solve(T1 *x, casadi_int nrhs,
const casadi_int *sp_lt, const T1 *lt, const T1 *d, const casadi_int *p, T1
*w) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_qp_singular_step(casadi_qp_data< T1 >
*d) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_kron(const T1 *a, const casadi_int
*sp_a, const T1 *b, const casadi_int *sp_b, T1 *r) "

[INTERNAL]  Calculates Calculates nonzeros of kronecker product

";

%feature("docstring")  casadi::nlpsol_option_info(const std::string &name,
const std::string &op) "

Get documentation for a particular option.

";

%feature("docstring")  casadi::casadi_qp_kkt_vector(casadi_qp_data< T1 > *d,
T1 *kkt_i, casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::hash_value(T v) "

Hash value of an integer.

";

%feature("docstring")  casadi::casadi_polyval(const T1 *p, casadi_int n, T1
x) "

[INTERNAL]  Evaluate a polynomial.

";

%feature("docstring")  casadi::casadi_house(T1 *v, T1 *beta, casadi_int nv)
"

[INTERNAL] ";

%feature("docstring")  casadi::dense_mul_nt(casadi_int n, casadi_int m,
casadi_int l, const double *A, const double *B, double *C) "

[INTERNAL] ";

%feature("docstring")  casadi::rootfinder_n_out() "

Number of rootfinder outputs.

";

%feature("docstring")  casadi::casadi_ipqp_guess(casadi_ipqp_data< T1 > *d,
const T1 *x0, const T1 *lam_x0, const T1 *lam_a0) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_flip(casadi_int *corner, casadi_int
ndim) "

[INTERNAL] ";

%feature("docstring")  casadi::simpleIntegrator(Function f, const
std::string &integrator="cvodes", const Dict &integrator_options=Dict()) "

Simplified wrapper for the Integrator class Constructs an integrator using
the same syntax as simpleRK and simpleIRK. The constructed function has
three inputs, corresponding to initial state (x0), parameter (p) and
integration time (h) and one output, corresponding to final state (xf).

Parameters:
-----------

f:  ODE function with two inputs (x and p) and one output (xdot)

N:  Number of integrator steps

order:  Order of interpolating polynomials

scheme:   Collocation scheme, as excepted by collocationPoints function.

";

%feature("docstring")  casadi::casadi_interpn_interpolate(casadi_int ndim,
const casadi_int *offset, const T1 *values, const T1 *alpha, const
casadi_int *index, const casadi_int *corner, T1 *coeff) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_interpn_interpolate(T1 *res,
casadi_int ndim, const casadi_int *offset, const T1 *values, const T1
*alpha, const casadi_int *index, const casadi_int *corner, T1 *coeff,
casadi_int m) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_copy(const T1 *x, casadi_int n, T1 *y)
"

[INTERNAL]  COPY: y <-x.

";

%feature("docstring")  casadi::nlpsol_default_in(casadi_int ind) "

Default input for an NLP solver.

";

%feature("docstring")  casadi::nlpsol_default_in() "

Default input for an NLP solver.

";

%feature("docstring")  casadi::casadi_lsqr_sym_ortho(T1 a, T1 b, T1 *cs, T1
*sn, T1 *rho) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_norm_inf(casadi_int n, const T1 *x) "

[INTERNAL]  Inf-norm of a vector * Returns the largest element in absolute
value

";

%feature("docstring")  casadi::casadi_ldl_trs(const casadi_int *sp_r, const
T1 *nz_r, T1 *x, casadi_int tr) "

[INTERNAL] ";

%feature("docstring")  casadi::has_rootfinder(const std::string &name) "

Check if a particular plugin is available.

";

%feature("docstring")  casadi::conic_n_out() "

Get the number of QP solver outputs.

";

%feature("docstring")  casadi::casadi_nd_boor_dual_eval(T1 *val, casadi_int
*nz, casadi_int n_dims, const T1 *all_knots, const casadi_int *offset, const
casadi_int *all_degree, const casadi_int *strides, const T1 *all_x, const
casadi_int *lookup_mode, casadi_int *iw, T1 *w) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_qr_colcomb(T1 *v, const T1 *nz_r,
const casadi_int *sp_r, const casadi_int *pc, T1 eps, casadi_int ind) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_project(const T1 *x, const casadi_int
*sp_x, T1 *y, const casadi_int *sp_y, T1 *w) "

[INTERNAL]  Sparse copy: y <- x, w work vector (length >= number of rows)

";

%feature("docstring")  casadi::casadi_qp_calc_dependent(casadi_qp_data< T1 >
*d) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_qp_print_header(casadi_qp_data< T1 >
*d, char *buf, size_t buf_sz) "

[INTERNAL] ";

%feature("docstring")  casadi::interpolant(const std::string &name, const
std::string &solver, const std::vector< std::vector< double > > &grid, const
std::vector< double > &values, const Dict &opts=Dict()) "

An interpolant function for lookup table data

Parameters:
-----------

name:  label for the resulting Function

solver:  name of the plugin

grid:  collection of 1D grids whose outer product defines the full N-D
rectangular grid

values:  flattened vector of all values for all gridpoints

Syntax 1D

::

  * # Python
  * xgrid = np.linspace(1,6,6)
  * V = [-1,-1,-2,-3,0,2]
  * LUT = casadi.interpolant(\"LUT\",\"bspline\",[xgrid],V)
  * print(LUT(2.5))
  * 



::

  * % Matlab
  * xgrid = 1:6;
  * V = [-1 -1 -2 -3 0 2];
  * LUT = casadi.interpolant('LUT','bspline',{xgrid},V);
  * LUT(2.5)
  * 



Syntax 2D

::

  * # Python
  * xgrid = np.linspace(-5,5,11)
  * ygrid = np.linspace(-4,4,9)
  * X,Y = np.meshgrid(xgrid,ygrid,indexing='ij')
  * R = np.sqrt(5*X**2 + Y**2)+ 1
  * data = np.sin(R)/R
  * data_flat = data.ravel(order='F')
  * LUT = casadi.interpolant('name','bspline',[xgrid,ygrid],data_flat)
  * print(LUT([0.5,1]))
  * \\\\enverbatim
  * \\\\verbatim
  * % Matlab
  * xgrid = -5:1:5;
  * ygrid = -4:1:4;
  * R = sqrt(5*X.^2 + Y.^2)+ 1;
  * V = sin(R)./(R);
  * LUT = interpolant('LUT','bspline',{xgrid, ygrid},V(:));
  * LUT([0.5 1])
  * 



General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| batch_x          | OT_INT          | Evaluate a batch | casadi::Interpol |
|                  |                 | of different     | ant              |
|                  |                 | inputs at once   |                  |
|                  |                 | (default 1).     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| inline           | OT_BOOL         | Implement the    | casadi::Interpol |
|                  |                 | lookup table in  | ant              |
|                  |                 | MX primitives.   |                  |
|                  |                 | Useful when you  |                  |
|                  |                 | need derivatives |                  |
|                  |                 | with respect to  |                  |
|                  |                 | grid and/or      |                  |
|                  |                 | coefficients.    |                  |
|                  |                 | Such derivatives |                  |
|                  |                 | are              |                  |
|                  |                 | fundamentally    |                  |
|                  |                 | dense, so use    |                  |
|                  |                 | with caution.    |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| lookup_mode      | OT_STRINGVECTOR | Specifies, for   | casadi::Interpol |
|                  |                 | each grid        | ant              |
|                  |                 | dimenion, the    |                  |
|                  |                 | lookup algorithm |                  |
|                  |                 | used to find the |                  |
|                  |                 | correct index.   |                  |
|                  |                 | 'linear' uses a  |                  |
|                  |                 | for-loop +       |                  |
|                  |                 | break; (default  |                  |
|                  |                 | when             |                  |
|                  |                 | #knots<=100),    |                  |
|                  |                 | 'exact' uses     |                  |
|                  |                 | floored division |                  |
|                  |                 | (only for        |                  |
|                  |                 | uniform grids),  |                  |
|                  |                 | 'binary' uses a  |                  |
|                  |                 | binary search.   |                  |
|                  |                 | (default when    |                  |
|                  |                 | #knots>100).     |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

List of plugins
===============



- bspline

- linear

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Interpolant.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

bspline
-------



>List of available options

+-----------------------+--------------+-----------------------------------+
|          Id           |     Type     |            Description            |
+=======================+==============+===================================+
| algorithm             | OT_STRING    | Algorithm used for fitting the    |
|                       |              | data: 'not_a_knot' (default, same |
|                       |              | as Matlab), 'smooth_linear'.      |
+-----------------------+--------------+-----------------------------------+
| degree                | OT_INTVECTOR | Sets, for each grid dimension,    |
|                       |              | the degree of the spline.         |
+-----------------------+--------------+-----------------------------------+
| linear_solver         | OT_STRING    | Solver used for constructing the  |
|                       |              | coefficient tensor.               |
+-----------------------+--------------+-----------------------------------+
| linear_solver_options | OT_DICT      | Options to be passed to the       |
|                       |              | linear solver.                    |
+-----------------------+--------------+-----------------------------------+
| smooth_linear_frac    | OT_DOUBLE    | When 'smooth_linear' algorithm is |
|                       |              | active, determines sharpness      |
|                       |              | between 0 (sharp, as linear       |
|                       |              | interpolation) and 0.5            |
|                       |              | (smooth).Default value is 0.1.    |
+-----------------------+--------------+-----------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

linear
------



>List of available options

+-------------+-----------------+------------------------------------------+
|     Id      |      Type       |               Description                |
+=============+=================+==========================================+
| lookup_mode | OT_STRINGVECTOR | Sets, for each grid dimenion, the lookup |
|             |                 | algorithm used to find the correct       |
|             |                 | index. 'linear' uses a for-loop + break; |
|             |                 | 'exact' uses floored division (only for  |
|             |                 | uniform grids).                          |
+-------------+-----------------+------------------------------------------+

--------------------------------------------------------------------------------



Joel Andersson

";

%feature("docstring")  casadi::interpolant(const std::string &name, const
std::string &solver, const std::vector< std::vector< double > > &grid,
casadi_int m=1, const Dict &opts=Dict()) "

Parametric variant of interpolant.

The resulting function will have an additional argument for the coefficients

By default, derivatives wrt the coefficients are not supported (zero). Some
interpolant plugins may support the inline=true which enables correct
derivatives

";

%feature("docstring")  casadi::interpolant(const std::string &name, const
std::string &solver, const std::vector< casadi_int > &grid_dims, casadi_int
m=1, const Dict &opts=Dict()) "

Parametric variant of interpolant.

The resulting function will have additional arguments for the grid and
coefficients

By default, derivatives wrt the coefficients are not supported (zero). Some
interpolant plugins may support the inline=true which enables correct
derivatives

";

%feature("docstring")  casadi::interpolant(const std::string &name, const
std::string &solver, const std::vector< casadi_int > &grid_dims, const
std::vector< double > &values, const Dict &opts=Dict()) "

Parametric variant of interpolant.

The resulting function will have an additional argument for the grid

By default, derivatives wrt the coefficients are not supported (zero). Some
interpolant plugins may support the inline=true which enables correct
derivatives

";

%feature("docstring")  casadi::rootfinder_in() "

Get rootfinder input scheme.

";

%feature("docstring")  casadi::rootfinder_in(casadi_int ind) "

Get rootfinder input scheme name by index.

";

%feature("docstring")  casadi::dplesol(const std::string &name, const
std::string &solver, const SpDict &st, const Dict &opts=Dict()) "

Discrete periodic Lyapunov Equation solver Given matrices $A_k$ and
symmetric $V_k, k = 0..K-1$

::

  A_k in R^(n x n)
  V_k in R^n
  

provides all of $P_k$ that satisfy:

::

  P_0 = A_(K-1)*P_(K-1)*A_(K-1)' + V_k
  P_k+1 = A_k*P_k*A_k' + V_k  for k = 1..K-1
  



General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| const_dim        | OT_BOOL         | Assume constant  | casadi::Dple     |
|                  |                 | dimension of P   |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| eps_unstable     | OT_DOUBLE       | A margin for     | casadi::Dple     |
|                  |                 | unstability      |                  |
|                  |                 | detection        |                  |
+------------------+-----------------+------------------+------------------+
| error_unstable   | OT_BOOL         | Throw an         | casadi::Dple     |
|                  |                 | exception when   |                  |
|                  |                 | it is detected   |                  |
|                  |                 | that             |                  |
|                  |                 | Product(A_i,     |                  |
|                  |                 | i=N..1)has       |                  |
|                  |                 | eigenvalues      |                  |
|                  |                 | greater than     |                  |
|                  |                 | 1-eps_unstable   |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| pos_def          | OT_BOOL         | Assume P         | casadi::Dple     |
|                  |                 | positive         |                  |
|                  |                 | definite         |                  |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

>Input scheme: casadi::DpleInput (DPLE_NUM_IN = 2)

+-----------+-------+------------------------------------------------------+
| Full name | Short |                     Description                      |
+===========+=======+======================================================+
| DPLE_A    | a     | A matrices (horzcat when const_dim, diagcat          |
|           |       | otherwise) [a].                                      |
+-----------+-------+------------------------------------------------------+
| DPLE_V    | v     | V matrices (horzcat when const_dim, diagcat          |
|           |       | otherwise) [v].                                      |
+-----------+-------+------------------------------------------------------+

>Output scheme: casadi::DpleOutput (DPLE_NUM_OUT = 1)

+-----------+-------+------------------------------------------------------+
| Full name | Short |                     Description                      |
+===========+=======+======================================================+
| DPLE_P    | p     | Lyapunov matrix (horzcat when const_dim, diagcat     |
|           |       | otherwise) (Cholesky of P if pos_def) [p].           |
+-----------+-------+------------------------------------------------------+

List of plugins
===============



- slicot

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Dple.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

slicot
------



An efficient solver for Discrete Periodic Lyapunov Equations using SLICOT

Uses Periodic Schur Decomposition ('psd') and does not assume positive
definiteness. Based on Periodic Lyapunov equations: some applications and
new algorithms. Int. J. Control, vol. 67, pp. 69-87, 1997.

Overview of the method: J. Gillis Practical Methods for Approximate Robust
Periodic Optimal Control ofNonlinear Mechanical Systems, PhD Thesis,
KULeuven, 2015

>List of available options

+-----------------------+-----------+--------------------------------------+
|          Id           |   Type    |             Description              |
+=======================+===========+======================================+
| linear_solver         | OT_STRING | User-defined linear solver class.    |
|                       |           | Needed for sensitivities.            |
+-----------------------+-----------+--------------------------------------+
| linear_solver_options | OT_DICT   | Options to be passed to the linear   |
|                       |           | solver.                              |
+-----------------------+-----------+--------------------------------------+
| psd_num_zero          | OT_DOUBLE | Numerical zero used in Periodic      |
|                       |           | Schur decomposition with slicot.This |
|                       |           | option is needed when your systems   |
|                       |           | has Floquet multiplierszero or close |
|                       |           | to zero                              |
+-----------------------+-----------+--------------------------------------+

--------------------------------------------------------------------------------



Joris Gillis

";

%feature("docstring")  casadi::is_slice(const IM &x, bool ind1=false) "

Is the IM a Slice.

";

%feature("docstring")  casadi::is_slice(const std::vector< casadi_int > &v,
bool ind1=false) "

Check if an index vector can be represented more efficiently as a slice.

";

%feature("docstring")  casadi::casadi_mmin(const T1 *x, casadi_int n,
casadi_int is_dense) "

[INTERNAL] ";

%feature("docstring")  casadi::is_decreasing(const std::vector< T > &v) "

Check if the vector is strictly decreasing.

";

%feature("docstring")  casadi::casadi_qr(const casadi_int *sp_a, const T1
*nz_a, T1 *x, const casadi_int *sp_v, T1 *nz_v, const casadi_int *sp_r, T1
*nz_r, T1 *beta, const casadi_int *prinv, const casadi_int *pc) "

[INTERNAL] ";

%feature("docstring")  casadi::doc_conic(const std::string &name) "

Get the documentation string for a plugin.

";

%feature("docstring")  casadi::casadi_dot(casadi_int n, const T1 *x, const
T1 *y) "

[INTERNAL]  Inner product.

";

%feature("docstring")  casadi::nlpsol(const std::string &name, const
std::string &solver, const SXDict &nlp, const Dict &opts=Dict()) "

Create an NLP solver Creates a solver for the following parametric nonlinear
program (NLP):

::

  min          F(x, p)
  x
  
  subject to
  LBX <=   x    <= UBX
  LBG <= G(x, p) <= UBG
  p  == P
  
  nx: number of decision variables
  ng: number of constraints
  np: number of parameters



General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| bound_consistenc | OT_BOOL         | Ensure that      | casadi::Nlpsol   |
| y                |                 | primal-dual      |                  |
|                  |                 | solution is      |                  |
|                  |                 | consistent with  |                  |
|                  |                 | the bounds       |                  |
+------------------+-----------------+------------------+------------------+
| calc_f           | OT_BOOL         | Calculate 'f' in | casadi::Nlpsol   |
|                  |                 | the Nlpsol base  |                  |
|                  |                 | class            |                  |
+------------------+-----------------+------------------+------------------+
| calc_g           | OT_BOOL         | Calculate 'g' in | casadi::Nlpsol   |
|                  |                 | the Nlpsol base  |                  |
|                  |                 | class            |                  |
+------------------+-----------------+------------------+------------------+
| calc_lam_p       | OT_BOOL         | Calculate        | casadi::Nlpsol   |
|                  |                 | 'lam_p' in the   |                  |
|                  |                 | Nlpsol base      |                  |
|                  |                 | class            |                  |
+------------------+-----------------+------------------+------------------+
| calc_lam_x       | OT_BOOL         | Calculate        | casadi::Nlpsol   |
|                  |                 | 'lam_x' in the   |                  |
|                  |                 | Nlpsol base      |                  |
|                  |                 | class            |                  |
+------------------+-----------------+------------------+------------------+
| calc_multipliers | OT_BOOL         | Calculate        | casadi::Nlpsol   |
|                  |                 | Lagrange         |                  |
|                  |                 | multipliers in   |                  |
|                  |                 | the Nlpsol base  |                  |
|                  |                 | class            |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| discrete         | OT_BOOLVECTOR   | Indicates which  | casadi::Nlpsol   |
|                  |                 | of the variables |                  |
|                  |                 | are discrete,    |                  |
|                  |                 | i.e. integer-    |                  |
|                  |                 | valued           |                  |
+------------------+-----------------+------------------+------------------+
| error_on_fail    | OT_BOOL         | When the         | casadi::Nlpsol   |
|                  |                 | numerical        |                  |
|                  |                 | process returns  |                  |
|                  |                 | unsuccessfully,  |                  |
|                  |                 | raise an error   |                  |
|                  |                 | (default false). |                  |
+------------------+-----------------+------------------+------------------+
| eval_errors_fata | OT_BOOL         | When errors      | casadi::Nlpsol   |
| l                |                 | occur during     |                  |
|                  |                 | evaluation of    |                  |
|                  |                 | f,g,...,stop the |                  |
|                  |                 | iterations       |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::OracleFu |
|                  |                 | SX expressions   | nction           |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| ignore_check_vec | OT_BOOL         | If set to true,  | casadi::Nlpsol   |
|                  |                 | the input shape  |                  |
|                  |                 | of F will not be |                  |
|                  |                 | checked.         |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_FUNCTION     | A function that  | casadi::Nlpsol   |
| ck               |                 | will be called   |                  |
|                  |                 | at each          |                  |
|                  |                 | iteration with   |                  |
|                  |                 | the solver as    |                  |
|                  |                 | input. Check     |                  |
|                  |                 | documentation of |                  |
|                  |                 | Callback .       |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_BOOL         | If set to true,  | casadi::Nlpsol   |
| ck_ignore_errors |                 | errors thrown by |                  |
|                  |                 | iteration_callba |                  |
|                  |                 | ck will be       |                  |
|                  |                 | ignored.         |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_INT          | Only call the    | casadi::Nlpsol   |
| ck_step          |                 | callback         |                  |
|                  |                 | function every   |                  |
|                  |                 | few iterations.  |                  |
+------------------+-----------------+------------------+------------------+
| min_lam          | OT_DOUBLE       | Minimum allowed  | casadi::Nlpsol   |
|                  |                 | multiplier value |                  |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| no_nlp_grad      | OT_BOOL         | Prevent the      | casadi::Nlpsol   |
|                  |                 | creation of the  |                  |
|                  |                 | 'nlp_grad'       |                  |
|                  |                 | function         |                  |
+------------------+-----------------+------------------+------------------+
| oracle_options   | OT_DICT         | Options to be    | casadi::Nlpsol   |
|                  |                 | passed to the    |                  |
|                  |                 | oracle function  |                  |
+------------------+-----------------+------------------+------------------+
| sens_linsol      | OT_STRING       | Linear solver    | casadi::Nlpsol   |
|                  |                 | used for         |                  |
|                  |                 | parametric       |                  |
|                  |                 | sensitivities    |                  |
|                  |                 | (default 'qr').  |                  |
+------------------+-----------------+------------------+------------------+
| sens_linsol_opti | OT_DICT         | Linear solver    | casadi::Nlpsol   |
| ons              |                 | options used for |                  |
|                  |                 | parametric       |                  |
|                  |                 | sensitivities.   |                  |
+------------------+-----------------+------------------+------------------+
| show_eval_warnin | OT_BOOL         | Show warnings    | casadi::OracleFu |
| gs               |                 | generated from   | nction           |
|                  |                 | function         |                  |
|                  |                 | evaluations      |                  |
|                  |                 | [true]           |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| verbose_init     | OT_BOOL         | Print out timing | casadi::Nlpsol   |
|                  |                 | information      |                  |
|                  |                 | about the        |                  |
|                  |                 | different stages |                  |
|                  |                 | of               |                  |
|                  |                 | initialization   |                  |
+------------------+-----------------+------------------+------------------+
| warn_initial_bou | OT_BOOL         | Warn if the      | casadi::Nlpsol   |
| nds              |                 | initial guess    |                  |
|                  |                 | does not satisfy |                  |
|                  |                 | LBX and UBX      |                  |
+------------------+-----------------+------------------+------------------+

>Input scheme: casadi::NlpsolInput (NLPSOL_NUM_IN = 8)

+---------------+--------+-------------------------------------------------+
|   Full name   | Short  |                   Description                   |
+===============+========+=================================================+
| NLPSOL_X0     | x0     | Decision variables, initial guess (nx x 1)      |
+---------------+--------+-------------------------------------------------+
| NLPSOL_P      | p      | Value of fixed parameters (np x 1)              |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBX    | lbx    | Decision variables lower bound (nx x 1),        |
|               |        | default -inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBX    | ubx    | Decision variables upper bound (nx x 1),        |
|               |        | default +inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBG    | lbg    | Constraints lower bound (ng x 1), default -inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBG    | ubg    | Constraints upper bound (ng x 1), default +inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_X0 | lam_x0 | Lagrange multipliers for bounds on X, initial   |
|               |        | guess (nx x 1)                                  |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_G0 | lam_g0 | Lagrange multipliers for bounds on G, initial   |
|               |        | guess (ng x 1)                                  |
+---------------+--------+-------------------------------------------------+

>Output scheme: casadi::NlpsolOutput (NLPSOL_NUM_OUT = 6)

+--------------+-------+---------------------------------------------------+
|  Full name   | Short |                    Description                    |
+==============+=======+===================================================+
| NLPSOL_X     | x     | Decision variables at the optimal solution (nx x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_F     | f     | Cost function value at the optimal solution (1 x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_G     | g     | Constraints function at the optimal solution (ng  |
|              |       | x 1)                                              |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_X | lam_x | Lagrange multipliers for bounds on X at the       |
|              |       | solution (nx x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_G | lam_g | Lagrange multipliers for bounds on G at the       |
|              |       | solution (ng x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_P | lam_p | Lagrange multipliers for bounds on P at the       |
|              |       | solution (np x 1)                                 |
+--------------+-------+---------------------------------------------------+

List of plugins
===============



- AmplInterface

- blocksqp

- bonmin

- ipopt

- knitro

- snopt

- worhp

- qrsqp

- scpgen

- sqpmethod

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Nlpsol.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

AmplInterface
-------------



>List of available options

+--------+-----------+--------------------+
|   Id   |   Type    |    Description     |
+========+===========+====================+
| solver | OT_STRING | AMPL solver binary |
+--------+-----------+--------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

blocksqp
--------



This is a modified version of blockSQP by Janka et al.

Dennis Janka, Joel Andersson

>List of available options

+----------------------------+-----------+---------------------------------+
|             Id             |   Type    |           Description           |
+============================+===========+=================================+
| block_hess                 | OT_INT    | Blockwise Hessian               |
|                            |           | approximation?                  |
+----------------------------+-----------+---------------------------------+
| col_eps                    | OT_DOUBLE | Epsilon for COL scaling         |
|                            |           | strategy                        |
+----------------------------+-----------+---------------------------------+
| col_tau1                   | OT_DOUBLE | tau1 for COL scaling strategy   |
+----------------------------+-----------+---------------------------------+
| col_tau2                   | OT_DOUBLE | tau2 for COL scaling strategy   |
+----------------------------+-----------+---------------------------------+
| conv_strategy              | OT_INT    | Convexification strategy        |
+----------------------------+-----------+---------------------------------+
| delta                      | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| delta_h0                   | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| eps                        | OT_DOUBLE | Values smaller than this are    |
|                            |           | regarded as numerically zero    |
+----------------------------+-----------+---------------------------------+
| eta                        | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| fallback_scaling           | OT_INT    | If indefinite update is used,   |
|                            |           | the type of fallback strategy   |
+----------------------------+-----------+---------------------------------+
| fallback_update            | OT_INT    | If indefinite update is used,   |
|                            |           | the type of fallback strategy   |
+----------------------------+-----------+---------------------------------+
| gamma_f                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| gamma_theta                | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| globalization              | OT_BOOL   | Enable globalization            |
+----------------------------+-----------+---------------------------------+
| hess_damp                  | OT_INT    | Activate Powell damping for     |
|                            |           | BFGS                            |
+----------------------------+-----------+---------------------------------+
| hess_damp_fac              | OT_DOUBLE | Damping factor for BFGS Powell  |
|                            |           | modification                    |
+----------------------------+-----------+---------------------------------+
| hess_lim_mem               | OT_INT    | Full or limited memory          |
+----------------------------+-----------+---------------------------------+
| hess_memsize               | OT_INT    | Memory size for L-BFGS updates  |
+----------------------------+-----------+---------------------------------+
| hess_scaling               | OT_INT    | Scaling strategy for Hessian    |
|                            |           | approximation                   |
+----------------------------+-----------+---------------------------------+
| hess_update                | OT_INT    | Type of Hessian approximation   |
+----------------------------+-----------+---------------------------------+
| ini_hess_diag              | OT_DOUBLE | Initial Hessian guess: diagonal |
|                            |           | matrix diag(iniHessDiag)        |
+----------------------------+-----------+---------------------------------+
| kappa_f                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_minus                | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_plus                 | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_plus_max             | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_soc                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| linsol                     | OT_STRING | The linear solver to be used by |
|                            |           | the QP method                   |
+----------------------------+-----------+---------------------------------+
| max_consec_reduced_steps   | OT_INT    | Maximum number of consecutive   |
|                            |           | reduced steps                   |
+----------------------------+-----------+---------------------------------+
| max_consec_skipped_updates | OT_INT    | Maximum number of consecutive   |
|                            |           | skipped updates                 |
+----------------------------+-----------+---------------------------------+
| max_conv_qp                | OT_INT    | How many additional QPs may be  |
|                            |           | solved for convexification per  |
|                            |           | iteration?                      |
+----------------------------+-----------+---------------------------------+
| max_it_qp                  | OT_INT    | Maximum number of QP iterations |
|                            |           | per SQP iteration               |
+----------------------------+-----------+---------------------------------+
| max_iter                   | OT_INT    | Maximum number of SQP           |
|                            |           | iterations                      |
+----------------------------+-----------+---------------------------------+
| max_line_search            | OT_INT    | Maximum number of steps in line |
|                            |           | search                          |
+----------------------------+-----------+---------------------------------+
| max_soc_iter               | OT_INT    | Maximum number of SOC line      |
|                            |           | search iterations               |
+----------------------------+-----------+---------------------------------+
| max_time_qp                | OT_DOUBLE | Maximum number of time in       |
|                            |           | seconds per QP solve per SQP    |
|                            |           | iteration                       |
+----------------------------+-----------+---------------------------------+
| nlinfeastol                | OT_DOUBLE | Nonlinear feasibility tolerance |
+----------------------------+-----------+---------------------------------+
| obj_lo                     | OT_DOUBLE | Lower bound on objective        |
|                            |           | function [-inf]                 |
+----------------------------+-----------+---------------------------------+
| obj_up                     | OT_DOUBLE | Upper bound on objective        |
|                            |           | function [inf]                  |
+----------------------------+-----------+---------------------------------+
| opttol                     | OT_DOUBLE | Optimality tolerance            |
+----------------------------+-----------+---------------------------------+
| print_header               | OT_BOOL   | Print solver header at startup  |
+----------------------------+-----------+---------------------------------+
| print_iteration            | OT_BOOL   | Print SQP iterations            |
+----------------------------+-----------+---------------------------------+
| print_maxit_reached        | OT_BOOL   | Print error when maximum number |
|                            |           | of SQP iterations reached       |
+----------------------------+-----------+---------------------------------+
| qp_init                    | OT_BOOL   | Use warmstarting                |
+----------------------------+-----------+---------------------------------+
| qpsol                      | OT_STRING | The QP solver to be used by the |
|                            |           | SQP method                      |
+----------------------------+-----------+---------------------------------+
| qpsol_options              | OT_DICT   | Options to be passed to the QP  |
|                            |           | solver                          |
+----------------------------+-----------+---------------------------------+
| restore_feas               | OT_BOOL   | Use feasibility restoration     |
|                            |           | phase                           |
+----------------------------+-----------+---------------------------------+
| rho                        | OT_DOUBLE | Feasibility restoration phase   |
|                            |           | parameter                       |
+----------------------------+-----------+---------------------------------+
| s_f                        | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| s_theta                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| schur                      | OT_BOOL   | Use qpOASES Schur compliment    |
|                            |           | approach                        |
+----------------------------+-----------+---------------------------------+
| skip_first_globalization   | OT_BOOL   | No globalization strategy in    |
|                            |           | first iteration                 |
+----------------------------+-----------+---------------------------------+
| theta_max                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| theta_min                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| warmstart                  | OT_BOOL   | Use warmstarting                |
+----------------------------+-----------+---------------------------------+
| which_second_derv          | OT_INT    | For which block should second   |
|                            |           | derivatives be provided by the  |
|                            |           | user                            |
+----------------------------+-----------+---------------------------------+
| zeta                       | OT_DOUBLE | Feasibility restoration phase   |
|                            |           | parameter                       |
+----------------------------+-----------+---------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

bonmin
------



When in warmstart mode, output NLPSOL_LAM_X may be used as input

NOTE: Even when max_iter == 0, it is not guaranteed that input(NLPSOL_X0) ==
output(NLPSOL_X). Indeed if bounds on X or constraints are unmet, they will
differ.

For a good tutorial on BONMIN,
seehttp://drops.dagstuhl.de/volltexte/2009/2089/pdf/09061.WaechterAndreas.Paper.2089.pdf

A good resource about the algorithms in BONMIN is: Wachter and L. T.
Biegler, On the Implementation of an Interior-Point Filter Line-Search
Algorithm for Large-Scale Nonlinear Programming, Mathematical Programming
106(1), pp. 25-57, 2006 (As Research Report RC 23149, IBM T. J. Watson
Research Center, Yorktown, USA

Caveats: with default options, multipliers for the decision variables are
wrong for equality constraints. Change the 'fixed_variable_treatment' to
'make_constraint' or 'relax_bounds' to obtain correct results.

>List of available options

+-------------------------+-----------------------+------------------------+
|           Id            |         Type          |      Description       |
+=========================+=======================+========================+
| bonmin                  | OT_DICT               | Options to be passed   |
|                         |                       | to BONMIN              |
+-------------------------+-----------------------+------------------------+
| con_integer_md          | OT_DICT               | Integer metadata (a    |
|                         |                       | dictionary with lists  |
|                         |                       | of integers) about     |
|                         |                       | constraints to be      |
|                         |                       | passed to BONMIN       |
+-------------------------+-----------------------+------------------------+
| con_numeric_md          | OT_DICT               | Numeric metadata (a    |
|                         |                       | dictionary with lists  |
|                         |                       | of reals) about        |
|                         |                       | constraints to be      |
|                         |                       | passed to BONMIN       |
+-------------------------+-----------------------+------------------------+
| con_string_md           | OT_DICT               | String metadata (a     |
|                         |                       | dictionary with lists  |
|                         |                       | of strings) about      |
|                         |                       | constraints to be      |
|                         |                       | passed to BONMIN       |
+-------------------------+-----------------------+------------------------+
| grad_f                  | OT_FUNCTION           | Function for           |
|                         |                       | calculating the        |
|                         |                       | gradient of the        |
|                         |                       | objective (column,     |
|                         |                       | autogenerated by       |
|                         |                       | default)               |
+-------------------------+-----------------------+------------------------+
| grad_f_options          | OT_DICT               | Options for the        |
|                         |                       | autogenerated gradient |
|                         |                       | of the objective.      |
+-------------------------+-----------------------+------------------------+
| hess_lag                | OT_FUNCTION           | Function for           |
|                         |                       | calculating the        |
|                         |                       | Hessian of the         |
|                         |                       | Lagrangian             |
|                         |                       | (autogenerated by      |
|                         |                       | default)               |
+-------------------------+-----------------------+------------------------+
| hess_lag_options        | OT_DICT               | Options for the        |
|                         |                       | autogenerated Hessian  |
|                         |                       | of the Lagrangian.     |
+-------------------------+-----------------------+------------------------+
| jac_g                   | OT_FUNCTION           | Function for           |
|                         |                       | calculating the        |
|                         |                       | Jacobian of the        |
|                         |                       | constraints            |
|                         |                       | (autogenerated by      |
|                         |                       | default)               |
+-------------------------+-----------------------+------------------------+
| jac_g_options           | OT_DICT               | Options for the        |
|                         |                       | autogenerated Jacobian |
|                         |                       | of the constraints.    |
+-------------------------+-----------------------+------------------------+
| pass_nonlinear_constrai | OT_BOOL               | Pass list of           |
| nts                     |                       | constraints entering   |
|                         |                       | nonlinearly to BONMIN  |
+-------------------------+-----------------------+------------------------+
| pass_nonlinear_variable | OT_BOOL               | Pass list of variables |
| s                       |                       | entering nonlinearly   |
|                         |                       | to BONMIN              |
+-------------------------+-----------------------+------------------------+
| sos1_groups             | OT_INTVECTORVECTOR    | Options for the        |
|                         |                       | autogenerated gradient |
|                         |                       | of the objective.      |
+-------------------------+-----------------------+------------------------+
| sos1_priorities         | OT_INTVECTOR          | Options for the        |
|                         |                       | autogenerated gradient |
|                         |                       | of the objective.      |
+-------------------------+-----------------------+------------------------+
| sos1_weights            | OT_DOUBLEVECTORVECTOR | Options for the        |
|                         |                       | autogenerated gradient |
|                         |                       | of the objective.      |
+-------------------------+-----------------------+------------------------+
| var_integer_md          | OT_DICT               | Integer metadata (a    |
|                         |                       | dictionary with lists  |
|                         |                       | of integers) about     |
|                         |                       | variables to be passed |
|                         |                       | to BONMIN              |
+-------------------------+-----------------------+------------------------+
| var_numeric_md          | OT_DICT               | Numeric metadata (a    |
|                         |                       | dictionary with lists  |
|                         |                       | of reals) about        |
|                         |                       | variables to be passed |
|                         |                       | to BONMIN              |
+-------------------------+-----------------------+------------------------+
| var_string_md           | OT_DICT               | String metadata (a     |
|                         |                       | dictionary with lists  |
|                         |                       | of strings) about      |
|                         |                       | variables to be passed |
|                         |                       | to BONMIN              |
+-------------------------+-----------------------+------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

ipopt
-----



When in warmstart mode, output NLPSOL_LAM_X may be used as input

NOTE: Even when max_iter == 0, it is not guaranteed that input(NLPSOL_X0) ==
output(NLPSOL_X). Indeed if bounds on X or constraints are unmet, they will
differ.

For a good tutorial on IPOPT,
seehttp://drops.dagstuhl.de/volltexte/2009/2089/pdf/09061.WaechterAndreas.Paper.2089.pdf

A good resource about the algorithms in IPOPT is: Wachter and L. T. Biegler,
On the Implementation of an Interior-Point Filter Line-Search Algorithm for
Large-Scale Nonlinear Programming, Mathematical Programming 106(1), pp.
25-57, 2006 (As Research Report RC 23149, IBM T. J. Watson Research Center,
Yorktown, USA

Caveats: with default options, multipliers for the decision variables are
wrong for equality constraints. Change the 'fixed_variable_treatment' to
'make_constraint' or 'relax_bounds' to obtain correct results.

>List of available options

+--------------------------+-------------+---------------------------------+
|            Id            |    Type     |           Description           |
+==========================+=============+=================================+
| clip_inactive_lam        | OT_BOOL     | Explicitly set Lagrange         |
|                          |             | multipliers to 0 when bound is  |
|                          |             | deemed inactive (default:       |
|                          |             | false).                         |
+--------------------------+-------------+---------------------------------+
| con_integer_md           | OT_DICT     | Integer metadata (a dictionary  |
|                          |             | with lists of integers) about   |
|                          |             | constraints to be passed to     |
|                          |             | IPOPT                           |
+--------------------------+-------------+---------------------------------+
| con_numeric_md           | OT_DICT     | Numeric metadata (a dictionary  |
|                          |             | with lists of reals) about      |
|                          |             | constraints to be passed to     |
|                          |             | IPOPT                           |
+--------------------------+-------------+---------------------------------+
| con_string_md            | OT_DICT     | String metadata (a dictionary   |
|                          |             | with lists of strings) about    |
|                          |             | constraints to be passed to     |
|                          |             | IPOPT                           |
+--------------------------+-------------+---------------------------------+
| convexify_margin         | OT_DOUBLE   | When using a convexification    |
|                          |             | strategy, make sure that the    |
|                          |             | smallest eigenvalue is at least |
|                          |             | this (default: 1e-7).           |
+--------------------------+-------------+---------------------------------+
| convexify_strategy       | OT_STRING   | NONE|regularize|eigen-reflect   |
|                          |             | |eigen-clip. Strategy to        |
|                          |             | convexify the Lagrange Hessian  |
|                          |             | before passing it to the        |
|                          |             | solver.                         |
+--------------------------+-------------+---------------------------------+
| grad_f                   | OT_FUNCTION | Function for calculating the    |
|                          |             | gradient of the objective       |
|                          |             | (column, autogenerated by       |
|                          |             | default)                        |
+--------------------------+-------------+---------------------------------+
| hess_lag                 | OT_FUNCTION | Function for calculating the    |
|                          |             | Hessian of the Lagrangian       |
|                          |             | (autogenerated by default)      |
+--------------------------+-------------+---------------------------------+
| inactive_lam_strategy    | OT_STRING   | Strategy to detect if a bound   |
|                          |             | is inactive. RELTOL: use        |
|                          |             | solver-defined constraint       |
|                          |             | tolerance *                     |
|                          |             | inactive_lam_value|abstol: use  |
|                          |             | inactive_lam_value              |
+--------------------------+-------------+---------------------------------+
| inactive_lam_value       | OT_DOUBLE   | Value used in                   |
|                          |             | inactive_lam_strategy (default: |
|                          |             | 10).                            |
+--------------------------+-------------+---------------------------------+
| ipopt                    | OT_DICT     | Options to be passed to IPOPT   |
+--------------------------+-------------+---------------------------------+
| jac_g                    | OT_FUNCTION | Function for calculating the    |
|                          |             | Jacobian of the constraints     |
|                          |             | (autogenerated by default)      |
+--------------------------+-------------+---------------------------------+
| max_iter_eig             | OT_DOUBLE   | Maximum number of iterations to |
|                          |             | compute an eigenvalue           |
|                          |             | decomposition (default: 50).    |
+--------------------------+-------------+---------------------------------+
| pass_nonlinear_variables | OT_BOOL     | Pass list of variables entering |
|                          |             | nonlinearly to IPOPT            |
+--------------------------+-------------+---------------------------------+
| var_integer_md           | OT_DICT     | Integer metadata (a dictionary  |
|                          |             | with lists of integers) about   |
|                          |             | variables to be passed to IPOPT |
+--------------------------+-------------+---------------------------------+
| var_numeric_md           | OT_DICT     | Numeric metadata (a dictionary  |
|                          |             | with lists of reals) about      |
|                          |             | variables to be passed to IPOPT |
+--------------------------+-------------+---------------------------------+
| var_string_md            | OT_DICT     | String metadata (a dictionary   |
|                          |             | with lists of strings) about    |
|                          |             | variables to be passed to IPOPT |
+--------------------------+-------------+---------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

knitro
------



KNITRO interface

>List of available options

+--------------------------+--------------------+--------------------------+
|            Id            |        Type        |       Description        |
+==========================+====================+==========================+
| complem_variables        | OT_INTVECTORVECTOR | List of complementary    |
|                          |                    | constraints on simple    |
|                          |                    | bounds. Pair (i, j)      |
|                          |                    | encodes complementarity  |
|                          |                    | between the bounds on    |
|                          |                    | variable i and variable  |
|                          |                    | j.                       |
+--------------------------+--------------------+--------------------------+
| contype                  | OT_INTVECTOR       | Type of constraint       |
+--------------------------+--------------------+--------------------------+
| detect_linear_constraint | OT_BOOL            | Detect type of           |
| s                        |                    | constraints              |
+--------------------------+--------------------+--------------------------+
| knitro                   | OT_DICT            | Options to be passed to  |
|                          |                    | KNITRO                   |
+--------------------------+--------------------+--------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

snopt
-----



SNOPT interface

>List of available options

+-------+-----------+---------------------------------------------+
|  Id   |   Type    |                 Description                 |
+=======+===========+=============================================+
| snopt | OT_DICT   | Options to be passed to SNOPT               |
+-------+-----------+---------------------------------------------+
| start | OT_STRING | Warm-start options for Worhp: cold|warm|hot |
+-------+-----------+---------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

worhp
-----



WORHP interface

Designed for Worhp 1.12

>List of available options

+-------+---------+-------------------------------+
|  Id   |  Type   |          Description          |
+=======+=========+===============================+
| worhp | OT_DICT | Options to be passed to WORHP |
+-------+---------+-------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

qrsqp
-----



A textbook SQPMethod

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

scpgen
------



A structure-exploiting sequential quadratic programming (to be come
sequential convex programming) method for nonlinear programming.

>List of available options

+-----------------------+-----------------+--------------------------------+
|          Id           |      Type       |          Description           |
+=======================+=================+================================+
| beta                  | OT_DOUBLE       | Line-search parameter,         |
|                       |                 | restoration factor of stepsize |
+-----------------------+-----------------+--------------------------------+
| c1                    | OT_DOUBLE       | Armijo condition, coefficient  |
|                       |                 | of decrease in merit           |
+-----------------------+-----------------+--------------------------------+
| codegen               | OT_BOOL         | C-code generation              |
+-----------------------+-----------------+--------------------------------+
| hessian_approximation | OT_STRING       | gauss-newton|exact             |
+-----------------------+-----------------+--------------------------------+
| lbfgs_memory          | OT_INT          | Size of L-BFGS memory.         |
+-----------------------+-----------------+--------------------------------+
| max_iter              | OT_INT          | Maximum number of SQP          |
|                       |                 | iterations                     |
+-----------------------+-----------------+--------------------------------+
| max_iter_ls           | OT_INT          | Maximum number of linesearch   |
|                       |                 | iterations                     |
+-----------------------+-----------------+--------------------------------+
| merit_memsize         | OT_INT          | Size of memory to store        |
|                       |                 | history of merit function      |
|                       |                 | values                         |
+-----------------------+-----------------+--------------------------------+
| merit_start           | OT_DOUBLE       | Lower bound for the merit      |
|                       |                 | function parameter             |
+-----------------------+-----------------+--------------------------------+
| name_x                | OT_STRINGVECTOR | Names of the variables.        |
+-----------------------+-----------------+--------------------------------+
| print_header          | OT_BOOL         | Print the header with problem  |
|                       |                 | statistics                     |
+-----------------------+-----------------+--------------------------------+
| print_x               | OT_INTVECTOR    | Which variables to print.      |
+-----------------------+-----------------+--------------------------------+
| qpsol                 | OT_STRING       | The QP solver to be used by    |
|                       |                 | the SQP method                 |
+-----------------------+-----------------+--------------------------------+
| qpsol_options         | OT_DICT         | Options to be passed to the QP |
|                       |                 | solver                         |
+-----------------------+-----------------+--------------------------------+
| reg_threshold         | OT_DOUBLE       | Threshold for the              |
|                       |                 | regularization.                |
+-----------------------+-----------------+--------------------------------+
| regularize            | OT_BOOL         | Automatic regularization of    |
|                       |                 | Lagrange Hessian.              |
+-----------------------+-----------------+--------------------------------+
| tol_du                | OT_DOUBLE       | Stopping criterion for dual    |
|                       |                 | infeasability                  |
+-----------------------+-----------------+--------------------------------+
| tol_pr                | OT_DOUBLE       | Stopping criterion for primal  |
|                       |                 | infeasibility                  |
+-----------------------+-----------------+--------------------------------+
| tol_pr_step           | OT_DOUBLE       | Stopping criterion for the     |
|                       |                 | step size                      |
+-----------------------+-----------------+--------------------------------+
| tol_reg               | OT_DOUBLE       | Stopping criterion for         |
|                       |                 | regularization                 |
+-----------------------+-----------------+--------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

sqpmethod
---------



A textbook SQPMethod

>List of available options

+-----------------------+-------------+------------------------------------+
|          Id           |    Type     |            Description             |
+=======================+=============+====================================+
| beta                  | OT_DOUBLE   | Line-search parameter, restoration |
|                       |             | factor of stepsize                 |
+-----------------------+-------------+------------------------------------+
| c1                    | OT_DOUBLE   | Armijo condition, coefficient of   |
|                       |             | decrease in merit                  |
+-----------------------+-------------+------------------------------------+
| convexify_margin      | OT_DOUBLE   | When using a convexification       |
|                       |             | strategy, make sure that the       |
|                       |             | smallest eigenvalue is at least    |
|                       |             | this (default: 1e-7).              |
+-----------------------+-------------+------------------------------------+
| convexify_strategy    | OT_STRING   | NONE|regularize|eigen-reflect      |
|                       |             | |eigen-clip. Strategy to convexify |
|                       |             | the Lagrange Hessian before        |
|                       |             | passing it to the solver.          |
+-----------------------+-------------+------------------------------------+
| hess_lag              | OT_FUNCTION | Function for calculating the       |
|                       |             | Hessian of the Lagrangian          |
|                       |             | (autogenerated by default)         |
+-----------------------+-------------+------------------------------------+
| hessian_approximation | OT_STRING   | limited-memory|exact               |
+-----------------------+-------------+------------------------------------+
| jac_fg                | OT_FUNCTION | Function for calculating the       |
|                       |             | gradient of the objective and      |
|                       |             | Jacobian of the constraints        |
|                       |             | (autogenerated by default)         |
+-----------------------+-------------+------------------------------------+
| lbfgs_memory          | OT_INT      | Size of L-BFGS memory.             |
+-----------------------+-------------+------------------------------------+
| max_iter              | OT_INT      | Maximum number of SQP iterations   |
+-----------------------+-------------+------------------------------------+
| max_iter_eig          | OT_DOUBLE   | Maximum number of iterations to    |
|                       |             | compute an eigenvalue              |
|                       |             | decomposition (default: 50).       |
+-----------------------+-------------+------------------------------------+
| max_iter_ls           | OT_INT      | Maximum number of linesearch       |
|                       |             | iterations                         |
+-----------------------+-------------+------------------------------------+
| merit_memory          | OT_INT      | Size of memory to store history of |
|                       |             | merit function values              |
+-----------------------+-------------+------------------------------------+
| min_iter              | OT_INT      | Minimum number of SQP iterations   |
+-----------------------+-------------+------------------------------------+
| min_step_size         | OT_DOUBLE   | The size (inf-norm) of the step    |
|                       |             | size should not become smaller     |
|                       |             | than this.                         |
+-----------------------+-------------+------------------------------------+
| print_header          | OT_BOOL     | Print the header with problem      |
|                       |             | statistics                         |
+-----------------------+-------------+------------------------------------+
| print_iteration       | OT_BOOL     | Print the iterations               |
+-----------------------+-------------+------------------------------------+
| print_status          | OT_BOOL     | Print a status message after       |
|                       |             | solving                            |
+-----------------------+-------------+------------------------------------+
| qpsol                 | OT_STRING   | The QP solver to be used by the    |
|                       |             | SQP method [qpoases]               |
+-----------------------+-------------+------------------------------------+
| qpsol_options         | OT_DICT     | Options to be passed to the QP     |
|                       |             | solver                             |
+-----------------------+-------------+------------------------------------+
| tol_du                | OT_DOUBLE   | Stopping criterion for dual        |
|                       |             | infeasability                      |
+-----------------------+-------------+------------------------------------+
| tol_pr                | OT_DOUBLE   | Stopping criterion for primal      |
|                       |             | infeasibility                      |
+-----------------------+-------------+------------------------------------+

--------------------------------------------------------------------------------



Joel Andersson

";

%feature("docstring")  casadi::casadi_kkt(const casadi_int *sp_kkt, T1
*nz_kkt, const casadi_int *sp_h, const T1 *nz_h, const casadi_int *sp_a,
const T1 *nz_a, const T1 *S, const T1 *D, T1 *w, casadi_int *iw) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_qr_solve(T1 *x, casadi_int nrhs,
casadi_int tr, const casadi_int *sp_v, const T1 *v, const casadi_int *sp_r,
const T1 *r, const T1 *beta, const casadi_int *prinv, const casadi_int *pc,
T1 *w) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_de_boor(T1 x, const T1 *knots,
casadi_int n_knots, casadi_int degree, T1 *boor) "

[INTERNAL] ";

%feature("docstring")  casadi::has_conic(const std::string &name) "

Check if a particular plugin is available.

";

%feature("docstring")  casadi::casadi_clear_casadi_int(casadi_int *x,
casadi_int n) "

[INTERNAL] ";

%feature("docstring")  casadi::load_conic(const std::string &name) "

Explicitly load a plugin dynamically.

";

%feature("docstring")  casadi::casadi_qp_du_check(casadi_qp_data< T1 > *d,
casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::rootfinder_option_type(const std::string
&name, const std::string &op) "

Get type info for a particular option.

";

%feature("docstring")  casadi::casadi_lb_eig(const casadi_int *sp_h, const
T1 *h) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_smoothing_diff(T1 **yk, T1 *y0, T1 *J,
T1 h, casadi_int n_y, const casadi_finite_diff_mem< T1 > *m) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_ipqp_corrector(casadi_ipqp_data< T1 >
*d) "

[INTERNAL] ";

%feature("docstring")  casadi::doc_interpolant(const std::string &name) "

Get the documentation string for a plugin.

";

%feature("docstring")  casadi::dple_n_out() "

Get the number of QP solver outputs.

";

%feature("docstring")  casadi::casadi_low(T1 x, const T1 *grid, casadi_int
ng, casadi_int lookup_mode) "

[INTERNAL] ";

%feature("docstring")  casadi::load_rootfinder(const std::string &name) "

Explicitly load a plugin dynamically.

";

%feature("docstring")  casadi::casadi_mv(const T1 *x, const casadi_int
*sp_x, const T1 *y, T1 *z, casadi_int tr) "

[INTERNAL]  Sparse matrix-vector multiplication: z <- z + x*y.

";

%feature("docstring")  casadi::casadi_lsqr_single_solve(const T1 *A, T1 *x,
casadi_int tr, const casadi_int *sp, T1 *w) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_norm_2(casadi_int n, const T1 *x) "

[INTERNAL]  NORM_2: ||x||_2 -> return.

";

%feature("docstring")  casadi::convexify_eval(const casadi_convexify_config<
T1 > *c, const T1 *Hin, T1 *Hout, casadi_int *iw, T1 *w) "

[INTERNAL] ";

%feature("docstring")  casadi::dense_kron_stride(casadi_int n, casadi_int m,
const double *A, const double *B, double *C, casadi_int strideA, casadi_int
strideB, casadi_int strideC) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_qp_pr_direction(casadi_qp_data< T1 >
*d) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_forward_diff(T1 **yk, T1 *y0, T1 *J,
T1 h, casadi_int n_y, const casadi_finite_diff_mem< T1 > *m) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_cvx_givens_apply(casadi_int n, T1 *q,
T1 c, T1 s, casadi_int p) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_qp_kkt(casadi_qp_data< T1 > *d) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_qp_flip(casadi_qp_data< T1 > *d) "

[INTERNAL] ";

%feature("docstring")  casadi::dense_mul_nn(casadi_int n, casadi_int m,
casadi_int l, const double *A, const double *B, double *C) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_clear(T1 *x, casadi_int n) "

[INTERNAL]  CLEAR: x <- 0.

";

%feature("docstring")  casadi::casadi_ipqp_diag(casadi_ipqp_data< T1 > *d) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_qr_trs(const casadi_int *sp_r, const
T1 *nz_r, T1 *x, casadi_int tr) "

[INTERNAL] ";

%feature("docstring") casadi::_which_depends "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_bilin(const T1 *A, const casadi_int
*sp_A, const T1 *x, const T1 *y) "

[INTERNAL]  Calculates dot(x, mul(A, y))

";

%feature("docstring")  casadi::casadi_trans(const T1 *x, const casadi_int
*sp_x, T1 *y, const casadi_int *sp_y, casadi_int *tmp) "

[INTERNAL]  TRANS: y <- trans(x) , w work vector (length >= rows x)

";

%feature("docstring")  casadi::casadi_nd_boor_eval(T1 *ret, casadi_int
n_dims, const T1 *knots, const casadi_int *offset, const casadi_int *degree,
const casadi_int *strides, const T1 *c, casadi_int m, const T1 *x, const
casadi_int *lookup_mode, casadi_int *iw, T1 *w) "

[INTERNAL] ";

%feature("docstring")  casadi::nlpsol_out() "

Get NLP solver output scheme of NLP solvers.

>Output scheme: casadi::NlpsolOutput (NLPSOL_NUM_OUT = 6)

+--------------+-------+---------------------------------------------------+
|  Full name   | Short |                    Description                    |
+==============+=======+===================================================+
| NLPSOL_X     | x     | Decision variables at the optimal solution (nx x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_F     | f     | Cost function value at the optimal solution (1 x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_G     | g     | Constraints function at the optimal solution (ng  |
|              |       | x 1)                                              |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_X | lam_x | Lagrange multipliers for bounds on X at the       |
|              |       | solution (nx x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_G | lam_g | Lagrange multipliers for bounds on G at the       |
|              |       | solution (ng x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_P | lam_p | Lagrange multipliers for bounds on P at the       |
|              |       | solution (np x 1)                                 |
+--------------+-------+---------------------------------------------------+

";

%feature("docstring")  casadi::nlpsol_out(casadi_int ind) "

Get output scheme name by index.

>Output scheme: casadi::NlpsolOutput (NLPSOL_NUM_OUT = 6)

+--------------+-------+---------------------------------------------------+
|  Full name   | Short |                    Description                    |
+==============+=======+===================================================+
| NLPSOL_X     | x     | Decision variables at the optimal solution (nx x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_F     | f     | Cost function value at the optimal solution (1 x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_G     | g     | Constraints function at the optimal solution (ng  |
|              |       | x 1)                                              |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_X | lam_x | Lagrange multipliers for bounds on X at the       |
|              |       | solution (nx x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_G | lam_g | Lagrange multipliers for bounds on G at the       |
|              |       | solution (ng x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_P | lam_p | Lagrange multipliers for bounds on P at the       |
|              |       | solution (np x 1)                                 |
+--------------+-------+---------------------------------------------------+

";

%feature("docstring")  casadi::casadi_qp_kkt_dot(casadi_qp_data< T1 > *d,
const T1 *v, casadi_int i) "

[INTERNAL] ";

%feature("docstring")  casadi::is_strictly_monotone(const std::vector< T >
&v) "

Check if the vector is strictly monotone.

";

%feature("docstring")  casadi::has_linsol(const std::string &name) "

Check if a particular plugin is available.

";

%feature("docstring")  casadi::casadi_ipqp_newiter(casadi_ipqp_data< T1 >
*d) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_qp_du_direction(casadi_qp_data< T1 >
*d) "

[INTERNAL] ";

%feature("docstring")  casadi::simpleRK(Function f, casadi_int N=10,
casadi_int order=4) "

Construct an explicit Runge-Kutta integrator The constructed function has
three inputs, corresponding to initial state (x0), parameter (p) and
integration time (h) and one output, corresponding to final state (xf).

Parameters:
-----------

f:  ODE function with two inputs (x and p) and one output (xdot)

N:  Number of integrator steps

order:  Order of interpolating polynomials

";

%feature("docstring")  casadi::casadi_file_slurp(const char *fname,
casadi_int n, T1 *x) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_qp_init(casadi_qp_data< T1 > *d,
casadi_int **iw, T1 **w) "

[INTERNAL] ";

%feature("docstring")  casadi::nlpsol_in() "

Get input scheme of NLP solvers.

>Input scheme: casadi::NlpsolInput (NLPSOL_NUM_IN = 8)

+---------------+--------+-------------------------------------------------+
|   Full name   | Short  |                   Description                   |
+===============+========+=================================================+
| NLPSOL_X0     | x0     | Decision variables, initial guess (nx x 1)      |
+---------------+--------+-------------------------------------------------+
| NLPSOL_P      | p      | Value of fixed parameters (np x 1)              |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBX    | lbx    | Decision variables lower bound (nx x 1),        |
|               |        | default -inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBX    | ubx    | Decision variables upper bound (nx x 1),        |
|               |        | default +inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBG    | lbg    | Constraints lower bound (ng x 1), default -inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBG    | ubg    | Constraints upper bound (ng x 1), default +inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_X0 | lam_x0 | Lagrange multipliers for bounds on X, initial   |
|               |        | guess (nx x 1)                                  |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_G0 | lam_g0 | Lagrange multipliers for bounds on G, initial   |
|               |        | guess (ng x 1)                                  |
+---------------+--------+-------------------------------------------------+

";

%feature("docstring")  casadi::nlpsol_in(casadi_int ind) "

Get NLP solver input scheme name by index.

>Input scheme: casadi::NlpsolInput (NLPSOL_NUM_IN = 8)

+---------------+--------+-------------------------------------------------+
|   Full name   | Short  |                   Description                   |
+===============+========+=================================================+
| NLPSOL_X0     | x0     | Decision variables, initial guess (nx x 1)      |
+---------------+--------+-------------------------------------------------+
| NLPSOL_P      | p      | Value of fixed parameters (np x 1)              |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBX    | lbx    | Decision variables lower bound (nx x 1),        |
|               |        | default -inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBX    | ubx    | Decision variables upper bound (nx x 1),        |
|               |        | default +inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBG    | lbg    | Constraints lower bound (ng x 1), default -inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBG    | ubg    | Constraints upper bound (ng x 1), default +inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_X0 | lam_x0 | Lagrange multipliers for bounds on X, initial   |
|               |        | guess (nx x 1)                                  |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_G0 | lam_g0 | Lagrange multipliers for bounds on G, initial   |
|               |        | guess (ng x 1)                                  |
+---------------+--------+-------------------------------------------------+

";

%feature("docstring")  casadi::casadi_qp_zero_blocking(casadi_qp_data< T1 >
*d) "

[INTERNAL] ";

%feature("docstring")  casadi::conic_n_in() "

Get the number of QP solver inputs.

";

%feature("docstring")  casadi::doc_rootfinder(const std::string &name) "

Get the documentation string for a plugin.

";

%feature("docstring")  casadi::dense_mul_nt_stride(casadi_int n, casadi_int
m, casadi_int l, const double *A, const double *B, double *C, casadi_int
strideA, casadi_int strideB, casadi_int strideC) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_bfgs(const casadi_int *sp_h, T1 *h,
const T1 *dx, const T1 *glag, const T1 *glag_old, T1 *w) "

[INTERNAL] ";

%feature("docstring")  casadi::dple_in() "

Get input scheme of DPLE solvers.

";

%feature("docstring")  casadi::dple_in(casadi_int ind) "

Get DPLE input scheme name by index.

";

%feature("docstring")  casadi::dense_copy_t_stride(casadi_int n, casadi_int
m, const double *A, double *B, casadi_int strideA, casadi_int strideB) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_qp_print_iteration(casadi_qp_data< T1
> *d, char *buf, int buf_sz) "

[INTERNAL] ";

%feature("docstring")  casadi::matrixName< casadi_int >() "

Get typename.

";

%feature("docstring")  casadi::is_monotone(const std::vector< T > &v) "

Check if the vector is monotone.

";

%feature("docstring")  casadi::casadi_mv_dense(const T1 *x, casadi_int
nrow_x, casadi_int ncol_x, const T1 *y, T1 *z, casadi_int tr) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_norm_inf_mul(const T1 *x, const
casadi_int *sp_x, const T1 *y, const casadi_int *sp_y, T1 *dwork, casadi_int
*iwork) "

[INTERNAL]  Inf-norm of a Matrix-matrix product,*

Parameters:
-----------

dwork:  A real work vector that you must allocate Minimum size: y.size1()

iwork:  A integer work vector that you must allocate Minimum size:
y.size1()+x.size2()+1

";

%feature("docstring")  casadi::casadi_qr_mv(const casadi_int *sp_v, const T1
*v, const T1 *beta, T1 *x, casadi_int tr) "

[INTERNAL] ";

%feature("docstring")  casadi::casadi_fill(T1 *x, casadi_int n, T1 alpha) "

[INTERNAL]  FILL: x <- alpha.

";

%feature("docstring")  casadi::casadi_cvx_house(T1 *v, T1 *beta, casadi_int
nv) "

[INTERNAL]  Computes Householder vector beta: scalar v: vector of length nv
Returns 2-norm of v

Ref: Golub & Van Loan Alg 5.1.1

";

%feature("docstring")  casadi::conic_out() "

Get QP solver output scheme of QP solvers.

";

%feature("docstring")  casadi::conic_out(casadi_int ind) "

Get output scheme name by index.

";


// File: namespaceIpopt.xml


// File: namespacestd.xml


// File: chapter1.xml


// File: chapter2.xml


// File: chapter3.xml


// File: chapter4.xml


// File: chapter5.xml


// File: chapter6.xml

