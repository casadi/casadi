
// File: index.xml

// File: classcasadi_1_1Assertion.xml


// File: classcasadi_1_1BackwardDiff.xml
%feature("docstring") casadi::BackwardDiff::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::BackwardDiff::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::BackwardDiff::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::BackwardDiff::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::BackwardDiff::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::BackwardDiff::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::BackwardDiff::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::BackwardDiff::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::BackwardDiff::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::BackwardDiff::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::BackwardDiff::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::BackwardDiff::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::BackwardDiff::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::BackwardDiff::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::BackwardDiff::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::BackwardDiff::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::BackwardDiff::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::BackwardDiff::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::BackwardDiff::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::BackwardDiff::get_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::BackwardDiff::uses_output "

[INTERNAL]  Is the scheme using the (nondifferentiated) output?

";

%feature("docstring") casadi::BackwardDiff::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::BackwardDiff::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::BackwardDiff::class_name "

[INTERNAL]  Get type name.

";

%feature("docstring") casadi::BackwardDiff::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::BackwardDiff::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::BackwardDiff::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::BackwardDiff::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::BackwardDiff::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::BackwardDiff::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::BackwardDiff::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::BackwardDiff::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::BackwardDiff::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::BackwardDiff::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::BackwardDiff::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::BackwardDiff::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::BackwardDiff::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::BackwardDiff::jit_dependencies "

[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::BackwardDiff::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::BackwardDiff::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::BackwardDiff::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::BackwardDiff::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::BackwardDiff::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::BackwardDiff::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::BackwardDiff::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::BackwardDiff::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::BackwardDiff::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::BackwardDiff::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::BackwardDiff::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::BackwardDiff::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::BackwardDiff::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::BackwardDiff::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::BackwardDiff::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::BackwardDiff::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::BackwardDiff::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::BackwardDiff::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::BackwardDiff::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::BackwardDiff::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::BackwardDiff::has_function "

[INTERNAL] ";

%feature("docstring") casadi::BackwardDiff::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::BackwardDiff::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::BackwardDiff::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::BackwardDiff::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::BackwardDiff::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::BackwardDiff::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::BackwardDiff::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::BackwardDiff::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::BackwardDiff::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::BackwardDiff::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::BackwardDiff::factory "

[INTERNAL] ";

%feature("docstring") casadi::BackwardDiff::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::BackwardDiff::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::BackwardDiff::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::BackwardDiff::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::BackwardDiff::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::BackwardDiff::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::BackwardDiff::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::BackwardDiff::codegen_body "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring") casadi::BackwardDiff::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::BackwardDiff::BackwardDiff "

[INTERNAL] ";

%feature("docstring") casadi::BackwardDiff::has_err "

[INTERNAL] ";

%feature("docstring") casadi::BackwardDiff::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::BackwardDiff::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::BackwardDiff::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::BackwardDiff::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::BackwardDiff::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::BackwardDiff::has_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::BackwardDiff::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::BackwardDiff::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::BackwardDiff::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::BackwardDiff::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::BackwardDiff::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::BackwardDiff::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::BackwardDiff::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::BackwardDiff::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::BackwardDiff::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::BackwardDiff::calc_fd "

[INTERNAL] ";

%feature("docstring") casadi::BackwardDiff::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::BackwardDiff::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::BackwardDiff::get_function "

[INTERNAL] ";

%feature("docstring") casadi::BackwardDiff::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::BackwardDiff::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::BackwardDiff::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::BackwardDiff::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::BackwardDiff::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::BackwardDiff::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::BackwardDiff::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::BackwardDiff::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::BackwardDiff::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::BackwardDiff::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::BackwardDiff::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::BackwardDiff::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::BackwardDiff::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::BackwardDiff "

[INTERNAL]  Calculate derivative using backward differences Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| abstol           | OT_DOUBLE       | Accuracy of      | casadi::Backward |
|                  |                 | function outputs | Diff             |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| h                | OT_DOUBLE       | Step size        | casadi::Backward |
|                  |                 | [default:        | Diff             |
|                  |                 | computed from    |                  |
|                  |                 | abstol]          |                  |
+------------------+-----------------+------------------+------------------+
| h_iter           | OT_INT          | Number of        | casadi::Backward |
|                  |                 | iterations to    | Diff             |
|                  |                 | improve on the   |                  |
|                  |                 | step-size        |                  |
|                  |                 | [default: 1 if   |                  |
|                  |                 | error estimate   |                  |
|                  |                 | available,       |                  |
|                  |                 | otherwise 0]     |                  |
+------------------+-----------------+------------------+------------------+
| h_max            | OT_DOUBLE       | Maximum step     | casadi::Backward |
|                  |                 | size [default 0] | Diff             |
+------------------+-----------------+------------------+------------------+
| h_min            | OT_DOUBLE       | Minimum step     | casadi::Backward |
|                  |                 | size [default    | Diff             |
|                  |                 | inf]             |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reltol           | OT_DOUBLE       | Accuracy of      | casadi::Backward |
|                  |                 | function inputs  | Diff             |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| second_order_ste | OT_DOUBLE       | Second order     | casadi::Backward |
| psize            |                 | perturbation     | Diff             |
|                  |                 | size [default:   |                  |
|                  |                 | 1e-3]            |                  |
+------------------+-----------------+------------------+------------------+
| smoothing        | OT_DOUBLE       | Smoothing        | casadi::Backward |
|                  |                 | regularization   | Diff             |
|                  |                 | [default:        |                  |
|                  |                 | machine          |                  |
|                  |                 | precision]       |                  |
+------------------+-----------------+------------------+------------------+
| u_aim            | OT_DOUBLE       | Target ratio of  | casadi::Backward |
|                  |                 | roundoff error   | Diff             |
|                  |                 | to truncation    |                  |
|                  |                 | error [default:  |                  |
|                  |                 | 100.]            |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: finite_differences.hpp ";

%feature("docstring") casadi::BackwardDiff::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::BackwardDiff::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::BackwardDiff::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::BackwardDiff::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::BackwardDiff::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::BackwardDiff::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::BackwardDiff::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::BackwardDiff::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::BackwardDiff::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::BackwardDiff::eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::BackwardDiff::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::BackwardDiff::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::BackwardDiff::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::BackwardDiff::set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring") casadi::BackwardDiff::has_forward "

[INTERNAL]  Second order derivatives.

";

%feature("docstring") casadi::BackwardDiff::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::BackwardDiff::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::BackwardDiff::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::BackwardDiff::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::BackwardDiff::generate_dependencies "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::BackwardDiff::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::BackwardDiff::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::BackwardDiff::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::BackwardDiff::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::BackwardDiff::n_pert "

[INTERNAL] ";

%feature("docstring") casadi::BackwardDiff::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::BackwardDiff::finalize "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring") casadi::BackwardDiff::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::BackwardDiff::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::BackwardDiff::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::BackwardDiff::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::BackwardDiff::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::BackwardDiff::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::BackwardDiff::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::BackwardDiff::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::BackwardDiff::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::BackwardDiff::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::BackwardDiff::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::BackwardDiff::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::BackwardDiff::pert "

[INTERNAL] ";

%feature("docstring") casadi::BackwardDiff::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::BackwardDiff::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::BackwardDiff::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::BackwardDiff::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::BackwardDiff::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::BackwardDiff::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::BackwardDiff::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::BackwardDiff::calc_stepsize "

[INTERNAL] ";

%feature("docstring") casadi::BackwardDiff::get_forward "

[INTERNAL]  Second order derivatives.

";

%feature("docstring") casadi::BackwardDiff::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::BackwardDiff::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::BackwardDiff::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::BackwardDiff::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::BackwardDiff::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::BackwardDiff::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::BackwardDiff::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::BackwardDiff::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::BackwardDiff::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::BackwardDiff::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::BackwardDiff::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::BackwardDiff::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::BackwardDiff::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::BackwardDiff::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::BackwardDiff::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::BackwardDiff::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::BackwardDiff::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::BackwardDiff::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::BackwardDiff::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::BackwardDiff::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::BackwardDiff::~BackwardDiff "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::BackwardDiff::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::BackwardDiff::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::BackwardDiff::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::BackwardDiff::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::BackwardDiff::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::BackwardDiff::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::BackwardDiff::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::BackwardDiff::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::BackwardDiff::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::BackwardDiff::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";


// File: classcasadi_1_1Bilin.xml


// File: classcasadi_1_1BinaryMX.xml


// File: classcasadi_1_1BinarySX.xml


// File: classcasadi_1_1Blocksqp.xml
%feature("docstring") casadi::Blocksqp::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::Blocksqp::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::Blocksqp::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Blocksqp::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Blocksqp::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Blocksqp::get_forward "

[INTERNAL]  Generate a function that calculates forward mode derivatives.

";

%feature("docstring") casadi::Blocksqp::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Blocksqp::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Blocksqp::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::Blocksqp::finalize "

[INTERNAL]  Finalize initialization.

";

%feature("docstring") casadi::Blocksqp::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Blocksqp::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Blocksqp::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::Blocksqp::set_function "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::Blocksqp::printProgress "

[INTERNAL]  Print one line of output to stdout about the current iteration.

";

%feature("docstring") casadi::Blocksqp::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Blocksqp::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::Blocksqp::disp_more "

[INTERNAL]  Print description.

";

%feature("docstring") casadi::Blocksqp::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::Blocksqp::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::Blocksqp::callback "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Blocksqp::kkt "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Blocksqp::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Blocksqp::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::Blocksqp::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Blocksqp::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::Blocksqp::nlpsol_codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::Blocksqp::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::Blocksqp::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::Blocksqp::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::Blocksqp::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Blocksqp::sizeHessianCOL "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::Blocksqp::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::Blocksqp::calcBFGS "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::Blocksqp::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::pairInFilter "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::reset_sqp "

[INTERNAL]  Reset variables that any SQP code needs.

";

%feature("docstring") casadi::Blocksqp::resetHessian "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::has_function "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Blocksqp::fullstep "

[INTERNAL]  No globalization strategy.

";

%feature("docstring") casadi::Blocksqp::has_reverse "

[INTERNAL]  Generate a function that calculates reverse mode derivatives.

";

%feature("docstring") casadi::Blocksqp::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::Blocksqp::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Blocksqp::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::Blocksqp::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::Blocksqp::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Blocksqp::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Blocksqp::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Blocksqp::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::Blocksqp::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::Blocksqp::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::Blocksqp::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Blocksqp::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::Blocksqp::~Blocksqp "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::Blocksqp::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Blocksqp::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::Blocksqp::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::Blocksqp::calcHessianUpdate "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::Blocksqp::evaluate "

[INTERNAL]  Evaluate exact hessian of Lagrangian.

>  casadi_int casadi::Blocksqp::evaluate(BlocksqpMemory *m, double *exact_hess_lag) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate exact hessian of Lagrangian.

";

";

%feature("docstring") casadi::Blocksqp::check_inputs "

[INTERNAL]  Check if the inputs correspond to a well-posed problem.

";

%feature("docstring") casadi::Blocksqp::initializeFilter "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::getReducedHessian "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::get_function "

[INTERNAL]

>  const Function& casadi::OracleFunction::get_function(const std::string &name) const override
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Blocksqp::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Blocksqp::Blocksqp "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::Blocksqp::computeNextHessian "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::Blocksqp::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::Blocksqp::expand "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Blocksqp::has_forward "

[INTERNAL]  Generate a function that calculates forward mode derivatives.

";

%feature("docstring") casadi::Blocksqp "

'blocksqp' plugin for Nlpsol

This is a modified version of blockSQP by Janka et al.

Dennis Janka, Joel Andersson

>List of available options

+----------------------------+-----------+---------------------------------+
|             Id             |   Type    |           Description           |
+============================+===========+=================================+
| block_hess                 | OT_INT    | Blockwise Hessian               |
|                            |           | approximation?                  |
+----------------------------+-----------+---------------------------------+
| col_eps                    | OT_DOUBLE | Epsilon for COL scaling         |
|                            |           | strategy                        |
+----------------------------+-----------+---------------------------------+
| col_tau1                   | OT_DOUBLE | tau1 for COL scaling strategy   |
+----------------------------+-----------+---------------------------------+
| col_tau2                   | OT_DOUBLE | tau2 for COL scaling strategy   |
+----------------------------+-----------+---------------------------------+
| conv_strategy              | OT_INT    | Convexification strategy        |
+----------------------------+-----------+---------------------------------+
| delta                      | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| delta_h0                   | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| eps                        | OT_DOUBLE | Values smaller than this are    |
|                            |           | regarded as numerically zero    |
+----------------------------+-----------+---------------------------------+
| eta                        | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| fallback_scaling           | OT_INT    | If indefinite update is used,   |
|                            |           | the type of fallback strategy   |
+----------------------------+-----------+---------------------------------+
| fallback_update            | OT_INT    | If indefinite update is used,   |
|                            |           | the type of fallback strategy   |
+----------------------------+-----------+---------------------------------+
| gamma_f                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| gamma_theta                | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| globalization              | OT_BOOL   | Enable globalization            |
+----------------------------+-----------+---------------------------------+
| hess_damp                  | OT_INT    | Activate Powell damping for     |
|                            |           | BFGS                            |
+----------------------------+-----------+---------------------------------+
| hess_damp_fac              | OT_DOUBLE | Damping factor for BFGS Powell  |
|                            |           | modification                    |
+----------------------------+-----------+---------------------------------+
| hess_lim_mem               | OT_INT    | Full or limited memory          |
+----------------------------+-----------+---------------------------------+
| hess_memsize               | OT_INT    | Memory size for L-BFGS updates  |
+----------------------------+-----------+---------------------------------+
| hess_scaling               | OT_INT    | Scaling strategy for Hessian    |
|                            |           | approximation                   |
+----------------------------+-----------+---------------------------------+
| hess_update                | OT_INT    | Type of Hessian approximation   |
+----------------------------+-----------+---------------------------------+
| ini_hess_diag              | OT_DOUBLE | Initial Hessian guess: diagonal |
|                            |           | matrix diag(iniHessDiag)        |
+----------------------------+-----------+---------------------------------+
| kappa_f                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_minus                | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_plus                 | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_plus_max             | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| kappa_soc                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| linsol                     | OT_STRING | The linear solver to be used by |
|                            |           | the QP method                   |
+----------------------------+-----------+---------------------------------+
| max_consec_reduced_steps   | OT_INT    | Maximum number of consecutive   |
|                            |           | reduced steps                   |
+----------------------------+-----------+---------------------------------+
| max_consec_skipped_updates | OT_INT    | Maximum number of consecutive   |
|                            |           | skipped updates                 |
+----------------------------+-----------+---------------------------------+
| max_conv_qp                | OT_INT    | How many additional QPs may be  |
|                            |           | solved for convexification per  |
|                            |           | iteration?                      |
+----------------------------+-----------+---------------------------------+
| max_it_qp                  | OT_INT    | Maximum number of QP iterations |
|                            |           | per SQP iteration               |
+----------------------------+-----------+---------------------------------+
| max_iter                   | OT_INT    | Maximum number of SQP           |
|                            |           | iterations                      |
+----------------------------+-----------+---------------------------------+
| max_line_search            | OT_INT    | Maximum number of steps in line |
|                            |           | search                          |
+----------------------------+-----------+---------------------------------+
| max_soc_iter               | OT_INT    | Maximum number of SOC line      |
|                            |           | search iterations               |
+----------------------------+-----------+---------------------------------+
| max_time_qp                | OT_DOUBLE | Maximum number of time in       |
|                            |           | seconds per QP solve per SQP    |
|                            |           | iteration                       |
+----------------------------+-----------+---------------------------------+
| nlinfeastol                | OT_DOUBLE | Nonlinear feasibility tolerance |
+----------------------------+-----------+---------------------------------+
| obj_lo                     | OT_DOUBLE | Lower bound on objective        |
|                            |           | function [-inf]                 |
+----------------------------+-----------+---------------------------------+
| obj_up                     | OT_DOUBLE | Upper bound on objective        |
|                            |           | function [inf]                  |
+----------------------------+-----------+---------------------------------+
| opttol                     | OT_DOUBLE | Optimality tolerance            |
+----------------------------+-----------+---------------------------------+
| print_header               | OT_BOOL   | Print solver header at startup  |
+----------------------------+-----------+---------------------------------+
| print_iteration            | OT_BOOL   | Print SQP iterations            |
+----------------------------+-----------+---------------------------------+
| print_maxit_reached        | OT_BOOL   | Print error when maximum number |
|                            |           | of SQP iterations reached       |
+----------------------------+-----------+---------------------------------+
| qp_init                    | OT_BOOL   | Use warmstarting                |
+----------------------------+-----------+---------------------------------+
| qpsol                      | OT_STRING | The QP solver to be used by the |
|                            |           | SQP method                      |
+----------------------------+-----------+---------------------------------+
| qpsol_options              | OT_DICT   | Options to be passed to the QP  |
|                            |           | solver                          |
+----------------------------+-----------+---------------------------------+
| restore_feas               | OT_BOOL   | Use feasibility restoration     |
|                            |           | phase                           |
+----------------------------+-----------+---------------------------------+
| rho                        | OT_DOUBLE | Feasibility restoration phase   |
|                            |           | parameter                       |
+----------------------------+-----------+---------------------------------+
| s_f                        | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| s_theta                    | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| schur                      | OT_BOOL   | Use qpOASES Schur compliment    |
|                            |           | approach                        |
+----------------------------+-----------+---------------------------------+
| skip_first_globalization   | OT_BOOL   | No globalization strategy in    |
|                            |           | first iteration                 |
+----------------------------+-----------+---------------------------------+
| theta_max                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| theta_min                  | OT_DOUBLE | Filter line search parameter,   |
|                            |           | cf. IPOPT paper                 |
+----------------------------+-----------+---------------------------------+
| warmstart                  | OT_BOOL   | Use warmstarting                |
+----------------------------+-----------+---------------------------------+
| which_second_derv          | OT_INT    | For which block should second   |
|                            |           | derivatives be provided by the  |
|                            |           | user                            |
+----------------------------+-----------+---------------------------------+
| zeta                       | OT_DOUBLE | Feasibility restoration phase   |
|                            |           | parameter                       |
+----------------------------+-----------+---------------------------------+

>List of available options

+-------------------+---------------+-------------------+------------------+
|        Id         |     Type      |    Description    |     Used in      |
+===================+===============+===================+==================+
| block_hess        | OT_INT        | Blockwise Hessian | casadi::Blocksqp |
|                   |               | approximation?    |                  |
+-------------------+---------------+-------------------+------------------+
| bound_consistency | OT_BOOL       | Ensure that       | casadi::Nlpsol   |
|                   |               | primal-dual       |                  |
|                   |               | solution is       |                  |
|                   |               | consistent with   |                  |
|                   |               | the bounds        |                  |
+-------------------+---------------+-------------------+------------------+
| calc_f            | OT_BOOL       | Calculate 'f' in  | casadi::Nlpsol   |
|                   |               | the Nlpsol base   |                  |
|                   |               | class             |                  |
+-------------------+---------------+-------------------+------------------+
| calc_g            | OT_BOOL       | Calculate 'g' in  | casadi::Nlpsol   |
|                   |               | the Nlpsol base   |                  |
|                   |               | class             |                  |
+-------------------+---------------+-------------------+------------------+
| calc_lam_p        | OT_BOOL       | Calculate 'lam_p' | casadi::Nlpsol   |
|                   |               | in the Nlpsol     |                  |
|                   |               | base class        |                  |
+-------------------+---------------+-------------------+------------------+
| calc_lam_x        | OT_BOOL       | Calculate 'lam_x' | casadi::Nlpsol   |
|                   |               | in the Nlpsol     |                  |
|                   |               | base class        |                  |
+-------------------+---------------+-------------------+------------------+
| calc_multipliers  | OT_BOOL       | Calculate         | casadi::Nlpsol   |
|                   |               | Lagrange          |                  |
|                   |               | multipliers in    |                  |
|                   |               | the Nlpsol base   |                  |
|                   |               | class             |                  |
+-------------------+---------------+-------------------+------------------+
| col_eps           | OT_DOUBLE     | Epsilon for COL   | casadi::Blocksqp |
|                   |               | scaling strategy  |                  |
+-------------------+---------------+-------------------+------------------+
| col_tau1          | OT_DOUBLE     | tau1 for COL      | casadi::Blocksqp |
|                   |               | scaling strategy  |                  |
+-------------------+---------------+-------------------+------------------+
| col_tau2          | OT_DOUBLE     | tau2 for COL      | casadi::Blocksqp |
|                   |               | scaling strategy  |                  |
+-------------------+---------------+-------------------+------------------+
| conv_strategy     | OT_INT        | Convexification   | casadi::Blocksqp |
|                   |               | strategy          |                  |
+-------------------+---------------+-------------------+------------------+
| delta             | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| delta_h0          | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| discrete          | OT_BOOLVECTOR | Indicates which   | casadi::Nlpsol   |
|                   |               | of the variables  |                  |
|                   |               | are discrete,     |                  |
|                   |               | i.e. integer-     |                  |
|                   |               | valued            |                  |
+-------------------+---------------+-------------------+------------------+
| eps               | OT_DOUBLE     | Values smaller    | casadi::Blocksqp |
|                   |               | than this are     |                  |
|                   |               | regarded as       |                  |
|                   |               | numerically zero  |                  |
+-------------------+---------------+-------------------+------------------+
| error_on_fail     | OT_BOOL       | When the          | casadi::Nlpsol   |
|                   |               | numerical process |                  |
|                   |               | returns           |                  |
|                   |               | unsuccessfully,   |                  |
|                   |               | raise an error    |                  |
|                   |               | (default false).  |                  |
+-------------------+---------------+-------------------+------------------+
| eta               | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| eval_errors_fatal | OT_BOOL       | When errors occur | casadi::Nlpsol   |
|                   |               | during evaluation |                  |
|                   |               | of f,g,...,stop   |                  |
|                   |               | the iterations    |                  |
+-------------------+---------------+-------------------+------------------+
| fallback_scaling  | OT_INT        | If indefinite     | casadi::Blocksqp |
|                   |               | update is used,   |                  |
|                   |               | the type of       |                  |
|                   |               | fallback strategy |                  |
+-------------------+---------------+-------------------+------------------+
| fallback_update   | OT_INT        | If indefinite     | casadi::Blocksqp |
|                   |               | update is used,   |                  |
|                   |               | the type of       |                  |
|                   |               | fallback strategy |                  |
+-------------------+---------------+-------------------+------------------+
| gamma_f           | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| gamma_theta       | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| globalization     | OT_BOOL       | Enable            | casadi::Blocksqp |
|                   |               | globalization     |                  |
+-------------------+---------------+-------------------+------------------+
| hess_damp         | OT_INT        | Activate Powell   | casadi::Blocksqp |
|                   |               | damping for BFGS  |                  |
+-------------------+---------------+-------------------+------------------+
| hess_damp_fac     | OT_DOUBLE     | Damping factor    | casadi::Blocksqp |
|                   |               | for BFGS Powell   |                  |
|                   |               | modification      |                  |
+-------------------+---------------+-------------------+------------------+
| hess_lim_mem      | OT_INT        | Full or limited   | casadi::Blocksqp |
|                   |               | memory            |                  |
+-------------------+---------------+-------------------+------------------+
| hess_memsize      | OT_INT        | Memory size for   | casadi::Blocksqp |
|                   |               | L-BFGS updates    |                  |
+-------------------+---------------+-------------------+------------------+
| hess_scaling      | OT_INT        | Scaling strategy  | casadi::Blocksqp |
|                   |               | for Hessian       |                  |
|                   |               | approximation     |                  |
+-------------------+---------------+-------------------+------------------+
| hess_update       | OT_INT        | Type of Hessian   | casadi::Blocksqp |
|                   |               | approximation     |                  |
+-------------------+---------------+-------------------+------------------+
| ignore_check_vec  | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
|                   |               | the input shape   |                  |
|                   |               | of F will not be  |                  |
|                   |               | checked.          |                  |
+-------------------+---------------+-------------------+------------------+
| ini_hess_diag     | OT_DOUBLE     | Initial Hessian   | casadi::Blocksqp |
|                   |               | guess: diagonal   |                  |
|                   |               | matrix            |                  |
|                   |               | diag(iniHessDiag) |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_FUNCTION   | A function that   | casadi::Nlpsol   |
| k                 |               | will be called at |                  |
|                   |               | each iteration    |                  |
|                   |               | with the solver   |                  |
|                   |               | as input. Check   |                  |
|                   |               | documentation of  |                  |
|                   |               | Callback .        |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
| k_ignore_errors   |               | errors thrown by  |                  |
|                   |               | iteration_callbac |                  |
|                   |               | k will be         |                  |
|                   |               | ignored.          |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_INT        | Only call the     | casadi::Nlpsol   |
| k_step            |               | callback function |                  |
|                   |               | every few         |                  |
|                   |               | iterations.       |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_f           | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_minus       | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_plus        | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_plus_max    | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| kappa_soc         | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| linsol            | OT_STRING     | The linear solver | casadi::Blocksqp |
|                   |               | to be used by the |                  |
|                   |               | QP method         |                  |
+-------------------+---------------+-------------------+------------------+
| max_consec_reduce | OT_INT        | Maximum number of | casadi::Blocksqp |
| d_steps           |               | consecutive       |                  |
|                   |               | reduced steps     |                  |
+-------------------+---------------+-------------------+------------------+
| max_consec_skippe | OT_INT        | Maximum number of | casadi::Blocksqp |
| d_updates         |               | consecutive       |                  |
|                   |               | skipped updates   |                  |
+-------------------+---------------+-------------------+------------------+
| max_conv_qp       | OT_INT        | How many          | casadi::Blocksqp |
|                   |               | additional QPs    |                  |
|                   |               | may be solved for |                  |
|                   |               | convexification   |                  |
|                   |               | per iteration?    |                  |
+-------------------+---------------+-------------------+------------------+
| max_it_qp         | OT_INT        | Maximum number of | casadi::Blocksqp |
|                   |               | QP iterations per |                  |
|                   |               | SQP iteration     |                  |
+-------------------+---------------+-------------------+------------------+
| max_iter          | OT_INT        | Maximum number of | casadi::Blocksqp |
|                   |               | SQP iterations    |                  |
+-------------------+---------------+-------------------+------------------+
| max_line_search   | OT_INT        | Maximum number of | casadi::Blocksqp |
|                   |               | steps in line     |                  |
|                   |               | search            |                  |
+-------------------+---------------+-------------------+------------------+
| max_soc_iter      | OT_INT        | Maximum number of | casadi::Blocksqp |
|                   |               | SOC line search   |                  |
|                   |               | iterations        |                  |
+-------------------+---------------+-------------------+------------------+
| max_time_qp       | OT_DOUBLE     | Maximum number of | casadi::Blocksqp |
|                   |               | time in seconds   |                  |
|                   |               | per QP solve per  |                  |
|                   |               | SQP iteration     |                  |
+-------------------+---------------+-------------------+------------------+
| min_lam           | OT_DOUBLE     | Minimum allowed   | casadi::Nlpsol   |
|                   |               | multiplier value  |                  |
+-------------------+---------------+-------------------+------------------+
| nlinfeastol       | OT_DOUBLE     | Nonlinear         | casadi::Blocksqp |
|                   |               | feasibility       |                  |
|                   |               | tolerance         |                  |
+-------------------+---------------+-------------------+------------------+
| no_nlp_grad       | OT_BOOL       | Prevent the       | casadi::Nlpsol   |
|                   |               | creation of the   |                  |
|                   |               | 'nlp_grad'        |                  |
|                   |               | function          |                  |
+-------------------+---------------+-------------------+------------------+
| obj_lo            | OT_DOUBLE     | Lower bound on    | casadi::Blocksqp |
|                   |               | objective         |                  |
|                   |               | function [-inf]   |                  |
+-------------------+---------------+-------------------+------------------+
| obj_up            | OT_DOUBLE     | Upper bound on    | casadi::Blocksqp |
|                   |               | objective         |                  |
|                   |               | function [inf]    |                  |
+-------------------+---------------+-------------------+------------------+
| opttol            | OT_DOUBLE     | Optimality        | casadi::Blocksqp |
|                   |               | tolerance         |                  |
+-------------------+---------------+-------------------+------------------+
| oracle_options    | OT_DICT       | Options to be     | casadi::Nlpsol   |
|                   |               | passed to the     |                  |
|                   |               | oracle function   |                  |
+-------------------+---------------+-------------------+------------------+
| print_header      | OT_BOOL       | Print solver      | casadi::Blocksqp |
|                   |               | header at startup |                  |
+-------------------+---------------+-------------------+------------------+
| print_iteration   | OT_BOOL       | Print SQP         | casadi::Blocksqp |
|                   |               | iterations        |                  |
+-------------------+---------------+-------------------+------------------+
| print_maxit_reach | OT_BOOL       | Print error when  | casadi::Blocksqp |
| ed                |               | maximum number of |                  |
|                   |               | SQP iterations    |                  |
|                   |               | reached           |                  |
+-------------------+---------------+-------------------+------------------+
| qp_init           | OT_BOOL       | Use warmstarting  | casadi::Blocksqp |
+-------------------+---------------+-------------------+------------------+
| qpsol             | OT_STRING     | The QP solver to  | casadi::Blocksqp |
|                   |               | be used by the    |                  |
|                   |               | SQP method        |                  |
+-------------------+---------------+-------------------+------------------+
| qpsol_options     | OT_DICT       | Options to be     | casadi::Blocksqp |
|                   |               | passed to the QP  |                  |
|                   |               | solver            |                  |
+-------------------+---------------+-------------------+------------------+
| restore_feas      | OT_BOOL       | Use feasibility   | casadi::Blocksqp |
|                   |               | restoration phase |                  |
+-------------------+---------------+-------------------+------------------+
| rho               | OT_DOUBLE     | Feasibility       | casadi::Blocksqp |
|                   |               | restoration phase |                  |
|                   |               | parameter         |                  |
+-------------------+---------------+-------------------+------------------+
| s_f               | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| s_theta           | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| schur             | OT_BOOL       | Use qpOASES Schur | casadi::Blocksqp |
|                   |               | compliment        |                  |
|                   |               | approach          |                  |
+-------------------+---------------+-------------------+------------------+
| sens_linsol       | OT_STRING     | Linear solver     | casadi::Nlpsol   |
|                   |               | used for          |                  |
|                   |               | parametric        |                  |
|                   |               | sensitivities     |                  |
|                   |               | (default 'qr').   |                  |
+-------------------+---------------+-------------------+------------------+
| sens_linsol_optio | OT_DICT       | Linear solver     | casadi::Nlpsol   |
| ns                |               | options used for  |                  |
|                   |               | parametric        |                  |
|                   |               | sensitivities.    |                  |
+-------------------+---------------+-------------------+------------------+
| skip_first_global | OT_BOOL       | No globalization  | casadi::Blocksqp |
| ization           |               | strategy in first |                  |
|                   |               | iteration         |                  |
+-------------------+---------------+-------------------+------------------+
| theta_max         | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| theta_min         | OT_DOUBLE     | Filter line       | casadi::Blocksqp |
|                   |               | search parameter, |                  |
|                   |               | cf. IPOPT paper   |                  |
+-------------------+---------------+-------------------+------------------+
| verbose_init      | OT_BOOL       | Print out timing  | casadi::Nlpsol   |
|                   |               | information about |                  |
|                   |               | the different     |                  |
|                   |               | stages of         |                  |
|                   |               | initialization    |                  |
+-------------------+---------------+-------------------+------------------+
| warmstart         | OT_BOOL       | Use warmstarting  | casadi::Blocksqp |
+-------------------+---------------+-------------------+------------------+
| warn_initial_boun | OT_BOOL       | Warn if the       | casadi::Nlpsol   |
| ds                |               | initial guess     |                  |
|                   |               | does not satisfy  |                  |
|                   |               | LBX and UBX       |                  |
+-------------------+---------------+-------------------+------------------+
| which_second_derv | OT_INT        | For which block   | casadi::Blocksqp |
|                   |               | should second     |                  |
|                   |               | derivatives be    |                  |
|                   |               | provided by the   |                  |
|                   |               | user              |                  |
+-------------------+---------------+-------------------+------------------+
| zeta              | OT_DOUBLE     | Feasibility       | casadi::Blocksqp |
|                   |               | restoration phase |                  |
|                   |               | parameter         |                  |
+-------------------+---------------+-------------------+------------------+

Diagrams
--------



C++ includes: blocksqp.hpp ";

%feature("docstring") casadi::Blocksqp::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::Blocksqp::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::Blocksqp::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::Blocksqp::secondOrderCorrection "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::solve "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::kktErrorReduction "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::Blocksqp::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Blocksqp::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::Blocksqp::setOptionsFromFile "

[INTERNAL]  Read options from parameter xml.

";

%feature("docstring") casadi::Blocksqp::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Blocksqp::class_name "

[INTERNAL]  Get type name.

";

%feature("docstring") casadi::Blocksqp::feasibilityRestorationPhase "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::updateStepBounds "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Blocksqp::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Blocksqp::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::Blocksqp::filterLineSearch "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::Blocksqp::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Blocksqp::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Blocksqp::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Blocksqp::calcOptTol "

[INTERNAL]  Update optimization tolerance (similar to SNOPT) in current
iterate.

";

%feature("docstring") casadi::Blocksqp::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::Blocksqp::calcInitialHessian "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Blocksqp::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::Blocksqp::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::Blocksqp::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::Blocksqp::augmentFilter "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::Blocksqp::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Blocksqp::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Blocksqp::integer_support "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring") casadi::Blocksqp::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Blocksqp::calcHessianUpdateLimitedMemory "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Blocksqp::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Blocksqp::eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Blocksqp::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::Blocksqp::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::Blocksqp::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Blocksqp::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::Blocksqp::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::Blocksqp::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::Blocksqp::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Blocksqp::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::Blocksqp::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::Blocksqp::initIterate "

[INTERNAL]  Set initial filter, objective function, tolerances etc.

";

%feature("docstring") casadi::Blocksqp::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Blocksqp::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Blocksqp::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Blocksqp::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::Blocksqp::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::Blocksqp::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::Blocksqp::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Blocksqp::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Blocksqp::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::Blocksqp::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Blocksqp::sizeInitialHessian "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::Blocksqp::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::Blocksqp::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::Blocksqp::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Blocksqp::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Blocksqp::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::Blocksqp::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::Blocksqp::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::Blocksqp::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::Blocksqp::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::Blocksqp::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::Blocksqp::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::Blocksqp::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Blocksqp::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::Blocksqp::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::Blocksqp::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Blocksqp::initStats "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::printInfo "

[INTERNAL]  Print information about the SQP method.

";

%feature("docstring") casadi::Blocksqp::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Blocksqp::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Blocksqp::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Blocksqp::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Blocksqp::run "

[INTERNAL]  Main Loop of SQP method.

";

%feature("docstring") casadi::Blocksqp::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::Blocksqp::calcHessianUpdateExact "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::reduceSOCStepsize "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Blocksqp::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::Blocksqp::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Blocksqp::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Blocksqp::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::Blocksqp::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::Blocksqp::updateDeltaGamma "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::Blocksqp::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::Blocksqp::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::Blocksqp::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Blocksqp::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Blocksqp::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Blocksqp::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::Blocksqp::jit_dependencies "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring") casadi::Blocksqp::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Blocksqp::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::Blocksqp::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Blocksqp::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Blocksqp::generate_dependencies "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::Blocksqp::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Blocksqp::calcSR1 "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Blocksqp::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::Blocksqp::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Blocksqp::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::Blocksqp::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::Blocksqp::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::Blocksqp::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Blocksqp::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Blocksqp::factory "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Blocksqp::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::Blocksqp::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::Blocksqp::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Blocksqp::solveQP "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::Blocksqp::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::Blocksqp::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Blocksqp::reduceStepsize "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Blocksqp::lInfConstraintNorm "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::Blocksqp::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Blocksqp::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::Blocksqp::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Blocksqp::calcLagrangeGradient "

[INTERNAL]  Overloaded function for convenience, uses current variables of
SQPiterate vars.

>  void casadi::Blocksqp::calcLagrangeGradient(BlocksqpMemory *m, double *grad_lag, casadi_int flag) const 
------------------------------------------------------------------------
[INTERNAL] 
Overloaded function for convenience, uses current variables of
SQPiterate vars.

";

";

%feature("docstring") casadi::Blocksqp::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::Blocksqp::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::Blocksqp::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::Blocksqp::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::Blocksqp::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Blocksqp::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::Blocksqp::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Blocksqp::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Blocksqp::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Blocksqp::get_reverse "

[INTERNAL]  Generate a function that calculates reverse mode derivatives.

";

%feature("docstring") casadi::Blocksqp::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::Blocksqp::set_temp "

[INTERNAL]  Set the work vectors.

";

%feature("docstring") casadi::Blocksqp::acceptStep "

[INTERNAL]

>  void casadi::Blocksqp::acceptStep(BlocksqpMemory *m, double alpha) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Blocksqp::feasibilityRestorationHeuristic "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::Blocksqp::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Blocksqp::create_function "

[INTERNAL]  Create an oracle function

";

%feature("docstring") casadi::Blocksqp::calc_function "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Blocksqp::monitored "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::Blocksqp::convertHessian "

[INTERNAL]  Convert *hess to column compressed sparse format.

";

%feature("docstring") casadi::Blocksqp::updateStats "

[INTERNAL] ";

%feature("docstring") casadi::Blocksqp::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";


// File: classcasadi_1_1BonMinMessageHandler.xml
%feature("docstring") casadi::BonMinMessageHandler "

[INTERNAL]

>List of available options

+------------------+------------------+------------------+-----------------+
|        Id        |       Type       |   Description    |     Used in     |
+==================+==================+==================+=================+
| bonmin           | OT_DICT          | Options to be    | casadi::BonMinM |
|                  |                  | passed to BONMIN | essageHandler   |
+------------------+------------------+------------------+-----------------+
| bound_consistenc | OT_BOOL          | Ensure that      | casadi::Nlpsol  |
| y                |                  | primal-dual      |                 |
|                  |                  | solution is      |                 |
|                  |                  | consistent with  |                 |
|                  |                  | the bounds       |                 |
+------------------+------------------+------------------+-----------------+
| calc_f           | OT_BOOL          | Calculate 'f' in | casadi::Nlpsol  |
|                  |                  | the Nlpsol base  |                 |
|                  |                  | class            |                 |
+------------------+------------------+------------------+-----------------+
| calc_g           | OT_BOOL          | Calculate 'g' in | casadi::Nlpsol  |
|                  |                  | the Nlpsol base  |                 |
|                  |                  | class            |                 |
+------------------+------------------+------------------+-----------------+
| calc_lam_p       | OT_BOOL          | Calculate        | casadi::Nlpsol  |
|                  |                  | 'lam_p' in the   |                 |
|                  |                  | Nlpsol base      |                 |
|                  |                  | class            |                 |
+------------------+------------------+------------------+-----------------+
| calc_lam_x       | OT_BOOL          | Calculate        | casadi::Nlpsol  |
|                  |                  | 'lam_x' in the   |                 |
|                  |                  | Nlpsol base      |                 |
|                  |                  | class            |                 |
+------------------+------------------+------------------+-----------------+
| calc_multipliers | OT_BOOL          | Calculate        | casadi::Nlpsol  |
|                  |                  | Lagrange         |                 |
|                  |                  | multipliers in   |                 |
|                  |                  | the Nlpsol base  |                 |
|                  |                  | class            |                 |
+------------------+------------------+------------------+-----------------+
| con_integer_md   | OT_DICT          | Integer metadata | casadi::BonMinM |
|                  |                  | (a dictionary    | essageHandler   |
|                  |                  | with lists of    |                 |
|                  |                  | integers) about  |                 |
|                  |                  | constraints to   |                 |
|                  |                  | be passed to     |                 |
|                  |                  | BONMIN           |                 |
+------------------+------------------+------------------+-----------------+
| con_numeric_md   | OT_DICT          | Numeric metadata | casadi::BonMinM |
|                  |                  | (a dictionary    | essageHandler   |
|                  |                  | with lists of    |                 |
|                  |                  | reals) about     |                 |
|                  |                  | constraints to   |                 |
|                  |                  | be passed to     |                 |
|                  |                  | BONMIN           |                 |
+------------------+------------------+------------------+-----------------+
| con_string_md    | OT_DICT          | String metadata  | casadi::BonMinM |
|                  |                  | (a dictionary    | essageHandler   |
|                  |                  | with lists of    |                 |
|                  |                  | strings) about   |                 |
|                  |                  | constraints to   |                 |
|                  |                  | be passed to     |                 |
|                  |                  | BONMIN           |                 |
+------------------+------------------+------------------+-----------------+
| discrete         | OT_BOOLVECTOR    | Indicates which  | casadi::Nlpsol  |
|                  |                  | of the variables |                 |
|                  |                  | are discrete,    |                 |
|                  |                  | i.e. integer-    |                 |
|                  |                  | valued           |                 |
+------------------+------------------+------------------+-----------------+
| error_on_fail    | OT_BOOL          | When the         | casadi::Nlpsol  |
|                  |                  | numerical        |                 |
|                  |                  | process returns  |                 |
|                  |                  | unsuccessfully,  |                 |
|                  |                  | raise an error   |                 |
|                  |                  | (default false). |                 |
+------------------+------------------+------------------+-----------------+
| eval_errors_fata | OT_BOOL          | When errors      | casadi::Nlpsol  |
| l                |                  | occur during     |                 |
|                  |                  | evaluation of    |                 |
|                  |                  | f,g,...,stop the |                 |
|                  |                  | iterations       |                 |
+------------------+------------------+------------------+-----------------+
| grad_f           | OT_FUNCTION      | Function for     | casadi::BonMinM |
|                  |                  | calculating the  | essageHandler   |
|                  |                  | gradient of the  |                 |
|                  |                  | objective        |                 |
|                  |                  | (column,         |                 |
|                  |                  | autogenerated by |                 |
|                  |                  | default)         |                 |
+------------------+------------------+------------------+-----------------+
| grad_f_options   | OT_DICT          | Options for the  | casadi::BonMinM |
|                  |                  | autogenerated    | essageHandler   |
|                  |                  | gradient of the  |                 |
|                  |                  | objective.       |                 |
+------------------+------------------+------------------+-----------------+
| hess_lag         | OT_FUNCTION      | Function for     | casadi::BonMinM |
|                  |                  | calculating the  | essageHandler   |
|                  |                  | Hessian of the   |                 |
|                  |                  | Lagrangian       |                 |
|                  |                  | (autogenerated   |                 |
|                  |                  | by default)      |                 |
+------------------+------------------+------------------+-----------------+
| hess_lag_options | OT_DICT          | Options for the  | casadi::BonMinM |
|                  |                  | autogenerated    | essageHandler   |
|                  |                  | Hessian of the   |                 |
|                  |                  | Lagrangian.      |                 |
+------------------+------------------+------------------+-----------------+
| ignore_check_vec | OT_BOOL          | If set to true,  | casadi::Nlpsol  |
|                  |                  | the input shape  |                 |
|                  |                  | of F will not be |                 |
|                  |                  | checked.         |                 |
+------------------+------------------+------------------+-----------------+
| iteration_callba | OT_FUNCTION      | A function that  | casadi::Nlpsol  |
| ck               |                  | will be called   |                 |
|                  |                  | at each          |                 |
|                  |                  | iteration with   |                 |
|                  |                  | the solver as    |                 |
|                  |                  | input. Check     |                 |
|                  |                  | documentation of |                 |
|                  |                  | Callback .       |                 |
+------------------+------------------+------------------+-----------------+
| iteration_callba | OT_BOOL          | If set to true,  | casadi::Nlpsol  |
| ck_ignore_errors |                  | errors thrown by |                 |
|                  |                  | iteration_callba |                 |
|                  |                  | ck will be       |                 |
|                  |                  | ignored.         |                 |
+------------------+------------------+------------------+-----------------+
| iteration_callba | OT_INT           | Only call the    | casadi::Nlpsol  |
| ck_step          |                  | callback         |                 |
|                  |                  | function every   |                 |
|                  |                  | few iterations.  |                 |
+------------------+------------------+------------------+-----------------+
| jac_g            | OT_FUNCTION      | Function for     | casadi::BonMinM |
|                  |                  | calculating the  | essageHandler   |
|                  |                  | Jacobian of the  |                 |
|                  |                  | constraints      |                 |
|                  |                  | (autogenerated   |                 |
|                  |                  | by default)      |                 |
+------------------+------------------+------------------+-----------------+
| jac_g_options    | OT_DICT          | Options for the  | casadi::BonMinM |
|                  |                  | autogenerated    | essageHandler   |
|                  |                  | Jacobian of the  |                 |
|                  |                  | constraints.     |                 |
+------------------+------------------+------------------+-----------------+
| min_lam          | OT_DOUBLE        | Minimum allowed  | casadi::Nlpsol  |
|                  |                  | multiplier value |                 |
+------------------+------------------+------------------+-----------------+
| no_nlp_grad      | OT_BOOL          | Prevent the      | casadi::Nlpsol  |
|                  |                  | creation of the  |                 |
|                  |                  | 'nlp_grad'       |                 |
|                  |                  | function         |                 |
+------------------+------------------+------------------+-----------------+
| oracle_options   | OT_DICT          | Options to be    | casadi::Nlpsol  |
|                  |                  | passed to the    |                 |
|                  |                  | oracle function  |                 |
+------------------+------------------+------------------+-----------------+
| pass_nonlinear_c | OT_BOOL          | Pass list of     | casadi::BonMinM |
| onstraints       |                  | constraints      | essageHandler   |
|                  |                  | entering         |                 |
|                  |                  | nonlinearly to   |                 |
|                  |                  | BONMIN           |                 |
+------------------+------------------+------------------+-----------------+
| pass_nonlinear_v | OT_BOOL          | Pass list of     | casadi::BonMinM |
| ariables         |                  | variables        | essageHandler   |
|                  |                  | entering         |                 |
|                  |                  | nonlinearly to   |                 |
|                  |                  | BONMIN           |                 |
+------------------+------------------+------------------+-----------------+
| sens_linsol      | OT_STRING        | Linear solver    | casadi::Nlpsol  |
|                  |                  | used for         |                 |
|                  |                  | parametric       |                 |
|                  |                  | sensitivities    |                 |
|                  |                  | (default 'qr').  |                 |
+------------------+------------------+------------------+-----------------+
| sens_linsol_opti | OT_DICT          | Linear solver    | casadi::Nlpsol  |
| ons              |                  | options used for |                 |
|                  |                  | parametric       |                 |
|                  |                  | sensitivities.   |                 |
+------------------+------------------+------------------+-----------------+
| sos1_groups      | OT_INTVECTORVECT | Options for the  | casadi::BonMinM |
|                  | OR               | autogenerated    | essageHandler   |
|                  |                  | gradient of the  |                 |
|                  |                  | objective.       |                 |
+------------------+------------------+------------------+-----------------+
| sos1_priorities  | OT_INTVECTOR     | Options for the  | casadi::BonMinM |
|                  |                  | autogenerated    | essageHandler   |
|                  |                  | gradient of the  |                 |
|                  |                  | objective.       |                 |
+------------------+------------------+------------------+-----------------+
| sos1_weights     | OT_DOUBLEVECTORV | Options for the  | casadi::BonMinM |
|                  | ECTOR            | autogenerated    | essageHandler   |
|                  |                  | gradient of the  |                 |
|                  |                  | objective.       |                 |
+------------------+------------------+------------------+-----------------+
| var_integer_md   | OT_DICT          | Integer metadata | casadi::BonMinM |
|                  |                  | (a dictionary    | essageHandler   |
|                  |                  | with lists of    |                 |
|                  |                  | integers) about  |                 |
|                  |                  | variables to be  |                 |
|                  |                  | passed to BONMIN |                 |
+------------------+------------------+------------------+-----------------+
| var_numeric_md   | OT_DICT          | Numeric metadata | casadi::BonMinM |
|                  |                  | (a dictionary    | essageHandler   |
|                  |                  | with lists of    |                 |
|                  |                  | reals) about     |                 |
|                  |                  | variables to be  |                 |
|                  |                  | passed to BONMIN |                 |
+------------------+------------------+------------------+-----------------+
| var_string_md    | OT_DICT          | String metadata  | casadi::BonMinM |
|                  |                  | (a dictionary    | essageHandler   |
|                  |                  | with lists of    |                 |
|                  |                  | strings) about   |                 |
|                  |                  | variables to be  |                 |
|                  |                  | passed to BONMIN |                 |
+------------------+------------------+------------------+-----------------+
| verbose_init     | OT_BOOL          | Print out timing | casadi::Nlpsol  |
|                  |                  | information      |                 |
|                  |                  | about the        |                 |
|                  |                  | different stages |                 |
|                  |                  | of               |                 |
|                  |                  | initialization   |                 |
+------------------+------------------+------------------+-----------------+
| warn_initial_bou | OT_BOOL          | Warn if the      | casadi::Nlpsol  |
| nds              |                  | initial guess    |                 |
|                  |                  | does not satisfy |                 |
|                  |                  | LBX and UBX      |                 |
+------------------+------------------+------------------+-----------------+

Diagrams
--------



C++ includes: b0_options.hpp ";


// File: classcasadi_1_1BonminUserClass.xml
%feature("docstring") casadi::BonminUserClass "

[INTERNAL] C++ includes: bonmin_nlp.hpp ";

%feature("docstring") casadi::BonminUserClass::finalize_solution "

[INTERNAL]  This method is called when the algorithm is complete so the TNLP
can store/write the solution

";

%feature("docstring") casadi::BonminUserClass::eval_g "

[INTERNAL]  Method to return the constraint residuals

";

%feature("docstring") casadi::BonminUserClass::eval_f "

[INTERNAL]  Method to return the objective value

";

%feature("docstring") casadi::BonminUserClass::get_constraints_linearity "

[INTERNAL] ";

%feature("docstring") casadi::BonminUserClass::BonminUserClass "

[INTERNAL] ";

%feature("docstring") casadi::BonminUserClass::get_starting_point "

[INTERNAL]  Method to return the starting point for the algorithm

";

%feature("docstring")
casadi::BonminUserClass::get_number_of_nonlinear_variables "

[INTERNAL]  Specify the number of variables that appear in the Hessian

";

%feature("docstring") casadi::BonminUserClass::eval_jac_g "

[INTERNAL]  Method to return: 1) The structure of the Jacobian (if
\"values\" is NULL) 2) The values of the Jacobian (if \"values\" is not
NULL)

";

%feature("docstring") casadi::BonminUserClass::intermediate_callback "

[INTERNAL]  This method is called at every iteration

";

%feature("docstring") casadi::BonminUserClass::eval_h "

[INTERNAL]  Method to return: 1) The structure of the hessian of the
Lagrangian (if \"values\" is NULL) 2) The values of the hessian of the
Lagrangian (if \"values\" is not NULL)

";

%feature("docstring") casadi::BonminUserClass::get_variables_types "

[INTERNAL] ";

%feature("docstring") casadi::BonminUserClass::~BonminUserClass "

[INTERNAL] ";

%feature("docstring")
casadi::BonminUserClass::get_list_of_nonlinear_variables "

[INTERNAL]  Specify which variables that appear in the Hessian

";

%feature("docstring") casadi::BonminUserClass::get_bounds_info "

[INTERNAL]  Method to return the bounds for my problem

";

%feature("docstring") casadi::BonminUserClass::sosConstraints "

[INTERNAL] ";

%feature("docstring") casadi::BonminUserClass::get_nlp_info "

[INTERNAL]  Method to return some info about the nlp

";

%feature("docstring") casadi::BonminUserClass::branchingInfo "

[INTERNAL] ";

%feature("docstring") casadi::BonminUserClass::eval_grad_f "

[INTERNAL]  Method to return the gradient of the objective

";

%feature("docstring") casadi::BonminUserClass::get_variables_linearity "

[INTERNAL] ";


// File: classcasadi_1_1BSpline.xml


// File: classcasadi_1_1BSplineCommon.xml


// File: classcasadi_1_1BSplineInterpolant.xml
%feature("docstring") casadi::BSplineInterpolant::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::BSplineInterpolant::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::BSplineInterpolant::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::BSplineInterpolant::set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring") casadi::BSplineInterpolant::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::BSplineInterpolant::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::BSplineInterpolant::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::BSplineInterpolant::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::BSplineInterpolant::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::BSplineInterpolant::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::BSplineInterpolant::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::BSplineInterpolant::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::BSplineInterpolant::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::BSplineInterpolant::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::BSplineInterpolant::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::BSplineInterpolant::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::BSplineInterpolant::get_function "

[INTERNAL] ";

%feature("docstring") casadi::BSplineInterpolant::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::BSplineInterpolant::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::BSplineInterpolant::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::BSplineInterpolant::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::BSplineInterpolant::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::BSplineInterpolant::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::BSplineInterpolant::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::BSplineInterpolant::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::BSplineInterpolant::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::BSplineInterpolant::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::BSplineInterpolant::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::BSplineInterpolant::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::BSplineInterpolant::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::BSplineInterpolant::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::BSplineInterpolant::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::BSplineInterpolant::has_parametric_grid "

[INTERNAL]  Is parametric?

";

%feature("docstring") casadi::BSplineInterpolant::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::BSplineInterpolant::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::BSplineInterpolant::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::BSplineInterpolant::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::BSplineInterpolant::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::BSplineInterpolant::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::BSplineInterpolant::has_parametric_values "

[INTERNAL]  Is parametric?

";

%feature("docstring") casadi::BSplineInterpolant::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::BSplineInterpolant::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::BSplineInterpolant::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::BSplineInterpolant::~BSplineInterpolant "

[INTERNAL] ";

%feature("docstring") casadi::BSplineInterpolant::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::BSplineInterpolant::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::BSplineInterpolant::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::BSplineInterpolant::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::BSplineInterpolant::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::BSplineInterpolant::getJacSparsityHierarchical
"

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::BSplineInterpolant::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::BSplineInterpolant::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::BSplineInterpolant::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::BSplineInterpolant::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::BSplineInterpolant::finalize "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring") casadi::BSplineInterpolant::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::BSplineInterpolant::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::BSplineInterpolant::arg_values "

[INTERNAL] ";

%feature("docstring") casadi::BSplineInterpolant::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::BSplineInterpolant::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::BSplineInterpolant::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::BSplineInterpolant::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::BSplineInterpolant::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::BSplineInterpolant::coeff_size "

[INTERNAL]  Size of the flattened coefficients vector.

";

%feature("docstring") casadi::BSplineInterpolant::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::BSplineInterpolant::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::BSplineInterpolant "

'bspline' plugin for Interpolant

N-dimensional BSpline interpolator

Uses not-a-knot conditions. For 1D and 2D cases, this code is equivalent to
fitpack

>List of available options

+-----------------------+--------------+-----------------------------------+
|          Id           |     Type     |            Description            |
+=======================+==============+===================================+
| algorithm             | OT_STRING    | Algorithm used for fitting the    |
|                       |              | data: 'not_a_knot' (default, same |
|                       |              | as Matlab), 'smooth_linear'.      |
+-----------------------+--------------+-----------------------------------+
| degree                | OT_INTVECTOR | Sets, for each grid dimension,    |
|                       |              | the degree of the spline.         |
+-----------------------+--------------+-----------------------------------+
| linear_solver         | OT_STRING    | Solver used for constructing the  |
|                       |              | coefficient tensor.               |
+-----------------------+--------------+-----------------------------------+
| linear_solver_options | OT_DICT      | Options to be passed to the       |
|                       |              | linear solver.                    |
+-----------------------+--------------+-----------------------------------+
| smooth_linear_frac    | OT_DOUBLE    | When 'smooth_linear' algorithm is |
|                       |              | active, determines sharpness      |
|                       |              | between 0 (sharp, as linear       |
|                       |              | interpolation) and 0.5            |
|                       |              | (smooth).Default value is 0.1.    |
+-----------------------+--------------+-----------------------------------+

Joris Gillis

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| algorithm        | OT_STRING       | Algorithm used   | casadi::BSplineI |
|                  |                 | for fitting the  | nterpolant       |
|                  |                 | data:            |                  |
|                  |                 | 'not_a_knot'     |                  |
|                  |                 | (default, same   |                  |
|                  |                 | as Matlab),      |                  |
|                  |                 | 'smooth_linear'. |                  |
+------------------+-----------------+------------------+------------------+
| batch_x          | OT_INT          | Evaluate a batch | casadi::Interpol |
|                  |                 | of different     | ant              |
|                  |                 | inputs at once   |                  |
|                  |                 | (default 1).     |                  |
+------------------+-----------------+------------------+------------------+
| degree           | OT_INTVECTOR    | Sets, for each   | casadi::BSplineI |
|                  |                 | grid dimension,  | nterpolant       |
|                  |                 | the degree of    |                  |
|                  |                 | the spline.      |                  |
+------------------+-----------------+------------------+------------------+
| inline           | OT_BOOL         | Implement the    | casadi::Interpol |
|                  |                 | lookup table in  | ant              |
|                  |                 | MX primitives.   |                  |
|                  |                 | Useful when you  |                  |
|                  |                 | need derivatives |                  |
|                  |                 | with respect to  |                  |
|                  |                 | grid and/or      |                  |
|                  |                 | coefficients.    |                  |
|                  |                 | Such derivatives |                  |
|                  |                 | are              |                  |
|                  |                 | fundamentally    |                  |
|                  |                 | dense, so use    |                  |
|                  |                 | with caution.    |                  |
+------------------+-----------------+------------------+------------------+
| linear_solver    | OT_STRING       | Solver used for  | casadi::BSplineI |
|                  |                 | constructing the | nterpolant       |
|                  |                 | coefficient      |                  |
|                  |                 | tensor.          |                  |
+------------------+-----------------+------------------+------------------+
| linear_solver_op | OT_DICT         | Options to be    | casadi::BSplineI |
| tions            |                 | passed to the    | nterpolant       |
|                  |                 | linear solver.   |                  |
+------------------+-----------------+------------------+------------------+
| lookup_mode      | OT_STRINGVECTOR | Specifies, for   | casadi::Interpol |
|                  |                 | each grid        | ant              |
|                  |                 | dimenion, the    |                  |
|                  |                 | lookup algorithm |                  |
|                  |                 | used to find the |                  |
|                  |                 | correct index.   |                  |
|                  |                 | 'linear' uses a  |                  |
|                  |                 | for-loop +       |                  |
|                  |                 | break; (default  |                  |
|                  |                 | when             |                  |
|                  |                 | #knots<=100),    |                  |
|                  |                 | 'exact' uses     |                  |
|                  |                 | floored division |                  |
|                  |                 | (only for        |                  |
|                  |                 | uniform grids),  |                  |
|                  |                 | 'binary' uses a  |                  |
|                  |                 | binary search.   |                  |
|                  |                 | (default when    |                  |
|                  |                 | #knots>100).     |                  |
+------------------+-----------------+------------------+------------------+
| smooth_linear_fr | OT_DOUBLE       | When             | casadi::BSplineI |
| ac               |                 | 'smooth_linear'  | nterpolant       |
|                  |                 | algorithm is     |                  |
|                  |                 | active,          |                  |
|                  |                 | determines       |                  |
|                  |                 | sharpness        |                  |
|                  |                 | between 0        |                  |
|                  |                 | (sharp, as       |                  |
|                  |                 | linear           |                  |
|                  |                 | interpolation)   |                  |
|                  |                 | and 0.5          |                  |
|                  |                 | (smooth).Default |                  |
|                  |                 | value is 0.1.    |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: bspline_interpolant.hpp ";

%feature("docstring") casadi::BSplineInterpolant::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::BSplineInterpolant::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::BSplineInterpolant::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::BSplineInterpolant::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::BSplineInterpolant::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::BSplineInterpolant::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::BSplineInterpolant::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::BSplineInterpolant::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::BSplineInterpolant::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::BSplineInterpolant::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::BSplineInterpolant::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::BSplineInterpolant::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::BSplineInterpolant::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::BSplineInterpolant::has_forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::BSplineInterpolant::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::BSplineInterpolant::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::BSplineInterpolant::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::BSplineInterpolant::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::BSplineInterpolant::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::BSplineInterpolant::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::BSplineInterpolant::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::BSplineInterpolant::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::BSplineInterpolant::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::BSplineInterpolant::has_jacobian "

[INTERNAL]  Full Jacobian.

";

%feature("docstring") casadi::BSplineInterpolant::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::BSplineInterpolant::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::BSplineInterpolant::has_function "

[INTERNAL] ";

%feature("docstring") casadi::BSplineInterpolant::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::BSplineInterpolant::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::BSplineInterpolant::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::BSplineInterpolant::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::BSplineInterpolant::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::BSplineInterpolant::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::BSplineInterpolant::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::BSplineInterpolant::factory "

[INTERNAL] ";

%feature("docstring") casadi::BSplineInterpolant::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::BSplineInterpolant::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::BSplineInterpolant::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::BSplineInterpolant::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::BSplineInterpolant::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::BSplineInterpolant::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::BSplineInterpolant::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::BSplineInterpolant::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::BSplineInterpolant::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::BSplineInterpolant::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::BSplineInterpolant::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::BSplineInterpolant::get_forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::BSplineInterpolant::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::BSplineInterpolant::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::BSplineInterpolant::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::BSplineInterpolant::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::BSplineInterpolant::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::BSplineInterpolant::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::BSplineInterpolant::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::BSplineInterpolant::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::BSplineInterpolant::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::BSplineInterpolant::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::BSplineInterpolant::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::BSplineInterpolant::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::BSplineInterpolant::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::BSplineInterpolant::arg_grid "

[INTERNAL] ";

%feature("docstring") casadi::BSplineInterpolant::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::BSplineInterpolant::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::BSplineInterpolant::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::BSplineInterpolant::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::BSplineInterpolant::codegen_body "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring") casadi::BSplineInterpolant::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::BSplineInterpolant::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::BSplineInterpolant::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::BSplineInterpolant::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::BSplineInterpolant::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::BSplineInterpolant::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::BSplineInterpolant::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::BSplineInterpolant::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::BSplineInterpolant::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::BSplineInterpolant::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::BSplineInterpolant::get_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::BSplineInterpolant::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::BSplineInterpolant::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::BSplineInterpolant::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::BSplineInterpolant::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::BSplineInterpolant::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::BSplineInterpolant::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::BSplineInterpolant::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::BSplineInterpolant::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::BSplineInterpolant::BSplineInterpolant "

[INTERNAL] ";

%feature("docstring") casadi::BSplineInterpolant::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::BSplineInterpolant::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::BSplineInterpolant::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::BSplineInterpolant::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::BSplineInterpolant::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::BSplineInterpolant::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::BSplineInterpolant::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::BSplineInterpolant::jit_dependencies "

[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::BSplineInterpolant::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::BSplineInterpolant::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::BSplineInterpolant::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::BSplineInterpolant::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::BSplineInterpolant::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::BSplineInterpolant::generate_dependencies "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::BSplineInterpolant::get_jacobian "

[INTERNAL]  Full Jacobian.

";

%feature("docstring") casadi::BSplineInterpolant::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::BSplineInterpolant::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::BSplineInterpolant::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::BSplineInterpolant::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::BSplineInterpolant::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::BSplineInterpolant::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::BSplineInterpolant::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::BSplineInterpolant::class_name "

[INTERNAL]  Get type name.

";

%feature("docstring") casadi::BSplineInterpolant::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::BSplineInterpolant::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::BSplineInterpolant::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::BSplineInterpolant::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::BSplineInterpolant::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::BSplineInterpolant::eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::BSplineInterpolant::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::BSplineInterpolant::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::BSplineInterpolant::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::BSplineInterpolant::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::BSplineInterpolant::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::BSplineInterpolant::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::BSplineInterpolant::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring")
casadi::BSplineInterpolant::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::BSplineInterpolant::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::BSplineInterpolant::has_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::BSplineInterpolant::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::BSplineInterpolant::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::BSplineInterpolant::get_name_in "

[INTERNAL]  Names of function input and outputs.

";


// File: classcasadi_1_1BSplineParametric.xml


// File: classcasadi_1_1Call.xml


// File: classcasadi_1_1Callback.xml
%feature("docstring") casadi::Callback::convert_out "

Convert from/to input/output lists/map.

Will raise an error when an unknown key is used or a list has incorrect
size. Does not perform sparsity checking.

";

%feature("docstring") casadi::Callback::has_forward "

Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(casadi_int
nfwd) if no cached version is available.

";

%feature("docstring") casadi::Callback::size2_in "

Get input dimension.

";

%feature("docstring") casadi::Callback::call "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

>  void casadi::Function::call(const std::vector< SX > &arg, std::vector< SX > &output_res, bool always_inline=false, bool never_inline=false) const

>  void casadi::Function::call(const std::vector< MX > &arg, std::vector< MX > &output_res, bool always_inline=false, bool never_inline=false) const

>  void casadi::Function::call(const DMDict &arg, DMDict &output_res, bool always_inline=false, bool never_inline=false) const

>  void casadi::Function::call(const SXDict &arg, SXDict &output_res, bool always_inline=false, bool never_inline=false) const

>  void casadi::Function::call(const MXDict &arg, MXDict &output_res, bool always_inline=false, bool never_inline=false) const 
------------------------------------------------------------------------

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

";

%feature("docstring") casadi::Callback::generate_dependencies "

Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Callback::get_n_in "

Get the number of inputs This function is called during construction.

";

%feature("docstring") casadi::Callback::get_n_out "

Get the number of outputs This function is called during construction.

";

%feature("docstring") casadi::Callback::size_in "

Get input dimension.

";

%feature("docstring") casadi::Callback::reverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out + n_out inputs and n_in outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_out inputs
correspond to adjoint seeds, stacked horizontally The n_in outputs
correspond to adjoint sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

(n_in = n_in(), n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Callback::get_jacobian_sparsity "

Return sparsity of Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Callback::instruction_id "

Identifier index of the instruction (SXFunction/MXFunction)

";

%feature("docstring") casadi::Callback::wrap_as_needed "

Wrap in a Function with options.

";

%feature("docstring") casadi::Callback::sz_arg "

Get required length of arg field.

";

%feature("docstring") casadi::Callback::slice "

returns a new function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Callback::export_code "

Export function in specific language.

Only allowed for (a subset of) SX/MX Functions

";

%feature("docstring") casadi::Callback::hessian_old "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::hessian pre-
CasADi 3.2

";

%feature("docstring") casadi::Callback::nnz_out "

Get number of output nonzeros.

For a particular output or for all of the outputs

";

%feature("docstring") casadi::Callback::mapsum "

Evaluate symbolically in parallel and sum (matrix graph)

Parameters:
-----------

parallelization:  Type of parallelization used: unroll|serial|openmp

";

%feature("docstring") casadi::Callback::free_sx "

Get all the free variables of the function.

";

%feature("docstring") casadi::Callback::name_out "

Get output scheme name by index.

>  const std::string& casadi::Function::name_out(casadi_int ind) const 
------------------------------------------------------------------------

Get output scheme name by index.

";

";

%feature("docstring") casadi::Callback::nnz_in "

Get number of input nonzeros.

For a particular input or for all of the inputs

";

%feature("docstring") casadi::Callback::forward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out + n_in inputs and nfwd outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_in inputs
correspond to forward seeds, stacked horizontally The n_out outputs
correspond to forward sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Callback::default_in "

Get default input value.

";

%feature("docstring") casadi::Callback::init "

Initialize the object This function is called after the object construction
(for the whole class hierarchy) is complete, but before the finalization
step. It is called recursively for the whole class hierarchy, starting with
the lowest level.

";

%feature("docstring") casadi::Callback::numel_out "

Get number of output elements.

For a particular output or for all of the outputs

";

%feature("docstring") casadi::Callback::print_dimensions "

Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Callback::generate "

Export / Generate C code for the function.

";

%feature("docstring") casadi::Callback::instruction_input "

Locations in the work vector for the inputs of the instruction
(SXFunction/MXFunction)

";

%feature("docstring") casadi::Callback::sz_iw "

Get required length of iw field.

";

%feature("docstring") casadi::Callback::is_null "

Is a null pointer?

";

%feature("docstring") casadi::Callback::is_diff_in "

Get differentiability of inputs/output.

";

%feature("docstring") casadi::Callback::has_reverse "

Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(casadi_int
nadj) if no cached version is available.

";

%feature("docstring") casadi::Callback::jacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::Callback::expand "

Expand a function to SX.

";

%feature("docstring") casadi::Callback::sx_out "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring") casadi::Callback::print_options "

Print options to a stream.

";

%feature("docstring") casadi::Callback::generate_out "

Export an output file that can be checked with generated C code output.

generate_in  convert_out to convert between dict/map and vector

";

%feature("docstring") casadi::Callback::checkout "

Checkout a memory object.

";

%feature("docstring") casadi::Callback::Callback "

Copy constructor (throws an error)

>  casadi::Callback::Callback(const Callback &obj)
------------------------------------------------------------------------

Copy constructor (throws an error)

";

";

%feature("docstring") casadi::Callback::~Callback "

Destructor.

";

%feature("docstring") casadi::Callback::instruction_output "

Location in the work vector for the output of the instruction
(SXFunction/MXFunction)

";

%feature("docstring") casadi::Callback::uses_output "

Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Callback::jac "

Calculate all Jacobian blocks Generates a function that takes all non-
differentiated inputs and outputs and calculates all Jacobian blocks. Inputs
that are not needed by the routine are all-zero sparse matrices with the
correct dimensions. Output blocks that are not calculated, e.g. if the
corresponding input or output is marked non-differentiated are also all-zero
sparse. The Jacobian blocks are sorted starting by all the blocks for the
first output, then all the blocks for the second output and so on. E.g.
f:(x,y)->(r,s) results in the function jac_f:(x,y,r,s)->(dr_dx, dr_dy,
ds_dx, ds_dy) This function is cached.

";

%feature("docstring") casadi::Callback::has_spfwd "

Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Callback::which_depends "

Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Callback::jit "

To resolve ambiguity on some compilers.

Create a just-in-time compiled function from a C language string The names
and sparsity patterns of all the inputs and outputs must be provided. If
sparsities are not provided, all inputs and outputs are assumed to be
scalar. Only specify the function body, assuming that input and output
nonzeros are stored in arrays with the specified naming convension. The data
type used is 'casadi_real', which is typically equal to 'double` or another
data type with the same API as 'double'.

Inputs may be null pointers. This means that the all entries are zero.
Outputs may be null points. This means that the corresponding result can be
ignored.

If an error occurs in the evaluation, issue \"return 1;\";

The final generated function will have a structure similar to:

casadi_int fname(const casadi_real** arg, casadi_real** res, casadi_int* iw,
casadi_real* w, void* mem) { const casadi_real *x1, *x2; casadi_real *r1,
*r2; x1 = *arg++; x2 = *arg++; r1 = *res++; r2 = *res++; <FUNCTION_BODY>
return 0; }

";

%feature("docstring") casadi::Callback::get_free "

Get free variables as a string.

";

%feature("docstring") casadi::Callback::index_out "

Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLPSOL_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Callback::construct "

Construct internal object This is the step that actually construct the
internal object, as the class constructor only creates a null pointer. It
should be called from the user constructor.

";

%feature("docstring") casadi::Callback::save "

Export function in specific language.

Only allowed for (a subset of) SX/MX Functions

";

%feature("docstring") casadi::Callback::has_sprev "

Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Callback::sx_in "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring") casadi::Callback::get_forward "

Return function that calculates forward derivatives forward(nfwd) returns a
cached instance if available, and calls  Function get_forward(casadi_int
nfwd) if no cached version is available.

";

%feature("docstring") casadi::Callback::max_in "

Get largest input value.

";

%feature("docstring") casadi::Callback::min_in "

Get smallest input value.

";

%feature("docstring") casadi::Callback::nz_from_out "

Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Callback::sparsity_jac "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::Callback::class_name "

Get class name.

";

%feature("docstring") casadi::Callback::nz_to_out "

Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Callback::nz_to_in "

Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Callback::get_str "

Get string representation.

";

%feature("docstring") casadi::Callback::eval_buffer "

A copy-free low level interface.

In Python, you will be passed two tuples of memoryview objects

";

%feature("docstring") casadi::Callback::free_mx "

Get all the free variables of the function.

";

%feature("docstring") casadi::Callback::serialize "

Serialize.

";

%feature("docstring") casadi::Callback::size1_out "

Get output dimension.

";

%feature("docstring") casadi::Callback::n_instructions "

Number of instruction in the algorithm (SXFunction/MXFunction)

";

%feature("docstring") casadi::Callback::instruction_constant "

Get the floating point output argument of an instruction ( SXFunction)

";

%feature("docstring") casadi::Callback::has_jacobian "

Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Callback::finalize "

Finalize the object This function is called after the construction and init
steps are completed, but before user functions are called. It is called
recursively for the whole class hierarchy, starting with the highest level.

";

%feature("docstring") casadi::Callback::size2_out "

Get output dimension.

";

%feature("docstring") casadi::Callback::mx_in "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring") casadi::Callback::release "

Release a memory object.

";

%feature("docstring") casadi::Callback::is_a "

Check if the function is of a particular type Optionally check if name
matches one of the base classes (default true)

";

%feature("docstring") casadi::Callback::is_diff_out "

Get differentiability of inputs/output.

";

%feature("docstring") casadi::Callback::wrap "

Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Callback::get_sparsity_out "

Get the sparsity of an output This function is called during construction.

";

%feature("docstring") casadi::Callback::assert_size_out "

Assert that an output dimension is equal so some given value.

";

%feature("docstring") casadi::Callback::name_in "

Get input scheme name by index.

>  const std::string& casadi::Function::name_in(casadi_int ind) const 
------------------------------------------------------------------------

Get input scheme name by index.

";

";

%feature("docstring") casadi::Callback::has_free "

Does the function have free variables.

";

%feature("docstring") casadi::Callback::instructions_sx "

Get the SX node corresponding to all instructions ( SXFunction)

Note: input and output instructions have no SX representation. This method
returns nan for those instructions.

";

%feature("docstring") casadi::Callback::assert_size_in "

Assert that an input dimension is equal so some given value.

";

%feature("docstring") casadi::Callback::get_sparsity_in "

Get the sparsity of an input This function is called during construction.

";

%feature("docstring") casadi::Callback::disp "

Print a description of the object.

";

%feature("docstring") casadi::Callback::n_in "

Get the number of function inputs.

";

%feature("docstring") casadi::Callback::sz_w "

Get required length of w field.

";

%feature("docstring") casadi::Callback::info "

Obtain information about function

";

%feature("docstring") casadi::Callback::instruction_MX "

Get the MX node corresponding to an instruction ( MXFunction)

";

%feature("docstring") casadi::Callback::has_jacobian_sparsity "

Return sparsity of Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Callback::sz_res "

Get required length of res field.

";

%feature("docstring") casadi::Callback::print_ptr "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring") casadi::Callback::get_jacobian "

Return Jacobian of all input elements with respect to all output elements.

";

%feature("docstring") casadi::Callback::nz_from_in "

Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Callback::n_nodes "

Number of nodes in the algorithm.

";

%feature("docstring") casadi::Callback::oracle "

Get oracle.

";

%feature("docstring") casadi::Callback::eval "

Evaluate numerically, using temporary matrices and work vectors.

This signature is not thread-safe. For guaranteed thread-safety, use
eval_buffer

";

%feature("docstring") casadi::Callback::convert_in "

Convert from/to input/output lists/map.

Will raise an error when an unknown key is used or a list has incorrect
size. Does not perform sparsity checking.

";

%feature("docstring") casadi::Callback::numel_in "

Get number of input elements.

For a particular input or for all of the inputs

";

%feature("docstring") casadi::Callback::map "

";

";

%feature("docstring") casadi::Callback::print_option "

Print all information there is to know about a certain option.

";

%feature("docstring") casadi::Callback::mapaccum "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



Mapaccum has the following benefits over writing an equivalent for- loop:
much faster at construction time

potentially much faster compilation times (for codegen)

offers a trade-off between memory and evaluation time

The base (settable through the options dictionary, default 10), is used to
create a tower of function calls, containing unrolled for- loops of length
maximum base.

This technique is much more scalable in terms of memory-usage, but slightly
slower at evaluation, than a plain for-loop. The effect is similar to that
of a for-loop with a check-pointing instruction after each chunk of
iterations with size base.

Set base to -1 to unroll all the way; no gains in memory efficiency here.

";

%feature("docstring") casadi::Callback::size1_in "

Get input dimension.

";

%feature("docstring") casadi::Callback::sparsity_in "

Get sparsity of a given input.

";

%feature("docstring") casadi::Callback::get_reverse "

Return function that calculates adjoint derivatives reverse(nadj) returns a
cached instance if available, and calls  Function get_reverse(casadi_int
nadj) if no cached version is available.

";

%feature("docstring") casadi::Callback::generate_in "

Export an input file that can be passed to generate C code with a main.

generate_out  convert_in to convert between dict/map and vector

";

%feature("docstring") casadi::Callback "

Callback function functionality.

This class provides a public API to the FunctionInternal class that can be
subclassed by the user, who is then able to implement the different virtual
method. Note that the Function class also provides a public API to
FunctionInternal, but only allows calling, not being called.

The user is responsible for not deleting this class for the lifetime of the
internal function object.

Joris Gillis, Joel Andersson

C++ includes: callback.hpp ";

%feature("docstring") casadi::Callback::n_out "

Get the number of function outputs.

";

%feature("docstring") casadi::Callback::jacobian_old "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring") casadi::Callback::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::Callback::fold "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



Mapaccum has the following benefits over writing an equivalent for- loop:
much faster at construction time

potentially much faster compilation times (for codegen)

offers a trade-off between memory and evaluation time

The base (settable through the options dictionary, default 10), is used to
create a tower of function calls, containing unrolled for- loops of length
maximum base.

This technique is much more scalable in terms of memory-usage, but slightly
slower at evaluation, than a plain for-loop. The effect is similar to that
of a for-loop with a check-pointing instruction after each chunk of
iterations with size base.

Set base to -1 to unroll all the way; no gains in memory efficiency here.

";

%feature("docstring") casadi::Callback::index_in "

Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLPSOL_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Callback::generate_lifted "

Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Callback::sparsity_out "

Get sparsity of a given output.

";

%feature("docstring") casadi::Callback::stats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::Callback::name "

Name of the function.

";

%feature("docstring") casadi::Callback::size_out "

Get output dimension.

";

%feature("docstring") casadi::Callback::get_name_in "

Get the sparsity of an input This function is called during construction.

";

%feature("docstring") casadi::Callback::get_name_out "

Get the sparsity of an output This function is called during construction.

";

%feature("docstring") casadi::Callback::mx_out "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";


// File: classcasadi_1_1casadi__limits.xml
%feature("docstring") casadi::casadi_limits "

casadi_limits class

The following class, which acts as a complements to the standard
numeric_limits class, allows specifying certain properties of scalar
objects. The template can be specialized for e.g. symbolic scalars Joel
Andersson

C++ includes: casadi_limits.hpp ";


// File: classcasadi_1_1CasadiException.xml
%feature("docstring") casadi::CasadiException::what "

throw () Display error.

";

%feature("docstring") casadi::CasadiException::CasadiException "

Form message string.

>  casadi::CasadiException::CasadiException(const std::string &msg)
------------------------------------------------------------------------

Form message string.

";

";

%feature("docstring") casadi::CasadiException "

Casadi exception class.

Joel Andersson

C++ includes: exception.hpp ";

%feature("docstring") casadi::CasadiException::~CasadiException "

throw () Destructor.

";


// File: classcasadi_1_1CasadiMeta.xml
%feature("docstring") casadi::CasadiMeta "

Collects global CasADi meta information.

Joris Gillis

C++ includes: casadi_meta.hpp ";


// File: classcasadi_1_1CentralDiff.xml
%feature("docstring") casadi::CentralDiff::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::CentralDiff::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::CentralDiff::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::CentralDiff::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::CentralDiff::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::CentralDiff::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::CentralDiff::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::CentralDiff::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::CentralDiff::uses_output "

[INTERNAL]  Is the scheme using the (nondifferentiated) output?

";

%feature("docstring") casadi::CentralDiff::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::CentralDiff::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::CentralDiff::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::CentralDiff::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::CentralDiff::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::CentralDiff::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::CentralDiff::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::CentralDiff::get_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::CentralDiff::set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring") casadi::CentralDiff::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::CentralDiff::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::CentralDiff::get_forward "

[INTERNAL]  Second order derivatives.

";

%feature("docstring") casadi::CentralDiff::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::CentralDiff::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::CentralDiff::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::CentralDiff::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::CentralDiff::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::CentralDiff::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::CentralDiff::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::CentralDiff::generate_dependencies "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::CentralDiff::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::CentralDiff::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::CentralDiff::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::CentralDiff::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::CentralDiff::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::CentralDiff::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::CentralDiff::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::CentralDiff::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::CentralDiff::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::CentralDiff::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::CentralDiff::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::CentralDiff::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::CentralDiff::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::CentralDiff::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::CentralDiff::has_err "

[INTERNAL] ";

%feature("docstring") casadi::CentralDiff::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::CentralDiff::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::CentralDiff::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::CentralDiff::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::CentralDiff::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::CentralDiff::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::CentralDiff::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::CentralDiff::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::CentralDiff::get_function "

[INTERNAL] ";

%feature("docstring") casadi::CentralDiff::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::CentralDiff::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::CentralDiff::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::CentralDiff::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::CentralDiff::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::CentralDiff::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::CentralDiff::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::CentralDiff::calc_stepsize "

[INTERNAL] ";

%feature("docstring") casadi::CentralDiff::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::CentralDiff::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::CentralDiff::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::CentralDiff::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::CentralDiff::pert "

[INTERNAL] ";

%feature("docstring") casadi::CentralDiff::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::CentralDiff::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::CentralDiff::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::CentralDiff::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::CentralDiff::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::CentralDiff::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::CentralDiff::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::CentralDiff::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::CentralDiff::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::CentralDiff::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::CentralDiff::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::CentralDiff::CentralDiff "

[INTERNAL] ";

%feature("docstring") casadi::CentralDiff::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::CentralDiff::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::CentralDiff::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::CentralDiff::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::CentralDiff::finalize "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring") casadi::CentralDiff::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::CentralDiff::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::CentralDiff::calc_fd "

[INTERNAL] ";

%feature("docstring") casadi::CentralDiff::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::CentralDiff::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::CentralDiff::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::CentralDiff::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::CentralDiff::class_name "

[INTERNAL]  Get type name.

";

%feature("docstring") casadi::CentralDiff::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::CentralDiff::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::CentralDiff::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::CentralDiff::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::CentralDiff::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::CentralDiff::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::CentralDiff::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::CentralDiff::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::CentralDiff::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::CentralDiff::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::CentralDiff::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::CentralDiff::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::CentralDiff::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::CentralDiff::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::CentralDiff::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::CentralDiff::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::CentralDiff::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::CentralDiff::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::CentralDiff::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::CentralDiff::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::CentralDiff::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::CentralDiff::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::CentralDiff::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::CentralDiff::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::CentralDiff::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::CentralDiff::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::CentralDiff::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::CentralDiff::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::CentralDiff::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::CentralDiff::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::CentralDiff::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::CentralDiff::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::CentralDiff::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::CentralDiff::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::CentralDiff::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::CentralDiff::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::CentralDiff::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::CentralDiff::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::CentralDiff::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::CentralDiff::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::CentralDiff::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::CentralDiff::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::CentralDiff::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::CentralDiff::~CentralDiff "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::CentralDiff::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::CentralDiff::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::CentralDiff::eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::CentralDiff::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::CentralDiff::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::CentralDiff::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::CentralDiff::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::CentralDiff::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::CentralDiff::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::CentralDiff::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::CentralDiff::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::CentralDiff::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::CentralDiff::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::CentralDiff::n_pert "

[INTERNAL] ";

%feature("docstring") casadi::CentralDiff::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::CentralDiff::has_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::CentralDiff::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::CentralDiff::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::CentralDiff::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::CentralDiff::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::CentralDiff::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::CentralDiff::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::CentralDiff::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::CentralDiff::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::CentralDiff::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::CentralDiff::jit_dependencies "

[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::CentralDiff::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::CentralDiff::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::CentralDiff::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::CentralDiff::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::CentralDiff::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::CentralDiff::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::CentralDiff::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::CentralDiff::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::CentralDiff::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::CentralDiff::has_forward "

[INTERNAL]  Second order derivatives.

";

%feature("docstring") casadi::CentralDiff::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::CentralDiff::factory "

[INTERNAL] ";

%feature("docstring") casadi::CentralDiff::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::CentralDiff::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::CentralDiff::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::CentralDiff "

[INTERNAL]  Calculate derivative using central differences Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| abstol           | OT_DOUBLE       | Accuracy of      | casadi::CentralD |
|                  |                 | function outputs | iff              |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| h                | OT_DOUBLE       | Step size        | casadi::CentralD |
|                  |                 | [default:        | iff              |
|                  |                 | computed from    |                  |
|                  |                 | abstol]          |                  |
+------------------+-----------------+------------------+------------------+
| h_iter           | OT_INT          | Number of        | casadi::CentralD |
|                  |                 | iterations to    | iff              |
|                  |                 | improve on the   |                  |
|                  |                 | step-size        |                  |
|                  |                 | [default: 1 if   |                  |
|                  |                 | error estimate   |                  |
|                  |                 | available,       |                  |
|                  |                 | otherwise 0]     |                  |
+------------------+-----------------+------------------+------------------+
| h_max            | OT_DOUBLE       | Maximum step     | casadi::CentralD |
|                  |                 | size [default 0] | iff              |
+------------------+-----------------+------------------+------------------+
| h_min            | OT_DOUBLE       | Minimum step     | casadi::CentralD |
|                  |                 | size [default    | iff              |
|                  |                 | inf]             |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reltol           | OT_DOUBLE       | Accuracy of      | casadi::CentralD |
|                  |                 | function inputs  | iff              |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| second_order_ste | OT_DOUBLE       | Second order     | casadi::CentralD |
| psize            |                 | perturbation     | iff              |
|                  |                 | size [default:   |                  |
|                  |                 | 1e-3]            |                  |
+------------------+-----------------+------------------+------------------+
| smoothing        | OT_DOUBLE       | Smoothing        | casadi::CentralD |
|                  |                 | regularization   | iff              |
|                  |                 | [default:        |                  |
|                  |                 | machine          |                  |
|                  |                 | precision]       |                  |
+------------------+-----------------+------------------+------------------+
| u_aim            | OT_DOUBLE       | Target ratio of  | casadi::CentralD |
|                  |                 | roundoff error   | iff              |
|                  |                 | to truncation    |                  |
|                  |                 | error [default:  |                  |
|                  |                 | 100.]            |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: finite_differences.hpp ";

%feature("docstring") casadi::CentralDiff::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::CentralDiff::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::CentralDiff::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::CentralDiff::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::CentralDiff::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::CentralDiff::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::CentralDiff::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::CentralDiff::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::CentralDiff::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::CentralDiff::codegen_body "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring") casadi::CentralDiff::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::CentralDiff::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::CentralDiff::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::CentralDiff::has_function "

[INTERNAL] ";

%feature("docstring") casadi::CentralDiff::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::CentralDiff::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::CentralDiff::alloc_res "

[INTERNAL]  Ensure required length of res field.

";


// File: classcasadi_1_1ClangCompiler.xml
%feature("docstring") casadi::ClangCompiler::ClangCompiler "

[INTERNAL]  Constructor.

";

%feature("docstring") casadi::ClangCompiler::can_have_meta "

[INTERNAL]  Can meta information be read?

";

%feature("docstring") casadi::ClangCompiler::inlined "

[INTERNAL] ";

%feature("docstring") casadi::ClangCompiler::get_function "

[INTERNAL]  Get a function pointer for numerical evaluation.

";

%feature("docstring") casadi::ClangCompiler::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::ClangCompiler::finalize "

[INTERNAL] ";

%feature("docstring") casadi::ClangCompiler::read_external "

[INTERNAL]  Get an external function declaration.

";

%feature("docstring") casadi::ClangCompiler::disp "

[INTERNAL]  Print.

";

%feature("docstring") casadi::ClangCompiler::library "

[INTERNAL]  Get library name.

";

%feature("docstring") casadi::ClangCompiler "

'clang' plugin for Importer

Joris Gillis  Interface to the JIT compiler CLANG

>List of available options

+--------------+-----------------+-----------------------------------------+
|      Id      |      Type       |               Description               |
+==============+=================+=========================================+
| flags        | OT_STRINGVECTOR | Compile flags for the JIT compiler.     |
|              |                 | Default: None                           |
+--------------+-----------------+-----------------------------------------+
| include_path | OT_STRING       | Include paths for the JIT compiler. The |
|              |                 | include directory shipped with CasADi   |
|              |                 | will be automatically appended.         |
+--------------+-----------------+-----------------------------------------+

>List of available options

+--------------+-----------------+--------------------+--------------------+
|      Id      |      Type       |    Description     |      Used in       |
+==============+=================+====================+====================+
| flags        | OT_STRINGVECTOR | Compile flags for  | casadi::ClangCompi |
|              |                 | the JIT compiler.  | ler                |
|              |                 | Default: None      |                    |
+--------------+-----------------+--------------------+--------------------+
| include_path | OT_STRING       | Include paths for  | casadi::ClangCompi |
|              |                 | the JIT compiler.  | ler                |
|              |                 | The include        |                    |
|              |                 | directory shipped  |                    |
|              |                 | with CasADi will   |                    |
|              |                 | be automatically   |                    |
|              |                 | appended.          |                    |
+--------------+-----------------+--------------------+--------------------+
| verbose      | OT_BOOL         | Verbose evaluation | casadi::ImporterIn |
|              |                 | for debugging      | ternal             |
+--------------+-----------------+--------------------+--------------------+

Diagrams
--------



C++ includes: clang_compiler.hpp ";

%feature("docstring") casadi::ClangCompiler::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::ClangCompiler::~ClangCompiler "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::ClangCompiler::plugin_name "

[INTERNAL]  Get name of plugin.

";

%feature("docstring") casadi::ClangCompiler::serialize_body "

[INTERNAL] ";

%feature("docstring") casadi::ClangCompiler::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::ClangCompiler::read_meta "

[INTERNAL]  Get meta information.

";

%feature("docstring") casadi::ClangCompiler::to_text "

[INTERNAL]  Get entry as a text.

";

%feature("docstring") casadi::ClangCompiler::class_name "

[INTERNAL]  Get type name.

";

%feature("docstring") casadi::ClangCompiler::serialize_type "

[INTERNAL] ";

%feature("docstring") casadi::ClangCompiler::has_meta "

[INTERNAL]  Does an entry exist?

";

%feature("docstring") casadi::ClangCompiler::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::ClangCompiler::serialize "

[INTERNAL] ";

%feature("docstring") casadi::ClangCompiler::body "

[INTERNAL]  Get the function body, if inlined.

";

%feature("docstring") casadi::ClangCompiler::get_meta "

[INTERNAL]  Get entry as a text.

";

%feature("docstring") casadi::ClangCompiler::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::ClangCompiler::has_function "

[INTERNAL]  Get a function pointer for numerical evaluation.

";


// File: classcasadi_1_1CodeGenerator.xml
%feature("docstring") casadi::CodeGenerator::add_include "

Add an include file optionally using a relative path \"...\" instead of an
absolute path <...>

";

%feature("docstring") casadi::CodeGenerator "

Helper class for C code generation.

Joel Andersson

C++ includes: code_generator.hpp ";

%feature("docstring") casadi::CodeGenerator::dump "

Generate a file, return code as string.

";

%feature("docstring") casadi::CodeGenerator::add "

Add a function (name generated)

";

%feature("docstring") casadi::CodeGenerator::CodeGenerator "

Constructor.

";

%feature("docstring") casadi::CodeGenerator::generate "

Generate file(s) The \"prefix\" argument will be prepended to the generated
files and may be a directory or a file prefix. returns the filename.

";


// File: classcasadi_1_1Collocation.xml
%feature("docstring") casadi::Collocation::class_name "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::Collocation::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Collocation::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::Collocation::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::Collocation::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Collocation::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::Collocation::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Collocation::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::Collocation::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Collocation::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::Collocation::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::Collocation::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Collocation::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::Collocation::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::Collocation::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::Collocation::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::Collocation::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::Collocation::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Collocation::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::Collocation::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::Collocation::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Collocation::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::Collocation::has_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Collocation::Collocation "

[INTERNAL]  Constructor.

";

%feature("docstring") casadi::Collocation::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::Collocation::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Collocation::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::Collocation::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::Collocation::codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::Collocation::set_function "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::Collocation::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Collocation::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::Collocation::~Collocation "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Collocation::algebraic_state_init "

[INTERNAL] ";

%feature("docstring") casadi::Collocation::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::Collocation::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::Collocation::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::Collocation::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::Collocation::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Collocation::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::Collocation::set_temp "

[INTERNAL]  Set the work vectors.

";

%feature("docstring") casadi::Collocation::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Collocation::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::Collocation::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Collocation::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Collocation::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::Collocation::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::Collocation::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::Collocation::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::Collocation::getExplicitB "

[INTERNAL]  Get explicit dynamics (backward problem)

";

%feature("docstring") casadi::Collocation::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::Collocation::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::Collocation::setupFG "

[INTERNAL]  Setup F and G.

";

%feature("docstring") casadi::Collocation::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::Collocation::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Collocation::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::Collocation::print_stats "

[INTERNAL]  Print solver statistics.

";

%feature("docstring") casadi::Collocation::has_function "

[INTERNAL] ";

%feature("docstring") casadi::Collocation::eval "

[INTERNAL]  evaluate

";

%feature("docstring") casadi::Collocation::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Collocation::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Collocation::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Collocation::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::Collocation::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Collocation::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::Collocation::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Collocation::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::Collocation::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::Collocation::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::Collocation::create_advanced "

[INTERNAL]  Helper for a more powerful 'integrator' factory

";

%feature("docstring") casadi::Collocation::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::Collocation::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::Collocation::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::Collocation::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::Collocation::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Collocation::generate_dependencies "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::Collocation::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::Collocation::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::Collocation::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::Collocation::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Collocation::expand "

[INTERNAL] ";

%feature("docstring") casadi::Collocation::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Collocation::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::Collocation::x "

[INTERNAL] ";

%feature("docstring") casadi::Collocation::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::Collocation::factory "

[INTERNAL] ";

%feature("docstring") casadi::Collocation::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Collocation::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::Collocation::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::Collocation::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::Collocation::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Collocation::advance "

[INTERNAL]  Advance solution in time.

";

%feature("docstring") casadi::Collocation::has_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Collocation::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::Collocation::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Collocation::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Collocation::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::Collocation::getDerivativeOptions "

[INTERNAL]  Set solver specific options to generated augmented integrators.

";

%feature("docstring") casadi::Collocation::aug_adj "

[INTERNAL]  Generate a augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring") casadi::Collocation::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Collocation::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Collocation::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::Collocation::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::Collocation::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Collocation::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Collocation::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::Collocation::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::Collocation::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::Collocation::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Collocation::calc_function "

[INTERNAL] ";

%feature("docstring") casadi::Collocation::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Collocation::get_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Collocation::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Collocation::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::Collocation::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::Collocation::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Collocation::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Collocation::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::Collocation::sp_jac_dae "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (forward
problem)

";

%feature("docstring") casadi::Collocation::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::Collocation::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Collocation::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::Collocation::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::Collocation::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Collocation::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Collocation::z "

[INTERNAL] ";

%feature("docstring") casadi::Collocation::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::Collocation::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Collocation::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::Collocation::p "

[INTERNAL] ";

%feature("docstring") casadi::Collocation::q "

[INTERNAL] ";

%feature("docstring") casadi::Collocation::t "

[INTERNAL] ";

%feature("docstring") casadi::Collocation::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::Collocation::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::Collocation::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Collocation::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::Collocation::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Collocation::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Collocation::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::Collocation::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::Collocation::setStopTime "

[INTERNAL]  Set stop time for the integration.

";

%feature("docstring") casadi::Collocation::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Collocation::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Collocation::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::Collocation::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Collocation::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Collocation "

'collocation' plugin for Integrator

Fixed-step implicit Runge-Kutta integrator ODE/DAE integrator based on
collocation schemes

The method is still under development

>List of available options

+---------------------------+-----------------+----------------------------+
|            Id             |      Type       |        Description         |
+===========================+=================+============================+
| augmented_options         | OT_DICT         | Options to be passed down  |
|                           |                 | to the augmented           |
|                           |                 | integrator, if one is      |
|                           |                 | constructed.               |
+---------------------------+-----------------+----------------------------+
| collocation_scheme        | OT_STRING       | Collocation scheme:        |
|                           |                 | radau|legendre             |
+---------------------------+-----------------+----------------------------+
| expand                    | OT_BOOL         | Replace MX with SX         |
|                           |                 | expressions in problem     |
|                           |                 | formulation [false]        |
+---------------------------+-----------------+----------------------------+
| grid                      | OT_DOUBLEVECTOR | Time grid                  |
+---------------------------+-----------------+----------------------------+
| interpolation_order       | OT_INT          | Order of the interpolating |
|                           |                 | polynomials                |
+---------------------------+-----------------+----------------------------+
| number_of_finite_elements | OT_INT          | Number of finite elements  |
+---------------------------+-----------------+----------------------------+
| output_t0                 | OT_BOOL         | Output the state at the    |
|                           |                 | initial time               |
+---------------------------+-----------------+----------------------------+
| print_stats               | OT_BOOL         | Print out statistics after |
|                           |                 | integration                |
+---------------------------+-----------------+----------------------------+
| rootfinder                | OT_STRING       | An implicit function       |
|                           |                 | solver                     |
+---------------------------+-----------------+----------------------------+
| rootfinder_options        | OT_DICT         | Options to be passed to    |
|                           |                 | the NLP Solver             |
+---------------------------+-----------------+----------------------------+
| simplify                  | OT_BOOL         | Implement as MX  Function  |
|                           |                 | (codegeneratable/serializa |
|                           |                 | ble) default: false        |
+---------------------------+-----------------+----------------------------+
| simplify_options          | OT_DICT         | Any options to pass to     |
|                           |                 | simplified form Function   |
|                           |                 | constructor                |
+---------------------------+-----------------+----------------------------+
| t0                        | OT_DOUBLE       | Beginning of the time      |
|                           |                 | horizon                    |
+---------------------------+-----------------+----------------------------+
| tf                        | OT_DOUBLE       | End of the time horizon    |
+---------------------------+-----------------+----------------------------+

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::Implicit |
| s                |                 | passed down to   | FixedStepIntegra |
|                  |                 | the augmented    | tor              |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| collocation_sche | OT_STRING       | Collocation      | casadi::Collocat |
| me               |                 | scheme:          | ion              |
|                  |                 | radau|legendre   |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Implicit |
|                  |                 | SX expressions   | FixedStepIntegra |
|                  |                 | in problem       | tor              |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::Implicit |
|                  |                 |                  | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| interpolation_or | OT_INT          | Order of the     | casadi::Collocat |
| der              |                 | interpolating    | ion              |
|                  |                 | polynomials      |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::Implicit |
| _elements        |                 | elements         | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::Implicit |
|                  |                 | at the initial   | FixedStepIntegra |
|                  |                 | time             | tor              |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::Implicit |
|                  |                 | statistics after | FixedStepIntegra |
|                  |                 | integration      | tor              |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::Implicit |
|                  |                 | function solver  | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::Implicit |
| ns               |                 | passed to the    | FixedStepIntegra |
|                  |                 | NLP Solver       | tor              |
+------------------+-----------------+------------------+------------------+
| simplify         | OT_BOOL         | Implement as MX  | casadi::Implicit |
|                  |                 | Function (codege | FixedStepIntegra |
|                  |                 | neratable/serial | tor              |
|                  |                 | izable) default: |                  |
|                  |                 | false            |                  |
+------------------+-----------------+------------------+------------------+
| simplify_options | OT_DICT         | Any options to   | casadi::Implicit |
|                  |                 | pass to          | FixedStepIntegra |
|                  |                 | simplified form  | tor              |
|                  |                 | Function         |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::Implicit |
|                  |                 | time horizon     | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::Implicit |
|                  |                 | horizon          | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: collocation.hpp ";

%feature("docstring") casadi::Collocation::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::Collocation::rx "

[INTERNAL] ";

%feature("docstring") casadi::Collocation::rz "

[INTERNAL] ";

%feature("docstring") casadi::Collocation::get_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Collocation::rq "

[INTERNAL] ";

%feature("docstring") casadi::Collocation::rp "

[INTERNAL] ";

%feature("docstring") casadi::Collocation::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Collocation::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Collocation::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::Collocation::sp_jac_rdae "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (backward
problem)

";

%feature("docstring") casadi::Collocation::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::Collocation::create_function "

[INTERNAL]  Create an oracle function

";

%feature("docstring") casadi::Collocation::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::Collocation::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::Collocation::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::Collocation::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Collocation::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::Collocation::get_function "

[INTERNAL]

>  const Function& casadi::OracleFunction::get_function(const std::string &name) const override
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Collocation::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Collocation::algebraic_state_output "

[INTERNAL] ";

%feature("docstring") casadi::Collocation::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Collocation::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Collocation::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Collocation::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Collocation::getExplicit "

[INTERNAL]  Get explicit dynamics.

";

%feature("docstring") casadi::Collocation::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::Collocation::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Collocation::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Collocation::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::Collocation::init "

[INTERNAL]  Initialize stage.

";

%feature("docstring") casadi::Collocation::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::Collocation::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Collocation::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Collocation::jit_dependencies "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring") casadi::Collocation::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Collocation::finalize "

[INTERNAL]  Finalize initialization.

";

%feature("docstring") casadi::Collocation::resetB "

[INTERNAL]  Reset the backward problem and take time to tf.

";

%feature("docstring") casadi::Collocation::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Collocation::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::Collocation::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Collocation::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::Collocation::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Collocation::monitored "

[INTERNAL] ";

%feature("docstring") casadi::Collocation::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Collocation::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Collocation::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Collocation::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Collocation::aug_fwd "

[INTERNAL]  Generate a augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring") casadi::Collocation::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::Collocation::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Collocation::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::Collocation::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::Collocation::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Collocation::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::Collocation::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::Collocation::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Collocation::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Collocation::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::Collocation::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Collocation::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::Collocation::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::Collocation::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Collocation::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::Collocation::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Collocation::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Collocation::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::Collocation::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Collocation::retreat "

[INTERNAL]  Retreat solution in time.

";

%feature("docstring") casadi::Collocation::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Collocation::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::Collocation::reset "

[INTERNAL]  Reset the forward problem.

";

%feature("docstring") casadi::Collocation::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Collocation::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::Collocation::map "

[INTERNAL]  Generate/retrieve cached serial map.

";


// File: classcasadi_1_1Concat.xml


// File: classcasadi_1_1Conic.xml
%feature("docstring") casadi::Conic::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Conic::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::Conic::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::Conic::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::Conic::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Conic::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Conic::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Conic::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::Conic::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::Conic::has_function "

[INTERNAL] ";

%feature("docstring") casadi::Conic::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::Conic::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::Conic::init "

[INTERNAL]  Initialize Initialize and make the object ready for setting
arguments and evaluation. This method is typically called after setting
options but before evaluating. If passed to another class (in the
constructor), this class should invoke this function when initialized.

";

%feature("docstring") casadi::Conic::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Conic::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Conic::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Conic::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Conic::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Conic::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Conic::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Conic::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::Conic::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::Conic::generateNativeCode "

[INTERNAL]  Generate native code in the interfaced language for debugging

";

%feature("docstring") casadi::Conic::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::Conic::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::Conic::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Conic::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Conic::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Conic::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::Conic::eval "

[INTERNAL]   Solve the QP.

";

%feature("docstring") casadi::Conic::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Conic::get_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Conic::finalize "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring") casadi::Conic::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::Conic::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Conic::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Conic::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Conic::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Conic::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::Conic::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::Conic::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::Conic::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::Conic::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::Conic::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::Conic::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Conic::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::Conic::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::Conic::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::Conic::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::Conic::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Conic::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Conic::get_forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::Conic::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::Conic::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Conic::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::Conic::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::Conic::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::Conic::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::Conic::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::Conic::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Conic::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Conic::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Conic::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::Conic::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Conic::set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring") casadi::Conic::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::Conic::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Conic::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::Conic::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Conic::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::Conic::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::Conic::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::Conic::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::Conic::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Conic::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Conic::integer_support "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring") casadi::Conic::generate_dependencies "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Conic::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::Conic::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Conic::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::Conic::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Conic::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Conic::has_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Conic::~Conic "

[INTERNAL] ";

%feature("docstring") casadi::Conic::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::Conic::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::Conic::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Conic::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::Conic::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::Conic::jit_dependencies "

[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::Conic::Conic "

[INTERNAL] ";

%feature("docstring") casadi::Conic::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::Conic::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Conic::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Conic::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Conic::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::Conic::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Conic::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::Conic::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::Conic::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::Conic::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::Conic::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Conic::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::Conic::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Conic::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::Conic::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::Conic::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::Conic::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::Conic::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Conic::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Conic::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::Conic::class_name "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::Conic::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Conic::check_inputs "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Conic::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Conic::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::Conic::get_function "

[INTERNAL] ";

%feature("docstring") casadi::Conic::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Conic::codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::Conic::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::Conic::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::Conic::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Conic::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Conic::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Conic::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::Conic::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::Conic::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Conic::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Conic::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Conic::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Conic::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::Conic::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Conic::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Conic::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Conic::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::Conic::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::Conic::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::Conic::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Conic::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::Conic::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::Conic::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Conic::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::Conic::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::Conic::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::Conic::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Conic::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Conic::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::Conic::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Conic::solve "

[INTERNAL]   Solve the QP.

";

%feature("docstring") casadi::Conic::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::Conic::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::Conic::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Conic::factory "

[INTERNAL] ";

%feature("docstring") casadi::Conic::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::Conic::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::Conic::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Conic::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::Conic::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::Conic::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Conic::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::Conic::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::Conic::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::Conic::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::Conic::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::Conic::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Conic::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::Conic::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Conic::psd_support "

[INTERNAL]  Can psd constraints be treated.

";

%feature("docstring") casadi::Conic::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Conic::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::Conic::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Conic::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Conic::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::Conic::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Conic::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Conic::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Conic::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::Conic::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::Conic::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::Conic::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::Conic::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::Conic::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::Conic::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::Conic::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Conic "

Internal class.

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| discrete         | OT_BOOLVECTOR   | Indicates which  | casadi::Conic    |
|                  |                 | of the variables |                  |
|                  |                 | are discrete,    |                  |
|                  |                 | i.e. integer-    |                  |
|                  |                 | valued           |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| error_on_fail    | OT_BOOL         | When the         | casadi::Conic    |
|                  |                 | numerical        |                  |
|                  |                 | process returns  |                  |
|                  |                 | unsuccessfully,  |                  |
|                  |                 | raise an error   |                  |
|                  |                 | (default false). |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_problem    | OT_BOOL         | Print a numeric  | casadi::Conic    |
|                  |                 | description of   |                  |
|                  |                 | the problem      |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: conic_impl.hpp ";

%feature("docstring") casadi::Conic::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Conic::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::Conic::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Conic::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::Conic::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::Conic::has_forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::Conic::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Conic::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::Conic::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Conic::print "

[INTERNAL]  C-style formatted printing during evaluation.

";


// File: classcasadi_1_1Constant.xml


// File: classcasadi_1_1ConstantDM.xml


// File: classcasadi_1_1ConstantFile.xml


// File: classcasadi_1_1ConstantMX.xml


// File: classcasadi_1_1ConstantSX.xml


// File: classcasadi_1_1Convexify.xml


// File: classcasadi_1_1DaeBuilder.xml


/*  Variables and equations  */

/* Public data members

*/

/*  Symbolic modeling  */

/* Formulate an optimal control problem

*/

/*  Manipulation  */

/* Reformulate the dynamic optimization problem.

*/

/*  Functions  */

/* Add or load auxiliary functions

*/

/*  Import and export  */ %feature("docstring") casadi::DaeBuilder::add_s "

Add a implicit state.

";

%feature("docstring") casadi::DaeBuilder::add_fun "

Add an external function.

>  Function casadi::DaeBuilder::add_fun(const std::string &name, const Importer &compiler, const Dict &opts=Dict())
------------------------------------------------------------------------

Add an external function.

";

";

%feature("docstring") casadi::DaeBuilder::sanity_check "

Check if dimensions match.

";

%feature("docstring") casadi::DaeBuilder::set_unit "

Set the unit for a component.

";

%feature("docstring") casadi::DaeBuilder::DaeBuilder "

Default constructor.

";

%feature("docstring") casadi::DaeBuilder::sort_dae "

Sort the DAE and implicitly defined states.

";

%feature("docstring") casadi::DaeBuilder::start "

Get the (optionally normalized) value(s) at time 0 by expression.

>  std::vector<double> casadi::DaeBuilder::start(const MX &var, bool normalized=false) const 
------------------------------------------------------------------------

Get the (optionally normalized) value(s) at time 0 by expression.

";

";

%feature("docstring") casadi::DaeBuilder::add_aux "

Add an auxiliary variable.

";

%feature("docstring") casadi::DaeBuilder::min "

Get the lower bound(s) by expression.

>  std::vector<double> casadi::DaeBuilder::min(const MX &var, bool normalized=false) const 
------------------------------------------------------------------------

Get the lower bound(s) by expression.

";

";

%feature("docstring") casadi::DaeBuilder::add_quad "

Add a quadrature equation.

";

%feature("docstring") casadi::DaeBuilder::nominal "

Get the nominal value(s) by expression.

>  std::vector<double> casadi::DaeBuilder::nominal(const MX &var) const 
------------------------------------------------------------------------

Get the nominal value(s) by expression.

";

";

%feature("docstring") casadi::DaeBuilder::max "

Get the upper bound(s) by expression.

>  std::vector<double> casadi::DaeBuilder::max(const MX &var, bool normalized=false) const 
------------------------------------------------------------------------

Get the upper bound(s) by expression.

";

";

%feature("docstring") casadi::DaeBuilder::make_semi_explicit "

Transform the implicit DAE to a semi-explicit DAE.

";

%feature("docstring") casadi::DaeBuilder::set_derivative_start "

Set the (optionally normalized) derivative value(s) at time 0 by expression.

>  void casadi::DaeBuilder::set_derivative_start(const MX &var, const std::vector< double > &val, bool normalized=false)
------------------------------------------------------------------------

Set the (optionally normalized) derivative value(s) at time 0 by expression.

";

";

%feature("docstring") casadi::DaeBuilder::add_lc "

Add a named linear combination of output expressions.

";

%feature("docstring") casadi::DaeBuilder::sort_d "

Sort dependent parameters.

";

%feature("docstring") casadi::DaeBuilder::sort_alg "

Sort the algebraic equations and algebraic states.

";

%feature("docstring") casadi::DaeBuilder::fun "

Get function by name.

";

%feature("docstring") casadi::DaeBuilder::add_dae "

Add a differential-algebraic equation.

";

%feature("docstring") casadi::DaeBuilder::make_explicit "

Transform the implicit DAE or semi-explicit DAE into an explicit ODE.

";

%feature("docstring") casadi::DaeBuilder "

An initial-value problem in differential-algebraic equations.

Independent variables:
======================





::

  t:      time
  



Time-continuous variables:
==========================





::

  x:      states defined by ODE
  s:      implicitly defined states
  z:      algebraic variables
  u:      control signals
  q:      quadrature states
  y:      outputs
  



Time-constant variables:
========================





::

  p:      free parameters
  d:      dependent parameters
  



Dynamic constraints (imposed everywhere):
=========================================





::

  ODE                    \\\\dot{x} ==  ode(t, x, s, z, u, p, d)
  DAE or implicit ODE:         0 ==  dae(t, x, s, z, u, p, d, sdot)
  algebraic equations:         0 ==  alg(t, x, s, z, u, p, d)
  quadrature equations:  \\\\dot{q} == quad(t, x, s, z, u, p, d)
  dependent parameters:        d == ddef(t, x, s, z, u, p, d)
  output equations:            y == ydef(t, x, s, z, u, p, d)
  



Point constraints (imposed pointwise):
======================================





::

  Initial equations:           0 == init(t, x, s, z, u, p, d, sdot)
  



Joel Andersson

C++ includes: dae_builder.hpp ";

%feature("docstring") casadi::DaeBuilder::add_q "

Add a new quadrature state.

";

%feature("docstring") casadi::DaeBuilder::add_p "

Add a new parameter

";

%feature("docstring") casadi::DaeBuilder::var "

Get variable expression by name.

";

%feature("docstring") casadi::DaeBuilder::add_u "

Add a new control.

";

%feature("docstring") casadi::DaeBuilder::has_fun "

Does a particular function already exist?

";

%feature("docstring") casadi::DaeBuilder::add_z "

Add a new algebraic variable.

";

%feature("docstring") casadi::DaeBuilder::add_y "

Add a new output.

";

%feature("docstring") casadi::DaeBuilder::add_x "

Add a new differential state.

";

%feature("docstring") casadi::DaeBuilder::eliminate_quad "

Eliminate quadrature states and turn them into ODE states.

";

%feature("docstring") casadi::DaeBuilder::derivative_start "

Get the (optionally normalized) derivative value(s) at time 0 by expression.

>  std::vector<double> casadi::DaeBuilder::derivative_start(const MX &var, bool normalized=false) const 
------------------------------------------------------------------------

Get the (optionally normalized) derivative value(s) at time 0 by expression.

";

";

%feature("docstring") casadi::DaeBuilder::set_nominal "

Set the nominal value(s) by expression.

>  void casadi::DaeBuilder::set_nominal(const MX &var, const std::vector< double > &val)
------------------------------------------------------------------------

Set the nominal value(s) by expression.

";

";

%feature("docstring") casadi::DaeBuilder::parse_fmi "

Import existing problem from FMI/XML

";

%feature("docstring") casadi::DaeBuilder::add_variable "

Add a new variable: returns corresponding symbolic expression.

>  MX casadi::DaeBuilder::add_variable(const std::string &name, casadi_int n=1)

>  MX casadi::DaeBuilder::add_variable(const std::string &name, const Sparsity &sp)
------------------------------------------------------------------------

Add a new variable: returns corresponding symbolic expression.

";

";

%feature("docstring") casadi::DaeBuilder::add_d "

Add a new dependent parameter.

";

%feature("docstring") casadi::DaeBuilder::split_dae "

Identify and separate the algebraic variables and equations in the DAE.

";

%feature("docstring") casadi::DaeBuilder::set_guess "

Set the initial guess(es) by expression.

>  void casadi::DaeBuilder::set_guess(const MX &var, const std::vector< double > &val, bool normalized=false)
------------------------------------------------------------------------

Set the initial guess(es) by expression.

";

";

%feature("docstring") casadi::DaeBuilder::add_alg "

Add an algebraic equation.

";

%feature("docstring") casadi::DaeBuilder::create "

Construct a function object.

";

%feature("docstring") casadi::DaeBuilder::guess "

Get the initial guess(es) by expression.

>  std::vector<double> casadi::DaeBuilder::guess(const MX &var, bool normalized=false) const 
------------------------------------------------------------------------

Get the initial guess(es) by expression.

";

";

%feature("docstring") casadi::DaeBuilder::variable "

Access a variable by name

";

%feature("docstring") casadi::DaeBuilder::set_max "

Set the upper bound(s) by expression.

>  void casadi::DaeBuilder::set_max(const MX &var, const std::vector< double > &val, bool normalized=false)
------------------------------------------------------------------------

Set the upper bound(s) by expression.

";

";

%feature("docstring") casadi::DaeBuilder::eliminate_alg "

Eliminate algebraic variables and equations transforming them into outputs.

";

%feature("docstring") casadi::DaeBuilder::set_min "

Set the lower bound(s) by expression.

>  void casadi::DaeBuilder::set_min(const MX &var, const std::vector< double > &val, bool normalized=false)
------------------------------------------------------------------------

Set the lower bound(s) by expression.

";

";

%feature("docstring") casadi::DaeBuilder::set_start "

Set the (optionally normalized) value(s) at time 0 by expression.

>  void casadi::DaeBuilder::set_start(const MX &var, const std::vector< double > &val, bool normalized=false)
------------------------------------------------------------------------

Set the (optionally normalized) value(s) at time 0 by expression.

";

";

%feature("docstring") casadi::DaeBuilder::unit "

Get the unit given a vector of symbolic variables (all units must be
identical)

>  std::string casadi::DaeBuilder::unit(const MX &var) const 
------------------------------------------------------------------------

Get the unit given a vector of symbolic variables (all units must be
identical)

";

";

%feature("docstring") casadi::DaeBuilder::scale_variables "

Scale the variables.

";

%feature("docstring") casadi::DaeBuilder::split_d "

Eliminate interdependencies amongst dependent parameters.

";

%feature("docstring") casadi::DaeBuilder::eliminate_d "

Eliminate dependent parameters.

";

%feature("docstring") casadi::DaeBuilder::disp "

Print representation.

";

%feature("docstring") casadi::DaeBuilder::der "

Get a derivative expression by non-differentiated expression.

>  MX casadi::DaeBuilder::der(const MX &var) const 
------------------------------------------------------------------------

Get a derivative expression by non-differentiated expression.

";

";

%feature("docstring") casadi::DaeBuilder::type_name "

Readable name of the class.

";

%feature("docstring") casadi::DaeBuilder::scale_equations "

Scale the implicit equations.

";

%feature("docstring") casadi::DaeBuilder::get_str "

Get string representation.

";

%feature("docstring") casadi::DaeBuilder::add_ode "

Add an ordinary differential equation.

";


// File: classcasadi_1_1DenseMultiplication.xml


// File: classcasadi_1_1DenseTranspose.xml


// File: classcasadi_1_1Densify.xml


// File: classcasadi_1_1DeserializerBase.xml
%feature("docstring") casadi::DeserializerBase "

C++ includes: serializer.hpp ";


// File: classcasadi_1_1DeserializingStream.xml
%feature("docstring") casadi::DeserializingStream::DeserializingStream "

";

";

%feature("docstring") casadi::DeserializingStream::unpack "

";

";

%feature("docstring") casadi::DeserializingStream "

Helper class for Serialization.

Joris Gillis

C++ includes: serializing_stream.hpp ";


// File: classcasadi_1_1Determinant.xml


// File: classcasadi_1_1Diagcat.xml


// File: classcasadi_1_1Diagsplit.xml


// File: classcasadi_1_1DllLibrary.xml
%feature("docstring") casadi::DllLibrary::plugin_name "

[INTERNAL]  Queery plugin name.

";

%feature("docstring") casadi::DllLibrary::DllLibrary "

[INTERNAL] ";

%feature("docstring") casadi::DllLibrary::init_handle "

[INTERNAL] ";

%feature("docstring") casadi::DllLibrary::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::DllLibrary::get_function "

[INTERNAL]  Get a function pointer for numerical evaluation.

";

%feature("docstring") casadi::DllLibrary::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::DllLibrary::to_text "

[INTERNAL]  Get entry as a text.

";

%feature("docstring") casadi::DllLibrary::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::DllLibrary::get_meta "

[INTERNAL]  Get entry as a text.

";

%feature("docstring") casadi::DllLibrary::disp "

[INTERNAL]  Print.

";

%feature("docstring") casadi::DllLibrary::serialize_body "

[INTERNAL] ";

%feature("docstring") casadi::DllLibrary::body "

[INTERNAL]  Get the function body, if inlined.

";

%feature("docstring") casadi::DllLibrary::has_function "

[INTERNAL]  Get a function pointer for numerical evaluation.

";

%feature("docstring") casadi::DllLibrary::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::DllLibrary "

Dynamically linked library.

Joel Andersson

>List of available options

+---------+---------+---------------------------------+--------------------+
|   Id    |  Type   |           Description           |      Used in       |
+=========+=========+=================================+====================+
| verbose | OT_BOOL | Verbose evaluation  for         | casadi::DllLibrary |
|         |         | debugging                       |                    |
+---------+---------+---------------------------------+--------------------+

Diagrams
--------



C++ includes: importer_internal.hpp ";

%feature("docstring") casadi::DllLibrary::read_meta "

[INTERNAL]  Get meta information.

";

%feature("docstring") casadi::DllLibrary::class_name "

[INTERNAL]  Get type name.

";

%feature("docstring") casadi::DllLibrary::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::DllLibrary::~DllLibrary "

[INTERNAL] ";

%feature("docstring") casadi::DllLibrary::finalize "

[INTERNAL] ";

%feature("docstring") casadi::DllLibrary::serialize "

[INTERNAL] ";

%feature("docstring") casadi::DllLibrary::library "

[INTERNAL]  Get library name.

";

%feature("docstring") casadi::DllLibrary::can_have_meta "

[INTERNAL]  Can meta information be read?

";

%feature("docstring") casadi::DllLibrary::read_external "

[INTERNAL]  Get an external function declaration.

";

%feature("docstring") casadi::DllLibrary::inlined "

[INTERNAL] ";

%feature("docstring") casadi::DllLibrary::serialize_type "

[INTERNAL] ";

%feature("docstring") casadi::DllLibrary::has_meta "

[INTERNAL]  Does an entry exist?

";


// File: classcasadi_1_1Dot.xml


// File: classcasadi_1_1Dple.xml
%feature("docstring") casadi::Dple::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::Dple::eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Dple::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Dple::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::Dple::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Dple::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Dple::get_function "

[INTERNAL] ";

%feature("docstring") casadi::Dple::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::Dple::factory "

[INTERNAL] ";

%feature("docstring") casadi::Dple::set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring") casadi::Dple::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Dple::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::Dple::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::Dple::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Dple::jit_dependencies "

[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::Dple::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::Dple::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Dple::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Dple "

Internal class.

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| const_dim        | OT_BOOL         | Assume constant  | casadi::Dple     |
|                  |                 | dimension of P   |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| eps_unstable     | OT_DOUBLE       | A margin for     | casadi::Dple     |
|                  |                 | unstability      |                  |
|                  |                 | detection        |                  |
+------------------+-----------------+------------------+------------------+
| error_unstable   | OT_BOOL         | Throw an         | casadi::Dple     |
|                  |                 | exception when   |                  |
|                  |                 | it is detected   |                  |
|                  |                 | that             |                  |
|                  |                 | Product(A_i,     |                  |
|                  |                 | i=N..1)has       |                  |
|                  |                 | eigenvalues      |                  |
|                  |                 | greater than     |                  |
|                  |                 | 1-eps_unstable   |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| pos_def          | OT_BOOL         | Assume P         | casadi::Dple     |
|                  |                 | positive         |                  |
|                  |                 | definite         |                  |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: dple_impl.hpp ";

%feature("docstring") casadi::Dple::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::Dple::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Dple::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::Dple::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::Dple::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::Dple::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::Dple::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::Dple::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::Dple::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Dple::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Dple::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::Dple::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Dple::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Dple::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Dple::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Dple::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Dple::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Dple::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Dple::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::Dple::get_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Dple::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::Dple::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::Dple::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::Dple::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Dple::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::Dple::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::Dple::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::Dple::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Dple::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::Dple::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::Dple::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Dple::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::Dple::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::Dple::get_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Dple::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::Dple::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::Dple::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Dple::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Dple::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Dple::Dple "

[INTERNAL] ";

%feature("docstring") casadi::Dple::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Dple::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::Dple::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Dple::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Dple::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::Dple::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Dple::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Dple::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::Dple::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Dple::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::Dple::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::Dple::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Dple::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::Dple::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::Dple::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::Dple::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Dple::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::Dple::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::Dple::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::Dple::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::Dple::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Dple::has_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Dple::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Dple::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::Dple::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::Dple::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::Dple::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Dple::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::Dple::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::Dple::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Dple::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::Dple::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Dple::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::Dple::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::Dple::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::Dple::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::Dple::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Dple::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::Dple::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::Dple::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Dple::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Dple::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::Dple::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::Dple::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::Dple::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::Dple::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Dple::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::Dple::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::Dple::has_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Dple::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::Dple::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::Dple::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::Dple::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::Dple::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Dple::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Dple::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::Dple::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::Dple::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Dple::codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::Dple::~Dple "

[INTERNAL] ";

%feature("docstring") casadi::Dple::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Dple::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::Dple::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::Dple::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Dple::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Dple::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Dple::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Dple::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Dple::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::Dple::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Dple::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::Dple::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::Dple::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::Dple::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::Dple::generate_dependencies "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Dple::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Dple::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Dple::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::Dple::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Dple::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Dple::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Dple::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Dple::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Dple::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::Dple::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Dple::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Dple::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::Dple::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::Dple::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::Dple::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Dple::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Dple::finalize "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring") casadi::Dple::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Dple::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Dple::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Dple::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Dple::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::Dple::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::Dple::init "

[INTERNAL]  Initialize Initialize and make the object ready for setting
arguments and evaluation. This method is typically called after setting
options but before evaluating. If passed to another class (in the
constructor), this class should invoke this function when initialized.

";

%feature("docstring") casadi::Dple::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::Dple::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Dple::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Dple::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::Dple::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::Dple::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::Dple::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::Dple::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Dple::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::Dple::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::Dple::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::Dple::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::Dple::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::Dple::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::Dple::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Dple::class_name "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::Dple::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Dple::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Dple::has_function "

[INTERNAL] ";

%feature("docstring") casadi::Dple::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Dple::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::Dple::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Dple::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::Dple::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::Dple::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Dple::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Dple::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::Dple::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Dple::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::Dple::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::Dple::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::Dple::call_gen "

[INTERNAL]   Call a function, overloaded.

";


// File: classcasadi_1_1Einstein.xml


// File: classcasadi_1_1Expm.xml
%feature("docstring") casadi::Expm::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::Expm::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::Expm::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::Expm::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::Expm::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Expm::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::Expm::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Expm::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Expm::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Expm::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Expm::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Expm::finalize "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring") casadi::Expm::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::Expm::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::Expm::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::Expm::factory "

[INTERNAL] ";

%feature("docstring") casadi::Expm::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::Expm::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::Expm::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::Expm::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Expm::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Expm::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::Expm::codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::Expm::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::Expm::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Expm::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Expm::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Expm::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Expm::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Expm::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::Expm::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::Expm::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::Expm::jit_dependencies "

[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::Expm::Expm "

[INTERNAL] ";

%feature("docstring") casadi::Expm::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Expm::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::Expm::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Expm::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::Expm::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Expm::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Expm::has_function "

[INTERNAL] ";

%feature("docstring") casadi::Expm::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::Expm::get_function "

[INTERNAL] ";

%feature("docstring") casadi::Expm::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::Expm::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::Expm::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::Expm::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::Expm::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Expm::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::Expm::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Expm::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Expm::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::Expm::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::Expm::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::Expm::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Expm::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::Expm::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Expm::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Expm::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::Expm::set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring") casadi::Expm::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Expm::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Expm::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::Expm::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::Expm::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Expm::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Expm::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::Expm::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::Expm::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Expm::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Expm::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Expm::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Expm::init "

[INTERNAL]  Initialize Initialize and make the object ready for setting
arguments and evaluation. This method is typically called after setting
options but before evaluating. If passed to another class (in the
constructor), this class should invoke this function when initialized.

";

%feature("docstring") casadi::Expm::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::Expm::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Expm::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Expm::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::Expm::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::Expm::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::Expm::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::Expm::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::Expm::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::Expm::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::Expm::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::Expm::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Expm::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Expm::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::Expm::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::Expm::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Expm::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::Expm::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::Expm::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::Expm::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::Expm::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Expm::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::Expm::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Expm::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::Expm::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Expm::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::Expm::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Expm::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Expm::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::Expm::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::Expm::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::Expm::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Expm::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::Expm::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::Expm::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Expm::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Expm::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::Expm::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Expm::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Expm::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::Expm::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Expm::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Expm::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::Expm::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Expm::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Expm::get_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Expm::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::Expm::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Expm::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Expm::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::Expm::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Expm::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Expm::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::Expm::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Expm::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::Expm::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::Expm::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Expm::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Expm "

Internal class.

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| const_A          | OT_BOOL         | Assume A is      | casadi::Expm     |
|                  |                 | constant.        |                  |
|                  |                 | Default: false.  |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: expm_impl.hpp ";

%feature("docstring") casadi::Expm::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::Expm::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Expm::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Expm::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Expm::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::Expm::generate_dependencies "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Expm::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::Expm::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Expm::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Expm::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::Expm::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::Expm::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::Expm::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::Expm::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Expm::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::Expm::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::Expm::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Expm::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::Expm::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::Expm::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Expm::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Expm::has_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Expm::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Expm::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::Expm::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::Expm::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::Expm::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Expm::get_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Expm::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::Expm::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::Expm::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Expm::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Expm::has_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Expm::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Expm::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::Expm::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::Expm::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::Expm::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::Expm::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::Expm::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::Expm::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Expm::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::Expm::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Expm::eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Expm::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::Expm::~Expm "

[INTERNAL] ";

%feature("docstring") casadi::Expm::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::Expm::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::Expm::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Expm::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::Expm::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::Expm::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Expm::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::Expm::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::Expm::class_name "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::Expm::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Expm::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Expm::sprint "

[INTERNAL]  C-style formatted printing to string.

";


// File: classcasadi_1_1External.xml
%feature("docstring") casadi::External::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::External::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::External::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::External::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::External::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::External::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::External::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::External::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::External::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::External::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::External::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::External::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::External::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::External::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::External::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::External::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::External::has_forward "

[INTERNAL]  Forward mode derivatives.

";

%feature("docstring") casadi::External::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::External::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::External::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::External::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::External::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::External::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::External::class_name "

[INTERNAL]  Get type name.

";

%feature("docstring") casadi::External::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::External::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::External::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::External::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::External::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::External::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::External::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::External::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::External::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::External::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::External::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::External::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::External::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::External::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::External::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::External::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::External::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::External::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::External::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::External::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::External::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::External::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::External::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::External::set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring") casadi::External::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::External::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::External::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::External::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::External::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::External::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::External::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::External::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::External::get_sparsity_out "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring") casadi::External::get_reverse "

[INTERNAL]  Reverse mode derivatives.

";

%feature("docstring") casadi::External::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::External::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::External::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::External::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::External::factory "

[INTERNAL] ";

%feature("docstring") casadi::External::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::External::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::External::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::External "

[INTERNAL] C++ includes: external_impl.hpp ";

%feature("docstring") casadi::External::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::External::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::External::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::External::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::External::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::External::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::External::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::External::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::External::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::External::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::External::External "

[INTERNAL]  Constructor.

";

%feature("docstring") casadi::External::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::External::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::External::get_function "

[INTERNAL] ";

%feature("docstring") casadi::External::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::External::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::External::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::External::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::External::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::External::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::External::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::External::init_external "

[INTERNAL]  Initialize members that are unique.

";

%feature("docstring") casadi::External::has_function "

[INTERNAL] ";

%feature("docstring") casadi::External::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::External::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::External::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::External::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::External::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::External::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::External::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::External::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::External::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::External::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::External::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::External::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::External::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::External::~External "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::External::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::External::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::External::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::External::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::External::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::External::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::External::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::External::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::External::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::External::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::External::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::External::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::External::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::External::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::External::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::External::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::External::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::External::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::External::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::External::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::External::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::External::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::External::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::External::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::External::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::External::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::External::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::External::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::External::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::External::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::External::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::External::has_reverse "

[INTERNAL]  Reverse mode derivatives.

";

%feature("docstring") casadi::External::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::External::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::External::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::External::has_jacobian "

[INTERNAL]  Full Jacobian.

";

%feature("docstring") casadi::External::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::External::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::External::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::External::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::External::codegen_body "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring") casadi::External::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::External::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::External::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::External::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::External::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::External::any_symbol_found "

[INTERNAL]  Any symbol found?

";

%feature("docstring") casadi::External::jit_dependencies "

[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::External::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::External::eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::External::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::External::get_jacobian "

[INTERNAL]  Full Jacobian.

";

%feature("docstring") casadi::External::get_sparsity_in "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring") casadi::External::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::External::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::External::get_default_in "

[INTERNAL]  Default inputs.

";

%feature("docstring") casadi::External::finalize "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring") casadi::External::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::External::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::External::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::External::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::External::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::External::get_forward "

[INTERNAL]  Forward mode derivatives.

";

%feature("docstring") casadi::External::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::External::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::External::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::External::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::External::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::External::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::External::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::External::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::External::generate_dependencies "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::External::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::External::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::External::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::External::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::External::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::External::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::External::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::External::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::External::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::External::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::External::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::External::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::External::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::External::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::External::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";


// File: classcasadi_1_1Factory.xml
%feature("docstring") casadi::Factory::has_in "

[INTERNAL] ";

%feature("docstring") casadi::Factory::add_output "

[INTERNAL] ";

%feature("docstring") casadi::Factory::calculate "

[INTERNAL] ";

%feature("docstring") casadi::Factory::get_output "

[INTERNAL] ";

%feature("docstring") casadi::Factory "

[INTERNAL] C++ includes: factory.hpp ";

%feature("docstring") casadi::Factory::request_output "

[INTERNAL] ";

%feature("docstring") casadi::Factory::get_input "

[INTERNAL] ";

%feature("docstring") casadi::Factory::add_input "

[INTERNAL] ";

%feature("docstring") casadi::Factory::has_out "

[INTERNAL] ";

%feature("docstring") casadi::Factory::request_input "

[INTERNAL] ";

%feature("docstring") casadi::Factory::name_out "

[INTERNAL] ";

%feature("docstring") casadi::Factory::Factory "

[INTERNAL] ";

%feature("docstring") casadi::Factory::name_in "

[INTERNAL] ";


// File: classcasadi_1_1FastNewton.xml
%feature("docstring") casadi::FastNewton::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::FastNewton::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::FastNewton::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::FastNewton::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::FastNewton::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::FastNewton::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::FastNewton::ad_forward "

[INTERNAL]  Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::FastNewton::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::FastNewton::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::FastNewton::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::FastNewton::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::FastNewton::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::FastNewton::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::FastNewton::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::FastNewton::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::FastNewton::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::FastNewton::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::FastNewton::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::FastNewton::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::FastNewton::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::FastNewton::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::FastNewton::set_function "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::FastNewton::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::FastNewton::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::FastNewton::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::FastNewton::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::FastNewton::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::FastNewton::solve "

[INTERNAL]   Solve the system of equations and calculate derivatives.

";

%feature("docstring") casadi::FastNewton::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::FastNewton::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::FastNewton::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::FastNewton::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::FastNewton::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::FastNewton::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::FastNewton::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::FastNewton::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::FastNewton::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::FastNewton::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::FastNewton::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::FastNewton::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::FastNewton::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::FastNewton::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::FastNewton::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::FastNewton::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::FastNewton::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::FastNewton::eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::FastNewton::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::FastNewton::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::FastNewton::~FastNewton "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::FastNewton::factory "

[INTERNAL] ";

%feature("docstring") casadi::FastNewton "

'fast_newton' plugin for Rootfinder

Implements simple newton iterations to solve an implicit function.

>List of available options

+------------+-----------+-------------------------------------------------+
|     Id     |   Type    |                   Description                   |
+============+===========+=================================================+
| abstol     | OT_DOUBLE | Stopping criterion tolerance on ||g||__inf)     |
+------------+-----------+-------------------------------------------------+
| abstolStep | OT_DOUBLE | Stopping criterion tolerance on step size       |
+------------+-----------+-------------------------------------------------+
| max_iter   | OT_INT    | Maximum number of Newton iterations to perform  |
|            |           | before returning.                               |
+------------+-----------+-------------------------------------------------+

Joris Gillis

>List of available options

+-------------------+--------------+-------------------+-------------------+
|        Id         |     Type     |    Description    |      Used in      |
+===================+==============+===================+===================+
| abstol            | OT_DOUBLE    | Stopping          | casadi::FastNewto |
|                   |              | criterion         | n                 |
|                   |              | tolerance on      |                   |
|                   |              | ||g||__inf)       |                   |
+-------------------+--------------+-------------------+-------------------+
| abstolStep        | OT_DOUBLE    | Stopping          | casadi::FastNewto |
|                   |              | criterion         | n                 |
|                   |              | tolerance on step |                   |
|                   |              | size              |                   |
+-------------------+--------------+-------------------+-------------------+
| constraints       | OT_INTVECTOR | Constrain the     | casadi::Rootfinde |
|                   |              | unknowns. 0       | r                 |
|                   |              | (default): no     |                   |
|                   |              | constraint on ui, |                   |
|                   |              | 1: ui >= 0.0, -1: |                   |
|                   |              | ui <= 0.0, 2: ui  |                   |
|                   |              | > 0.0, -2: ui <   |                   |
|                   |              | 0.0.              |                   |
+-------------------+--------------+-------------------+-------------------+
| error_on_fail     | OT_BOOL      | When the          | casadi::Rootfinde |
|                   |              | numerical process | r                 |
|                   |              | returns           |                   |
|                   |              | unsuccessfully,   |                   |
|                   |              | raise an error    |                   |
|                   |              | (default false).  |                   |
+-------------------+--------------+-------------------+-------------------+
| implicit_input    | OT_INT       | Index of the      | casadi::Rootfinde |
|                   |              | input that        | r                 |
|                   |              | corresponds to    |                   |
|                   |              | the actual root-  |                   |
|                   |              | finding           |                   |
+-------------------+--------------+-------------------+-------------------+
| implicit_output   | OT_INT       | Index of the      | casadi::Rootfinde |
|                   |              | output that       | r                 |
|                   |              | corresponds to    |                   |
|                   |              | the actual root-  |                   |
|                   |              | finding           |                   |
+-------------------+--------------+-------------------+-------------------+
| jacobian_function | OT_FUNCTION  | Function object   | casadi::Rootfinde |
|                   |              | for calculating   | r                 |
|                   |              | the Jacobian      |                   |
|                   |              | (autogenerated by |                   |
|                   |              | default)          |                   |
+-------------------+--------------+-------------------+-------------------+
| linear_solver     | OT_STRING    | User-defined      | casadi::Rootfinde |
|                   |              | linear solver     | r                 |
|                   |              | class. Needed for |                   |
|                   |              | sensitivities.    |                   |
+-------------------+--------------+-------------------+-------------------+
| linear_solver_opt | OT_DICT      | Options to be     | casadi::Rootfinde |
| ions              |              | passed to the     | r                 |
|                   |              | linear solver.    |                   |
+-------------------+--------------+-------------------+-------------------+
| max_iter          | OT_INT       | Maximum number of | casadi::FastNewto |
|                   |              | Newton iterations | n                 |
|                   |              | to perform before |                   |
|                   |              | returning.        |                   |
+-------------------+--------------+-------------------+-------------------+

Diagrams
--------



C++ includes: fast_newton.hpp ";

%feature("docstring") casadi::FastNewton::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::FastNewton::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::FastNewton::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::FastNewton::codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::FastNewton::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::FastNewton::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::FastNewton::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::FastNewton::generate_dependencies "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::FastNewton::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::FastNewton::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::FastNewton::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::FastNewton::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::FastNewton::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::FastNewton::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::FastNewton::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::FastNewton::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::FastNewton::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::FastNewton::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::FastNewton::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::FastNewton::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::FastNewton::set_temp "

[INTERNAL]  Set the work vectors.

";

%feature("docstring") casadi::FastNewton::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::FastNewton::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::FastNewton::get_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::FastNewton::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::FastNewton::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::FastNewton::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::FastNewton::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::FastNewton::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::FastNewton::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::FastNewton::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::FastNewton::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::FastNewton::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::FastNewton::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::FastNewton::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::FastNewton::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::FastNewton::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::FastNewton::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::FastNewton::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::FastNewton::finalize "

[INTERNAL]  Finalize initialization.

";

%feature("docstring") casadi::FastNewton::class_name "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::FastNewton::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::FastNewton::get_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::FastNewton::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::FastNewton::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::FastNewton::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::FastNewton::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::FastNewton::calc_function "

[INTERNAL] ";

%feature("docstring") casadi::FastNewton::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::FastNewton::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::FastNewton::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::FastNewton::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::FastNewton::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::FastNewton::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::FastNewton::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::FastNewton::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::FastNewton::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::FastNewton::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::FastNewton::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::FastNewton::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::FastNewton::has_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::FastNewton::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::FastNewton::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::FastNewton::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::FastNewton::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::FastNewton::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::FastNewton::expand "

[INTERNAL] ";

%feature("docstring") casadi::FastNewton::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::FastNewton::FastNewton "

[INTERNAL]  Constructor.

";

%feature("docstring") casadi::FastNewton::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::FastNewton::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::FastNewton::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::FastNewton::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::FastNewton::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::FastNewton::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::FastNewton::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::FastNewton::jit_dependencies "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring") casadi::FastNewton::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::FastNewton::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::FastNewton::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::FastNewton::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::FastNewton::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::FastNewton::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::FastNewton::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::FastNewton::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::FastNewton::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::FastNewton::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::FastNewton::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::FastNewton::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::FastNewton::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::FastNewton::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::FastNewton::get_function "

[INTERNAL]

>  const Function& casadi::OracleFunction::get_function(const std::string &name) const override
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::FastNewton::ad_reverse "

[INTERNAL]  Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::FastNewton::has_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::FastNewton::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::FastNewton::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::FastNewton::has_function "

[INTERNAL] ";

%feature("docstring") casadi::FastNewton::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::FastNewton::monitored "

[INTERNAL] ";

%feature("docstring") casadi::FastNewton::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::FastNewton::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::FastNewton::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::FastNewton::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::FastNewton::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::FastNewton::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::FastNewton::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::FastNewton::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::FastNewton::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::FastNewton::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::FastNewton::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::FastNewton::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::FastNewton::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::FastNewton::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::FastNewton::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::FastNewton::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::FastNewton::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::FastNewton::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::FastNewton::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::FastNewton::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::FastNewton::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::FastNewton::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::FastNewton::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::FastNewton::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::FastNewton::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::FastNewton::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::FastNewton::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::FastNewton::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::FastNewton::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::FastNewton::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::FastNewton::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::FastNewton::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::FastNewton::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::FastNewton::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::FastNewton::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::FastNewton::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::FastNewton::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::FastNewton::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::FastNewton::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::FastNewton::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::FastNewton::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::FastNewton::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::FastNewton::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::FastNewton::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::FastNewton::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::FastNewton::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::FastNewton::create_function "

[INTERNAL]  Create an oracle function

";

%feature("docstring") casadi::FastNewton::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";


// File: classcasadi_1_1FileDeserializer.xml
%feature("docstring") casadi::FileDeserializer::FileDeserializer "

Advanced deserialization of CasADi objects.

FileSerializer

";

%feature("docstring") casadi::FileDeserializer "

C++ includes: serializer.hpp ";


// File: classcasadi_1_1FileSerializer.xml
%feature("docstring") casadi::FileSerializer::FileSerializer "

Advanced serialization of CasADi objects.

StringSerializer, FileDeserializer

";

%feature("docstring") casadi::FileSerializer "

C++ includes: serializer.hpp ";


// File: classcasadi_1_1Find.xml


// File: classcasadi_1_1FiniteDiff.xml
%feature("docstring") casadi::FiniteDiff::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::FiniteDiff::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::FiniteDiff::factory "

[INTERNAL] ";

%feature("docstring") casadi::FiniteDiff::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::FiniteDiff::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::FiniteDiff::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::FiniteDiff::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::FiniteDiff::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::FiniteDiff::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::FiniteDiff::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::FiniteDiff "

[INTERNAL]  Calculate derivative using finite differences Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| abstol           | OT_DOUBLE       | Accuracy of      | casadi::FiniteDi |
|                  |                 | function outputs | ff               |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| h                | OT_DOUBLE       | Step size        | casadi::FiniteDi |
|                  |                 | [default:        | ff               |
|                  |                 | computed from    |                  |
|                  |                 | abstol]          |                  |
+------------------+-----------------+------------------+------------------+
| h_iter           | OT_INT          | Number of        | casadi::FiniteDi |
|                  |                 | iterations to    | ff               |
|                  |                 | improve on the   |                  |
|                  |                 | step-size        |                  |
|                  |                 | [default: 1 if   |                  |
|                  |                 | error estimate   |                  |
|                  |                 | available,       |                  |
|                  |                 | otherwise 0]     |                  |
+------------------+-----------------+------------------+------------------+
| h_max            | OT_DOUBLE       | Maximum step     | casadi::FiniteDi |
|                  |                 | size [default 0] | ff               |
+------------------+-----------------+------------------+------------------+
| h_min            | OT_DOUBLE       | Minimum step     | casadi::FiniteDi |
|                  |                 | size [default    | ff               |
|                  |                 | inf]             |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reltol           | OT_DOUBLE       | Accuracy of      | casadi::FiniteDi |
|                  |                 | function inputs  | ff               |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| second_order_ste | OT_DOUBLE       | Second order     | casadi::FiniteDi |
| psize            |                 | perturbation     | ff               |
|                  |                 | size [default:   |                  |
|                  |                 | 1e-3]            |                  |
+------------------+-----------------+------------------+------------------+
| smoothing        | OT_DOUBLE       | Smoothing        | casadi::FiniteDi |
|                  |                 | regularization   | ff               |
|                  |                 | [default:        |                  |
|                  |                 | machine          |                  |
|                  |                 | precision]       |                  |
+------------------+-----------------+------------------+------------------+
| u_aim            | OT_DOUBLE       | Target ratio of  | casadi::FiniteDi |
|                  |                 | roundoff error   | ff               |
|                  |                 | to truncation    |                  |
|                  |                 | error [default:  |                  |
|                  |                 | 100.]            |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: finite_differences.hpp ";

%feature("docstring") casadi::FiniteDiff::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::FiniteDiff::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::FiniteDiff::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::FiniteDiff::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::FiniteDiff::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::FiniteDiff::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::FiniteDiff::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::FiniteDiff::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::FiniteDiff::eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::FiniteDiff::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::FiniteDiff::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::FiniteDiff::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::FiniteDiff::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::FiniteDiff::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::FiniteDiff::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::FiniteDiff::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::FiniteDiff::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::FiniteDiff::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::FiniteDiff::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::FiniteDiff::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::FiniteDiff::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::FiniteDiff::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::FiniteDiff::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::FiniteDiff::has_function "

[INTERNAL] ";

%feature("docstring") casadi::FiniteDiff::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::FiniteDiff::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::FiniteDiff::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::FiniteDiff::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::FiniteDiff::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::FiniteDiff::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::FiniteDiff::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::FiniteDiff::FiniteDiff "

[INTERNAL] ";

%feature("docstring") casadi::FiniteDiff::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::FiniteDiff::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::FiniteDiff::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::FiniteDiff::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::FiniteDiff::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::FiniteDiff::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::FiniteDiff::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::FiniteDiff::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::FiniteDiff::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::FiniteDiff::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::FiniteDiff::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::FiniteDiff::jit_dependencies "

[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::FiniteDiff::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::FiniteDiff::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::FiniteDiff::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::FiniteDiff::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::FiniteDiff::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::FiniteDiff::finalize "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring") casadi::FiniteDiff::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::FiniteDiff::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::FiniteDiff::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::FiniteDiff::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::FiniteDiff::class_name "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::FiniteDiff::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::FiniteDiff::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::FiniteDiff::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::FiniteDiff::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::FiniteDiff::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::FiniteDiff::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::FiniteDiff::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::FiniteDiff::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::FiniteDiff::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::FiniteDiff::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::FiniteDiff::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::FiniteDiff::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::FiniteDiff::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::FiniteDiff::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::FiniteDiff::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::FiniteDiff::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::FiniteDiff::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::FiniteDiff::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::FiniteDiff::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::FiniteDiff::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::FiniteDiff::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::FiniteDiff::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::FiniteDiff::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::FiniteDiff::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::FiniteDiff::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::FiniteDiff::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::FiniteDiff::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::FiniteDiff::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::FiniteDiff::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::FiniteDiff::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::FiniteDiff::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::FiniteDiff::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::FiniteDiff::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::FiniteDiff::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::FiniteDiff::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::FiniteDiff::generate_dependencies "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::FiniteDiff::uses_output "

[INTERNAL]  Is the scheme using the (nondifferentiated) output?

";

%feature("docstring") casadi::FiniteDiff::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::FiniteDiff::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::FiniteDiff::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::FiniteDiff::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::FiniteDiff::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::FiniteDiff::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::FiniteDiff::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::FiniteDiff::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::FiniteDiff::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::FiniteDiff::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::FiniteDiff::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::FiniteDiff::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::FiniteDiff::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::FiniteDiff::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::FiniteDiff::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::FiniteDiff::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::FiniteDiff::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::FiniteDiff::get_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::FiniteDiff::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::FiniteDiff::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::FiniteDiff::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::FiniteDiff::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::FiniteDiff::codegen_body "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring") casadi::FiniteDiff::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::FiniteDiff::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::FiniteDiff::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::FiniteDiff::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::FiniteDiff::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::FiniteDiff::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::FiniteDiff::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::FiniteDiff::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::FiniteDiff::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::FiniteDiff::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::FiniteDiff::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::FiniteDiff::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::FiniteDiff::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::FiniteDiff::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::FiniteDiff::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::FiniteDiff::get_function "

[INTERNAL] ";

%feature("docstring") casadi::FiniteDiff::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::FiniteDiff::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::FiniteDiff::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::FiniteDiff::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::FiniteDiff::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::FiniteDiff::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::FiniteDiff::has_forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::FiniteDiff::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::FiniteDiff::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::FiniteDiff::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::FiniteDiff::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::FiniteDiff::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::FiniteDiff::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::FiniteDiff::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::FiniteDiff::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::FiniteDiff::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::FiniteDiff::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::FiniteDiff::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::FiniteDiff::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::FiniteDiff::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::FiniteDiff::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::FiniteDiff::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::FiniteDiff::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::FiniteDiff::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::FiniteDiff::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::FiniteDiff::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::FiniteDiff::~FiniteDiff "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::FiniteDiff::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::FiniteDiff::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::FiniteDiff::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::FiniteDiff::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::FiniteDiff::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::FiniteDiff::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::FiniteDiff::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::FiniteDiff::has_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::FiniteDiff::set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring") casadi::FiniteDiff::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::FiniteDiff::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::FiniteDiff::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::FiniteDiff::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::FiniteDiff::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::FiniteDiff::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::FiniteDiff::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::FiniteDiff::get_forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::FiniteDiff::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::FiniteDiff::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::FiniteDiff::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";


// File: classcasadi_1_1FixedStepIntegrator.xml
%feature("docstring") casadi::FixedStepIntegrator::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::FixedStepIntegrator::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::FixedStepIntegrator::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::FixedStepIntegrator::class_name "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::FixedStepIntegrator::calc_function "

[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::jit_dependencies "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring") casadi::FixedStepIntegrator::aug_fwd "

[INTERNAL]  Generate a augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring") casadi::FixedStepIntegrator::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::FixedStepIntegrator::z "

[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::x "

[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::FixedStepIntegrator::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::FixedStepIntegrator::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::FixedStepIntegrator::p "

[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::q "

[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::FixedStepIntegrator::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::FixedStepIntegrator::t "

[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::FixedStepIntegrator::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::FixedStepIntegrator::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::FixedStepIntegrator::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::FixedStepIntegrator::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::FixedStepIntegrator::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::FixedStepIntegrator::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::FixedStepIntegrator::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::FixedStepIntegrator::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::FixedStepIntegrator::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::FixedStepIntegrator::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::FixedStepIntegrator::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::FixedStepIntegrator::expand "

[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::FixedStepIntegrator::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::FixedStepIntegrator::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::FixedStepIntegrator::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::FixedStepIntegrator::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::FixedStepIntegrator::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::FixedStepIntegrator::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::FixedStepIntegrator::get_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::FixedStepIntegrator::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::FixedStepIntegrator::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::FixedStepIntegrator::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::FixedStepIntegrator::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::FixedStepIntegrator::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::FixedStepIntegrator::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::FixedStepIntegrator::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::FixedStepIntegrator::setStopTime "

[INTERNAL]  Set stop time for the integration.

";

%feature("docstring") casadi::FixedStepIntegrator::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::FixedStepIntegrator::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::FixedStepIntegrator::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::FixedStepIntegrator::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::FixedStepIntegrator::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::FixedStepIntegrator::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::FixedStepIntegrator::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::FixedStepIntegrator::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::FixedStepIntegrator::resetB "

[INTERNAL]  Reset the backward problem and take time to tf.

";

%feature("docstring") casadi::FixedStepIntegrator::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::FixedStepIntegrator::create_advanced "

[INTERNAL]  Helper for a more powerful 'integrator' factory

";

%feature("docstring") casadi::FixedStepIntegrator::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::FixedStepIntegrator::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::FixedStepIntegrator::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::FixedStepIntegrator::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::FixedStepIntegrator::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::FixedStepIntegrator::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::FixedStepIntegrator::~FixedStepIntegrator "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::FixedStepIntegrator::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::FixedStepIntegrator::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::FixedStepIntegrator::advance "

[INTERNAL]  Advance solution in time.

";

%feature("docstring") casadi::FixedStepIntegrator::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::FixedStepIntegrator::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::FixedStepIntegrator::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::FixedStepIntegrator::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::FixedStepIntegrator::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::FixedStepIntegrator::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::FixedStepIntegrator::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::FixedStepIntegrator::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::FixedStepIntegrator::create_function "

[INTERNAL]  Create an oracle function

";

%feature("docstring") casadi::FixedStepIntegrator::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::FixedStepIntegrator::monitored "

[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::FixedStepIntegrator::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::FixedStepIntegrator::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::FixedStepIntegrator::retreat "

[INTERNAL]  Retreat solution in time.

";

%feature("docstring") casadi::FixedStepIntegrator::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::FixedStepIntegrator::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::FixedStepIntegrator::factory "

[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::FixedStepIntegrator::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::FixedStepIntegrator::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::FixedStepIntegrator::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::FixedStepIntegrator::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::FixedStepIntegrator::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::FixedStepIntegrator::finalize "

[INTERNAL]  Finalize initialization.

";

%feature("docstring") casadi::FixedStepIntegrator::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::FixedStepIntegrator::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::FixedStepIntegrator::setupFG "

[INTERNAL]  Setup F and G.

";

%feature("docstring") casadi::FixedStepIntegrator::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::FixedStepIntegrator::generate_dependencies "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::FixedStepIntegrator::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::FixedStepIntegrator::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::FixedStepIntegrator::algebraic_state_init "

[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::init "

[INTERNAL]  Initialize stage.

";

%feature("docstring") casadi::FixedStepIntegrator::sp_jac_rdae "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (backward
problem)

";

%feature("docstring") casadi::FixedStepIntegrator::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::FixedStepIntegrator::FixedStepIntegrator "

[INTERNAL]  Constructor.

";

%feature("docstring") casadi::FixedStepIntegrator::jacobian_sparsity_filter
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::FixedStepIntegrator::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::FixedStepIntegrator::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::FixedStepIntegrator::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::FixedStepIntegrator::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::FixedStepIntegrator::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::FixedStepIntegrator::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::FixedStepIntegrator::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::FixedStepIntegrator::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::FixedStepIntegrator::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::FixedStepIntegrator "



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::FixedSte |
| s                |                 | passed down to   | pIntegrator      |
|                  |                 | the augmented    |                  |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::FixedSte |
|                  |                 | SX expressions   | pIntegrator      |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::FixedSte |
|                  |                 |                  | pIntegrator      |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::FixedSte |
| _elements        |                 | elements         | pIntegrator      |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::FixedSte |
|                  |                 | at the initial   | pIntegrator      |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::FixedSte |
|                  |                 | statistics after | pIntegrator      |
|                  |                 | integration      |                  |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::FixedSte |
|                  |                 | function solver  | pIntegrator      |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::FixedSte |
| ns               |                 | passed to the    | pIntegrator      |
|                  |                 | NLP Solver       |                  |
+------------------+-----------------+------------------+------------------+
| show_eval_warnin | OT_BOOL         | Show warnings    | casadi::OracleFu |
| gs               |                 | generated from   | nction           |
|                  |                 | function         |                  |
|                  |                 | evaluations      |                  |
|                  |                 | [true]           |                  |
+------------------+-----------------+------------------+------------------+
| simplify         | OT_BOOL         | Implement as MX  | casadi::FixedSte |
|                  |                 | Function (codege | pIntegrator      |
|                  |                 | neratable/serial |                  |
|                  |                 | izable) default: |                  |
|                  |                 | false            |                  |
+------------------+-----------------+------------------+------------------+
| simplify_options | OT_DICT         | Any options to   | casadi::FixedSte |
|                  |                 | pass to          | pIntegrator      |
|                  |                 | simplified form  |                  |
|                  |                 | Function         |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::FixedSte |
|                  |                 | time horizon     | pIntegrator      |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::FixedSte |
|                  |                 | horizon          | pIntegrator      |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: integrator_impl.hpp ";

%feature("docstring") casadi::FixedStepIntegrator::aug_adj "

[INTERNAL]  Generate a augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring") casadi::FixedStepIntegrator::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::FixedStepIntegrator::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::FixedStepIntegrator::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::FixedStepIntegrator::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::FixedStepIntegrator::has_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::FixedStepIntegrator::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::FixedStepIntegrator::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::FixedStepIntegrator::eval "

[INTERNAL]  evaluate

";

%feature("docstring") casadi::FixedStepIntegrator::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::FixedStepIntegrator::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::FixedStepIntegrator::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::FixedStepIntegrator::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::FixedStepIntegrator::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::FixedStepIntegrator::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::FixedStepIntegrator::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::FixedStepIntegrator::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::FixedStepIntegrator::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::FixedStepIntegrator::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring")
casadi::FixedStepIntegrator::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::FixedStepIntegrator::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::FixedStepIntegrator::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::FixedStepIntegrator::get_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::FixedStepIntegrator::sp_jac_dae "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (forward
problem)

";

%feature("docstring") casadi::FixedStepIntegrator::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::FixedStepIntegrator::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::FixedStepIntegrator::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::FixedStepIntegrator::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::FixedStepIntegrator::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::FixedStepIntegrator::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::FixedStepIntegrator::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::FixedStepIntegrator::getExplicitB "

[INTERNAL]  Get explicit dynamics (backward problem)

";

%feature("docstring") casadi::FixedStepIntegrator::getExplicit "

[INTERNAL]  Get explicit dynamics.

";

%feature("docstring") casadi::FixedStepIntegrator::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::FixedStepIntegrator::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::FixedStepIntegrator::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::FixedStepIntegrator::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::FixedStepIntegrator::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::FixedStepIntegrator::codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::FixedStepIntegrator::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::FixedStepIntegrator::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::FixedStepIntegrator::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::FixedStepIntegrator::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::FixedStepIntegrator::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::FixedStepIntegrator::reset "

[INTERNAL]  Reset the forward problem.

";

%feature("docstring") casadi::FixedStepIntegrator::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::FixedStepIntegrator::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::FixedStepIntegrator::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::FixedStepIntegrator::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::FixedStepIntegrator::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::FixedStepIntegrator::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::FixedStepIntegrator::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::FixedStepIntegrator::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::FixedStepIntegrator::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::FixedStepIntegrator::algebraic_state_output "

[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::FixedStepIntegrator::set_temp "

[INTERNAL]  Set the work vectors.

";

%feature("docstring") casadi::FixedStepIntegrator::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::FixedStepIntegrator::has_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::FixedStepIntegrator::print_stats "

[INTERNAL]  Print solver statistics.

";

%feature("docstring") casadi::FixedStepIntegrator::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::FixedStepIntegrator::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::FixedStepIntegrator::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::FixedStepIntegrator::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::FixedStepIntegrator::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::FixedStepIntegrator::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::FixedStepIntegrator::rz "

[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::FixedStepIntegrator::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::FixedStepIntegrator::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::FixedStepIntegrator::get_function "

[INTERNAL]

>  const Function& casadi::OracleFunction::get_function(const std::string &name) const override
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::FixedStepIntegrator::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::FixedStepIntegrator::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::FixedStepIntegrator::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::FixedStepIntegrator::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::FixedStepIntegrator::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::FixedStepIntegrator::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::FixedStepIntegrator::has_function "

[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::FixedStepIntegrator::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::FixedStepIntegrator::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::FixedStepIntegrator::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::FixedStepIntegrator::set_function "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::FixedStepIntegrator::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::FixedStepIntegrator::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::FixedStepIntegrator::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::FixedStepIntegrator::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::FixedStepIntegrator::rx "

[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::FixedStepIntegrator::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::FixedStepIntegrator::getDerivativeOptions "

[INTERNAL]  Set solver specific options to generated augmented integrators.

";

%feature("docstring") casadi::FixedStepIntegrator::rq "

[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::rp "

[INTERNAL] ";

%feature("docstring") casadi::FixedStepIntegrator::is_diff_in "

[INTERNAL] ";


// File: classcasadi_1_1ForwardDiff.xml
%feature("docstring") casadi::ForwardDiff::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::ForwardDiff::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::ForwardDiff::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::ForwardDiff::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::ForwardDiff::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::ForwardDiff::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::ForwardDiff::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::ForwardDiff::calc_stepsize "

[INTERNAL] ";

%feature("docstring") casadi::ForwardDiff::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::ForwardDiff::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::ForwardDiff::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::ForwardDiff::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::ForwardDiff::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::ForwardDiff::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::ForwardDiff::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::ForwardDiff::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::ForwardDiff::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::ForwardDiff::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ForwardDiff::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::ForwardDiff::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::ForwardDiff::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::ForwardDiff::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::ForwardDiff::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::ForwardDiff::get_forward "

[INTERNAL]  Second order derivatives.

";

%feature("docstring") casadi::ForwardDiff::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::ForwardDiff::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::ForwardDiff::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ForwardDiff::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::ForwardDiff::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::ForwardDiff::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::ForwardDiff::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::ForwardDiff::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::ForwardDiff::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::ForwardDiff::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ForwardDiff::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::ForwardDiff::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::ForwardDiff::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ForwardDiff::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::ForwardDiff::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::ForwardDiff::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ForwardDiff::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::ForwardDiff::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::ForwardDiff::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::ForwardDiff::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::ForwardDiff::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::ForwardDiff::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::ForwardDiff::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::ForwardDiff::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::ForwardDiff::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::ForwardDiff::has_function "

[INTERNAL] ";

%feature("docstring") casadi::ForwardDiff::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::ForwardDiff::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::ForwardDiff::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::ForwardDiff::has_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::ForwardDiff::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::ForwardDiff::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::ForwardDiff::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::ForwardDiff::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::ForwardDiff::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::ForwardDiff::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::ForwardDiff::class_name "

[INTERNAL]  Get type name.

";

%feature("docstring") casadi::ForwardDiff::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ForwardDiff::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::ForwardDiff::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::ForwardDiff::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::ForwardDiff "

[INTERNAL]  Calculate derivative using forward differences Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| abstol           | OT_DOUBLE       | Accuracy of      | casadi::ForwardD |
|                  |                 | function outputs | iff              |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| h                | OT_DOUBLE       | Step size        | casadi::ForwardD |
|                  |                 | [default:        | iff              |
|                  |                 | computed from    |                  |
|                  |                 | abstol]          |                  |
+------------------+-----------------+------------------+------------------+
| h_iter           | OT_INT          | Number of        | casadi::ForwardD |
|                  |                 | iterations to    | iff              |
|                  |                 | improve on the   |                  |
|                  |                 | step-size        |                  |
|                  |                 | [default: 1 if   |                  |
|                  |                 | error estimate   |                  |
|                  |                 | available,       |                  |
|                  |                 | otherwise 0]     |                  |
+------------------+-----------------+------------------+------------------+
| h_max            | OT_DOUBLE       | Maximum step     | casadi::ForwardD |
|                  |                 | size [default 0] | iff              |
+------------------+-----------------+------------------+------------------+
| h_min            | OT_DOUBLE       | Minimum step     | casadi::ForwardD |
|                  |                 | size [default    | iff              |
|                  |                 | inf]             |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reltol           | OT_DOUBLE       | Accuracy of      | casadi::ForwardD |
|                  |                 | function inputs  | iff              |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| second_order_ste | OT_DOUBLE       | Second order     | casadi::ForwardD |
| psize            |                 | perturbation     | iff              |
|                  |                 | size [default:   |                  |
|                  |                 | 1e-3]            |                  |
+------------------+-----------------+------------------+------------------+
| smoothing        | OT_DOUBLE       | Smoothing        | casadi::ForwardD |
|                  |                 | regularization   | iff              |
|                  |                 | [default:        |                  |
|                  |                 | machine          |                  |
|                  |                 | precision]       |                  |
+------------------+-----------------+------------------+------------------+
| u_aim            | OT_DOUBLE       | Target ratio of  | casadi::ForwardD |
|                  |                 | roundoff error   | iff              |
|                  |                 | to truncation    |                  |
|                  |                 | error [default:  |                  |
|                  |                 | 100.]            |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: finite_differences.hpp ";

%feature("docstring") casadi::ForwardDiff::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::ForwardDiff::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::ForwardDiff::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::ForwardDiff::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::ForwardDiff::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::ForwardDiff::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::ForwardDiff::calc_fd "

[INTERNAL] ";

%feature("docstring") casadi::ForwardDiff::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::ForwardDiff::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::ForwardDiff::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::ForwardDiff::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ForwardDiff::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ForwardDiff::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::ForwardDiff::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::ForwardDiff::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::ForwardDiff::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::ForwardDiff::get_function "

[INTERNAL] ";

%feature("docstring") casadi::ForwardDiff::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::ForwardDiff::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::ForwardDiff::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::ForwardDiff::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::ForwardDiff::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::ForwardDiff::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::ForwardDiff::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::ForwardDiff::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::ForwardDiff::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::ForwardDiff::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::ForwardDiff::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::ForwardDiff::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::ForwardDiff::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::ForwardDiff::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::ForwardDiff::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::ForwardDiff::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::ForwardDiff::~ForwardDiff "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::ForwardDiff::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::ForwardDiff::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ForwardDiff::get_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::ForwardDiff::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::ForwardDiff::pert "

[INTERNAL] ";

%feature("docstring") casadi::ForwardDiff::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::ForwardDiff::eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::ForwardDiff::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::ForwardDiff::ForwardDiff "

[INTERNAL] ";

%feature("docstring") casadi::ForwardDiff::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::ForwardDiff::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::ForwardDiff::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::ForwardDiff::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::ForwardDiff::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ForwardDiff::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::ForwardDiff::finalize "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring") casadi::ForwardDiff::jit_dependencies "

[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::ForwardDiff::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::ForwardDiff::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::ForwardDiff::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ForwardDiff::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::ForwardDiff::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::ForwardDiff::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ForwardDiff::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::ForwardDiff::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::ForwardDiff::generate_dependencies "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::ForwardDiff::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::ForwardDiff::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::ForwardDiff::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ForwardDiff::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::ForwardDiff::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::ForwardDiff::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::ForwardDiff::has_err "

[INTERNAL] ";

%feature("docstring") casadi::ForwardDiff::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::ForwardDiff::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::ForwardDiff::has_forward "

[INTERNAL]  Second order derivatives.

";

%feature("docstring") casadi::ForwardDiff::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::ForwardDiff::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::ForwardDiff::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ForwardDiff::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::ForwardDiff::uses_output "

[INTERNAL]  Is the scheme using the (nondifferentiated) output?

";

%feature("docstring") casadi::ForwardDiff::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::ForwardDiff::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::ForwardDiff::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::ForwardDiff::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::ForwardDiff::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::ForwardDiff::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::ForwardDiff::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::ForwardDiff::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::ForwardDiff::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::ForwardDiff::factory "

[INTERNAL] ";

%feature("docstring") casadi::ForwardDiff::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::ForwardDiff::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::ForwardDiff::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::ForwardDiff::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::ForwardDiff::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::ForwardDiff::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::ForwardDiff::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::ForwardDiff::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::ForwardDiff::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ForwardDiff::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::ForwardDiff::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::ForwardDiff::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::ForwardDiff::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::ForwardDiff::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::ForwardDiff::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::ForwardDiff::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::ForwardDiff::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::ForwardDiff::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::ForwardDiff::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::ForwardDiff::codegen_body "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring") casadi::ForwardDiff::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::ForwardDiff::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::ForwardDiff::set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring") casadi::ForwardDiff::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::ForwardDiff::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::ForwardDiff::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::ForwardDiff::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::ForwardDiff::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::ForwardDiff::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::ForwardDiff::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ForwardDiff::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::ForwardDiff::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::ForwardDiff::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::ForwardDiff::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::ForwardDiff::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::ForwardDiff::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::ForwardDiff::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::ForwardDiff::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ForwardDiff::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ForwardDiff::n_pert "

[INTERNAL] ";

%feature("docstring") casadi::ForwardDiff::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::ForwardDiff::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::ForwardDiff::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";


// File: classcasadi_1_1FStats.xml
%feature("docstring") casadi::FStats::tic "

[INTERNAL]  Start timing.

";

%feature("docstring") casadi::FStats::reset "

[INTERNAL]  Reset the statistics.

";

%feature("docstring") casadi::FStats::FStats "

[INTERNAL]  Constructor.

";

%feature("docstring") casadi::FStats "

[INTERNAL]  Timer class

FStats hack; hack.tic(); .... hack.toc();

C++ includes: timing.hpp ";

%feature("docstring") casadi::FStats::toc "

[INTERNAL]  Stop timing.

";


// File: classcasadi_1_1Function.xml
%feature("docstring") casadi::Function::n_instructions "

Number of instruction in the algorithm (SXFunction/MXFunction)

";

%feature("docstring") casadi::Function::nnz_in "

Get number of input nonzeros.

For a particular input or for all of the inputs

";

%feature("docstring") casadi::Function::has_spfwd "

Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Function::name "

Name of the function.

";

%feature("docstring") casadi::Function::jacobian "

Generate a Jacobian function of all the inputs elements with respect to all
the output elements).

";

%feature("docstring") casadi::Function::stats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::Function::fold "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



Mapaccum has the following benefits over writing an equivalent for- loop:
much faster at construction time

potentially much faster compilation times (for codegen)

offers a trade-off between memory and evaluation time

The base (settable through the options dictionary, default 10), is used to
create a tower of function calls, containing unrolled for- loops of length
maximum base.

This technique is much more scalable in terms of memory-usage, but slightly
slower at evaluation, than a plain for-loop. The effect is similar to that
of a for-loop with a check-pointing instruction after each chunk of
iterations with size base.

Set base to -1 to unroll all the way; no gains in memory efficiency here.

";

%feature("docstring") casadi::Function::sparsity_out "

Get sparsity of a given output.

";

%feature("docstring") casadi::Function::oracle "

Get oracle.

";

%feature("docstring") casadi::Function::instruction_id "

Identifier index of the instruction (SXFunction/MXFunction)

";

%feature("docstring") casadi::Function::wrap "

Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Function::wrap_as_needed "

Wrap in a Function with options.

";

%feature("docstring") casadi::Function::nz_from_out "

Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Function::convert_out "

Convert from/to input/output lists/map.

Will raise an error when an unknown key is used or a list has incorrect
size. Does not perform sparsity checking.

";

%feature("docstring") casadi::Function::numel_out "

Get number of output elements.

For a particular output or for all of the outputs

";

%feature("docstring") casadi::Function::print_dimensions "

Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Function::get_str "

Get string representation.

";

%feature("docstring") casadi::Function::get_free "

Get free variables as a string.

";

%feature("docstring") casadi::Function::disp "

Print a description of the object.

";

%feature("docstring") casadi::Function::name_out "

Get output scheme name by index.

>  const std::string& casadi::Function::name_out(casadi_int ind) const 
------------------------------------------------------------------------

Get output scheme name by index.

";

";

%feature("docstring") casadi::Function::n_in "

Get the number of function inputs.

";

%feature("docstring") casadi::Function::mx_out "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring") casadi::Function::max_in "

Get largest input value.

";

%feature("docstring") casadi::Function::generate_dependencies "

Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Function::free_sx "

Get all the free variables of the function.

";

%feature("docstring") casadi::Function::mapaccum "

Create a mapaccumulated version of this function.

Suppose the function has a signature of:

::

     f: (x, u) -> (x_next , y )
  



The the mapaccumulated version has the signature:

::

     F: (x0, U) -> (X , Y )
  
      with
          U: horzcat([u0, u1, ..., u_(N-1)])
          X: horzcat([x1, x2, ..., x_N])
          Y: horzcat([y0, y1, ..., y_(N-1)])
  
      and
          x1, y0 <- f(x0, u0)
          x2, y1 <- f(x1, u1)
          ...
          x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
  



Mapaccum has the following benefits over writing an equivalent for- loop:
much faster at construction time

potentially much faster compilation times (for codegen)

offers a trade-off between memory and evaluation time

The base (settable through the options dictionary, default 10), is used to
create a tower of function calls, containing unrolled for- loops of length
maximum base.

This technique is much more scalable in terms of memory-usage, but slightly
slower at evaluation, than a plain for-loop. The effect is similar to that
of a for-loop with a check-pointing instruction after each chunk of
iterations with size base.

Set base to -1 to unroll all the way; no gains in memory efficiency here.

";

%feature("docstring") casadi::Function::Function "

Construct from a file.

>  casadi::Function::Function(const std::string &fname)
------------------------------------------------------------------------

Construct from a file.

";

";

%feature("docstring") casadi::Function::numel_in "

Get number of input elements.

For a particular input or for all of the inputs

";

%feature("docstring") casadi::Function::serialize "

Serialize.

";

%feature("docstring") casadi::Function::sz_res "

Get required length of res field.

";

%feature("docstring") casadi::Function::is_null "

Is a null pointer?

";

%feature("docstring") casadi::Function::generate_in "

Export an input file that can be passed to generate C code with a main.

generate_out  convert_in to convert between dict/map and vector

";

%feature("docstring") casadi::Function::forward "

Get a function that calculates nfwd forward derivatives.

Returns a function with n_in + n_out + n_in inputs and nfwd outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_in inputs
correspond to forward seeds, stacked horizontally The n_out outputs
correspond to forward sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Function::n_out "

Get the number of function outputs.

";

%feature("docstring") casadi::Function::instruction_output "

Location in the work vector for the output of the instruction
(SXFunction/MXFunction)

";

%feature("docstring") casadi::Function::uses_output "

Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Function::print_ptr "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring") casadi::Function::min_in "

Get smallest input value.

";

%feature("docstring") casadi::Function::assert_size_out "

Assert that an output dimension is equal so some given value.

";

%feature("docstring") casadi::Function::~Function "

Destructor.

";

%feature("docstring") casadi::Function::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::Function::index_out "

Find the index for a string describing a particular entry of an output
scheme.

example: schemeEntry(\"x_opt\") -> returns NLPSOL_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Function::free_mx "

Get all the free variables of the function.

";

%feature("docstring") casadi::Function::export_code "

Export function in specific language.

Only allowed for (a subset of) SX/MX Functions

";

%feature("docstring") casadi::Function::is_diff_in "

Get differentiability of inputs/output.

";

%feature("docstring") casadi::Function::class_name "

Get class name.

";

%feature("docstring") casadi::Function::instruction_input "

Locations in the work vector for the inputs of the instruction
(SXFunction/MXFunction)

";

%feature("docstring") casadi::Function::info "

Obtain information about function

";

%feature("docstring") casadi::Function::slice "

returns a new function with a selection of inputs/outputs of the original

";

%feature("docstring") casadi::Function::mapsum "

Evaluate symbolically in parallel and sum (matrix graph)

Parameters:
-----------

parallelization:  Type of parallelization used: unroll|serial|openmp

";

%feature("docstring") casadi::Function::nnz_out "

Get number of output nonzeros.

For a particular output or for all of the outputs

";

%feature("docstring") casadi::Function::sparsity_jac "

Get, if necessary generate, the sparsity of a Jacobian block

";

%feature("docstring") casadi::Function::index_in "

Find the index for a string describing a particular entry of an input
scheme.

example: schemeEntry(\"x_opt\") -> returns NLPSOL_X if FunctionInternal
adheres to SCHEME_NLPINput

";

%feature("docstring") casadi::Function::size_out "

Get output dimension.

";

%feature("docstring") casadi::Function::checkout "

Checkout a memory object.

";

%feature("docstring") casadi::Function::print_option "

Print all information there is to know about a certain option.

";

%feature("docstring") casadi::Function::hessian_old "

Generate a Hessian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::hessian pre-
CasADi 3.2

";

%feature("docstring") casadi::Function::map "

";

";

%feature("docstring") casadi::Function::sx_in "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring") casadi::Function::size1_in "

Get input dimension.

";

%feature("docstring") casadi::Function::instructions_sx "

Get the SX node corresponding to all instructions ( SXFunction)

Note: input and output instructions have no SX representation. This method
returns nan for those instructions.

";

%feature("docstring") casadi::Function::nz_to_in "

Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Function::sz_iw "

Get required length of iw field.

";

%feature("docstring") casadi::Function::is_a "

Check if the function is of a particular type Optionally check if name
matches one of the base classes (default true)

";

%feature("docstring") casadi::Function::name_in "

Get input scheme name by index.

>  const std::string& casadi::Function::name_in(casadi_int ind) const 
------------------------------------------------------------------------

Get input scheme name by index.

";

";

%feature("docstring") casadi::Function::mx_in "

Get symbolic primitives equivalent to the input expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring") casadi::Function::nz_to_out "

Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Function::reverse "

Get a function that calculates nadj adjoint derivatives.

Returns a function with n_in + n_out + n_out inputs and n_in outputs. The
first n_in inputs correspond to nondifferentiated inputs. The next n_out
inputs correspond to nondifferentiated outputs. and the last n_out inputs
correspond to adjoint seeds, stacked horizontally The n_in outputs
correspond to adjoint sensitivities, stacked horizontally. * (n_in = n_in(),
n_out = n_out())

(n_in = n_in(), n_out = n_out())

The functions returned are cached, meaning that if called multiple timed
with the same value, then multiple references to the same function will be
returned.

";

%feature("docstring") casadi::Function "

Function object A Function instance is a general multiple-input, multiple-
output function where each input and output can be a sparse matrix. .

For an introduction to this class, see the CasADi user guide. Function is a
reference counted and immutable class; copying a class instance is very
cheap and its behavior (with some exceptions) is not affected by calling its
member functions. Joel Andersson >List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats() .        |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

C++ includes: function.hpp ";

%feature("docstring") casadi::Function::instruction_MX "

Get the MX node corresponding to an instruction ( MXFunction)

";

%feature("docstring") casadi::Function::release "

Release a memory object.

";

%feature("docstring") casadi::Function::generate "

Export / Generate C code for the function.

";

%feature("docstring") casadi::Function::has_free "

Does the function have free variables.

";

%feature("docstring") casadi::Function::assert_size_in "

Assert that an input dimension is equal so some given value.

";

%feature("docstring") casadi::Function::n_nodes "

Number of nodes in the algorithm.

";

%feature("docstring") casadi::Function::is_diff_out "

Get differentiability of inputs/output.

";

%feature("docstring") casadi::Function::size_in "

Get input dimension.

";

%feature("docstring") casadi::Function::jit "

To resolve ambiguity on some compilers.

Create a just-in-time compiled function from a C language string The names
and sparsity patterns of all the inputs and outputs must be provided. If
sparsities are not provided, all inputs and outputs are assumed to be
scalar. Only specify the function body, assuming that input and output
nonzeros are stored in arrays with the specified naming convension. The data
type used is 'casadi_real', which is typically equal to 'double` or another
data type with the same API as 'double'.

Inputs may be null pointers. This means that the all entries are zero.
Outputs may be null points. This means that the corresponding result can be
ignored.

If an error occurs in the evaluation, issue \"return 1;\";

The final generated function will have a structure similar to:

casadi_int fname(const casadi_real** arg, casadi_real** res, casadi_int* iw,
casadi_real* w, void* mem) { const casadi_real *x1, *x2; casadi_real *r1,
*r2; x1 = *arg++; x2 = *arg++; r1 = *res++; r2 = *res++; <FUNCTION_BODY>
return 0; }

";

%feature("docstring") casadi::Function::size2_out "

Get output dimension.

";

%feature("docstring") casadi::Function::jac "

Calculate all Jacobian blocks Generates a function that takes all non-
differentiated inputs and outputs and calculates all Jacobian blocks. Inputs
that are not needed by the routine are all-zero sparse matrices with the
correct dimensions. Output blocks that are not calculated, e.g. if the
corresponding input or output is marked non-differentiated are also all-zero
sparse. The Jacobian blocks are sorted starting by all the blocks for the
first output, then all the blocks for the second output and so on. E.g.
f:(x,y)->(r,s) results in the function jac_f:(x,y,r,s)->(dr_dx, dr_dy,
ds_dx, ds_dy) This function is cached.

";

%feature("docstring") casadi::Function::convert_in "

Convert from/to input/output lists/map.

Will raise an error when an unknown key is used or a list has incorrect
size. Does not perform sparsity checking.

";

%feature("docstring") casadi::Function::size1_out "

Get output dimension.

";

%feature("docstring") casadi::Function::generate_lifted "

Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Function::sparsity_in "

Get sparsity of a given input.

";

%feature("docstring") casadi::Function::which_depends "

Which variables enter with some order.

Parameters:
-----------

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Function::generate_out "

Export an output file that can be checked with generated C code output.

generate_in  convert_out to convert between dict/map and vector

";

%feature("docstring") casadi::Function::call "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

>  void casadi::Function::call(const std::vector< SX > &arg, std::vector< SX > &output_res, bool always_inline=false, bool never_inline=false) const

>  void casadi::Function::call(const std::vector< MX > &arg, std::vector< MX > &output_res, bool always_inline=false, bool never_inline=false) const

>  void casadi::Function::call(const DMDict &arg, DMDict &output_res, bool always_inline=false, bool never_inline=false) const

>  void casadi::Function::call(const SXDict &arg, SXDict &output_res, bool always_inline=false, bool never_inline=false) const

>  void casadi::Function::call(const MXDict &arg, MXDict &output_res, bool always_inline=false, bool never_inline=false) const 
------------------------------------------------------------------------

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

";

%feature("docstring") casadi::Function::jacobian_old "

Generate a Jacobian function of output oind with respect to input iind.

Parameters:
-----------

iind:  The index of the input

oind:  The index of the output Legacy function: To be deprecated in a future
version of CasADi. Exists only for compatibility with Function::jacobian
pre-CasADi 3.2

";

%feature("docstring") casadi::Function::sz_arg "

Get required length of arg field.

";

%feature("docstring") casadi::Function::save "

Export function in specific language.

Only allowed for (a subset of) SX/MX Functions

";

%feature("docstring") casadi::Function::print_options "

Print options to a stream.

";

%feature("docstring") casadi::Function::size2_in "

Get input dimension.

";

%feature("docstring") casadi::Function::has_sprev "

Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Function::instruction_constant "

Get the floating point output argument of an instruction ( SXFunction)

";

%feature("docstring") casadi::Function::sz_w "

Get required length of w field.

";

%feature("docstring") casadi::Function::expand "

Expand a function to SX.

";

%feature("docstring") casadi::Function::sx_out "

Get symbolic primitives equivalent to the output expressions There is no
guarantee that subsequent calls return unique answers.

";

%feature("docstring") casadi::Function::default_in "

Get default input value.

";

%feature("docstring") casadi::Function::nz_from_in "

Convert from/to flat vector of input/output nonzeros.

";


// File: classcasadi_1_1FunctionBuffer.xml
%feature("docstring") casadi::FunctionBuffer "

Class to achieve minimal overhead function evaluations.

C++ includes: function.hpp ";

%feature("docstring") casadi::FunctionBuffer::FunctionBuffer "

Main constructor.

";

%feature("docstring") casadi::FunctionBuffer::set_arg "

Set input buffer for input i.

mem.set_arg(0, memoryview(a))

Note that CasADi uses 'fortran' order: column-by-column

";

%feature("docstring") casadi::FunctionBuffer::set_res "

Set output buffer for ouput i.

mem.set_res(0, memoryview(a))

Note that CasADi uses 'fortran' order: column-by-column

";

%feature("docstring") casadi::FunctionBuffer::ret "

Get last return value.

";


// File: classcasadi_1_1GenericExternal.xml
%feature("docstring") casadi::GenericExternal::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::GenericExternal::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::GenericExternal::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::GenericExternal::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::GenericExternal::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::GenericExternal::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::GenericExternal::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::GenericExternal::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::GenericExternal::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::GenericExternal::~GenericExternal "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::GenericExternal::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::GenericExternal::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::GenericExternal::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::GenericExternal::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::GenericExternal::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::GenericExternal::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::GenericExternal::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::GenericExternal::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::GenericExternal::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::GenericExternal::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::GenericExternal::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::GenericExternal::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::GenericExternal::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::GenericExternal::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::GenericExternal::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::GenericExternal::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::GenericExternal::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::GenericExternal::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::GenericExternal::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::GenericExternal::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::GenericExternal::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::GenericExternal::has_jacobian "

[INTERNAL]  Full Jacobian.

";

%feature("docstring") casadi::GenericExternal::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::GenericExternal::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::GenericExternal::has_forward "

[INTERNAL]  Forward mode derivatives.

";

%feature("docstring") casadi::GenericExternal::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::GenericExternal::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::GenericExternal::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::GenericExternal::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::GenericExternal::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::GenericExternal::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::GenericExternal::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::GenericExternal::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::GenericExternal::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::GenericExternal::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::GenericExternal::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::GenericExternal::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::GenericExternal::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::GenericExternal::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::GenericExternal::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::GenericExternal::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::GenericExternal::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::GenericExternal::get_default_in "

[INTERNAL]  Default inputs.

";

%feature("docstring") casadi::GenericExternal::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::GenericExternal::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::GenericExternal::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::GenericExternal::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::GenericExternal::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::GenericExternal::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::GenericExternal::get_function "

[INTERNAL] ";

%feature("docstring") casadi::GenericExternal::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::GenericExternal::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::GenericExternal::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::GenericExternal::get_reverse "

[INTERNAL]  Reverse mode derivatives.

";

%feature("docstring") casadi::GenericExternal::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::GenericExternal::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::GenericExternal::GenericExternal "

[INTERNAL]  Deserializing constructor.

>  casadi::GenericExternal::GenericExternal(DeserializingStream &s)
------------------------------------------------------------------------
[INTERNAL] 
Deserializing constructor.

";

";

%feature("docstring") casadi::GenericExternal::get_sparsity_in "

[INTERNAL]  Retreive sparsities.

";

%feature("docstring") casadi::GenericExternal::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::GenericExternal::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::GenericExternal::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::GenericExternal::jit_dependencies "

[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::GenericExternal::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::GenericExternal::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::GenericExternal::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::GenericExternal::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::GenericExternal::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::GenericExternal::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::GenericExternal::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::GenericExternal::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::GenericExternal::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::GenericExternal::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::GenericExternal::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::GenericExternal::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::GenericExternal::any_symbol_found "

[INTERNAL]  Any symbol found?

";

%feature("docstring") casadi::GenericExternal::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::GenericExternal::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::GenericExternal::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::GenericExternal::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::GenericExternal::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::GenericExternal::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::GenericExternal::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::GenericExternal::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::GenericExternal::get_jacobian "

[INTERNAL]  Full Jacobian.

";

%feature("docstring") casadi::GenericExternal::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::GenericExternal::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::GenericExternal::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::GenericExternal::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::GenericExternal::eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::GenericExternal::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::GenericExternal::has_function "

[INTERNAL] ";

%feature("docstring") casadi::GenericExternal::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::GenericExternal::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::GenericExternal::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::GenericExternal::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::GenericExternal::finalize "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring") casadi::GenericExternal::init_external "

[INTERNAL]  Initialize members that are unique.

";

%feature("docstring") casadi::GenericExternal::factory "

[INTERNAL] ";

%feature("docstring") casadi::GenericExternal::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::GenericExternal::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::GenericExternal::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::GenericExternal::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::GenericExternal::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::GenericExternal::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::GenericExternal::class_name "

[INTERNAL]  Get type name.

";

%feature("docstring") casadi::GenericExternal::generate_dependencies "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::GenericExternal::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::GenericExternal::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::GenericExternal::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::GenericExternal::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::GenericExternal::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::GenericExternal::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::GenericExternal::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::GenericExternal::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::GenericExternal::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::GenericExternal::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::GenericExternal::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::GenericExternal::get_options "

[INTERNAL]  Options.

";

%feature("docstring")
casadi::GenericExternal::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::GenericExternal::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::GenericExternal::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::GenericExternal::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::GenericExternal::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::GenericExternal::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::GenericExternal::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::GenericExternal::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::GenericExternal::get_forward "

[INTERNAL]  Forward mode derivatives.

";

%feature("docstring") casadi::GenericExternal::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::GenericExternal::codegen_body "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring") casadi::GenericExternal::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::GenericExternal::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::GenericExternal::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::GenericExternal::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::GenericExternal::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::GenericExternal::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::GenericExternal::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::GenericExternal::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::GenericExternal::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::GenericExternal::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::GenericExternal::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::GenericExternal::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::GenericExternal::has_reverse "

[INTERNAL]  Reverse mode derivatives.

";

%feature("docstring") casadi::GenericExternal::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::GenericExternal::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::GenericExternal::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::GenericExternal::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::GenericExternal::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::GenericExternal::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::GenericExternal::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::GenericExternal::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::GenericExternal::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::GenericExternal::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::GenericExternal::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::GenericExternal::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::GenericExternal::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::GenericExternal::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::GenericExternal::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::GenericExternal::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::GenericExternal::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::GenericExternal "

[INTERNAL] C++ includes: external_impl.hpp ";

%feature("docstring") casadi::GenericExternal::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::GenericExternal::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::GenericExternal::set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring") casadi::GenericExternal::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::GenericExternal::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::GenericExternal::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::GenericExternal::get_sparsity_out "

[INTERNAL]  Retreive sparsities.

";

%feature("docstring") casadi::GenericExternal::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::GenericExternal::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::GenericExternal::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::GenericExternal::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::GenericExternal::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::GenericExternal::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::GenericExternal::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::GenericExternal::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::GenericExternal::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::GenericExternal::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::GenericExternal::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::GenericExternal::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::GenericExternal::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::GenericExternal::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";


// File: classcasadi_1_1GenericMatrix.xml


/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring") casadi::GenericMatrixCommon::dot "

[INTERNAL]  Inner product of two matrices with x and y matrices of the same
dimension.

";

%feature("docstring") casadi::GenericMatrixCommon::is_quadratic "

Is expr quadratic in var?

False negatives are possible (an expression may not be recognised as
quadratic while it really is), false positives not.

";

%feature("docstring") casadi::GenericMatrixCommon::solve "

[INTERNAL]   Solve a system of equations: A*x = b.

>  MatType casadi::GenericMatrix::solve(const MatType &A, const MatType &b, const std::string &lsolver, const Dict &dict=Dict())
------------------------------------------------------------------------
[INTERNAL] 
 Solve a system of equations: A*x = b.

";

";

%feature("docstring") casadi::GenericMatrixCommon::pinv "

[INTERNAL]  Computes the Moore-Penrose pseudo-inverse.

If the matrix A is fat (size1>size2), mul(A, pinv(A)) is unity. If the
matrix A is slender (size2<size1), mul(pinv(A), A) is unity.

>  MatType casadi::GenericMatrix::pinv(const MatType &A, const std::string &lsolver, const Dict &dict=Dict())
------------------------------------------------------------------------
[INTERNAL] 
Computes the Moore-Penrose pseudo-inverse.

If the matrix A is fat (size1>size2), mul(A, pinv(A)) is unity. If the
matrix A is slender (size2<size1), mul(pinv(A), A) is unity.

";

";

%feature("docstring") casadi::GenericMatrixCommon::jacobian "

[INTERNAL]  Calculate Jacobian.

";

%feature("docstring") casadi::GenericMatrixCommon::substitute_inplace "

[INTERNAL]  Inplace substitution with piggyback expressions Substitute
variables v out of the expressions vdef sequentially, as well as out of a
number of other expressions piggyback.

";

%feature("docstring") casadi::GenericMatrixCommon::simplify "

[INTERNAL]  Simplify an expression.

";

%feature("docstring") casadi::GenericMatrixCommon::cumsum "

[INTERNAL]  Returns cumulative sum along given axis (MATLAB convention)

";

%feature("docstring") casadi::GenericMatrixCommon::nnz_diag "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring") casadi::GenericMatrixCommon::conditional "

[INTERNAL]  Create a switch.

If the condition

Parameters:
-----------

ind:  evaluates to the integer k, where 0<=k<f.size(), then x[k] will be
returned, otherwise

x_default:  will be returned.

";

%feature("docstring") casadi::GenericMatrixCommon::print_operator "

[INTERNAL]  Get a string representation for a binary MatType, using custom
arguments.

";

%feature("docstring") casadi::GenericMatrixCommon::trace "

[INTERNAL]   Matrix trace.

";

%feature("docstring") casadi::GenericMatrixCommon::mmax "

[INTERNAL]  Largest element in a matrix.

";

%feature("docstring") casadi::GenericMatrixCommon::get_row "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::GenericMatrixCommon::n_nodes "

[INTERNAL]  Count number of nodes

";

%feature("docstring") casadi::GenericMatrixCommon::norm_inf "

[INTERNAL]  Infinity-norm.

";

%feature("docstring") casadi::GenericMatrixCommon::mmin "

[INTERNAL]  Smallest element in a matrix.

";

%feature("docstring") casadi::GenericMatrixCommon::is_dense "

Check if the matrix expression is dense.

";

%feature("docstring") casadi::GenericMatrixCommon::tril2symm "

Convert a lower triangular matrix to a symmetric one.

";

%feature("docstring") casadi::GenericMatrixCommon::nnz_lower "

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring") casadi::GenericMatrixCommon::diag "

[INTERNAL]  Get the diagonal of a matrix or construct a diagonal When the
input is square, the diagonal elements are returned. If the input is vector-
like, a diagonal matrix is constructed with it.

";

%feature("docstring") casadi::GenericMatrixCommon::is_linear "

Is expr linear in var?

False negatives are possible (an expression may not be recognised as linear
while it really is), false positives not.

";

%feature("docstring") casadi::GenericMatrixCommon::unite "

[INTERNAL]  Unite two matrices no overlapping sparsity.

";

%feature("docstring") casadi::GenericMatrixCommon::rank1 "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring") casadi::GenericMatrixCommon::gradient "

Functions called by friend functions defined here

>  static MatType casadi::GenericMatrix< MatType >::gradient(const MatType &ex, const MatType &arg, const Dict &opts=Dict())
------------------------------------------------------------------------

Functions called by friend functions defined here

";

";

%feature("docstring") casadi::GenericMatrixCommon::symvar "

[INTERNAL]  Get all symbols contained in the supplied expression Get all
symbols on which the supplied expression depends.

See:  SXFunction::getFree(), MXFunction::getFree()

";

%feature("docstring") casadi::GenericMatrixCommon::skew "

Generate a skew symmetric matrix from a 3-vector.

";

%feature("docstring") casadi::GenericMatrixCommon::is_scalar "

Check if the matrix expression is scalar.

";

%feature("docstring") casadi::GenericMatrixCommon::expm_const "

[INTERNAL] ";

%feature("docstring") casadi::GenericMatrixCommon::columns "

Get the number of columns, Octave-style syntax.

";

%feature("docstring") casadi::GenericMatrixCommon::is_column "

Check if the matrix is a column vector (i.e. size2()==1)

";

%feature("docstring") casadi::GenericMatrixCommon::quadratic_coeff "

Recognizes quadratic form in scalar expression.

1/2*x' A x + b' x + c

e = 0.5*bilin(A,x,x)+dot(b,x)+c

Parameters:
-----------

check[in]:  When true (default), A is checked to be independent of x.
Provided to deal with false positive dependency checks.

";

%feature("docstring") casadi::GenericMatrixCommon::is_tril "

Check if the matrix is lower triangular.

";

%feature("docstring") casadi::GenericMatrixCommon::colind "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::GenericMatrixCommon::is_triu "

Check if the matrix is upper triangular.

";

%feature("docstring") casadi::GenericMatrixCommon::depends_on "

[INTERNAL]  Check if expression depends on the argument The argument must be
symbolic.

";

%feature("docstring") casadi::GenericMatrixCommon::dim "

Get string representation of dimensions. The representation is e.g. \"4x5\"
or \"4x5,10nz\".

";

%feature("docstring") casadi::GenericMatrixCommon::mrdivide "

[INTERNAL]   Matrix divide (cf. slash '/' in MATLAB)

";

%feature("docstring") casadi::GenericMatrixCommon::linspace "

Matlab's linspace command.

";

%feature("docstring") casadi::GenericMatrixCommon::triu2symm "

Convert a upper triangular matrix to a symmetric one.

";

%feature("docstring") casadi::GenericMatrixCommon::size1 "

Get the first dimension (i.e. number of rows)

";

%feature("docstring") casadi::GenericMatrixCommon::size2 "

Get the second dimension (i.e. number of columns)

";

%feature("docstring") casadi::GenericMatrixCommon::cross "

Matlab's cross command.

";

%feature("docstring") casadi::GenericMatrixCommon::mldivide "

[INTERNAL]   Matrix divide (cf. backslash '\\\\' in MATLAB)

";

%feature("docstring") casadi::GenericMatrixCommon::tangent "

Functions called by friend functions defined here

>  static MatType casadi::GenericMatrix< MatType >::tangent(const MatType &ex, const MatType &arg, const Dict &opts=Dict())
------------------------------------------------------------------------

Functions called by friend functions defined here

";

";

%feature("docstring") casadi::GenericMatrixCommon::substitute "

[INTERNAL]  Substitute variable var with expression expr in multiple
expressions.

>  std::vector<MatType> casadi::GenericMatrix::substitute(const std::vector< MatType > &ex, const std::vector< MatType > &v, const std::vector< MatType > &vdef)
------------------------------------------------------------------------
[INTERNAL] 
Substitute variable var with expression expr in multiple expressions.

";

";

%feature("docstring") casadi::GenericMatrixCommon::inv_skew "

Generate the 3-vector progenitor of a skew symmetric matrix.

";

%feature("docstring") casadi::GenericMatrixCommon::bilin "

Calculate bilinear form x^T A y.

";

%feature("docstring") casadi::GenericMatrixCommon::inv_minor "

[INTERNAL]   Matrix inverse (experimental)

";

%feature("docstring") casadi::GenericMatrixCommon::norm_1 "

[INTERNAL]  1-norm

";

%feature("docstring") casadi::GenericMatrixCommon::norm_2 "

[INTERNAL]  2-norm

";

%feature("docstring") casadi::GenericMatrixCommon::get_colind "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::GenericMatrixCommon::is_empty "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") casadi::GenericMatrixCommon::is_row "

Check if the matrix is a row vector (i.e. size1()==1)

";

%feature("docstring") casadi::GenericMatrixCommon::soc "

Functions called by friend functions defined here

>  static MatType casadi::GenericMatrix< MatType >::soc(const MatType &x, const MatType &y)
------------------------------------------------------------------------

Functions called by friend functions defined here

";

";

%feature("docstring") casadi::GenericMatrixCommon::is_square "

Check if the matrix expression is square.

";

%feature("docstring") casadi::GenericMatrixCommon::jtimes "

Calculate the Jacobian and multiply by a vector from the right This is
equivalent to mul(jacobian(ex, arg), v) or mul(jacobian(ex, arg).T, v) for
tr set to false and true respectively. If contrast to these expressions, it
will use directional derivatives which is typically (but not necessarily)
more efficient if the complete Jacobian is not needed and v has few rows.

>  MatType casadi::GenericMatrix< MatType >::jtimes(const MatType &ex, const MatType &arg, const MatType &v, bool tr=false, const Dict &opts=Dict())
------------------------------------------------------------------------

Calculate the Jacobian and multiply by a vector from the right This is
equivalent to mul(jacobian(ex, arg), v) or mul(jacobian(ex, arg).T, v) for
tr set to false and true respectively. If contrast to these expressions, it
will use directional derivatives which is typically (but not necessarily)
more efficient if the complete Jacobian is not needed and v has few rows.

";

";

%feature("docstring") casadi::GenericMatrixCommon::numel "

Get the number of elements.

";

%feature("docstring") casadi::GenericMatrixCommon::linear_coeff "

Recognizes linear form in vector expression.

A x + b

Parameters:
-----------

check[in]:  When true (default)m, A is checked to be independent of x.
Provided to deal with false positive dependency checks.

";

%feature("docstring") casadi::GenericMatrixCommon::repsum "

Given a repeated matrix, computes the sum of repeated parts.

";

%feature("docstring") casadi::GenericMatrixCommon::einstein "

[INTERNAL]  Performs 1d linear interpolation.

The data-points to be interpolated are given as (x[i], v[i]). xq[j] is used
as interplating value

>  MatType casadi::GenericMatrix::einstein(const MatType &A, const MatType &B, const std::vector< casadi_int > &dim_a, const std::vector< casadi_int > &dim_b, const std::vector< casadi_int > &dim_c, const std::vector< casadi_int > &a, const std::vector< casadi_int > &b, const std::vector< casadi_int > &c)
------------------------------------------------------------------------
[INTERNAL] 
Performs 1d linear interpolation.

The data-points to be interpolated are given as (x[i], v[i]). xq[j] is used
as interplating value

";

";

%feature("docstring") casadi::GenericMatrixCommon::polyval "

[INTERNAL]  Evaluate a polynomial with coefficients p in x.

";

%feature("docstring") casadi::GenericMatrixCommon::nnz "

Get the number of (structural) non-zero elements.

";

%feature("docstring") casadi::GenericMatrixCommon::sym "

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

>  static std::vector<std::vector<MatType> > casadi::GenericMatrix< MatType >::sym(const std::string &name, casadi_int nrow, casadi_int ncol, casadi_int p, casadi_int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

";

%feature("docstring") casadi::GenericMatrixCommon::row "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::GenericMatrixCommon::diff "

Returns difference (n-th order) along given axis (MATLAB convention)

";

%feature("docstring") casadi::GenericMatrixCommon::nullspace "

[INTERNAL]  Computes the nullspace of a matrix A.

Finds Z m-by-(m-n) such that AZ = 0 with A n-by-m with m > n

Assumes A is full rank

Inspired by Numerical Methods in Scientific Computing by Ake Bjorck

";

%feature("docstring") casadi::GenericMatrixCommon::nnz_upper "

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring") casadi::GenericMatrixCommon::sumsqr "

[INTERNAL]  Calculate sum of squares: sum_ij X_ij^2.

";

%feature("docstring") casadi::GenericMatrixCommon::norm_fro "

[INTERNAL]  Frobenius norm.

";

%feature("docstring") casadi::GenericMatrixCommon::sparsity "

Get the sparsity pattern.

";

%feature("docstring") casadi::GenericMatrixCommon::inv "

[INTERNAL]   Matrix inverse.

";

%feature("docstring") casadi::GenericMatrixCommon::interp1d "

Performs 1d linear interpolation.

The data-points to be interpolated are given as (x[i], v[i]). xq[j] is used
as interplating value

";

%feature("docstring") casadi::GenericMatrixCommon::mpower "

Functions called by friend functions defined here

>  static MatType casadi::GenericMatrix< MatType >::mpower(const MatType &x, const MatType &y)
------------------------------------------------------------------------

Functions called by friend functions defined here

";

";

%feature("docstring") casadi::GenericMatrixCommon::hessian "

[INTERNAL] ";

%feature("docstring") casadi::GenericMatrixCommon::reverse "

[INTERNAL]  Reverse directional derivative.

";

%feature("docstring") casadi::GenericMatrixCommon::which_depends "

[INTERNAL]   Find out which variables enter with some order.

";

%feature("docstring") casadi::GenericMatrixCommon::forward "

[INTERNAL]  Forward directional derivative.

";

%feature("docstring") casadi::GenericMatrixCommon::size "

Get the size along a particular dimensions.

>  casadi_int casadi::GenericMatrix< MatType >::size(casadi_int axis) const 
------------------------------------------------------------------------

Get the size along a particular dimensions.

";

";

%feature("docstring") casadi::GenericMatrixCommon "

Matrix base class.

This is a common base class for MX and Matrix<>, introducing a uniform
syntax and implementing common functionality using the curiously recurring
template pattern (CRTP) idiom.  The class is designed with the idea that
\"everything is a matrix\", that is, also scalars and vectors. This
philosophy makes it easy to use and to interface in particularly with Python
and Matlab/Octave.  The syntax tries to stay as close as possible to the
ublas syntax when it comes to vector/matrix operations.  Index starts with
0. Index vec happens as follows: (rr, cc) -> k = rr+cc*size1() Vectors are
column vectors.  The storage format is Compressed Column Storage (CCS),
similar to that used for sparse matrices in Matlab, but unlike this format,
we do allow for elements to be structurally non-zero but numerically zero.
The sparsity pattern, which is reference counted and cached, can be accessed
with Sparsity& sparsity() Joel Andersson

C++ includes: generic_matrix.hpp ";

%feature("docstring") casadi::GenericMatrixCommon::project "

[INTERNAL]  Create a new matrix with a given sparsity pattern but with the
nonzeros taken from an existing matrix.

";

%feature("docstring") casadi::GenericMatrixCommon::expm "

[INTERNAL] ";

%feature("docstring") casadi::GenericMatrixCommon::densify "

[INTERNAL]  Make the matrix dense and assign nonzeros to a value.

>  MatType casadi::GenericMatrix::densify(const MatType &x, const MatType &val)
------------------------------------------------------------------------
[INTERNAL] 
Make the matrix dense and assign nonzeros to a value.

";

";

%feature("docstring") casadi::GenericMatrixCommon::is_vector "

Check if the matrix is a row or column vector.

";

%feature("docstring") casadi::GenericMatrixCommon::det "

[INTERNAL]   Matrix determinant (experimental)

";

%feature("docstring") casadi::GenericMatrixCommon::shared "

[INTERNAL]  Extract shared subexpressions from an set of expressions.

";

%feature("docstring") casadi::GenericMatrixCommon::zeros "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring") casadi::GenericMatrixCommon::if_else "

[INTERNAL]  Branching on MX nodes Ternary operator, \"cond ? if_true :
if_false\".

";

%feature("docstring") casadi::GenericMatrixCommon::rows "

Get the number of rows, Octave-style syntax.

";

%feature("docstring") casadi::GenericMatrixCommon::linearize "

Linearize an expression.

>  MatType casadi::GenericMatrix< MatType >::linearize(const MatType &f, const MatType &x, const MatType &x0, const Dict &opts=Dict())
------------------------------------------------------------------------

Linearize an expression.

";

";

%feature("docstring") casadi::GenericMatrixCommon::ones "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";


// File: classcasadi_1_1GenericType.xml
%feature("docstring") casadi::GenericType::serialize "

Serialize an object.

";

%feature("docstring") casadi::GenericType "

Generic data type, can hold different types such as bool, casadi_int, string
etc.

Joel Andersson

C++ includes: generic_type.hpp ";


// File: classcasadi_1_1GenericTypeBase.xml
%feature("docstring") casadi::GenericTypeBase::~GenericTypeBase "

[INTERNAL] ";

%feature("docstring") casadi::GenericTypeBase::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::GenericTypeBase::class_name "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::GenericTypeBase::getType "

[INTERNAL] ";

%feature("docstring") casadi::GenericTypeBase::serialize "

[INTERNAL] ";

%feature("docstring") casadi::GenericTypeBase::disp "

[INTERNAL]  Print a description of the object.

";

%feature("docstring") casadi::GenericTypeBase::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::GenericTypeBase "

[INTERNAL] C++ includes: generic_type_internal.hpp ";


// File: classcasadi_1_1GetNonzeros.xml


// File: classcasadi_1_1GetNonzerosParam.xml


// File: classcasadi_1_1GetNonzerosParamParam.xml


// File: classcasadi_1_1GetNonzerosParamSlice.xml


// File: classcasadi_1_1GetNonzerosParamVector.xml


// File: classcasadi_1_1GetNonzerosSlice.xml


// File: classcasadi_1_1GetNonzerosSlice2.xml


// File: classcasadi_1_1GetNonzerosSliceParam.xml


// File: classcasadi_1_1GetNonzerosVector.xml


// File: classcasadi_1_1GlobalOptions.xml
%feature("docstring") casadi::GlobalOptions "

Collects global CasADi options.

Note to developers: use sparingly. Global options are - in general - a
rather bad idea

this class must never be instantiated. Access its static members directly
Joris Gillis

C++ includes: global_options.hpp ";


// File: classcasadi_1_1Horzcat.xml


// File: classcasadi_1_1HorzRepmat.xml


// File: classcasadi_1_1HorzRepsum.xml


// File: classcasadi_1_1Horzsplit.xml


// File: classcasadi_1_1ImplicitFixedStepIntegrator.xml
%feature("docstring") casadi::ImplicitFixedStepIntegrator::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::generate_options
"

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::class_name "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::jacobian_sparsity
"

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::init "

[INTERNAL]  Initialize stage.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::instruction_input
"

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::codegen_init_mem
"

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::setStopTime "

[INTERNAL]  Set stop time for the integration.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::getDerivativeOptions "

[INTERNAL]  Set solver specific options to generated augmented integrators.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::jit_dependencies
"

[INTERNAL]  JIT for dependencies.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::advance "

[INTERNAL]  Advance solution in time.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::codegen_alloc_mem
"

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::set_function "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator "



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::Implicit |
| s                |                 | passed down to   | FixedStepIntegra |
|                  |                 | the augmented    | tor              |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Implicit |
|                  |                 | SX expressions   | FixedStepIntegra |
|                  |                 | in problem       | tor              |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::Implicit |
|                  |                 |                  | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::Implicit |
| _elements        |                 | elements         | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::Implicit |
|                  |                 | at the initial   | FixedStepIntegra |
|                  |                 | time             | tor              |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::Implicit |
|                  |                 | statistics after | FixedStepIntegra |
|                  |                 | integration      | tor              |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::Implicit |
|                  |                 | function solver  | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::Implicit |
| ns               |                 | passed to the    | FixedStepIntegra |
|                  |                 | NLP Solver       | tor              |
+------------------+-----------------+------------------+------------------+
| show_eval_warnin | OT_BOOL         | Show warnings    | casadi::OracleFu |
| gs               |                 | generated from   | nction           |
|                  |                 | function         |                  |
|                  |                 | evaluations      |                  |
|                  |                 | [true]           |                  |
+------------------+-----------------+------------------+------------------+
| simplify         | OT_BOOL         | Implement as MX  | casadi::Implicit |
|                  |                 | Function (codege | FixedStepIntegra |
|                  |                 | neratable/serial | tor              |
|                  |                 | izable) default: |                  |
|                  |                 | false            |                  |
+------------------+-----------------+------------------+------------------+
| simplify_options | OT_DICT         | Any options to   | casadi::Implicit |
|                  |                 | pass to          | FixedStepIntegra |
|                  |                 | simplified form  | tor              |
|                  |                 | Function         |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::Implicit |
|                  |                 | time horizon     | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::Implicit |
|                  |                 | horizon          | FixedStepIntegra |
|                  |                 |                  | tor              |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: integrator_impl.hpp ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::q "

[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::p "

[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::algebraic_state_output "

[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::t "

[INTERNAL] ";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::~ImplicitFixedStepIntegrator "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::z "

[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::x "

[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::create_advanced "

[INTERNAL]  Helper for a more powerful 'integrator' factory

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::reset "

[INTERNAL]  Reset the forward problem.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::monitored "

[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getJacSparsityGen
"

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::algebraic_state_init "

[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sp_jac_dae "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (forward
problem)

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::print_stats "

[INTERNAL]  Print solver statistics.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::finalize "

[INTERNAL]  Finalize initialization.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::expand "

[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getExplicitB "

[INTERNAL]  Get explicit dynamics (backward problem)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_sparsity_out
"

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::has_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::print_dimensions
"

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::setupFG "

[INTERNAL]  Setup F and G.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::aug_adj "

[INTERNAL]  Generate a augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::codegen_mem_type
"

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::getExplicit "

[INTERNAL]  Get explicit dynamics.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::aug_fwd "

[INTERNAL]  Generate a augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_function "

[INTERNAL]

>  const Function& casadi::OracleFunction::get_function(const std::string &name) const override
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::generate_dependencies "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::factory "

[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::codegen_free_mem
"

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::eval "

[INTERNAL]  evaluate

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::has_function "

[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::retreat "

[INTERNAL]  Retreat solution in time.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::set_temp "

[INTERNAL]  Set the work vectors.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::rp "

[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::rq "

[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::has_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::rz "

[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::rx "

[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sp_jac_rdae "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (backward
problem)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::calc_function "

[INTERNAL] ";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::resetB "

[INTERNAL]  Reset the backward problem and take time to tf.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::create_function "

[INTERNAL]  Create an oracle function

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring")
casadi::ImplicitFixedStepIntegrator::ImplicitFixedStepIntegrator "

[INTERNAL]  Constructor.

";

%feature("docstring") casadi::ImplicitFixedStepIntegrator::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";


// File: classcasadi_1_1ImplicitToNlp.xml
%feature("docstring") casadi::ImplicitToNlp::create_function "

[INTERNAL]  Create an oracle function

";

%feature("docstring") casadi::ImplicitToNlp::ImplicitToNlp "

[INTERNAL]  Constructor.

";

%feature("docstring") casadi::ImplicitToNlp::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ImplicitToNlp::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::ImplicitToNlp::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::ImplicitToNlp::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::ImplicitToNlp::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::ImplicitToNlp::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::ImplicitToNlp::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::ImplicitToNlp::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::ImplicitToNlp::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::ImplicitToNlp::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::ImplicitToNlp::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::ImplicitToNlp::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::ImplicitToNlp::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::ImplicitToNlp::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::ImplicitToNlp::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::ImplicitToNlp::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ImplicitToNlp::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::ImplicitToNlp::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::ImplicitToNlp::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ImplicitToNlp::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::ImplicitToNlp::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::ImplicitToNlp::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::ImplicitToNlp::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::ImplicitToNlp::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::ImplicitToNlp::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::ImplicitToNlp::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::ImplicitToNlp::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::ImplicitToNlp::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::ImplicitToNlp::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::ImplicitToNlp::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::ImplicitToNlp::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::ImplicitToNlp::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::ImplicitToNlp::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::ImplicitToNlp::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::ImplicitToNlp::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::ImplicitToNlp::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ImplicitToNlp::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::ImplicitToNlp::ad_forward "

[INTERNAL]  Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::ImplicitToNlp "

'nlp' plugin for Rootfinder

Use an Nlpsol as Rootfinder solver

>List of available options

+----------------+-----------+---------------------------------+
|       Id       |   Type    |           Description           |
+================+===========+=================================+
| nlpsol         | OT_STRING | Name of solver.                 |
+----------------+-----------+---------------------------------+
| nlpsol_options | OT_DICT   | Options to be passed to solver. |
+----------------+-----------+---------------------------------+

Joris Gillis

>List of available options

+-------------------+--------------+-------------------+-------------------+
|        Id         |     Type     |    Description    |      Used in      |
+===================+==============+===================+===================+
| constraints       | OT_INTVECTOR | Constrain the     | casadi::Rootfinde |
|                   |              | unknowns. 0       | r                 |
|                   |              | (default): no     |                   |
|                   |              | constraint on ui, |                   |
|                   |              | 1: ui >= 0.0, -1: |                   |
|                   |              | ui <= 0.0, 2: ui  |                   |
|                   |              | > 0.0, -2: ui <   |                   |
|                   |              | 0.0.              |                   |
+-------------------+--------------+-------------------+-------------------+
| error_on_fail     | OT_BOOL      | When the          | casadi::Rootfinde |
|                   |              | numerical process | r                 |
|                   |              | returns           |                   |
|                   |              | unsuccessfully,   |                   |
|                   |              | raise an error    |                   |
|                   |              | (default false).  |                   |
+-------------------+--------------+-------------------+-------------------+
| implicit_input    | OT_INT       | Index of the      | casadi::Rootfinde |
|                   |              | input that        | r                 |
|                   |              | corresponds to    |                   |
|                   |              | the actual root-  |                   |
|                   |              | finding           |                   |
+-------------------+--------------+-------------------+-------------------+
| implicit_output   | OT_INT       | Index of the      | casadi::Rootfinde |
|                   |              | output that       | r                 |
|                   |              | corresponds to    |                   |
|                   |              | the actual root-  |                   |
|                   |              | finding           |                   |
+-------------------+--------------+-------------------+-------------------+
| jacobian_function | OT_FUNCTION  | Function object   | casadi::Rootfinde |
|                   |              | for calculating   | r                 |
|                   |              | the Jacobian      |                   |
|                   |              | (autogenerated by |                   |
|                   |              | default)          |                   |
+-------------------+--------------+-------------------+-------------------+
| linear_solver     | OT_STRING    | User-defined      | casadi::Rootfinde |
|                   |              | linear solver     | r                 |
|                   |              | class. Needed for |                   |
|                   |              | sensitivities.    |                   |
+-------------------+--------------+-------------------+-------------------+
| linear_solver_opt | OT_DICT      | Options to be     | casadi::Rootfinde |
| ions              |              | passed to the     | r                 |
|                   |              | linear solver.    |                   |
+-------------------+--------------+-------------------+-------------------+
| nlpsol            | OT_STRING    | Name of solver.   | casadi::ImplicitT |
|                   |              |                   | oNlp              |
+-------------------+--------------+-------------------+-------------------+
| nlpsol_options    | OT_DICT      | Options to be     | casadi::ImplicitT |
|                   |              | passed to solver. | oNlp              |
+-------------------+--------------+-------------------+-------------------+

Diagrams
--------



C++ includes: implicit_to_nlp.hpp ";

%feature("docstring") casadi::ImplicitToNlp::has_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::ImplicitToNlp::codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::ImplicitToNlp::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::ImplicitToNlp::solve "

[INTERNAL]   Solve the system of equations and calculate derivatives.

";

%feature("docstring") casadi::ImplicitToNlp::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::ImplicitToNlp::jit_dependencies "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring") casadi::ImplicitToNlp::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::ImplicitToNlp::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::ImplicitToNlp::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::ImplicitToNlp::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::ImplicitToNlp::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::ImplicitToNlp::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::ImplicitToNlp::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::ImplicitToNlp::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::ImplicitToNlp::set_function "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::ImplicitToNlp::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::ImplicitToNlp::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::ImplicitToNlp::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::ImplicitToNlp::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::ImplicitToNlp::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::ImplicitToNlp::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::ImplicitToNlp::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::ImplicitToNlp::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::ImplicitToNlp::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::ImplicitToNlp::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::ImplicitToNlp::class_name "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::ImplicitToNlp::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::ImplicitToNlp::~ImplicitToNlp "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::ImplicitToNlp::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::ImplicitToNlp::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ImplicitToNlp::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::ImplicitToNlp::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::ImplicitToNlp::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::ImplicitToNlp::get_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::ImplicitToNlp::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::ImplicitToNlp::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::ImplicitToNlp::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::ImplicitToNlp::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ImplicitToNlp::has_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::ImplicitToNlp::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::ImplicitToNlp::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::ImplicitToNlp::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::ImplicitToNlp::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::ImplicitToNlp::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::ImplicitToNlp::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::ImplicitToNlp::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::ImplicitToNlp::getJacSparsityHierarchicalSymm
"

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::ImplicitToNlp::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::ImplicitToNlp::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::ImplicitToNlp::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ImplicitToNlp::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::ImplicitToNlp::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::ImplicitToNlp::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::ImplicitToNlp::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::ImplicitToNlp::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::ImplicitToNlp::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::ImplicitToNlp::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::ImplicitToNlp::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::ImplicitToNlp::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::ImplicitToNlp::factory "

[INTERNAL] ";

%feature("docstring") casadi::ImplicitToNlp::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ImplicitToNlp::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::ImplicitToNlp::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::ImplicitToNlp::get_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::ImplicitToNlp::set_temp "

[INTERNAL]  Set the work vectors.

";

%feature("docstring") casadi::ImplicitToNlp::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::ImplicitToNlp::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::ImplicitToNlp::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ImplicitToNlp::eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::ImplicitToNlp::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::ImplicitToNlp::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::ImplicitToNlp::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::ImplicitToNlp::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::ImplicitToNlp::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::ImplicitToNlp::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::ImplicitToNlp::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::ImplicitToNlp::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::ImplicitToNlp::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::ImplicitToNlp::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::ImplicitToNlp::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::ImplicitToNlp::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::ImplicitToNlp::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::ImplicitToNlp::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::ImplicitToNlp::has_function "

[INTERNAL] ";

%feature("docstring") casadi::ImplicitToNlp::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::ImplicitToNlp::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::ImplicitToNlp::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ImplicitToNlp::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::ImplicitToNlp::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::ImplicitToNlp::monitored "

[INTERNAL] ";

%feature("docstring") casadi::ImplicitToNlp::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::ImplicitToNlp::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ImplicitToNlp::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ImplicitToNlp::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::ImplicitToNlp::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::ImplicitToNlp::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::ImplicitToNlp::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::ImplicitToNlp::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::ImplicitToNlp::get_function "

[INTERNAL]

>  const Function& casadi::OracleFunction::get_function(const std::string &name) const override
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::ImplicitToNlp::finalize "

[INTERNAL]  Finalize initialization.

";

%feature("docstring") casadi::ImplicitToNlp::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::ImplicitToNlp::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::ImplicitToNlp::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::ImplicitToNlp::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::ImplicitToNlp::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::ImplicitToNlp::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::ImplicitToNlp::ad_reverse "

[INTERNAL]  Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::ImplicitToNlp::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::ImplicitToNlp::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::ImplicitToNlp::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::ImplicitToNlp::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ImplicitToNlp::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ImplicitToNlp::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::ImplicitToNlp::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::ImplicitToNlp::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::ImplicitToNlp::calc_function "

[INTERNAL] ";

%feature("docstring") casadi::ImplicitToNlp::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::ImplicitToNlp::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::ImplicitToNlp::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::ImplicitToNlp::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::ImplicitToNlp::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::ImplicitToNlp::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::ImplicitToNlp::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::ImplicitToNlp::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::ImplicitToNlp::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ImplicitToNlp::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::ImplicitToNlp::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::ImplicitToNlp::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::ImplicitToNlp::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::ImplicitToNlp::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::ImplicitToNlp::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::ImplicitToNlp::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::ImplicitToNlp::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::ImplicitToNlp::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::ImplicitToNlp::generate_dependencies "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::ImplicitToNlp::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::ImplicitToNlp::expand "

[INTERNAL] ";

%feature("docstring") casadi::ImplicitToNlp::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::ImplicitToNlp::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ImplicitToNlp::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::ImplicitToNlp::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::ImplicitToNlp::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::ImplicitToNlp::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::ImplicitToNlp::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::ImplicitToNlp::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::ImplicitToNlp::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ImplicitToNlp::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::ImplicitToNlp::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::ImplicitToNlp::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::ImplicitToNlp::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::ImplicitToNlp::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::ImplicitToNlp::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::ImplicitToNlp::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::ImplicitToNlp::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ImplicitToNlp::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::ImplicitToNlp::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::ImplicitToNlp::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";


// File: classcasadi_1_1Importer.xml
%feature("docstring") casadi::Importer::get_str "

Get string representation.

";

%feature("docstring") casadi::Importer::body "

Get the function body, if inlined.

";

%feature("docstring") casadi::Importer::library "

Get library name.

";

%feature("docstring") casadi::Importer::serialize "

Serialize an object.

";

%feature("docstring") casadi::Importer::has_meta "

Does a meta entry exist?

";

%feature("docstring") casadi::Importer::disp "

Print a description of the object.

";

%feature("docstring") casadi::Importer::is_null "

Is a null pointer?

";

%feature("docstring") casadi::Importer "

Importer.

Just-in-time compilation of code

General information
===================



List of plugins
===============



- clang

- shell

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Importer.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

clang
-----



Interface to the JIT compiler CLANG

>List of available options

+--------------+-----------------+-----------------------------------------+
|      Id      |      Type       |               Description               |
+==============+=================+=========================================+
| flags        | OT_STRINGVECTOR | Compile flags for the JIT compiler.     |
|              |                 | Default: None                           |
+--------------+-----------------+-----------------------------------------+
| include_path | OT_STRING       | Include paths for the JIT compiler. The |
|              |                 | include directory shipped with CasADi   |
|              |                 | will be automatically appended.         |
+--------------+-----------------+-----------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

shell
-----



Interface to the JIT compiler SHELL

>List of available options

+----------------------+-----------------+---------------------------------+
|          Id          |      Type       |           Description           |
+======================+=================+=================================+
| cleanup              | OT_BOOL         | Cleanup temporary files when    |
|                      |                 | unloading. Default: true        |
+----------------------+-----------------+---------------------------------+
| compiler             | OT_STRING       | Compiler command                |
+----------------------+-----------------+---------------------------------+
| compiler_flags       | OT_STRINGVECTOR | Alias for 'compiler_flags'      |
+----------------------+-----------------+---------------------------------+
| compiler_output_flag | OT_STRING       | Compiler flag to denote object  |
|                      |                 | output. Default: '-o '          |
+----------------------+-----------------+---------------------------------+
| compiler_setup       | OT_STRING       | Compiler setup command.         |
|                      |                 | Intended to be fixed. The       |
|                      |                 | 'flag' option is the prefered   |
|                      |                 | way to set custom flags.        |
+----------------------+-----------------+---------------------------------+
| extra_suffixes       | OT_STRINGVECTOR | List of suffixes for extra      |
|                      |                 | files that the compiler may     |
|                      |                 | generate. Default: None         |
+----------------------+-----------------+---------------------------------+
| flags                | OT_STRINGVECTOR | Compile flags for the JIT       |
|                      |                 | compiler. Default: None         |
+----------------------+-----------------+---------------------------------+
| folder               | OT_STRING       | Folder to put temporary objects |
|                      |                 | in.                             |
+----------------------+-----------------+---------------------------------+
| linker               | OT_STRING       | Linker command                  |
+----------------------+-----------------+---------------------------------+
| linker_flags         | OT_STRINGVECTOR | Linker flags for the JIT        |
|                      |                 | compiler. Default: None         |
+----------------------+-----------------+---------------------------------+
| linker_output_flag   | OT_STRING       | Linker flag to denote shared    |
|                      |                 | library output. Default: '-o '  |
+----------------------+-----------------+---------------------------------+
| linker_setup         | OT_STRING       | Linker setup command. Intended  |
|                      |                 | to be fixed. The 'flag' option  |
|                      |                 | is the prefered way to set      |
|                      |                 | custom flags.                   |
+----------------------+-----------------+---------------------------------+
| name                 | OT_STRING       | The file name used to write out |
|                      |                 | compiled objects/libraries. The |
|                      |                 | actual file names used depend   |
|                      |                 | on 'temp_suffix' and include    |
|                      |                 | extensions. Default:            |
|                      |                 | 'tmp_casadi_compiler_shell'     |
+----------------------+-----------------+---------------------------------+
| temp_suffix          | OT_BOOL         | Use a temporary (seemingly      |
|                      |                 | random) filename suffix for     |
|                      |                 | file names. This is desired for |
|                      |                 | thread-safety. This behaviour   |
|                      |                 | may defeat caching compiler     |
|                      |                 | wrappers. Default: true         |
+----------------------+-----------------+---------------------------------+

--------------------------------------------------------------------------------



Joris Gillis

C++ includes: importer.hpp ";

%feature("docstring") casadi::Importer::plugin_name "

Query plugin name.

";

%feature("docstring") casadi::Importer::Importer "

Importer factory.

>  casadi::Importer::Importer(const std::string &name, const std::string &compiler, const Dict &opts=Dict())
------------------------------------------------------------------------

Importer factory.

";

";

%feature("docstring") casadi::Importer::class_name "

Get class name.

";

%feature("docstring") casadi::Importer::get_meta "

Get entry as a text.

";

%feature("docstring") casadi::Importer::print_ptr "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring") casadi::Importer::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::Importer::inlined "

Check if a function is inlined.

";


// File: classcasadi_1_1InfSX.xml


// File: classcasadi_1_1Input.xml


// File: classcasadi_1_1IntegerSX.xml


// File: classcasadi_1_1Integrator.xml
%feature("docstring") casadi::Integrator::has_function "

[INTERNAL] ";

%feature("docstring") casadi::Integrator::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Integrator::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::Integrator::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Integrator::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Integrator::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::Integrator::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Integrator::set_function "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::Integrator::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Integrator::aug_fwd "

[INTERNAL]  Generate a augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring") casadi::Integrator::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Integrator::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::Integrator::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::Integrator::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Integrator::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Integrator::factory "

[INTERNAL] ";

%feature("docstring") casadi::Integrator::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Integrator::z "

[INTERNAL] ";

%feature("docstring") casadi::Integrator::x "

[INTERNAL] ";

%feature("docstring") casadi::Integrator::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::Integrator::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::Integrator::q "

[INTERNAL] ";

%feature("docstring") casadi::Integrator::p "

[INTERNAL] ";

%feature("docstring") casadi::Integrator::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::Integrator::t "

[INTERNAL] ";

%feature("docstring") casadi::Integrator::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::Integrator::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::Integrator::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Integrator::calc_function "

[INTERNAL] ";

%feature("docstring") casadi::Integrator::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Integrator::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::Integrator::jit_dependencies "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring") casadi::Integrator::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::Integrator::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Integrator::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Integrator::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::Integrator::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::Integrator::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Integrator::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::Integrator::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Integrator::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Integrator::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::Integrator::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::Integrator::eval "

[INTERNAL]  evaluate

";

%feature("docstring") casadi::Integrator::generate_dependencies "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::Integrator::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Integrator::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Integrator::resetB "

[INTERNAL]  Reset the backward problem.

";

%feature("docstring") casadi::Integrator::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::Integrator::monitored "

[INTERNAL] ";

%feature("docstring") casadi::Integrator::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::Integrator::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::Integrator::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Integrator::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Integrator::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::Integrator::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::Integrator::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::Integrator::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::Integrator::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::Integrator::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::Integrator::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::Integrator::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::Integrator::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::Integrator::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::Integrator::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::Integrator::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Integrator::Integrator "

[INTERNAL]  Constructor.

";

%feature("docstring") casadi::Integrator::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Integrator::sp_jac_dae "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (forward
problem)

";

%feature("docstring") casadi::Integrator::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Integrator::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Integrator::advance "

[INTERNAL]  Advance solution in time.

";

%feature("docstring") casadi::Integrator::codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::Integrator::create_function "

[INTERNAL]  Create an oracle function

";

%feature("docstring") casadi::Integrator::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Integrator::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::Integrator::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::Integrator::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Integrator::retreat "

[INTERNAL]  Retreat solution in time.

";

%feature("docstring") casadi::Integrator::has_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Integrator::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Integrator::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Integrator::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::Integrator::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Integrator::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::Integrator::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::Integrator "

Internal storage for integrator related data.

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| augmented_option | OT_DICT         | Options to be    | casadi::Integrat |
| s                |                 | passed down to   | or               |
|                  |                 | the augmented    |                  |
|                  |                 | integrator, if   |                  |
|                  |                 | one is           |                  |
|                  |                 | constructed.     |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::Integrat |
|                  |                 | SX expressions   | or               |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| grid             | OT_DOUBLEVECTOR | Time grid        | casadi::Integrat |
|                  |                 |                  | or               |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| number_of_finite | OT_INT          | Number of finite | casadi::Integrat |
| _elements        |                 | elements         | or               |
+------------------+-----------------+------------------+------------------+
| output_t0        | OT_BOOL         | Output the state | casadi::Integrat |
|                  |                 | at the initial   | or               |
|                  |                 | time             |                  |
+------------------+-----------------+------------------+------------------+
| print_stats      | OT_BOOL         | Print out        | casadi::Integrat |
|                  |                 | statistics after | or               |
|                  |                 | integration      |                  |
+------------------+-----------------+------------------+------------------+
| rootfinder       | OT_STRING       | An implicit      | casadi::Integrat |
|                  |                 | function solver  | or               |
+------------------+-----------------+------------------+------------------+
| rootfinder_optio | OT_DICT         | Options to be    | casadi::Integrat |
| ns               |                 | passed to the    | or               |
|                  |                 | NLP Solver       |                  |
+------------------+-----------------+------------------+------------------+
| show_eval_warnin | OT_BOOL         | Show warnings    | casadi::OracleFu |
| gs               |                 | generated from   | nction           |
|                  |                 | function         |                  |
|                  |                 | evaluations      |                  |
|                  |                 | [true]           |                  |
+------------------+-----------------+------------------+------------------+
| simplify         | OT_BOOL         | Implement as MX  | casadi::Integrat |
|                  |                 | Function (codege | or               |
|                  |                 | neratable/serial |                  |
|                  |                 | izable) default: |                  |
|                  |                 | false            |                  |
+------------------+-----------------+------------------+------------------+
| simplify_options | OT_DICT         | Any options to   | casadi::Integrat |
|                  |                 | pass to          | or               |
|                  |                 | simplified form  |                  |
|                  |                 | Function         |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| t0               | OT_DOUBLE       | Beginning of the | casadi::Integrat |
|                  |                 | time horizon     | or               |
+------------------+-----------------+------------------+------------------+
| tf               | OT_DOUBLE       | End of the time  | casadi::Integrat |
|                  |                 | horizon          | or               |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: integrator_impl.hpp ";

%feature("docstring") casadi::Integrator::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::Integrator::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Integrator::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Integrator::setStopTime "

[INTERNAL]  Set stop time for the integration.

";

%feature("docstring") casadi::Integrator::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::Integrator::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::Integrator::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Integrator::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Integrator::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::Integrator::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Integrator::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::Integrator::set_temp "

[INTERNAL]  Set the work vectors.

";

%feature("docstring") casadi::Integrator::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::Integrator::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Integrator::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Integrator::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Integrator::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Integrator::getDerivativeOptions "

[INTERNAL]  Set solver specific options to generated augmented integrators.

";

%feature("docstring") casadi::Integrator::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::Integrator::class_name "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::Integrator::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Integrator::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::Integrator::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::Integrator::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Integrator::sp_jac_rdae "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (backward
problem)

";

%feature("docstring") casadi::Integrator::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Integrator::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::Integrator::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::Integrator::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Integrator::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Integrator::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Integrator::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Integrator::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::Integrator::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Integrator::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::Integrator::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::Integrator::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::Integrator::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Integrator::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::Integrator::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::Integrator::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Integrator::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Integrator::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::Integrator::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::Integrator::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::Integrator::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Integrator::algebraic_state_output "

[INTERNAL] ";

%feature("docstring") casadi::Integrator::algebraic_state_init "

[INTERNAL] ";

%feature("docstring") casadi::Integrator::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::Integrator::aug_adj "

[INTERNAL]  Generate a augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring") casadi::Integrator::create_advanced "

[INTERNAL]  Helper for a more powerful 'integrator' factory

";

%feature("docstring") casadi::Integrator::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Integrator::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Integrator::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Integrator::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::Integrator::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::Integrator::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Integrator::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Integrator::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::Integrator::~Integrator "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Integrator::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::Integrator::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::Integrator::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Integrator::print_stats "

[INTERNAL]  Print solver statistics.

";

%feature("docstring") casadi::Integrator::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Integrator::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::Integrator::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::Integrator::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Integrator::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Integrator::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::Integrator::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Integrator::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Integrator::has_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Integrator::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Integrator::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::Integrator::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Integrator::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Integrator::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::Integrator::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::Integrator::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::Integrator::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Integrator::finalize "

[INTERNAL]  Finalize initialization.

";

%feature("docstring") casadi::Integrator::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Integrator::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::Integrator::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::Integrator::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::Integrator::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Integrator::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::Integrator::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Integrator::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Integrator::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Integrator::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::Integrator::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::Integrator::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::Integrator::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::Integrator::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::Integrator::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::Integrator::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::Integrator::get_function "

[INTERNAL]

>  const Function& casadi::OracleFunction::get_function(const std::string &name) const override
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Integrator::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::Integrator::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Integrator::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Integrator::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::Integrator::get_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Integrator::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Integrator::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::Integrator::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Integrator::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Integrator::reset "

[INTERNAL]  Reset the forward problem.

";

%feature("docstring") casadi::Integrator::expand "

[INTERNAL] ";

%feature("docstring") casadi::Integrator::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::Integrator::get_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Integrator::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::Integrator::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::Integrator::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::Integrator::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::Integrator::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Integrator::rp "

[INTERNAL] ";

%feature("docstring") casadi::Integrator::rq "

[INTERNAL] ";

%feature("docstring") casadi::Integrator::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::Integrator::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Integrator::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::Integrator::rz "

[INTERNAL] ";

%feature("docstring") casadi::Integrator::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::Integrator::rx "

[INTERNAL] ";

%feature("docstring") casadi::Integrator::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::Integrator::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::Integrator::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Integrator::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::Integrator::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::Integrator::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";


// File: classcasadi_1_1Interpolant.xml
%feature("docstring") casadi::Interpolant::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Interpolant::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Interpolant::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::Interpolant::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Interpolant::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::Interpolant::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Interpolant::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Interpolant::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Interpolant::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::Interpolant::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::Interpolant::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::Interpolant::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Interpolant::get_function "

[INTERNAL] ";

%feature("docstring") casadi::Interpolant::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Interpolant::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Interpolant::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Interpolant::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::Interpolant::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Interpolant::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::Interpolant::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::Interpolant::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::Interpolant::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::Interpolant::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::Interpolant::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::Interpolant::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::Interpolant::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Interpolant::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Interpolant::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Interpolant::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::Interpolant::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::Interpolant::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Interpolant::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Interpolant::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Interpolant::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::Interpolant::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::Interpolant::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::Interpolant::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::Interpolant::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::Interpolant::set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring") casadi::Interpolant::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Interpolant::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::Interpolant::finalize "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring") casadi::Interpolant::get_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Interpolant::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::Interpolant::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Interpolant::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Interpolant::coeff_size "

[INTERNAL]  Size of the flattened coefficients vector.

";

%feature("docstring") casadi::Interpolant::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::Interpolant::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::Interpolant::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::Interpolant::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Interpolant::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Interpolant::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Interpolant::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Interpolant::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::Interpolant::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Interpolant::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Interpolant::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::Interpolant::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::Interpolant::get_forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::Interpolant::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Interpolant::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::Interpolant::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::Interpolant::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Interpolant::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Interpolant::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Interpolant::has_parametric_grid "

[INTERNAL]  Is parametric?

";

%feature("docstring") casadi::Interpolant::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Interpolant::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::Interpolant::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Interpolant::factory "

[INTERNAL] ";

%feature("docstring") casadi::Interpolant::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::Interpolant::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Interpolant::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::Interpolant::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::Interpolant::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::Interpolant::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::Interpolant::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::Interpolant::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::Interpolant::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::Interpolant::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::Interpolant::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::Interpolant::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::Interpolant::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::Interpolant::has_function "

[INTERNAL] ";

%feature("docstring") casadi::Interpolant::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Interpolant::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::Interpolant::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::Interpolant::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::Interpolant::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Interpolant::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::Interpolant::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::Interpolant::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Interpolant::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Interpolant::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Interpolant::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::Interpolant::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Interpolant::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::Interpolant::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Interpolant::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::Interpolant::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Interpolant::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Interpolant::has_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Interpolant::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::Interpolant::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::Interpolant::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::Interpolant::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Interpolant::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Interpolant::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::Interpolant::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Interpolant::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Interpolant::has_forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::Interpolant::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Interpolant::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Interpolant::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::Interpolant::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Interpolant::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::Interpolant::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::Interpolant::arg_values "

[INTERNAL] ";

%feature("docstring") casadi::Interpolant::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Interpolant::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::Interpolant::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Interpolant::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::Interpolant::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::Interpolant::eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Interpolant::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::Interpolant::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::Interpolant::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::Interpolant::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Interpolant "

Internal class

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| batch_x          | OT_INT          | Evaluate a batch | casadi::Interpol |
|                  |                 | of different     | ant              |
|                  |                 | inputs at once   |                  |
|                  |                 | (default 1).     |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| inline           | OT_BOOL         | Implement the    | casadi::Interpol |
|                  |                 | lookup table in  | ant              |
|                  |                 | MX primitives.   |                  |
|                  |                 | Useful when you  |                  |
|                  |                 | need derivatives |                  |
|                  |                 | with respect to  |                  |
|                  |                 | grid and/or      |                  |
|                  |                 | coefficients.    |                  |
|                  |                 | Such derivatives |                  |
|                  |                 | are              |                  |
|                  |                 | fundamentally    |                  |
|                  |                 | dense, so use    |                  |
|                  |                 | with caution.    |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| lookup_mode      | OT_STRINGVECTOR | Specifies, for   | casadi::Interpol |
|                  |                 | each grid        | ant              |
|                  |                 | dimenion, the    |                  |
|                  |                 | lookup algorithm |                  |
|                  |                 | used to find the |                  |
|                  |                 | correct index.   |                  |
|                  |                 | 'linear' uses a  |                  |
|                  |                 | for-loop +       |                  |
|                  |                 | break; (default  |                  |
|                  |                 | when             |                  |
|                  |                 | #knots<=100),    |                  |
|                  |                 | 'exact' uses     |                  |
|                  |                 | floored division |                  |
|                  |                 | (only for        |                  |
|                  |                 | uniform grids),  |                  |
|                  |                 | 'binary' uses a  |                  |
|                  |                 | binary search.   |                  |
|                  |                 | (default when    |                  |
|                  |                 | #knots>100).     |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: interpolant_impl.hpp ";

%feature("docstring") casadi::Interpolant::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Interpolant::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::Interpolant::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Interpolant::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::Interpolant::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::Interpolant::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Interpolant::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::Interpolant::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Interpolant::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Interpolant::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::Interpolant::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Interpolant::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::Interpolant::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::Interpolant::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Interpolant::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::Interpolant::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Interpolant::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Interpolant::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::Interpolant::Interpolant "

[INTERNAL]  Constructor.

";

%feature("docstring") casadi::Interpolant::arg_grid "

[INTERNAL] ";

%feature("docstring") casadi::Interpolant::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::Interpolant::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Interpolant::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Interpolant::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::Interpolant::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::Interpolant::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::Interpolant::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::Interpolant::~Interpolant "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Interpolant::codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::Interpolant::class_name "

[INTERNAL]  Get type name.

";

%feature("docstring") casadi::Interpolant::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Interpolant::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::Interpolant::has_parametric_values "

[INTERNAL]  Is parametric?

";

%feature("docstring") casadi::Interpolant::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::Interpolant::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Interpolant::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::Interpolant::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Interpolant::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::Interpolant::jit_dependencies "

[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::Interpolant::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::Interpolant::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::Interpolant::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Interpolant::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::Interpolant::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Interpolant::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::Interpolant::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::Interpolant::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::Interpolant::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Interpolant::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Interpolant::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::Interpolant::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Interpolant::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::Interpolant::generate_dependencies "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Interpolant::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Interpolant::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Interpolant::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::Interpolant::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Interpolant::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::Interpolant::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Interpolant::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::Interpolant::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::Interpolant::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::Interpolant::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Interpolant::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Interpolant::size2_out "

[INTERNAL]  Input/output dimensions.

";


// File: classcasadi_1_1InterruptHandler.xml
%feature("docstring") casadi::InterruptHandler "

[INTERNAL]  Takes care of user interrupts (Ctrl+C)

This is an internal class.

Joris Gillis

C++ includes: casadi_interrupt.hpp ";


// File: classcasadi_1_1Inverse.xml


// File: classcasadi_1_1IOInstruction.xml


// File: classcasadi_1_1IpoptUserClass.xml
%feature("docstring") casadi::IpoptUserClass::get_starting_point "

[INTERNAL]  Method to return the starting point for the algorithm

";

%feature("docstring") casadi::IpoptUserClass::finalize_solution "

[INTERNAL]  This method is called when the algorithm is complete so the TNLP
can store/write the solution

";

%feature("docstring") casadi::IpoptUserClass "

[INTERNAL] C++ includes: ipopt_nlp.hpp ";

%feature("docstring")
casadi::IpoptUserClass::get_list_of_nonlinear_variables "

[INTERNAL]  Specify which variables that appear in the Hessian

";

%feature("docstring") casadi::IpoptUserClass::eval_grad_f "

[INTERNAL]  Method to return the gradient of the objective

";

%feature("docstring") casadi::IpoptUserClass::get_var_con_metadata "

[INTERNAL]  Allows setting information about variables and constraints

";

%feature("docstring") casadi::IpoptUserClass::~IpoptUserClass "

[INTERNAL] ";

%feature("docstring") casadi::IpoptUserClass::eval_g "

[INTERNAL]  Method to return the constraint residuals

";

%feature("docstring") casadi::IpoptUserClass::get_nlp_info "

[INTERNAL]  Method to return some info about the nlp

";

%feature("docstring") casadi::IpoptUserClass::eval_f "

[INTERNAL]  Method to return the objective value

";

%feature("docstring")
casadi::IpoptUserClass::get_number_of_nonlinear_variables "

[INTERNAL]  Specify the number of variables that appear in the Hessian

";

%feature("docstring") casadi::IpoptUserClass::eval_jac_g "

[INTERNAL]  Method to return: 1) The structure of the Jacobian (if
\"values\" is NULL) 2) The values of the Jacobian (if \"values\" is not
NULL)

";

%feature("docstring") casadi::IpoptUserClass::finalize_metadata "

[INTERNAL]  Retrieve information about variables and constraints

";

%feature("docstring") casadi::IpoptUserClass::get_bounds_info "

[INTERNAL]  Method to return the bounds for my problem

";

%feature("docstring") casadi::IpoptUserClass::eval_h "

[INTERNAL]  Method to return: 1) The structure of the hessian of the
Lagrangian (if \"values\" is NULL) 2) The values of the hessian of the
Lagrangian (if \"values\" is not NULL)

";

%feature("docstring") casadi::IpoptUserClass::intermediate_callback "

[INTERNAL]  This method is called at every iteration

";

%feature("docstring") casadi::IpoptUserClass::IpoptUserClass "

[INTERNAL] ";


// File: classcasadi_1_1Ipqp.xml
%feature("docstring") casadi::Ipqp::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Ipqp::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::Ipqp::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::Ipqp::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Ipqp::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::Ipqp::get_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Ipqp::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Ipqp::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::Ipqp::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::Ipqp::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::Ipqp::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Ipqp::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Ipqp::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Ipqp::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::Ipqp::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Ipqp::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Ipqp::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Ipqp::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Ipqp::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::Ipqp::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Ipqp::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::Ipqp::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::Ipqp::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Ipqp::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Ipqp::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Ipqp::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Ipqp::get_forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::Ipqp::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Ipqp::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::Ipqp::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::Ipqp::class_name "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::Ipqp::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::Ipqp::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Ipqp::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::Ipqp::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::Ipqp::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::Ipqp::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::Ipqp::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::Ipqp::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Ipqp::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Ipqp::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Ipqp::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Ipqp::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::Ipqp::has_forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::Ipqp::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Ipqp::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Ipqp::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::Ipqp::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Ipqp::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::Ipqp::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::Ipqp::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::Ipqp::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Ipqp::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Ipqp::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Ipqp::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Ipqp::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Ipqp::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Ipqp::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::Ipqp::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::Ipqp::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::Ipqp::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Ipqp::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::Ipqp::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::Ipqp::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Ipqp::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Ipqp::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::Ipqp::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::Ipqp::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Ipqp::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Ipqp::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Ipqp::get_function "

[INTERNAL] ";

%feature("docstring") casadi::Ipqp::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::Ipqp::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::Ipqp::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::Ipqp::generateNativeCode "

[INTERNAL]  Generate native code in the interfaced language for debugging

";

%feature("docstring") casadi::Ipqp::has_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Ipqp::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::Ipqp::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::Ipqp::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::Ipqp::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::Ipqp::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::Ipqp::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Ipqp::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Ipqp::psd_support "

[INTERNAL]  Can psd constraints be treated.

";

%feature("docstring") casadi::Ipqp::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::Ipqp::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Ipqp::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::Ipqp::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::Ipqp::codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::Ipqp::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Ipqp "

'ipqp' plugin for Conic

Solves QPs using a Mehrotra predictor-corrector interior point method

>List of available options

+-----------------------+-----------+--------------------------------------+
|          Id           |   Type    |             Description              |
+=======================+===========+======================================+
| constr_viol_tol       | OT_DOUBLE | Constraint violation tolerance       |
|                       |           | [1e-8].                              |
+-----------------------+-----------+--------------------------------------+
| dual_inf_tol          | OT_DOUBLE | Dual feasibility violation tolerance |
|                       |           | [1e-8]                               |
+-----------------------+-----------+--------------------------------------+
| linear_solver         | OT_STRING | A custom linear solver creator       |
|                       |           | function [default: ldl]              |
+-----------------------+-----------+--------------------------------------+
| linear_solver_options | OT_DICT   | Options to be passed to the linear   |
|                       |           | solver                               |
+-----------------------+-----------+--------------------------------------+
| max_iter              | OT_INT    | Maximum number of iterations [1000]. |
+-----------------------+-----------+--------------------------------------+
| min_lam               | OT_DOUBLE | Smallest multiplier treated as       |
|                       |           | inactive for the initial active set  |
|                       |           | [0].                                 |
+-----------------------+-----------+--------------------------------------+
| print_header          | OT_BOOL   | Print header [true].                 |
+-----------------------+-----------+--------------------------------------+
| print_info            | OT_BOOL   | Print info [true].                   |
+-----------------------+-----------+--------------------------------------+
| print_iter            | OT_BOOL   | Print iterations [true].             |
+-----------------------+-----------+--------------------------------------+

Joel Andersson

>List of available options

+---------------------+---------------+--------------------+---------------+
|         Id          |     Type      |    Description     |    Used in    |
+=====================+===============+====================+===============+
| constr_viol_tol     | OT_DOUBLE     | Constraint         | casadi::Ipqp  |
|                     |               | violation          |               |
|                     |               | tolerance [1e-8].  |               |
+---------------------+---------------+--------------------+---------------+
| discrete            | OT_BOOLVECTOR | Indicates which of | casadi::Conic |
|                     |               | the variables are  |               |
|                     |               | discrete, i.e.     |               |
|                     |               | integer-valued     |               |
+---------------------+---------------+--------------------+---------------+
| dual_inf_tol        | OT_DOUBLE     | Dual feasibility   | casadi::Ipqp  |
|                     |               | violation          |               |
|                     |               | tolerance [1e-8]   |               |
+---------------------+---------------+--------------------+---------------+
| error_on_fail       | OT_BOOL       | When the numerical | casadi::Conic |
|                     |               | process returns    |               |
|                     |               | unsuccessfully,    |               |
|                     |               | raise an error     |               |
|                     |               | (default false).   |               |
+---------------------+---------------+--------------------+---------------+
| linear_solver       | OT_STRING     | A custom linear    | casadi::Ipqp  |
|                     |               | solver creator     |               |
|                     |               | function [default: |               |
|                     |               | ldl]               |               |
+---------------------+---------------+--------------------+---------------+
| linear_solver_optio | OT_DICT       | Options to be      | casadi::Ipqp  |
| ns                  |               | passed to the      |               |
|                     |               | linear solver      |               |
+---------------------+---------------+--------------------+---------------+
| max_iter            | OT_INT        | Maximum number of  | casadi::Ipqp  |
|                     |               | iterations [1000]. |               |
+---------------------+---------------+--------------------+---------------+
| min_lam             | OT_DOUBLE     | Smallest           | casadi::Ipqp  |
|                     |               | multiplier treated |               |
|                     |               | as inactive for    |               |
|                     |               | the initial active |               |
|                     |               | set [0].           |               |
+---------------------+---------------+--------------------+---------------+
| print_header        | OT_BOOL       | Print header       | casadi::Ipqp  |
|                     |               | [true].            |               |
+---------------------+---------------+--------------------+---------------+
| print_info          | OT_BOOL       | Print info [true]. | casadi::Ipqp  |
+---------------------+---------------+--------------------+---------------+
| print_iter          | OT_BOOL       | Print iterations   | casadi::Ipqp  |
|                     |               | [true].            |               |
+---------------------+---------------+--------------------+---------------+
| print_problem       | OT_BOOL       | Print a numeric    | casadi::Conic |
|                     |               | description of the |               |
|                     |               | problem            |               |
+---------------------+---------------+--------------------+---------------+

Diagrams
--------



C++ includes: ipqp.hpp ";

%feature("docstring") casadi::Ipqp::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::Ipqp::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::Ipqp::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::Ipqp::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::Ipqp::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Ipqp::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::Ipqp::generate_dependencies "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Ipqp::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Ipqp::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Ipqp::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::Ipqp::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::Ipqp::integer_support "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring") casadi::Ipqp::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::Ipqp::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Ipqp::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::Ipqp::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::Ipqp::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Ipqp::check_inputs "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Ipqp::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Ipqp::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::Ipqp::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::Ipqp::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::Ipqp::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Ipqp::Ipqp "

[INTERNAL]  Create a new Solver.

";

%feature("docstring") casadi::Ipqp::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::Ipqp::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::Ipqp::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::Ipqp::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::Ipqp::solve "

[INTERNAL]   Solve the QP.

";

%feature("docstring") casadi::Ipqp::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Ipqp::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Ipqp::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::Ipqp::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Ipqp::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::Ipqp::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::Ipqp::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::Ipqp::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::Ipqp::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Ipqp::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::Ipqp::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::Ipqp::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Ipqp::set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring") casadi::Ipqp::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Ipqp::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::Ipqp::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Ipqp::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::Ipqp::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::Ipqp::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Ipqp::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Ipqp::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::Ipqp::~Ipqp "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Ipqp::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Ipqp::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::Ipqp::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Ipqp::has_function "

[INTERNAL] ";

%feature("docstring") casadi::Ipqp::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::Ipqp::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Ipqp::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Ipqp::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::Ipqp::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Ipqp::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Ipqp::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Ipqp::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::Ipqp::factory "

[INTERNAL] ";

%feature("docstring") casadi::Ipqp::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Ipqp::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::Ipqp::finalize "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring") casadi::Ipqp::jit_dependencies "

[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::Ipqp::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Ipqp::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::Ipqp::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::Ipqp::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::Ipqp::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::Ipqp::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::Ipqp::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Ipqp::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::Ipqp::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::Ipqp::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::Ipqp::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::Ipqp::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Ipqp::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::Ipqp::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Ipqp::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Ipqp::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Ipqp::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Ipqp::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::Ipqp::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::Ipqp::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Ipqp::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::Ipqp::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::Ipqp::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Ipqp::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Ipqp::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Ipqp::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::Ipqp::eval "

[INTERNAL]   Solve the QP.

";

%feature("docstring") casadi::Ipqp::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::Ipqp::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Ipqp::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::Ipqp::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Ipqp::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::Ipqp::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::Ipqp::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::Ipqp::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::Ipqp::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";


// File: classcasadi_1_1JitFunction.xml
%feature("docstring") casadi::JitFunction::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::JitFunction::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::JitFunction::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::JitFunction::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::JitFunction::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::JitFunction::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::JitFunction::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::JitFunction::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::JitFunction::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::JitFunction::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::JitFunction::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::JitFunction::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::JitFunction::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::JitFunction::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::JitFunction::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::JitFunction::has_function "

[INTERNAL] ";

%feature("docstring") casadi::JitFunction::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::JitFunction::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::JitFunction::get_function "

[INTERNAL] ";

%feature("docstring") casadi::JitFunction::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::JitFunction::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::JitFunction::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::JitFunction::eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::JitFunction::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::JitFunction::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::JitFunction::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::JitFunction::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::JitFunction::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::JitFunction "

[INTERNAL]

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| buffered         | OT_BOOL         | Buffer the       | casadi::JitFunct |
|                  |                 | calls, user does | ion              |
|                  |                 | not need to      |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| hess             | OT_STRING       | Function body    | casadi::JitFunct |
|                  |                 | for Hessian      | ion              |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac              | OT_STRING       | Function body    | casadi::JitFunct |
|                  |                 | for Jacobian     | ion              |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: jit_function.hpp ";

%feature("docstring") casadi::JitFunction::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::JitFunction::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::JitFunction::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::JitFunction::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::JitFunction::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::JitFunction::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::JitFunction::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::JitFunction::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::JitFunction::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::JitFunction::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::JitFunction::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::JitFunction::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::JitFunction::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::JitFunction::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::JitFunction::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::JitFunction::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::JitFunction::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::JitFunction::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::JitFunction::jit_dependencies "

[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::JitFunction::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::JitFunction::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::JitFunction::JitFunction "

[INTERNAL]  Constructor.

";

%feature("docstring") casadi::JitFunction::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::JitFunction::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::JitFunction::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::JitFunction::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::JitFunction::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::JitFunction::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::JitFunction::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::JitFunction::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::JitFunction::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::JitFunction::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::JitFunction::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::JitFunction::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::JitFunction::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::JitFunction::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::JitFunction::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::JitFunction::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::JitFunction::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::JitFunction::codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::JitFunction::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::JitFunction::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::JitFunction::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::JitFunction::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::JitFunction::generate_dependencies "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::JitFunction::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::JitFunction::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::JitFunction::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::JitFunction::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::JitFunction::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::JitFunction::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::JitFunction::has_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::JitFunction::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::JitFunction::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::JitFunction::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::JitFunction::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::JitFunction::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::JitFunction::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::JitFunction::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::JitFunction::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::JitFunction::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::JitFunction::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::JitFunction::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::JitFunction::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::JitFunction::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::JitFunction::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::JitFunction::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::JitFunction::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::JitFunction::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::JitFunction::get_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::JitFunction::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::JitFunction::factory "

[INTERNAL] ";

%feature("docstring") casadi::JitFunction::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::JitFunction::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::JitFunction::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::JitFunction::has_jacobian "

[INTERNAL]  Jacobian of all outputs with respect to all inputs.

";

%feature("docstring") casadi::JitFunction::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::JitFunction::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::JitFunction::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::JitFunction::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::JitFunction::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::JitFunction::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::JitFunction::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::JitFunction::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::JitFunction::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::JitFunction::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::JitFunction::class_name "

[INTERNAL]  Get type name.

";

%feature("docstring") casadi::JitFunction::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::JitFunction::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::JitFunction::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::JitFunction::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::JitFunction::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::JitFunction::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::JitFunction::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::JitFunction::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::JitFunction::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::JitFunction::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::JitFunction::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::JitFunction::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::JitFunction::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::JitFunction::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::JitFunction::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::JitFunction::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::JitFunction::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::JitFunction::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::JitFunction::has_forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::JitFunction::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::JitFunction::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::JitFunction::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::JitFunction::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::JitFunction::get_forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::JitFunction::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::JitFunction::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::JitFunction::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::JitFunction::get_sparsity_out "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring") casadi::JitFunction::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::JitFunction::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::JitFunction::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::JitFunction::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::JitFunction::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::JitFunction::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::JitFunction::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::JitFunction::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::JitFunction::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::JitFunction::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::JitFunction::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::JitFunction::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::JitFunction::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::JitFunction::~JitFunction "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::JitFunction::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::JitFunction::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::JitFunction::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::JitFunction::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::JitFunction::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::JitFunction::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::JitFunction::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::JitFunction::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::JitFunction::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::JitFunction::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::JitFunction::set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring") casadi::JitFunction::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::JitFunction::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::JitFunction::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::JitFunction::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::JitFunction::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::JitFunction::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::JitFunction::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::JitFunction::get_sparsity_in "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring") casadi::JitFunction::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::JitFunction::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::JitFunction::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::JitFunction::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::JitFunction::get_jacobian "

[INTERNAL]  Jacobian of all outputs with respect to all inputs.

";

%feature("docstring") casadi::JitFunction::finalize "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring") casadi::JitFunction::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::JitFunction::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::JitFunction::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::JitFunction::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::JitFunction::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::JitFunction::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";


// File: classcasadi_1_1KeyboardInterruptException.xml
%feature("docstring") casadi::KeyboardInterruptException::what "

throw () Display error.

";

%feature("docstring")
casadi::KeyboardInterruptException::~KeyboardInterruptException "

throw () Destructor.

";

%feature("docstring")
casadi::KeyboardInterruptException::KeyboardInterruptException "

Default constructor.

";

%feature("docstring") casadi::KeyboardInterruptException "

C++ includes: exception.hpp ";


// File: classcasadi_1_1LapackLu.xml
%feature("docstring") casadi::LapackLu::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::LapackLu::nfact "

[INTERNAL]  Numeric factorization.

";

%feature("docstring") casadi::LapackLu::nrow "

[INTERNAL]  Get sparsity pattern.

";

%feature("docstring") casadi::LapackLu::solve "

[INTERNAL] ";

%feature("docstring") casadi::LapackLu::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::LapackLu::init "

[INTERNAL]  Initialize the solver.

";

%feature("docstring") casadi::LapackLu::~LapackLu "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::LapackLu::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::LapackLu::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::LapackLu::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::LapackLu::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::LapackLu::sfact "

[INTERNAL] ";

%feature("docstring") casadi::LapackLu::generate "

[INTERNAL]  Generate C code.

";

%feature("docstring") casadi::LapackLu::linsol_eval_sx "

[INTERNAL]  Evaluate SX, possibly transposed.

";

%feature("docstring") casadi::LapackLu::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::LapackLu::ncol "

[INTERNAL] ";

%feature("docstring") casadi::LapackLu::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::LapackLu::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::LapackLu::LapackLu "

[INTERNAL] ";

%feature("docstring") casadi::LapackLu::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::LapackLu::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::LapackLu::finalize "

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring") casadi::LapackLu::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::LapackLu::rank "

[INTERNAL]   Matrix rank.

";

%feature("docstring") casadi::LapackLu::colind "

[INTERNAL] ";

%feature("docstring") casadi::LapackLu::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::LapackLu::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::LapackLu::nnz "

[INTERNAL] ";

%feature("docstring") casadi::LapackLu::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::LapackLu::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::LapackLu::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::LapackLu "

'lapacklu' plugin for Linsol

This class solves the linear system A.x=b by making an LU factorization of
A: A = L.U, with L lower and U upper triangular

>List of available options

+-----------------------------+---------+----------------------------------+
|             Id              |  Type   |           Description            |
+=============================+=========+==================================+
| allow_equilibration_failure | OT_BOOL | Non-fatal error when             |
|                             |         | equilibration fails              |
+-----------------------------+---------+----------------------------------+
| equilibration               | OT_BOOL | Equilibrate the matrix           |
+-----------------------------+---------+----------------------------------+

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| allow_equilibrat | OT_BOOL         | Non-fatal error  | casadi::LapackLu |
| ion_failure      |                 | when             |                  |
|                  |                 | equilibration    |                  |
|                  |                 | fails            |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| equilibration    | OT_BOOL         | Equilibrate the  | casadi::LapackLu |
|                  |                 | matrix           |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: lapack_lu.hpp ";

%feature("docstring") casadi::LapackLu::row "

[INTERNAL] ";

%feature("docstring") casadi::LapackLu::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::LapackLu::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::LapackLu::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::LapackLu::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::LapackLu::neig "

[INTERNAL]  Number of negative eigenvalues.

";

%feature("docstring") casadi::LapackLu::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::LapackLu::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";


// File: classcasadi_1_1LapackQr.xml
%feature("docstring") casadi::LapackQr::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::LapackQr::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::LapackQr::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::LapackQr::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::LapackQr::sfact "

[INTERNAL] ";

%feature("docstring") casadi::LapackQr::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::LapackQr::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::LapackQr::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::LapackQr::ncol "

[INTERNAL] ";

%feature("docstring") casadi::LapackQr::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::LapackQr::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::LapackQr::finalize "

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring") casadi::LapackQr::solve_batch "

[INTERNAL] ";

%feature("docstring") casadi::LapackQr::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::LapackQr::rank "

[INTERNAL]   Matrix rank.

";

%feature("docstring") casadi::LapackQr::colind "

[INTERNAL] ";

%feature("docstring") casadi::LapackQr::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::LapackQr::nnz "

[INTERNAL] ";

%feature("docstring") casadi::LapackQr::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::LapackQr::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::LapackQr::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::LapackQr "

'lapackqr' plugin for Linsol

This class solves the linear system A.x=b by making an QR factorization of
A: A = Q.R, with Q orthogonal and R upper triangular

>List of available options

+----------+--------+------------------------------------------------------+
|    Id    |  Type  |                     Description                      |
+==========+========+======================================================+
| max_nrhs | OT_INT | Maximum number of right-hand-sides that get          |
|          |        | processed in a single pass [default:10].             |
+----------+--------+------------------------------------------------------+

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_nrhs         | OT_INT          | Maximum number   | casadi::LapackQr |
|                  |                 | of right-hand-   |                  |
|                  |                 | sides that get   |                  |
|                  |                 | processed in a   |                  |
|                  |                 | single pass      |                  |
|                  |                 | [default:10].    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: lapack_qr.hpp ";

%feature("docstring") casadi::LapackQr::row "

[INTERNAL] ";

%feature("docstring") casadi::LapackQr::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::LapackQr::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::LapackQr::linsol_eval_sx "

[INTERNAL]  Evaluate SX, possibly transposed.

";

%feature("docstring") casadi::LapackQr::neig "

[INTERNAL]  Number of negative eigenvalues.

";

%feature("docstring") casadi::LapackQr::generate "

[INTERNAL]  Generate C code.

";

%feature("docstring") casadi::LapackQr::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::LapackQr::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::LapackQr::LapackQr "

[INTERNAL] ";

%feature("docstring") casadi::LapackQr::class_name "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::LapackQr::nfact "

[INTERNAL]  Numeric factorization.

";

%feature("docstring") casadi::LapackQr::nrow "

[INTERNAL]  Get sparsity pattern.

";

%feature("docstring") casadi::LapackQr::solve "

[INTERNAL] ";

%feature("docstring") casadi::LapackQr::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::LapackQr::~LapackQr "

[INTERNAL] ";

%feature("docstring") casadi::LapackQr::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::LapackQr::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::LapackQr::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::LapackQr::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::LapackQr::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::LapackQr::serialize_body "

[INTERNAL]  Serialize an object without type information.

";


// File: classcasadi_1_1LinearInterpolant.xml
%feature("docstring") casadi::LinearInterpolant::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::LinearInterpolant::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::LinearInterpolant::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::LinearInterpolant::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::LinearInterpolant::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::LinearInterpolant::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::LinearInterpolant::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::LinearInterpolant::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::LinearInterpolant::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::LinearInterpolant::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::LinearInterpolant::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolant::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::LinearInterpolant::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::LinearInterpolant::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::LinearInterpolant::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::LinearInterpolant::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::LinearInterpolant::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::LinearInterpolant::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::LinearInterpolant::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::LinearInterpolant::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::LinearInterpolant::get_jacobian "

[INTERNAL]  Full Jacobian.

";

%feature("docstring") casadi::LinearInterpolant::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::LinearInterpolant::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::LinearInterpolant::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::LinearInterpolant::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::LinearInterpolant::has_jacobian "

[INTERNAL]  Full Jacobian.

";

%feature("docstring") casadi::LinearInterpolant::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolant::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::LinearInterpolant::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::LinearInterpolant::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::LinearInterpolant::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::LinearInterpolant::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::LinearInterpolant::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::LinearInterpolant::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::LinearInterpolant::get_forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::LinearInterpolant::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::LinearInterpolant::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::LinearInterpolant::coeff_size "

[INTERNAL]  Size of the flattened coefficients vector.

";

%feature("docstring") casadi::LinearInterpolant::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::LinearInterpolant::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::LinearInterpolant::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::LinearInterpolant::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::LinearInterpolant::arg_grid "

[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolant::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolant::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::LinearInterpolant::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::LinearInterpolant::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::LinearInterpolant::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::LinearInterpolant::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::LinearInterpolant::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::LinearInterpolant::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::LinearInterpolant::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::LinearInterpolant::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::LinearInterpolant::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::LinearInterpolant::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolant::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::LinearInterpolant::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::LinearInterpolant::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::LinearInterpolant::arg_values "

[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolant::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::LinearInterpolant::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::LinearInterpolant::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::LinearInterpolant::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::LinearInterpolant::get_function "

[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolant::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::LinearInterpolant::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::LinearInterpolant::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::LinearInterpolant::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::LinearInterpolant::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::LinearInterpolant::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::LinearInterpolant::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::LinearInterpolant::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolant::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::LinearInterpolant::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::LinearInterpolant::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::LinearInterpolant::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::LinearInterpolant::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::LinearInterpolant::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::LinearInterpolant::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::LinearInterpolant::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::LinearInterpolant::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::LinearInterpolant::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolant::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::LinearInterpolant::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::LinearInterpolant::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::LinearInterpolant::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::LinearInterpolant::jit_dependencies "

[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::LinearInterpolant::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::LinearInterpolant::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::LinearInterpolant::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::LinearInterpolant::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::LinearInterpolant::LinearInterpolant "

[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolant::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::LinearInterpolant::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::LinearInterpolant::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::LinearInterpolant::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::LinearInterpolant::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::LinearInterpolant::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::LinearInterpolant::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::LinearInterpolant::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::LinearInterpolant::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::LinearInterpolant::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::LinearInterpolant::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::LinearInterpolant::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::LinearInterpolant::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::LinearInterpolant::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::LinearInterpolant::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::LinearInterpolant::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::LinearInterpolant::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::LinearInterpolant::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::LinearInterpolant::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::LinearInterpolant::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::LinearInterpolant::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::LinearInterpolant::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::LinearInterpolant::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::LinearInterpolant::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::LinearInterpolant::has_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::LinearInterpolant::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::LinearInterpolant::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::LinearInterpolant::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::LinearInterpolant::generate_dependencies "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::LinearInterpolant::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::LinearInterpolant::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolant::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::LinearInterpolant::factory "

[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolant::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::LinearInterpolant::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::LinearInterpolant::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::LinearInterpolant::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::LinearInterpolant::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::LinearInterpolant::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring")
casadi::LinearInterpolant::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::LinearInterpolant::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::LinearInterpolant::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::LinearInterpolant::get_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::LinearInterpolant::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::LinearInterpolant::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::LinearInterpolant "

'linear' plugin for Interpolant Implements a multilinear interpolant: For
1D, the interpolating polynomial will be linear. For 2D, the interpolating
polynomial will be bilinear, etc.

>List of available options

+-------------+-----------------+------------------------------------------+
|     Id      |      Type       |               Description                |
+=============+=================+==========================================+
| lookup_mode | OT_STRINGVECTOR | Sets, for each grid dimenion, the lookup |
|             |                 | algorithm used to find the correct       |
|             |                 | index. 'linear' uses a for-loop + break; |
|             |                 | 'exact' uses floored division (only for  |
|             |                 | uniform grids).                          |
+-------------+-----------------+------------------------------------------+

Joel Andersson

>List of available options

+-------------+-----------------+---------------------+--------------------+
|     Id      |      Type       |     Description     |      Used in       |
+=============+=================+=====================+====================+
| batch_x     | OT_INT          | Evaluate a batch of | casadi::Interpolan |
|             |                 | different inputs at | t                  |
|             |                 | once (default 1).   |                    |
+-------------+-----------------+---------------------+--------------------+
| inline      | OT_BOOL         | Implement the       | casadi::Interpolan |
|             |                 | lookup table in MX  | t                  |
|             |                 | primitives. Useful  |                    |
|             |                 | when you need       |                    |
|             |                 | derivatives with    |                    |
|             |                 | respect to grid     |                    |
|             |                 | and/or              |                    |
|             |                 | coefficients. Such  |                    |
|             |                 | derivatives are     |                    |
|             |                 | fundamentally       |                    |
|             |                 | dense, so use with  |                    |
|             |                 | caution.            |                    |
+-------------+-----------------+---------------------+--------------------+
| lookup_mode | OT_STRINGVECTOR | Sets, for each grid | casadi::LinearInte |
|             |                 | dimenion, the       | rpolant            |
|             |                 | lookup algorithm    |                    |
|             |                 | used to find the    |                    |
|             |                 | correct index.      |                    |
|             |                 | 'linear' uses a     |                    |
|             |                 | for-loop + break;   |                    |
|             |                 | 'exact' uses        |                    |
|             |                 | floored division    |                    |
|             |                 | (only for uniform   |                    |
|             |                 | grids).             |                    |
+-------------+-----------------+---------------------+--------------------+

Diagrams
--------



C++ includes: linear_interpolant.hpp ";

%feature("docstring") casadi::LinearInterpolant::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::LinearInterpolant::has_parametric_values "

[INTERNAL]  Is parametric?

";

%feature("docstring") casadi::LinearInterpolant::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::LinearInterpolant::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::LinearInterpolant::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::LinearInterpolant::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::LinearInterpolant::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolant::has_forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::LinearInterpolant::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::LinearInterpolant::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::LinearInterpolant::finalize "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring") casadi::LinearInterpolant::getJacSparsityHierarchical
"

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::LinearInterpolant::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::LinearInterpolant::class_name "

[INTERNAL]  Get type name.

";

%feature("docstring") casadi::LinearInterpolant::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::LinearInterpolant::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::LinearInterpolant::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::LinearInterpolant::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::LinearInterpolant::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::LinearInterpolant::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::LinearInterpolant::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::LinearInterpolant::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::LinearInterpolant::has_parametric_grid "

[INTERNAL]  Is parametric?

";

%feature("docstring") casadi::LinearInterpolant::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::LinearInterpolant::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolant::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolant::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::LinearInterpolant::eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::LinearInterpolant::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::LinearInterpolant::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::LinearInterpolant::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::LinearInterpolant::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::LinearInterpolant::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::LinearInterpolant::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::LinearInterpolant::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::LinearInterpolant::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::LinearInterpolant::codegen_body "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring") casadi::LinearInterpolant::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::LinearInterpolant::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::LinearInterpolant::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::LinearInterpolant::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::LinearInterpolant::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::LinearInterpolant::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::LinearInterpolant::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::LinearInterpolant::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::LinearInterpolant::~LinearInterpolant "

[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolant::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::LinearInterpolant::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::LinearInterpolant::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::LinearInterpolant::has_function "

[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolant::set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring") casadi::LinearInterpolant::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::LinearInterpolant::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::LinearInterpolant::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::LinearInterpolant::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::LinearInterpolant::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::LinearInterpolant::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";


// File: classcasadi_1_1LinearInterpolantJac.xml
%feature("docstring") casadi::LinearInterpolantJac::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::LinearInterpolantJac::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::LinearInterpolantJac::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolantJac::get_jacobian "

[INTERNAL]  Full Jacobian.

";

%feature("docstring") casadi::LinearInterpolantJac::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::LinearInterpolantJac::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::LinearInterpolantJac::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::LinearInterpolantJac::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::LinearInterpolantJac::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::LinearInterpolantJac::~LinearInterpolantJac "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::LinearInterpolantJac::factory "

[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolantJac::set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring") casadi::LinearInterpolantJac::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::LinearInterpolantJac::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::LinearInterpolantJac::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::LinearInterpolantJac::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::LinearInterpolantJac::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::LinearInterpolantJac::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::LinearInterpolantJac::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::LinearInterpolantJac::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::LinearInterpolantJac::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::LinearInterpolantJac::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::LinearInterpolantJac::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::LinearInterpolantJac::class_name "

[INTERNAL]  Get type name.

";

%feature("docstring") casadi::LinearInterpolantJac::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::LinearInterpolantJac::jit_dependencies "

[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::LinearInterpolantJac::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::LinearInterpolantJac::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::LinearInterpolantJac::has_function "

[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolantJac::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::LinearInterpolantJac::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::LinearInterpolantJac::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::LinearInterpolantJac::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::LinearInterpolantJac::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::LinearInterpolantJac::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::LinearInterpolantJac::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::LinearInterpolantJac::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::LinearInterpolantJac::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolantJac::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::LinearInterpolantJac::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::LinearInterpolantJac::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::LinearInterpolantJac::has_parametric_grid "

[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolantJac::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::LinearInterpolantJac::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::LinearInterpolantJac::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::LinearInterpolantJac::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::LinearInterpolantJac::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::LinearInterpolantJac::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::LinearInterpolantJac::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::LinearInterpolantJac::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::LinearInterpolantJac::eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::LinearInterpolantJac::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolantJac::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::LinearInterpolantJac::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::LinearInterpolantJac::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::LinearInterpolantJac::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::LinearInterpolantJac::codegen_body "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring") casadi::LinearInterpolantJac::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::LinearInterpolantJac::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::LinearInterpolantJac::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::LinearInterpolantJac::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::LinearInterpolantJac::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::LinearInterpolantJac::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::LinearInterpolantJac::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::LinearInterpolantJac::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::LinearInterpolantJac::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::LinearInterpolantJac::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::LinearInterpolantJac::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::LinearInterpolantJac::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::LinearInterpolantJac::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::LinearInterpolantJac::get_sparsity_out "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring") casadi::LinearInterpolantJac::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::LinearInterpolantJac::get_sparsity_in "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring") casadi::LinearInterpolantJac::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::LinearInterpolantJac::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::LinearInterpolantJac::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::LinearInterpolantJac::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::LinearInterpolantJac::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::LinearInterpolantJac::has_parametric_values "

[INTERNAL]  Is parametric?

";

%feature("docstring") casadi::LinearInterpolantJac::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolantJac::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::LinearInterpolantJac::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::LinearInterpolantJac::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolantJac::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::LinearInterpolantJac::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::LinearInterpolantJac::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::LinearInterpolantJac::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::LinearInterpolantJac::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::LinearInterpolantJac::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::LinearInterpolantJac::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::LinearInterpolantJac::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::LinearInterpolantJac::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::LinearInterpolantJac::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::LinearInterpolantJac::get_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::LinearInterpolantJac::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::LinearInterpolantJac::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::LinearInterpolantJac::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::LinearInterpolantJac::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::LinearInterpolantJac::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::LinearInterpolantJac::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::LinearInterpolantJac::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::LinearInterpolantJac::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::LinearInterpolantJac::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::LinearInterpolantJac::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::LinearInterpolantJac::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::LinearInterpolantJac::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::LinearInterpolantJac::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::LinearInterpolantJac::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::LinearInterpolantJac::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::LinearInterpolantJac::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::LinearInterpolantJac::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::LinearInterpolantJac::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::LinearInterpolantJac::get_forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::LinearInterpolantJac::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::LinearInterpolantJac::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::LinearInterpolantJac::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::LinearInterpolantJac::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::LinearInterpolantJac::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::LinearInterpolantJac::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::LinearInterpolantJac::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::LinearInterpolantJac::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring")
casadi::LinearInterpolantJac::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::LinearInterpolantJac::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::LinearInterpolantJac::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::LinearInterpolantJac::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::LinearInterpolantJac::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::LinearInterpolantJac::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::LinearInterpolantJac::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::LinearInterpolantJac::has_jacobian "

[INTERNAL]  Full Jacobian.

";

%feature("docstring") casadi::LinearInterpolantJac::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::LinearInterpolantJac::jacobian_sparsity_filter
"

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::LinearInterpolantJac::serialize_base_function
"

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::LinearInterpolantJac::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::LinearInterpolantJac::has_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::LinearInterpolantJac::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolantJac "

[INTERNAL]  First order derivatives

>List of available options

+-------------+-----------------+---------------------+--------------------+
|     Id      |      Type       |     Description     |      Used in       |
+=============+=================+=====================+====================+
| batch_x     | OT_INT          | Evaluate a batch of | casadi::Interpolan |
|             |                 | different inputs at | t                  |
|             |                 | once (default 1).   |                    |
+-------------+-----------------+---------------------+--------------------+
| inline      | OT_BOOL         | Implement the       | casadi::Interpolan |
|             |                 | lookup table in MX  | t                  |
|             |                 | primitives. Useful  |                    |
|             |                 | when you need       |                    |
|             |                 | derivatives with    |                    |
|             |                 | respect to grid     |                    |
|             |                 | and/or              |                    |
|             |                 | coefficients. Such  |                    |
|             |                 | derivatives are     |                    |
|             |                 | fundamentally       |                    |
|             |                 | dense, so use with  |                    |
|             |                 | caution.            |                    |
+-------------+-----------------+---------------------+--------------------+
| lookup_mode | OT_STRINGVECTOR | Sets, for each grid | casadi::LinearInte |
|             |                 | dimenion, the       | rpolantJac         |
|             |                 | lookup algorithm    |                    |
|             |                 | used to find the    |                    |
|             |                 | correct index.      |                    |
|             |                 | 'linear' uses a     |                    |
|             |                 | for-loop + break;   |                    |
|             |                 | 'exact' uses        |                    |
|             |                 | floored division    |                    |
|             |                 | (only for uniform   |                    |
|             |                 | grids).             |                    |
+-------------+-----------------+---------------------+--------------------+

Diagrams
--------



C++ includes: linear_interpolant.hpp ";

%feature("docstring") casadi::LinearInterpolantJac::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::LinearInterpolantJac::get_function "

[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolantJac::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::LinearInterpolantJac::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::LinearInterpolantJac::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::LinearInterpolantJac::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::LinearInterpolantJac::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::LinearInterpolantJac::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::LinearInterpolantJac::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::LinearInterpolantJac::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::LinearInterpolantJac::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::LinearInterpolantJac::has_forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::LinearInterpolantJac::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::LinearInterpolantJac::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::LinearInterpolantJac::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::LinearInterpolantJac::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::LinearInterpolantJac::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::LinearInterpolantJac::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::LinearInterpolantJac::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring")
casadi::LinearInterpolantJac::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::LinearInterpolantJac::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::LinearInterpolantJac::get_n_out "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::LinearInterpolantJac::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolantJac::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::LinearInterpolantJac::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::LinearInterpolantJac::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::LinearInterpolantJac::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::LinearInterpolantJac::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::LinearInterpolantJac::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::LinearInterpolantJac::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::LinearInterpolantJac::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::LinearInterpolantJac::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::LinearInterpolantJac::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::LinearInterpolantJac::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::LinearInterpolantJac::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::LinearInterpolantJac::finalize "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring") casadi::LinearInterpolantJac::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::LinearInterpolantJac::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::LinearInterpolantJac::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::LinearInterpolantJac::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::LinearInterpolantJac::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::LinearInterpolantJac::generate_dependencies "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::LinearInterpolantJac::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::LinearInterpolantJac::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::LinearInterpolantJac::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::LinearInterpolantJac::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::LinearInterpolantJac::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::LinearInterpolantJac::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::LinearInterpolantJac::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::LinearInterpolantJac::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::LinearInterpolantJac::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::LinearInterpolantJac::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::LinearInterpolantJac::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::LinearInterpolantJac::LinearInterpolantJac "

[INTERNAL]  Deserializing constructor.

>  casadi::LinearInterpolantJac::LinearInterpolantJac(DeserializingStream &s)
------------------------------------------------------------------------
[INTERNAL] 
Deserializing constructor.

";

";

%feature("docstring") casadi::LinearInterpolantJac::self "

[INTERNAL]  Get a public class instance.

";


// File: classcasadi_1_1Linsol.xml
%feature("docstring") casadi::Linsol::neig "

Number of negative eigenvalues Not available for all solvers.

";

%feature("docstring") casadi::Linsol::class_name "

Get class name.

";

%feature("docstring") casadi::Linsol::is_null "

Is a null pointer?

";

%feature("docstring") casadi::Linsol::nfact "

Numeric factorization of the linear system.

";

%feature("docstring") casadi::Linsol::solve "

Solve linear system of equations

";

%feature("docstring") casadi::Linsol::Linsol "

Constructor.

>  casadi::Linsol::Linsol(const std::string &name, const std::string &solver, const Sparsity &sp, const Dict &opts=Dict())
------------------------------------------------------------------------

Constructor.

";

";

%feature("docstring") casadi::Linsol::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::Linsol "

Linear solver Create a solver for linear systems of equations Solves the
linear system A*X = B or A^T*X = B for X with A square and non- singular.

If A is structurally singular, an error will be thrown during init. If A is
numerically singular, the prepare step will fail.

General information
===================



List of plugins
===============



- csparsecholesky

- csparse

- ma27

- lapacklu

- lapackqr

- mumps

- ldl

- qr

- tridiag

- symbolicqr

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Linsol.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

csparsecholesky
---------------



Linsol with CSparseCholesky Interface

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

csparse
-------



Linsol with CSparse Interface

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

ma27
----



Interface to the sparse direct linear solver MA27 Works for symmetric
indefinite systems Partly adopted from qpOASES 3.2 Joel Andersson

--------------------------------------------------------------------------------

lapacklu
--------



This class solves the linear system A.x=b by making an LU factorization of
A: A = L.U, with L lower and U upper triangular

>List of available options

+-----------------------------+---------+----------------------------------+
|             Id              |  Type   |           Description            |
+=============================+=========+==================================+
| allow_equilibration_failure | OT_BOOL | Non-fatal error when             |
|                             |         | equilibration fails              |
+-----------------------------+---------+----------------------------------+
| equilibration               | OT_BOOL | Equilibrate the matrix           |
+-----------------------------+---------+----------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

lapackqr
--------



This class solves the linear system A.x=b by making an QR factorization of
A: A = Q.R, with Q orthogonal and R upper triangular

>List of available options

+----------+--------+------------------------------------------------------+
|    Id    |  Type  |                     Description                      |
+==========+========+======================================================+
| max_nrhs | OT_INT | Maximum number of right-hand-sides that get          |
|          |        | processed in a single pass [default:10].             |
+----------+--------+------------------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

mumps
-----



Interface to the sparse direct linear solver MUMPS Works for symmetric
indefinite systems Joel Andersson

>List of available options

+-----------+---------+-------------------+
|    Id     |  Type   |    Description    |
+===========+=========+===================+
| posdef    | OT_BOOL | Positive definite |
+-----------+---------+-------------------+
| symmetric | OT_BOOL | Symmetric matrix  |
+-----------+---------+-------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

ldl
---



Linear solver using sparse direct LDL factorization

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

qr --



Linear solver using sparse direct QR factorization

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

tridiag
-------



Linear solver for tridiagonal matrices

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

symbolicqr
----------



Linear solver for sparse least-squares problems Inspired
fromhttps://github.com/scipy/scipy/blob/v0.14.0/scipy/sparse/linalg/isolve/lsqr.py#L96

Linsol based on QR factorization with sparsity pattern based reordering
without partial pivoting

>List of available options

+-------+---------+----------------------------------------------------+
|  Id   |  Type   |                    Description                     |
+=======+=========+====================================================+
| fopts | OT_DICT | Options to be passed to generated function objects |
+-------+---------+----------------------------------------------------+

--------------------------------------------------------------------------------



Joel Andersson

C++ includes: linsol.hpp ";

%feature("docstring") casadi::Linsol::sfact "

Symbolic factorization of the linear system, e.g. selecting pivots.

";

%feature("docstring") casadi::Linsol::rank "

Matrix rank Not available for all solvers.

";

%feature("docstring") casadi::Linsol::disp "

Print a description of the object.

";

%feature("docstring") casadi::Linsol::get_str "

Get string representation.

";

%feature("docstring") casadi::Linsol::stats "

Get all statistics obtained at the end of the last evaluate call.

";

%feature("docstring") casadi::Linsol::plugin_name "

Query plugin name.

";

%feature("docstring") casadi::Linsol::print_ptr "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring") casadi::Linsol::sparsity "

Get linear system sparsity.

";


// File: classcasadi_1_1LinsolLdl.xml
%feature("docstring") casadi::LinsolLdl::nnz "

[INTERNAL] ";

%feature("docstring") casadi::LinsolLdl::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::LinsolLdl::ncol "

[INTERNAL] ";

%feature("docstring") casadi::LinsolLdl::row "

[INTERNAL] ";

%feature("docstring") casadi::LinsolLdl::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::LinsolLdl::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::LinsolLdl::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::LinsolLdl::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::LinsolLdl::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::LinsolLdl::neig "

[INTERNAL]  Number of negative eigenvalues.

";

%feature("docstring") casadi::LinsolLdl::rank "

[INTERNAL]   Matrix rank.

";

%feature("docstring") casadi::LinsolLdl::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::LinsolLdl::class_name "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::LinsolLdl::~LinsolLdl "

[INTERNAL] ";

%feature("docstring") casadi::LinsolLdl::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::LinsolLdl::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::LinsolLdl::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::LinsolLdl::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::LinsolLdl::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::LinsolLdl::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::LinsolLdl::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::LinsolLdl::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::LinsolLdl::LinsolLdl "

[INTERNAL] ";

%feature("docstring") casadi::LinsolLdl::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::LinsolLdl "

'ldl' plugin for LinsolInternal

>List of available options

+-------------+---------+-----------------------------------------------+
|     Id      |  Type   |                  Description                  |
+=============+=========+===============================================+
| incomplete  | OT_BOOL | Incomplete factorization, without any fill-in |
+-------------+---------+-----------------------------------------------+
| preordering | OT_BOOL | Approximate minimal degree (AMD) preordering  |
+-------------+---------+-----------------------------------------------+

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::ProtoFun |
|                  |                 | for derivative   | ction            |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::ProtoFun |
|                  |                 | for sparsity     | ction            |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::ProtoFun |
|                  |                 |                  | ction            |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::ProtoFun |
|                  |                 | compiler plugin  | ction            |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::ProtoFun |
|                  |                 | CasADi's AD. Use | ction            |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::ProtoFun |
|                  |                 | a derivative of  | ction            |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::ProtoFun |
|                  |                 | file upon first  | ction            |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::ProtoFun |
|                  |                 | dump             | ction            |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::ProtoFun |
|                  |                 | format to dump   | ction            |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::ProtoFun |
|                  |                 | values of inputs | ction            |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::ProtoFun |
|                  |                 | values of        | ction            |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::ProtoFun |
|                  |                 | derivative       | ction            |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::ProtoFun |
|                  |                 | derivative       | ction            |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::ProtoFun |
|                  |                 | derivative       | ction            |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::ProtoFun |
|                  |                 | derivative       | ction            |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::ProtoFun |
|                  |                 | finite           | ction            |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::ProtoFun |
|                  |                 | passed to the    | ction            |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::ProtoFun |
|                  |                 | passed to a      | ction            |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::ProtoFun |
|                  |                 | option           | ction            |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| incomplete       | OT_BOOL         | Incomplete       | casadi::LinsolLd |
|                  |                 | factorization,   | l                |
|                  |                 | without any      |                  |
|                  |                 | fill-in          |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::ProtoFun |
|                  |                 | option (ignored) | ction            |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::ProtoFun |
|                  |                 | when the         | ction            |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::ProtoFun |
|                  |                 | each input if it | ction            |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::ProtoFun |
|                  |                 | each output if   | ction            |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::ProtoFun |
|                  |                 | for a number of  | ction            |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::ProtoFun |
|                  |                 | compiler to      | ction            |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::ProtoFun |
|                  |                 | temporary source | ction            |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::ProtoFun |
|                  |                 | used to write    | ction            |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::ProtoFun |
|                  |                 | passed to the    | ction            |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::ProtoFun |
|                  |                 | behaviour when   | ction            |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::ProtoFun |
|                  |                 | (seemingly       | ction            |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::ProtoFun |
|                  |                 | maximum number   | ction            |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::ProtoFun |
|                  |                 |                  | ction            |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::ProtoFun |
|                  |                 | option (ignored) | ction            |
+------------------+-----------------+------------------+------------------+
| preordering      | OT_BOOL         | Approximate      | casadi::LinsolLd |
|                  |                 | minimal degree   | l                |
|                  |                 | (AMD)            |                  |
|                  |                 | preordering      |                  |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::ProtoFun |
|                  |                 | values of inputs | ction            |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::ProtoFun |
|                  |                 | values of        | ction            |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::ProtoFun |
|                  |                 | information      | ction            |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::ProtoFun |
|                  |                 | information      | ction            |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::ProtoFun |
|                  |                 | when NaN or Inf  | ction            |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::ProtoFun |
|                  |                 | passed to a      | ction            |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::ProtoFun |
|                  |                 | field that can   | ction            |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::ProtoFun |
|                  |                 | evaluation  for  | ction            |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: linsol_ldl.hpp ";

%feature("docstring") casadi::LinsolLdl::nfact "

[INTERNAL]  Numeric factorization.

";

%feature("docstring") casadi::LinsolLdl::sfact "

[INTERNAL] ";

%feature("docstring") casadi::LinsolLdl::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::LinsolLdl::linsol_eval_sx "

[INTERNAL]  Evaluate SX, possibly transposed.

";

%feature("docstring") casadi::LinsolLdl::generate "

[INTERNAL]  Generate C code.

";

%feature("docstring") casadi::LinsolLdl::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::LinsolLdl::finalize "

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring") casadi::LinsolLdl::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::LinsolLdl::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::LinsolLdl::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::LinsolLdl::solve "

[INTERNAL] ";

%feature("docstring") casadi::LinsolLdl::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::LinsolLdl::nrow "

[INTERNAL]  Get sparsity pattern.

";

%feature("docstring") casadi::LinsolLdl::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::LinsolLdl::colind "

[INTERNAL] ";

%feature("docstring") casadi::LinsolLdl::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::LinsolLdl::free_mem "

[INTERNAL]  Free memory block.

";


// File: classcasadi_1_1LinsolQr.xml
%feature("docstring") casadi::LinsolQr::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::LinsolQr::neig "

[INTERNAL]  Number of negative eigenvalues.

";

%feature("docstring") casadi::LinsolQr::solve "

[INTERNAL] ";

%feature("docstring") casadi::LinsolQr "

'qr' plugin for LinsolInternal

>List of available options

+-------+-----------+------------------------------------------------------+
|  Id   |   Type    |                     Description                      |
+=======+===========+======================================================+
| cache | OT_DOUBLE | Amount of factorisations to remember (thread-local)  |
|       |           | [0]                                                  |
+-------+-----------+------------------------------------------------------+
| eps   | OT_DOUBLE | Minimum R entry before singularity is declared       |
|       |           | [1e-12]                                              |
+-------+-----------+------------------------------------------------------+

>List of available options

+-------+-----------+-----------------------------------+------------------+
|  Id   |   Type    |            Description            |     Used in      |
+=======+===========+===================================+==================+
| cache | OT_DOUBLE | Amount of factorisations to       | casadi::LinsolQr |
|       |           | remember (thread-local) [0]       |                  |
+-------+-----------+-----------------------------------+------------------+
| eps   | OT_DOUBLE | Minimum R entry before            | casadi::LinsolQr |
|       |           | singularity is declared [1e-12]   |                  |
+-------+-----------+-----------------------------------+------------------+

Diagrams
--------



C++ includes: linsol_qr.hpp ";

%feature("docstring") casadi::LinsolQr::class_name "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::LinsolQr::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::LinsolQr::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::LinsolQr::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::LinsolQr::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::LinsolQr::~LinsolQr "

[INTERNAL] ";

%feature("docstring") casadi::LinsolQr::ncol "

[INTERNAL] ";

%feature("docstring") casadi::LinsolQr::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::LinsolQr::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::LinsolQr::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::LinsolQr::finalize "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring") casadi::LinsolQr::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::LinsolQr::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::LinsolQr::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::LinsolQr::nfact "

[INTERNAL]  Numeric factorization.

";

%feature("docstring") casadi::LinsolQr::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::LinsolQr::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::LinsolQr::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::LinsolQr::nnz "

[INTERNAL] ";

%feature("docstring") casadi::LinsolQr::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::LinsolQr::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::LinsolQr::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::LinsolQr::linsol_eval_sx "

[INTERNAL]  Evaluate SX, possibly transposed.

";

%feature("docstring") casadi::LinsolQr::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::LinsolQr::nrow "

[INTERNAL]  Get sparsity pattern.

";

%feature("docstring") casadi::LinsolQr::rank "

[INTERNAL]   Matrix rank.

";

%feature("docstring") casadi::LinsolQr::row "

[INTERNAL] ";

%feature("docstring") casadi::LinsolQr::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::LinsolQr::colind "

[INTERNAL] ";

%feature("docstring") casadi::LinsolQr::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::LinsolQr::sfact "

[INTERNAL] ";

%feature("docstring") casadi::LinsolQr::generate "

[INTERNAL]  Generate C code.

";

%feature("docstring") casadi::LinsolQr::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::LinsolQr::LinsolQr "

[INTERNAL] ";

%feature("docstring") casadi::LinsolQr::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::LinsolQr::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::LinsolQr::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::LinsolQr::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";


// File: classcasadi_1_1LinsolTridiag.xml
%feature("docstring") casadi::LinsolTridiag::nnz "

[INTERNAL] ";

%feature("docstring") casadi::LinsolTridiag::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::LinsolTridiag::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::LinsolTridiag::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::LinsolTridiag::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::LinsolTridiag::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::LinsolTridiag::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::LinsolTridiag::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::LinsolTridiag::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::LinsolTridiag::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::LinsolTridiag::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::LinsolTridiag::rank "

[INTERNAL]   Matrix rank.

";

%feature("docstring") casadi::LinsolTridiag::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::LinsolTridiag::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::LinsolTridiag::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::LinsolTridiag::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::LinsolTridiag::finalize "

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring") casadi::LinsolTridiag::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::LinsolTridiag::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::LinsolTridiag::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::LinsolTridiag::solve "

[INTERNAL] ";

%feature("docstring") casadi::LinsolTridiag::nfact "

[INTERNAL]  Numeric factorization.

";

%feature("docstring") casadi::LinsolTridiag::sfact "

[INTERNAL] ";

%feature("docstring") casadi::LinsolTridiag::class_name "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::LinsolTridiag::LinsolTridiag "

[INTERNAL] ";

%feature("docstring") casadi::LinsolTridiag::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::LinsolTridiag::row "

[INTERNAL] ";

%feature("docstring") casadi::LinsolTridiag::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::LinsolTridiag::nrow "

[INTERNAL]  Get sparsity pattern.

";

%feature("docstring") casadi::LinsolTridiag::colind "

[INTERNAL] ";

%feature("docstring") casadi::LinsolTridiag::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::LinsolTridiag::neig "

[INTERNAL]  Number of negative eigenvalues.

";

%feature("docstring") casadi::LinsolTridiag::linsol_eval_sx "

[INTERNAL]  Evaluate SX, possibly transposed.

";

%feature("docstring") casadi::LinsolTridiag::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::LinsolTridiag::generate "

[INTERNAL]  Generate C code.

";

%feature("docstring") casadi::LinsolTridiag::ncol "

[INTERNAL] ";

%feature("docstring") casadi::LinsolTridiag "

[INTERNAL]  'tridiag' plugin for LinsolInternal

C++ includes: linsol_tridiag.hpp ";

%feature("docstring") casadi::LinsolTridiag::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::LinsolTridiag::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::LinsolTridiag::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::LinsolTridiag::~LinsolTridiag "

[INTERNAL] ";

%feature("docstring") casadi::LinsolTridiag::sprint "

[INTERNAL]  C-style formatted printing to string.

";


// File: classcasadi_1_1Logger.xml
%feature("docstring") casadi::Logger "

Keeps track of logging output to screen and/or files. All printout from
CasADi routines should go through this files.

Joel Andersson

C++ includes: casadi_logger.hpp ";


// File: classcasadi_1_1Low.xml


// File: classcasadi_1_1Lsqr.xml
%feature("docstring") casadi::Lsqr::row "

[INTERNAL] ";

%feature("docstring") casadi::Lsqr::nfact "

[INTERNAL]  Numeric factorization.

";

%feature("docstring") casadi::Lsqr::sfact "

[INTERNAL] ";

%feature("docstring") casadi::Lsqr::generate "

[INTERNAL]  Generate C code.

";

%feature("docstring") casadi::Lsqr::solve "

[INTERNAL] ";

%feature("docstring") casadi::Lsqr::nnz "

[INTERNAL] ";

%feature("docstring") casadi::Lsqr::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::Lsqr::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::Lsqr::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::Lsqr::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::Lsqr::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Lsqr::neig "

[INTERNAL]  Number of negative eigenvalues.

";

%feature("docstring") casadi::Lsqr::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::Lsqr::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::Lsqr::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::Lsqr::colind "

[INTERNAL] ";

%feature("docstring") casadi::Lsqr::class_name "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::Lsqr::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::Lsqr::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::Lsqr::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::Lsqr::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::Lsqr::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::Lsqr::rank "

[INTERNAL]   Matrix rank.

";

%feature("docstring") casadi::Lsqr::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::Lsqr::~Lsqr "

[INTERNAL] ";

%feature("docstring") casadi::Lsqr::linsol_eval_sx "

[INTERNAL]  Evaluate SX, possibly transposed.

";

%feature("docstring") casadi::Lsqr::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::Lsqr::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::Lsqr::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::Lsqr::finalize "

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring") casadi::Lsqr::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::Lsqr "

[INTERNAL]  'symbolicqr' plugin for Linsol

Linear solver for sparse least-squares problems Inspired
fromhttps://github.com/scipy/scipy/blob/v0.14.0/scipy/sparse/linalg/isolve/lsqr.py#L96

Linsol based on QR factorization with sparsity pattern based reordering
without partial pivoting

>List of available options

+-------+---------+----------------------------------------------------+
|  Id   |  Type   |                    Description                     |
+=======+=========+====================================================+
| fopts | OT_DICT | Options to be passed to generated function objects |
+-------+---------+----------------------------------------------------+

Joel Andersson

C++ includes: lsqr.hpp ";

%feature("docstring") casadi::Lsqr::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Lsqr::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::Lsqr::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::Lsqr::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::Lsqr::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::Lsqr::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::Lsqr::nrow "

[INTERNAL]  Get sparsity pattern.

";

%feature("docstring") casadi::Lsqr::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::Lsqr::Lsqr "

[INTERNAL] ";

%feature("docstring") casadi::Lsqr::ncol "

[INTERNAL] ";


// File: classcasadi_1_1Map.xml
%feature("docstring") casadi::Map::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::Map::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::Map::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Map::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::Map::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Map::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::Map::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Map::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::Map::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::Map::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Map::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Map::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::Map::has_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Map::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Map::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Map::has_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Map::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::Map::eval "

[INTERNAL]  Evaluate the function numerically.

";

%feature("docstring") casadi::Map::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Map::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Map::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::Map::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::Map::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Map::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::Map::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::Map::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::Map::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Map::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Map::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::Map "

[INTERNAL]  Evaluate in parallel Joel Andersson

C++ includes: map.hpp ";

%feature("docstring") casadi::Map::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::Map::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Map::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::Map::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Map::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::Map::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::Map::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Map::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Map::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::Map::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Map::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::Map::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::Map::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::Map::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Map::factory "

[INTERNAL] ";

%feature("docstring") casadi::Map::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Map::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Map::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Map::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Map::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::Map::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::Map::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Map::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::Map::jit_dependencies "

[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::Map::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::Map::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::Map::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::Map::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Map::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::Map::codegen_body "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring") casadi::Map::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Map::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::Map::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Map::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Map::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Map::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::Map::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Map::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::Map::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Map::class_name "

[INTERNAL]  Get type name.

";

%feature("docstring") casadi::Map::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::Map::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::Map::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::Map::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Map::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Map::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::Map::eval_sx "

[INTERNAL]  evaluate symbolically while also propagating directional
derivatives

";

%feature("docstring") casadi::Map::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::Map::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::Map::generate_dependencies "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Map::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::Map::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Map::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::Map::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Map::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::Map::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::Map::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Map::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Map::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::Map::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Map::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Map::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::Map::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::Map::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Map::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Map::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::Map::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::Map::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::Map::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Map::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::Map::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Map::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Map::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::Map::get_function "

[INTERNAL] ";

%feature("docstring") casadi::Map::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Map::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::Map::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Map::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::Map::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Map::parallelization "

[INTERNAL]  Type of parallellization.

";

%feature("docstring") casadi::Map::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Map::~Map "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Map::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Map::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Map::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Map::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::Map::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::Map::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Map::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Map::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Map::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Map::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Map::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Map::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Map::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::Map::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::Map::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::Map::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::Map::get_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Map::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::Map::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Map::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::Map::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::Map::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Map::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::Map::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::Map::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::Map::finalize "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring") casadi::Map::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::Map::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Map::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::Map::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Map::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Map::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Map::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Map::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Map::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::Map::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::Map::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::Map::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::Map::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Map::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Map::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Map::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::Map::eval_gen "

[INTERNAL]  Evaluate or propagate sparsities.

>  int casadi::Map::eval_gen(const T **arg, T **res, casadi_int *iw, T *w, int mem=0) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate or propagate sparsities.

";

";

%feature("docstring") casadi::Map::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Map::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::Map::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Map::set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring") casadi::Map::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::Map::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Map::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::Map::get_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Map::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::Map::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Map::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::Map::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::Map::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::Map::info "

[INTERNAL]  Obtain information about node

";

%feature("docstring") casadi::Map::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Map::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Map::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Map::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::Map::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Map::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::Map::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::Map::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::Map::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::Map::has_function "

[INTERNAL] ";

%feature("docstring") casadi::Map::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Map::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::Map::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::Map::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::Map::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::Map::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::Map::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Map::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::Map::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::Map::print "

[INTERNAL]  C-style formatted printing during evaluation.

";


// File: classcasadi_1_1MapSum.xml
%feature("docstring") casadi::MapSum::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::MapSum::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::MapSum::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::MapSum::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::MapSum::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::MapSum::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::MapSum::get_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::MapSum::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::MapSum::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::MapSum::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::MapSum::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::MapSum::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::MapSum::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::MapSum::parallelization "

[INTERNAL]  Type of parallellization.

";

%feature("docstring") casadi::MapSum::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::MapSum::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::MapSum::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::MapSum::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::MapSum::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::MapSum::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::MapSum::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::MapSum::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::MapSum::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::MapSum::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::MapSum::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::MapSum::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::MapSum::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::MapSum::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::MapSum::has_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::MapSum::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::MapSum::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::MapSum::class_name "

[INTERNAL]  Get type name.

";

%feature("docstring") casadi::MapSum::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::MapSum::eval_sx "

[INTERNAL]  evaluate symbolically while also propagating directional
derivatives

";

%feature("docstring") casadi::MapSum::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::MapSum::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::MapSum::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::MapSum::eval_gen "

[INTERNAL]  Evaluate or propagate sparsities.

>  int casadi::MapSum::eval_gen(const T **arg, T **res, casadi_int *iw, T *w, int mem=0) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate or propagate sparsities.

";

";

%feature("docstring") casadi::MapSum::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::MapSum::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::MapSum::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::MapSum::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::MapSum::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::MapSum::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::MapSum::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::MapSum::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::MapSum::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::MapSum::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::MapSum::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::MapSum::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::MapSum::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::MapSum::has_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::MapSum::get_function "

[INTERNAL] ";

%feature("docstring") casadi::MapSum::generate_dependencies "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::MapSum::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::MapSum::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::MapSum::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::MapSum::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::MapSum::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::MapSum::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::MapSum::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::MapSum::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::MapSum::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::MapSum::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::MapSum::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::MapSum::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::MapSum::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::MapSum::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::MapSum::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::MapSum::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::MapSum::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::MapSum::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::MapSum::~MapSum "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::MapSum::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::MapSum::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::MapSum::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::MapSum::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::MapSum::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::MapSum::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::MapSum "

[INTERNAL]   Map with reduce_in/reduce_out Joris Gillis

C++ includes: mapsum.hpp ";

%feature("docstring") casadi::MapSum::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::MapSum::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::MapSum::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::MapSum::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::MapSum::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::MapSum::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::MapSum::get_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::MapSum::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::MapSum::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::MapSum::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::MapSum::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::MapSum::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::MapSum::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::MapSum::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::MapSum::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::MapSum::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::MapSum::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::MapSum::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::MapSum::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::MapSum::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::MapSum::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::MapSum::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::MapSum::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::MapSum::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::MapSum::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::MapSum::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::MapSum::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::MapSum::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::MapSum::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::MapSum::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::MapSum::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::MapSum::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::MapSum::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::MapSum::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::MapSum::set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring") casadi::MapSum::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::MapSum::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::MapSum::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::MapSum::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::MapSum::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::MapSum::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::MapSum::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::MapSum::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::MapSum::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::MapSum::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::MapSum::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::MapSum::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::MapSum::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::MapSum::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::MapSum::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::MapSum::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::MapSum::factory "

[INTERNAL] ";

%feature("docstring") casadi::MapSum::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::MapSum::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::MapSum::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::MapSum::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::MapSum::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::MapSum::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::MapSum::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::MapSum::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::MapSum::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::MapSum::has_function "

[INTERNAL] ";

%feature("docstring") casadi::MapSum::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::MapSum::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::MapSum::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::MapSum::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::MapSum::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::MapSum::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::MapSum::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::MapSum::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::MapSum::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::MapSum::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::MapSum::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::MapSum::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::MapSum::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::MapSum::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::MapSum::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::MapSum::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::MapSum::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::MapSum::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::MapSum::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::MapSum::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::MapSum::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::MapSum::codegen_body "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring") casadi::MapSum::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::MapSum::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::MapSum::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::MapSum::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::MapSum::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::MapSum::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::MapSum::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::MapSum::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::MapSum::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::MapSum::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::MapSum::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::MapSum::finalize "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring") casadi::MapSum::eval "

[INTERNAL]  Evaluate the function numerically.

";

%feature("docstring") casadi::MapSum::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::MapSum::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::MapSum::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::MapSum::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::MapSum::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::MapSum::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::MapSum::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::MapSum::jit_dependencies "

[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::MapSum::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::MapSum::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::MapSum::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::MapSum::size2_in "

[INTERNAL]  Input/output dimensions.

";


// File: classcasadi_1_1Matrix.xml


/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring") casadi::MatrixCommon::taylor "

[INTERNAL]  univariate Taylor series expansion

Calculate the Taylor expansion of expression 'ex' up to order 'order' with
respect to variable 'x' around the point 'a'

$(x)=f(a)+f'(a)(x-a)+f''(a)\\\\frac
{(x-a)^2}{2!}+f'''(a)\\\\frac{(x-a)^3}{3!}+\\\\ldots$

Example usage:

::

>>   x



>  Matrix<Scalar> casadi::Matrix::taylor(const Matrix< Scalar > &ex, const Matrix< Scalar > &x)
------------------------------------------------------------------------
[INTERNAL] 
univariate Taylor series expansion

Calculate the Taylor expansion of expression 'ex' up to order 'order' with
respect to variable 'x' around the point 'a'

$(x)=f(a)+f'(a)(x-a)+f''(a)\\\\frac
{(x-a)^2}{2!}+f'''(a)\\\\frac{(x-a)^3}{3!}+\\\\ldots$

Example usage:

::

>>   x



";

";

%feature("docstring") casadi::MatrixCommon::print_scalar "

Print scalar.

";

%feature("docstring") casadi::MatrixCommon::nnz_upper "

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring") casadi::MatrixCommon::is_constant "

Check if the matrix is constant (note that false negative answers are
possible)

";

%feature("docstring") casadi::MatrixCommon::mtaylor "

multivariate Taylor series expansion

Do Taylor expansions until the aggregated order of a term is equal to
'order'. The aggregated order of $x^n y^m$ equals $n+m$.

The argument order_contributions can denote how match each variable
contributes to the aggregated order. If x=[x, y] and order_contributions=[1,
2], then the aggregated order of $x^n y^m$ equals $1n+2m$.

Example usage

$ \\\\sin(b+a)+\\\\cos(b+a)(x-a)+\\\\cos(b+a)(y-b) $ $ y+x-(x^3+3y x^2+3 y^2
x+y^3)/6 $ $ (-3 x^2 y-x^3)/6+y+x $

>  Matrix< Scalar > casadi::Matrix< Scalar >::mtaylor(const Matrix< Scalar > &ex, const Matrix< Scalar > &x, const Matrix< Scalar > &a, casadi_int order, const std::vector< casadi_int > &order_contributions)
------------------------------------------------------------------------

multivariate Taylor series expansion

Do Taylor expansions until the aggregated order of a term is equal to
'order'. The aggregated order of $x^n y^m$ equals $n+m$.

The argument order_contributions can denote how match each variable
contributes to the aggregated order. If x=[x, y] and order_contributions=[1,
2], then the aggregated order of $x^n y^m$ equals $1n+2m$.

Example usage

$ \\\\sin(b+a)+\\\\cos(b+a)(x-a)+\\\\cos(b+a)(y-b) $ $ y+x-(x^3+3y x^2+3 y^2
x+y^3)/6 $ $ (-3 x^2 y-x^3)/6+y+x $

";

";

%feature("docstring") casadi::MatrixCommon::get_elements "

Get all elements.

";

%feature("docstring") casadi::MatrixCommon::set "

Set a submatrix, two arguments

>  void casadi::Matrix< Scalar >::set(const Matrix< Scalar > &m, bool ind1, const Slice &rr, const Slice &cc)

>  void casadi::Matrix< Scalar >::set(const Matrix< Scalar > &m, bool ind1, const Slice &rr, const Matrix< casadi_int > &cc)

>  void casadi::Matrix< Scalar >::set(const Matrix< Scalar > &m, bool ind1, const Matrix< casadi_int > &rr, const Slice &cc)

>  void casadi::Matrix< Scalar >::set(const Matrix< Scalar > &m, bool ind1, const Matrix< casadi_int > &rr, const Matrix< casadi_int > &cc)
------------------------------------------------------------------------

Set a submatrix, two arguments

";

";

%feature("docstring") casadi::MatrixCommon::nnz "

Get the number of (structural) non-zero elements.

";

%feature("docstring") casadi::MatrixCommon::remove "

Remove columns and rows Remove/delete rows and/or columns of a matrix.

";

%feature("docstring") casadi::MatrixCommon::get "

Get a submatrix, two arguments

>  void casadi::Matrix< Scalar >::get(Matrix< Scalar > &output_m, bool ind1, const Slice &rr, const Slice &cc) const

>  void casadi::Matrix< Scalar >::get(Matrix< Scalar > &output_m, bool ind1, const Slice &rr, const Matrix< casadi_int > &cc) const

>  void casadi::Matrix< Scalar >::get(Matrix< Scalar > &output_m, bool ind1, const Matrix< casadi_int > &rr, const Slice &cc) const

>  void casadi::Matrix< Scalar >::get(Matrix< Scalar > &output_m, bool ind1, const Matrix< casadi_int > &rr, const Matrix< casadi_int > &cc) const 
------------------------------------------------------------------------

Get a submatrix, two arguments

";

";

%feature("docstring") casadi::MatrixCommon::export_code "

Export matrix in specific language.

lang: only 'matlab' supported for now

::

  * options:
  *   inline: Indicates if you want everything on a single line (default: False)
  *   name: Name of exported variable (default: 'm')
  *   indent_level: Level of indentation (default: 0)
  *   spoof_zero: Replace numerical zero by a 1e-200 (default: false)
  *               might be needed for matlab sparse construct,
  *               which doesn't allow numerical zero
  * 



";

%feature("docstring") casadi::MatrixCommon::from_file "

Export numerical matrix to file

Supported formats:



::

  *   - .mtx   Matrix Market (sparse)
  *   - .txt   Ascii full precision representation (sparse)
  *            Whitespace separated, aligned.
  *            Comments with # % or /
  *            Uses C locale
  *            Structural zeros represented by 00
  *            Does not scale well for large sparse matrices
  * 



";

%feature("docstring") casadi::MatrixCommon::set_width "

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring") casadi::MatrixCommon::sanity_check "

[DEPRECATED] Correctness is checked during construction

";

%feature("docstring") casadi::MatrixCommon::rand "

Create a matrix with uniformly distributed random numbers.

";

%feature("docstring") casadi::MatrixCommon::print_split "

Get strings corresponding to the nonzeros and the interdependencies.

";

%feature("docstring") casadi::MatrixCommon::chol "

Obtain a Cholesky factorisation of a matrix Performs and LDL transformation
[L,D] = ldl(A) and returns diag(sqrt(D))*L'.

";

%feature("docstring") casadi::MatrixCommon::set_precision "

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring") casadi::MatrixCommon::is_tril "

Check if the matrix is lower triangular.

";

%feature("docstring") casadi::MatrixCommon::is_integer "

Check if the matrix is integer-valued (note that false negative answers are
possible)

";

%feature("docstring") casadi::MatrixCommon::numel "

Get the number of elements.

";

%feature("docstring") casadi::MatrixCommon::is_triu "

Check if the matrix is upper triangular.

";

%feature("docstring") casadi::MatrixCommon::is_op "

Is it a certain operation.

";

%feature("docstring") casadi::MatrixCommon::is_regular "

Checks if expression does not contain NaN or Inf.

";

%feature("docstring") casadi::MatrixCommon::set_nz "

Set a set of nonzeros

";

%feature("docstring") casadi::MatrixCommon::nnz_diag "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring") casadi::MatrixCommon::gradient "

Functions called by friend functions defined here

";

%feature("docstring") casadi::MatrixCommon::op "

Get operation type.

";

%feature("docstring") casadi::MatrixCommon::pw_const "

Create a piecewise constant function Create a piecewise constant function
with n=val.size() intervals.

Inputs:

Parameters:
-----------

t:  a scalar variable (e.g. time)

tval:  vector with the discrete values of t at the interval transitions
(length n-1)

val:  vector with the value of the function for each interval (length n)

";

%feature("docstring") casadi::MatrixCommon::sparsity "

Get the sparsity pattern.

";

%feature("docstring") casadi::MatrixCommon::ldl "

Sparse LDL^T factorization Returns D and the strictly upper triangular
entries of L^T I.e. ones on the diagonal are ignored. Only guarenteed to
work for positive definite matrices.

";

%feature("docstring") casadi::MatrixCommon::get_sparsity "

Get an owning reference to the sparsity pattern.

";

%feature("docstring") casadi::MatrixCommon::bilin "

Calculate bilinear form x^T A y.

";

%feature("docstring") casadi::MatrixCommon::expand "

Expand the expression as a weighted sum (with constant weights)

";

%feature("docstring") casadi::MatrixCommon::mpower "

Functions called by friend functions defined here

";

%feature("docstring") casadi::MatrixCommon::dim "

Get string representation of dimensions. The representation is e.g. \"4x5\"
or \"4x5,10nz\".

";

%feature("docstring") casadi::MatrixCommon::get_nz "

Get a set of nonzeros

";

%feature("docstring") casadi::MatrixCommon::columns "

Get the number of columns, Octave-style syntax.

";

%feature("docstring") casadi::MatrixCommon::is_one "

check if the matrix is 1 (note that false negative answers are possible)

";

%feature("docstring") casadi::MatrixCommon::T "

Transpose the matrix.

";

%feature("docstring") casadi::MatrixCommon::is_smooth "

Check if smooth.

";

%feature("docstring") casadi::MatrixCommon::norm_inf_mul "

Inf-norm of a Matrix-Matrix product.

";

%feature("docstring") casadi::MatrixCommon::rows "

Get the number of rows, Octave-style syntax.

";

%feature("docstring") casadi::MatrixCommon::is_minus_one "

check if the matrix is -1 (note that false negative answers are possible)

";

%feature("docstring") casadi::MatrixCommon::eig_symbolic "

Attempts to find the eigenvalues of a symbolic matrix This will only work
for up to 3x3 matrices.

";

%feature("docstring") casadi::MatrixCommon::info "

Obtain information about sparsity

";

%feature("docstring") casadi::MatrixCommon::triangle "

triangle function

\\\\[ \\\\begin {cases} \\\\Lambda(x) = 0 & |x| >= 1 \\\\\\\\ \\\\Lambda(x)
= 1-|x| & |x| < 1 \\\\end {cases} \\\\]

";

%feature("docstring") casadi::MatrixCommon::n_dep "

Get the number of dependencies of a binary SXElem Only defined if symbolic
scalar.

";

%feature("docstring") casadi::MatrixCommon::is_dense "

Check if the matrix expression is dense.

";

%feature("docstring") casadi::MatrixCommon::print_sparse "

Print sparse matrix style.

";

%feature("docstring") casadi::MatrixCommon::nnz_lower "

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring") casadi::MatrixCommon::erase "

Erase a submatrix (leaving structural zeros in its place) Erase elements of
a matrix.

>  void casadi::Matrix< Scalar >::erase(const std::vector< casadi_int > &rr, bool ind1=false)
------------------------------------------------------------------------

Erase a submatrix (leaving structural zeros in its place) Erase elements of
a matrix.

";

";

%feature("docstring") casadi::MatrixCommon::any "

Returns true only if any element in the matrix is true.

";

%feature("docstring") casadi::MatrixCommon::inf "

create a matrix with all inf

";

%feature("docstring") casadi::MatrixCommon::element_hash "

Returns a number that is unique for a given symbolic scalar.

Only defined if symbolic scalar.

";

%feature("docstring") casadi::MatrixCommon::scalar_matrix "

[INTERNAL]  Create nodes by their ID.

";

%feature("docstring") casadi::MatrixCommon::print_vector "

Print vector-style.

";

%feature("docstring") casadi::MatrixCommon::ones "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring") casadi::MatrixCommon::has_zeros "

Check if the matrix has any zero entries which are not structural zeros.

";

%feature("docstring") casadi::MatrixCommon::heaviside "

Heaviside function.

\\\\[ \\\\begin {cases} H(x) = 0 & x<0 \\\\\\\\ H(x) = 1/2 & x=0 \\\\\\\\
H(x) = 1 & x>0 \\\\\\\\ \\\\end {cases} \\\\]

";

%feature("docstring") casadi::MatrixCommon::poly_roots "

Attempts to find the roots of a polynomial.

This will only work for polynomials up to order 3 It is assumed that the
roots are real.

";

%feature("docstring") casadi::MatrixCommon::row "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::MatrixCommon::zeros "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring") casadi::MatrixCommon::rank1 "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring") casadi::MatrixCommon "

Sparse matrix class. SX and DM are specializations.

General sparse matrix class that is designed with the idea that \"everything
is a matrix\", that is, also scalars and vectors. This philosophy makes it
easy to use and to interface in particularly with Python and Matlab/Octave.
Index starts with 0. Index vec happens as follows: (rr, cc) -> k =
rr+cc*size1() Vectors are column vectors.  The storage format is Compressed
Column Storage (CCS), similar to that used for sparse matrices in Matlab,
but unlike this format, we do allow for elements to be structurally non-zero
but numerically zero.  Matrix<Scalar> is polymorphic with a
std::vector<Scalar> that contain all non-identical-zero elements. The
sparsity can be accessed with Sparsity& sparsity() Joel Andersson

C++ includes: casadi_common.hpp ";

%feature("docstring") casadi::MatrixCommon::dep "

Get expressions of the children of the expression Only defined if symbolic
scalar. Wraps SXElem SXElem::dep(casadi_int ch=0) const.

";

%feature("docstring") casadi::MatrixCommon::is_zero "

check if the matrix is 0 (note that false negative answers are possible)

";

%feature("docstring") casadi::MatrixCommon::evalf "

Evaluates the expression numerically.

An error is raised when the expression contains symbols

";

%feature("docstring") casadi::MatrixCommon::is_leaf "

Check if SX is a leaf of the SX graph.

Only defined if symbolic scalar.

";

%feature("docstring") casadi::MatrixCommon::qr "

QR factorization using the modified Gram-Schmidt algorithm More stable than
the classical Gram-Schmidt, but may break down if the rows of A are nearly
linearly dependent See J. Demmel: Applied Numerical Linear Algebra
(algorithm 3.1.). Note that in SWIG, Q and R are returned by value.

";

%feature("docstring") casadi::MatrixCommon::colind "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::MatrixCommon::poly_coeff "

extracts polynomial coefficients from an expression

Parameters:
-----------

ex:  Scalar expression that represents a polynomial

x:  Scalar symbol that the polynomial is build up with

";

%feature("docstring") casadi::MatrixCommon::print_dense "

Print dense matrix-stype.

";

%feature("docstring") casadi::MatrixCommon::has_nz "

Returns true if the matrix has a non-zero at location rr, cc.

";

%feature("docstring") casadi::MatrixCommon::matrix_scalar "

[INTERNAL]  Create nodes by their ID.

";

%feature("docstring") casadi::MatrixCommon::nan "

create a matrix with all nan

";

%feature("docstring") casadi::MatrixCommon::is_commutative "

Check whether a binary SX is commutative.

Only defined if symbolic scalar.

";

%feature("docstring") casadi::MatrixCommon::is_valid_input "

Check if matrix can be used to define function inputs. Sparse matrices can
return true if all non-zero elements are symbolic.

";

%feature("docstring") casadi::MatrixCommon::size2 "

Get the second dimension (i.e. number of columns)

";

%feature("docstring") casadi::MatrixCommon::size "

Get the size along a particular dimensions.

>  casadi_int casadi::GenericMatrix< Matrix< Scalar >  >::size(casadi_int axis) const
------------------------------------------------------------------------

Get the size along a particular dimensions.

";

";

%feature("docstring") casadi::MatrixCommon::pw_lin "

t a scalar variable (e.g. time)

Create a piecewise linear function Create a piecewise linear function:

Inputs: tval vector with the the discrete values of t (monotonically
increasing) val vector with the corresponding function values (same length
as tval)

";

%feature("docstring") casadi::MatrixCommon::jtimes "

Functions called by friend functions defined here

";

%feature("docstring") casadi::MatrixCommon::size1 "

Get the first dimension (i.e. number of rows)

";

%feature("docstring") casadi::MatrixCommon::serialize "

Serialize an object.

>  void casadi::Matrix< Scalar >::serialize(SerializingStream &s) const 
------------------------------------------------------------------------

Serialize an object.

";

";

%feature("docstring") casadi::MatrixCommon::to_file "

Export numerical matrix to file

Supported formats:



::

  *   - .mtx   Matrix Market (sparse)
  *   - .txt   Ascii full precision representation (sparse)
  *            Whitespace separated, aligned.
  *            Comments with # % or /
  *            Uses C locale
  *            Structural zeros represented by 00
  *            Does not scale well for large sparse matrices
  * 



";

%feature("docstring") casadi::MatrixCommon::is_row "

Check if the matrix is a row vector (i.e. size1()==1)

";

%feature("docstring") casadi::MatrixCommon::__nonzero__ "

Returns the truth value of a Matrix.

";

%feature("docstring") casadi::MatrixCommon::all "

Returns true only if every element in the matrix is true.

";

%feature("docstring") casadi::MatrixCommon::soc "

Functions called by friend functions defined here

";

%feature("docstring") casadi::MatrixCommon::is_square "

Check if the matrix expression is square.

";

%feature("docstring") casadi::MatrixCommon::tangent "

Functions called by friend functions defined here

";

%feature("docstring") casadi::MatrixCommon::qr_solve "

Solve using a sparse QR factorization.

";

%feature("docstring") casadi::MatrixCommon::is_eye "

check if the matrix is an identity matrix (note that false negative answers
are possible)

";

%feature("docstring") casadi::MatrixCommon::adj "

Matrix adjoint.

";

%feature("docstring") casadi::MatrixCommon::is_empty "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") casadi::MatrixCommon::gauss_quadrature "

Matrix adjoint.

>  Matrix< Scalar > casadi::Matrix< Scalar >::gauss_quadrature(const Matrix< Scalar > &f, const Matrix< Scalar > &x, const Matrix< Scalar > &a, const Matrix< Scalar > &b, casadi_int order, const Matrix< Scalar > &w)
------------------------------------------------------------------------

Matrix adjoint.

";

";

%feature("docstring") casadi::MatrixCommon::linearize "

Functions called by friend functions defined here

";

%feature("docstring") casadi::MatrixCommon::unary "

[INTERNAL]  Create nodes by their ID.

";

%feature("docstring") casadi::MatrixCommon::reset_input "

[INTERNAL]  Reset the marker for an input expression.

";

%feature("docstring") casadi::MatrixCommon::qr_sparse "

Sparse direct QR factorization See T. Davis: Direct Methods for Sparse
Linear Systems.

";

%feature("docstring") casadi::MatrixCommon::get_row "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::MatrixCommon::enlarge "

Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

";

%feature("docstring") casadi::MatrixCommon::rectangle "

rectangle function

\\\\[ \\\\begin {cases} \\\\Pi(x) = 1 & |x| < 1/2 \\\\\\\\ \\\\Pi(x) = 1/2 &
|x| = 1/2 \\\\\\\\ \\\\Pi(x) = 0 & |x| > 1/2 \\\\\\\\ \\\\end {cases} \\\\]

Also called: gate function, block function, band function, pulse function,
window function

";

%feature("docstring") casadi::MatrixCommon::get_str "

Get string representation.

";

%feature("docstring") casadi::MatrixCommon::minor "

Get the (i,j) minor matrix.

";

%feature("docstring") casadi::MatrixCommon::is_symbolic "

Check if symbolic (Dense) Sparse matrices invariable return false.

";

%feature("docstring") casadi::MatrixCommon::is_column "

Check if the matrix is a column vector (i.e. size2()==1)

";

%feature("docstring") casadi::MatrixCommon::MatrixCommon "

";

";

%feature("docstring") casadi::MatrixCommon::cofactor "

Get the (i,j) cofactor matrix.

";

%feature("docstring") casadi::MatrixCommon::ramp "

ramp function

\\\\[ \\\\begin {cases} R(x) = 0 & x <= 1 \\\\\\\\ R(x) = x & x > 1 \\\\\\\\
\\\\end {cases} \\\\]

Also called: slope function

";

%feature("docstring") casadi::MatrixCommon::sym "

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

>  static std::vector<std::vector<Matrix< Scalar > > > casadi::GenericMatrix< Matrix< Scalar >  >::sym(const std::string &name, casadi_int nrow, casadi_int ncol, casadi_int p, casadi_int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

";

%feature("docstring") casadi::MatrixCommon::is_vector "

Check if the matrix is a row or column vector.

";

%feature("docstring") casadi::MatrixCommon::matrix_matrix "

[INTERNAL]  Create nodes by their ID.

";

%feature("docstring") casadi::MatrixCommon::binary "

[INTERNAL]  Create nodes by their ID.

";

%feature("docstring") casadi::MatrixCommon::set_scientific "

Set the 'precision, width & scientific' used in printing and serializing to
streams.

";

%feature("docstring") casadi::MatrixCommon::get_nonzeros "

Get all nonzeros.

Implementation of Matrix::get_nonzeros (in public API)

";

%feature("docstring") casadi::MatrixCommon::disp "

Print a representation of the object.

";

%feature("docstring") casadi::MatrixCommon::has_duplicates "

[INTERNAL]  Detect duplicate symbolic expressions If there are symbolic
primitives appearing more than once, the function will return true and the
names of the duplicate expressions will be passed to casadi_warning. Note:
Will mark the node using SXElem::set_temp. Make sure to call reset_input()
after usage.

";

%feature("docstring") casadi::MatrixCommon::name "

Get name (only if symbolic scalar)

";

%feature("docstring") casadi::MatrixCommon::sparsify "

Make a matrix sparse by removing numerical zeros.

";

%feature("docstring") casadi::MatrixCommon::is_scalar "

Check if the matrix expression is scalar.

";

%feature("docstring") casadi::MatrixCommon::get_colind "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::MatrixCommon::ldl_solve "

Solve using a sparse LDL^T factorization.

";


// File: classcasadi_1_1MinusInfSX.xml


// File: classcasadi_1_1MinusOneSX.xml


// File: classcasadi_1_1MMax.xml


// File: classcasadi_1_1MMin.xml


// File: classcasadi_1_1Monitor.xml


// File: classcasadi_1_1MultipleOutput.xml


// File: classcasadi_1_1Multiplication.xml


// File: classcasadi_1_1MX.xml


/*  Construct symbolic primitives  */

/* The \"sym\" function is intended to work in a similar way as \"sym\" used
in the Symbolic Toolbox for Matlab but instead creating a CasADi symbolic
primitive.

*/ %feature("docstring") casadi::MX::get_output "

Get an output.

";

%feature("docstring") casadi::MX::disp "

Print a description of the object.

";

%feature("docstring") casadi::MX::attachAssert "

returns itself, but with an assertion attached

If y does not evaluate to 1, a runtime error is raised

";

%feature("docstring") casadi::MX::jtimes "

Functions called by friend functions defined here

";

%feature("docstring") casadi::MX "

MX - Matrix expression.

The MX class is used to build up trees made up from MXNodes. It is a more
general graph representation than the scalar expression, SX, and much less
efficient for small objects. On the other hand, the class allows much more
general operations than does SX, in particular matrix valued operations and
calls to arbitrary differentiable functions.

The MX class is designed to have identical syntax with the Matrix<> template
class, and uses DM (i.e. Matrix<double>) as its internal representation of
the values at a node. By keeping the syntaxes identical, it is possible to
switch from one class to the other, as well as inlining MX functions to
SXElem functions.

Note that an operation is always \"lazy\", making a matrix multiplication
will create a matrix multiplication node, not perform the actual
multiplication.

Joel Andersson

C++ includes: mx.hpp ";

%feature("docstring") casadi::MX::bspline_dual "

Find first nonzero If failed, returns the number of rows.

";

%feature("docstring") casadi::MX::erase "

Erase a submatrix (leaving structural zeros in its place) Erase elements of
a matrix.

>  void casadi::MX::erase(const std::vector< casadi_int > &rr, bool ind1=false)
------------------------------------------------------------------------

Erase a submatrix (leaving structural zeros in its place) Erase elements of
a matrix.

";

";

%feature("docstring") casadi::MX::monitor "

Monitor an expression Returns itself, but with the side effect of printing
the nonzeros along with a comment.

";

%feature("docstring") casadi::MX::primitives "

Get primitives.

";

%feature("docstring") casadi::MX::print_ptr "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring") casadi::MX::columns "

Get the number of columns, Octave-style syntax.

";

%feature("docstring") casadi::MX::is_constant "

Check if constant.

";

%feature("docstring") casadi::MX::is_output "

Check if evaluation output.

";

%feature("docstring") casadi::MX::set "

";

";

%feature("docstring") casadi::MX::is_valid_input "

Check if matrix can be used to define function inputs. Valid inputs for
MXFunctions are combinations of Reshape, concatenations and SymbolicMX.

";

%feature("docstring") casadi::MX::evalf "

[INTERNAL]  Evaluates the expression numerically.

An error is raised when the expression contains symbols

";

%feature("docstring") casadi::MX::inv_node "

[INTERNAL]   Inverse node.

";

%feature("docstring") casadi::MX::binary "

Create nodes by their ID.

";

%feature("docstring") casadi::MX::sparsity "

Get the sparsity pattern.

";

%feature("docstring") casadi::MX::is_tril "

Check if the matrix is lower triangular.

";

%feature("docstring") casadi::MX::gradient "

Functions called by friend functions defined here

";

%feature("docstring") casadi::MX::n_out "

Number of outputs.

";

%feature("docstring") casadi::MX::size1 "

Get the first dimension (i.e. number of rows)

";

%feature("docstring") casadi::MX::linearize "

Functions called by friend functions defined here

";

%feature("docstring") casadi::MX::is_op "

Is it a certain operation.

";

%feature("docstring") casadi::MX::is_triu "

Check if the matrix is upper triangular.

";

%feature("docstring") casadi::MX::~MX "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::MX::lift "

[INTERNAL]  Lift the expression Experimental feature.

";

%feature("docstring") casadi::MX::set_nz "

Set a set of nonzeros

";

%feature("docstring") casadi::MX::size2 "

Get the second dimension (i.e. number of columns)

";

%feature("docstring") casadi::MX::set_temp "

[INTERNAL]  Set the temporary variable.

";

%feature("docstring") casadi::MX::rows "

Get the number of rows, Octave-style syntax.

";

%feature("docstring") casadi::MX::is_one "

check if zero (note that false negative answers are possible)

";

%feature("docstring") casadi::MX::is_empty "

Check if the sparsity is empty, i.e. if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") casadi::MX::get_nz "

Get a set of nonzeros

";

%feature("docstring") casadi::MX::low "

[INTERNAL]   Find first nonzero If failed, returns the number of rows.

";

%feature("docstring") casadi::MX::ones "

Create a dense matrix or a matrix with specified sparsity with all entries
one.

";

%feature("docstring") casadi::MX::is_transpose "

Is the expression a transpose?

";

%feature("docstring") casadi::MX::is_scalar "

Check if the matrix expression is scalar.

";

%feature("docstring") casadi::MX::is_binary "

Is binary operation.

";

%feature("docstring") casadi::MX::convexify "

[INTERNAL]   Find first nonzero If failed, returns the number of rows.

";

%feature("docstring") casadi::MX::inf "

create a matrix with all inf

";

%feature("docstring") casadi::MX::colind "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::MX::is_symbolic "

Check if symbolic.

";

%feature("docstring") casadi::MX::is_eye "

check if identity

";

%feature("docstring") casadi::MX::join_primitives "

Join an expression along symbolic primitives.

";

%feature("docstring") casadi::MX::reset_input "

[INTERNAL]  Reset the marker for an input expression.

";

%feature("docstring") casadi::MX::get_colind "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::MX::is_null "

Is a null pointer?

";

%feature("docstring") casadi::MX::is_multiplication "

Check if multiplication.

";

%feature("docstring") casadi::MX::nnz "

Get the number of (structural) non-zero elements.

";

%feature("docstring") casadi::MX::find "

[INTERNAL]   Find first nonzero If failed, returns the number of rows.

";

%feature("docstring") casadi::MX::dim "

Get string representation of dimensions. The representation is e.g. \"4x5\"
or \"4x5,10nz\".

";

%feature("docstring") casadi::MX::is_minus_one "

check if zero (note that false negative answers are possible)

";

%feature("docstring") casadi::MX::get_row "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::MX::is_call "

Check if evaluation.

";

%feature("docstring") casadi::MX::nnz_upper "

Get the number of non-zeros in the upper triangular half.

";

%feature("docstring") casadi::MX::get_temp "

[INTERNAL]  Get the temporary variable

";

%feature("docstring") casadi::MX::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::MX::zeros "

Create a dense matrix or a matrix with specified sparsity with all entries
zero.

";

%feature("docstring") casadi::MX::is_zero "

check if zero (note that false negative answers are possible)

";

%feature("docstring") casadi::MX::get_str "

Get string representation.

";

%feature("docstring") casadi::MX::size "

Get the size along a particular dimensions.

>  casadi_int casadi::GenericMatrix< MX  >::size(casadi_int axis) const
------------------------------------------------------------------------

Get the size along a particular dimensions.

";

";

%feature("docstring") casadi::MX::T "

Transpose the matrix.

";

%feature("docstring") casadi::MX::is_vector "

Check if the matrix is a row or column vector.

";

%feature("docstring") casadi::MX::matrix_expand "

[INTERNAL]  Expand MX graph to SXFunction call.

Expand the given expression e, optionally supplying expressions contained in
it at which expansion should stop.

";

%feature("docstring") casadi::MX::nan "

create a matrix with all nan

";

%feature("docstring") casadi::MX::row "

Get the sparsity pattern. See the Sparsity class for details.

";

%feature("docstring") casadi::MX::n_dep "

Get the number of dependencies of a binary SXElem.

";

%feature("docstring") casadi::MX::bspline "

[INTERNAL]   Find first nonzero If failed, returns the number of rows.

";

%feature("docstring") casadi::MX::has_duplicates "

[INTERNAL]  Detect duplicate symbolic expressions If there are symbolic
primitives appearing more than once, the function will return true and the
names of the duplicate expressions will be passed to casadi_warning. Note:
Will mark the node using MX::set_temp. Make sure to call reset_input() after
usage.

";

%feature("docstring") casadi::MX::class_name "

Get class name.

";

%feature("docstring") casadi::MX::is_norm "

Check if norm.

";

%feature("docstring") casadi::MX::mpower "

Functions called by friend functions defined here

";

%feature("docstring") casadi::MX::numel "

Get the number of elements.

";

%feature("docstring") casadi::MX::enlarge "

Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

";

%feature("docstring") casadi::MX::sym "

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

>  static std::vector<std::vector<MX > > casadi::GenericMatrix< MX  >::sym(const std::string &name, casadi_int nrow, casadi_int ncol, casadi_int p, casadi_int r)
------------------------------------------------------------------------

Create a vector of length r of vectors of length p with nrow-by-ncol
symbolic primitives.

";

";

%feature("docstring") casadi::MX::tangent "

Functions called by friend functions defined here

";

%feature("docstring") casadi::MX::serialize "

Serialize an object.

";

%feature("docstring") casadi::MX::is_square "

Check if the matrix expression is square.

";

%feature("docstring") casadi::MX::get "

Get a submatrix, two arguments

>  void casadi::MX::get(MX &output_m, bool ind1, const Slice &rr, const Slice &cc) const

>  void casadi::MX::get(MX &output_m, bool ind1, const Slice &rr, const Matrix< casadi_int > &cc) const

>  void casadi::MX::get(MX &output_m, bool ind1, const Slice &rr, casadi_int cc) const

>  void casadi::MX::get(MX &output_m, bool ind1, const Matrix< casadi_int > &rr, const Slice &cc) const

>  void casadi::MX::get(MX &output_m, bool ind1, casadi_int rr, const Slice &cc) const

>  void casadi::MX::get(MX &output_m, bool ind1, const Matrix< casadi_int > &rr, const Matrix< casadi_int > &cc) const

>  void casadi::MX::get(MX &output_m, bool ind1, casadi_int rr, casadi_int cc) const

>  void casadi::MX::get(MX &output_m, bool ind1, const MX &rr, const Slice &cc) const

>  void casadi::MX::get(MX &output_m, bool ind1, const Slice &rr, const MX &cc) const

>  void casadi::MX::get(MX &output_m, bool ind1, const MX &rr, const MX &cc) const 
------------------------------------------------------------------------

Get a submatrix, two arguments

";

";

%feature("docstring") casadi::MX::einstein "

Computes an einstein dense tensor contraction.

Computes the product: C_c = A_a + B_b where a b c are index/einstein
notation in an encoded form

For example, an matrix-matrix product may be written as: C_ij = A_ik B_kj

The encoded form uses strictly negative numbers to indicate labels. For the
above example, we would have: a {-1, -3} b {-3, -2} c {-1 -2}

";

%feature("docstring") casadi::MX::is_column "

Check if the matrix is a column vector (i.e. size2()==1)

";

%feature("docstring") casadi::MX::__nonzero__ "

Returns the truth value of an MX expression.

";

%feature("docstring") casadi::MX::name "

Get the name.

";

%feature("docstring") casadi::MX::info "

Obtain information about node

";

%feature("docstring") casadi::MX::which_function "

Get function - only valid when is_call() is true.

";

%feature("docstring") casadi::MX::MX "

Create sparse matrix constant (also implicit type conversion)

>  casadi::MX::MX(const Matrix< double > &x)
------------------------------------------------------------------------

Create sparse matrix constant (also implicit type conversion)

";

";

%feature("docstring") casadi::MX::soc "

Functions called by friend functions defined here

";

%feature("docstring") casadi::MX::rank1 "

Make a rank-1 update to a matrix A Calculates A + 1/2 * alpha * x*y'.

";

%feature("docstring") casadi::MX::bilin "

Calculate bilinear form x^T A y.

";

%feature("docstring") casadi::MX::nnz_lower "

Get the number of non-zeros in the lower triangular half.

";

%feature("docstring") casadi::MX::is_unary "

Is unary operation.

";

%feature("docstring") casadi::MX::is_commutative "

Check if commutative operation.

";

%feature("docstring") casadi::MX::mapping "

Get an IM representation of a GetNonzeros or SetNonzeros node.

";

%feature("docstring") casadi::MX::split_primitives "

Split up an expression along symbolic primitives.

";

%feature("docstring") casadi::MX::graph_substitute "

[INTERNAL]  Substitute multiple expressions in graph Substitute variable var
with expression expr in multiple expressions, preserving nodes.

>  std::vector<MX> casadi::MX::graph_substitute(const std::vector< MX > &ex, const std::vector< MX > &v, const std::vector< MX > &vdef)
------------------------------------------------------------------------
[INTERNAL] 
Substitute multiple expressions in graph Substitute variable var with
expression expr in multiple expressions, preserving nodes.

";

";

%feature("docstring") casadi::MX::is_dense "

Check if the matrix expression is dense.

";

%feature("docstring") casadi::MX::op "

Get operation type.

";

%feature("docstring") casadi::MX::n_primitives "

Get the number of primitives for MXFunction inputs/outputs.

";

%feature("docstring") casadi::MX::dep "

Get the nth dependency as MX.

";

%feature("docstring") casadi::MX::get_sparsity "

Get an owning reference to the sparsity pattern.

";

%feature("docstring") casadi::MX::nnz_diag "

Get get the number of non-zeros on the diagonal.

";

%feature("docstring") casadi::MX::unary "

Create nodes by their ID.

";

%feature("docstring") casadi::MX::which_output "

Get the index of evaluation output - only valid when is_output() is true.

";

%feature("docstring") casadi::MX::is_regular "

Checks if expression does not contain NaN or Inf.

";

%feature("docstring") casadi::MX::is_row "

Check if the matrix is a row vector (i.e. size1()==1)

";


// File: classcasadi_1_1MXFunction.xml


// File: classcasadi_1_1NanSX.xml


// File: classcasadi_1_1Newton.xml
%feature("docstring") casadi::Newton::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::Newton::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::Newton::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::Newton::jit_dependencies "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring") casadi::Newton::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::Newton::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::Newton::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Newton::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Newton::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::Newton::Newton "

[INTERNAL]  Constructor.

";

%feature("docstring") casadi::Newton::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Newton::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Newton::expand "

[INTERNAL] ";

%feature("docstring") casadi::Newton::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Newton::get_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Newton::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::Newton::calc_function "

[INTERNAL] ";

%feature("docstring") casadi::Newton::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::Newton::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Newton::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Newton::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::Newton::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Newton::class_name "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::Newton::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::Newton::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Newton::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::Newton::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::Newton::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Newton::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Newton::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Newton::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::Newton::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Newton::set_temp "

[INTERNAL]  Set the work vectors.

";

%feature("docstring") casadi::Newton::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Newton::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::Newton::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::Newton::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::Newton::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::Newton::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Newton::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Newton::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Newton::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::Newton::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::Newton::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::Newton::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::Newton::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Newton::has_function "

[INTERNAL] ";

%feature("docstring") casadi::Newton::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Newton::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::Newton::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::Newton::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Newton::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::Newton::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::Newton::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Newton::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Newton::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Newton::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::Newton::codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::Newton::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::Newton::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::Newton::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::Newton::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Newton::get_function "

[INTERNAL]

>  const Function& casadi::OracleFunction::get_function(const std::string &name) const override
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Newton::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Newton::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::Newton::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::Newton::~Newton "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Newton::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Newton::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::Newton::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::Newton::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::Newton::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::Newton::ad_forward "

[INTERNAL]  Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::Newton::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Newton::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Newton::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::Newton::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Newton::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Newton::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::Newton::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::Newton::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Newton::ad_reverse "

[INTERNAL]  Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::Newton::has_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Newton::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Newton::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::Newton::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Newton "

'newton' plugin for Rootfinder

Implements simple newton iterations to solve an implicit function.

>List of available options

+-----------------+-----------+--------------------------------------------+
|       Id        |   Type    |                Description                 |
+=================+===========+============================================+
| abstol          | OT_DOUBLE | Stopping criterion tolerance on max(|F|)   |
+-----------------+-----------+--------------------------------------------+
| abstolStep      | OT_DOUBLE | Stopping criterion tolerance on step size  |
+-----------------+-----------+--------------------------------------------+
| line_search     | OT_BOOL   | Enable line-search (default: true)         |
+-----------------+-----------+--------------------------------------------+
| max_iter        | OT_INT    | Maximum number of Newton iterations to     |
|                 |           | perform before returning.                  |
+-----------------+-----------+--------------------------------------------+
| print_iteration | OT_BOOL   | Print information about each iteration     |
+-----------------+-----------+--------------------------------------------+

Joris Gillis

>List of available options

+-------------------+--------------+-------------------+-------------------+
|        Id         |     Type     |    Description    |      Used in      |
+===================+==============+===================+===================+
| abstol            | OT_DOUBLE    | Stopping          | casadi::Newton    |
|                   |              | criterion         |                   |
|                   |              | tolerance on      |                   |
|                   |              | max(|F|)          |                   |
+-------------------+--------------+-------------------+-------------------+
| abstolStep        | OT_DOUBLE    | Stopping          | casadi::Newton    |
|                   |              | criterion         |                   |
|                   |              | tolerance on step |                   |
|                   |              | size              |                   |
+-------------------+--------------+-------------------+-------------------+
| constraints       | OT_INTVECTOR | Constrain the     | casadi::Rootfinde |
|                   |              | unknowns. 0       | r                 |
|                   |              | (default): no     |                   |
|                   |              | constraint on ui, |                   |
|                   |              | 1: ui >= 0.0, -1: |                   |
|                   |              | ui <= 0.0, 2: ui  |                   |
|                   |              | > 0.0, -2: ui <   |                   |
|                   |              | 0.0.              |                   |
+-------------------+--------------+-------------------+-------------------+
| error_on_fail     | OT_BOOL      | When the          | casadi::Rootfinde |
|                   |              | numerical process | r                 |
|                   |              | returns           |                   |
|                   |              | unsuccessfully,   |                   |
|                   |              | raise an error    |                   |
|                   |              | (default false).  |                   |
+-------------------+--------------+-------------------+-------------------+
| implicit_input    | OT_INT       | Index of the      | casadi::Rootfinde |
|                   |              | input that        | r                 |
|                   |              | corresponds to    |                   |
|                   |              | the actual root-  |                   |
|                   |              | finding           |                   |
+-------------------+--------------+-------------------+-------------------+
| implicit_output   | OT_INT       | Index of the      | casadi::Rootfinde |
|                   |              | output that       | r                 |
|                   |              | corresponds to    |                   |
|                   |              | the actual root-  |                   |
|                   |              | finding           |                   |
+-------------------+--------------+-------------------+-------------------+
| jacobian_function | OT_FUNCTION  | Function object   | casadi::Rootfinde |
|                   |              | for calculating   | r                 |
|                   |              | the Jacobian      |                   |
|                   |              | (autogenerated by |                   |
|                   |              | default)          |                   |
+-------------------+--------------+-------------------+-------------------+
| line_search       | OT_BOOL      | Enable line-      | casadi::Newton    |
|                   |              | search (default:  |                   |
|                   |              | true)             |                   |
+-------------------+--------------+-------------------+-------------------+
| linear_solver     | OT_STRING    | User-defined      | casadi::Rootfinde |
|                   |              | linear solver     | r                 |
|                   |              | class. Needed for |                   |
|                   |              | sensitivities.    |                   |
+-------------------+--------------+-------------------+-------------------+
| linear_solver_opt | OT_DICT      | Options to be     | casadi::Rootfinde |
| ions              |              | passed to the     | r                 |
|                   |              | linear solver.    |                   |
+-------------------+--------------+-------------------+-------------------+
| max_iter          | OT_INT       | Maximum number of | casadi::Newton    |
|                   |              | Newton iterations |                   |
|                   |              | to perform before |                   |
|                   |              | returning.        |                   |
+-------------------+--------------+-------------------+-------------------+
| print_iteration   | OT_BOOL      | Print information | casadi::Newton    |
|                   |              | about each        |                   |
|                   |              | iteration         |                   |
+-------------------+--------------+-------------------+-------------------+

Diagrams
--------



C++ includes: newton.hpp ";

%feature("docstring") casadi::Newton::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Newton::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Newton::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::Newton::monitored "

[INTERNAL] ";

%feature("docstring") casadi::Newton::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::Newton::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Newton::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Newton::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::Newton::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::Newton::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::Newton::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Newton::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Newton::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Newton::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::Newton::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::Newton::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Newton::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::Newton::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Newton::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::Newton::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::Newton::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Newton::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::Newton::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::Newton::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Newton::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::Newton::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Newton::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::Newton::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::Newton::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::Newton::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::Newton::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Newton::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::Newton::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::Newton::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::Newton::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Newton::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Newton::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Newton::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::Newton::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Newton::generate_dependencies "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::Newton::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::Newton::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::Newton::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Newton::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::Newton::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::Newton::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::Newton::get_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Newton::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::Newton::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Newton::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::Newton::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::Newton::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::Newton::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::Newton::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Newton::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Newton::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::Newton::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Newton::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Newton::create_function "

[INTERNAL]  Create an oracle function

";

%feature("docstring") casadi::Newton::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::Newton::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Newton::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::Newton::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::Newton::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::Newton::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::Newton::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Newton::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Newton::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Newton::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Newton::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Newton::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::Newton::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Newton::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Newton::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Newton::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Newton::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::Newton::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Newton::set_function "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::Newton::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Newton::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::Newton::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Newton::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::Newton::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::Newton::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::Newton::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::Newton::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::Newton::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::Newton::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Newton::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::Newton::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::Newton::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Newton::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::Newton::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Newton::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::Newton::factory "

[INTERNAL] ";

%feature("docstring") casadi::Newton::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::Newton::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Newton::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Newton::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::Newton::has_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Newton::eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Newton::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Newton::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::Newton::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::Newton::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Newton::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Newton::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::Newton::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Newton::solve "

[INTERNAL]   Solve the system of equations and calculate derivatives.

";

%feature("docstring") casadi::Newton::finalize "

[INTERNAL]  Finalize initialization.

";

%feature("docstring") casadi::Newton::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";


// File: classcasadi_1_1NlpBuilder.xml


/*  Symbolic representation of the NLP  */

/* Data members

*/ %feature("docstring") casadi::NlpBuilder "

A symbolic NLP representation.

Joel Andersson

C++ includes: nlp_builder.hpp ";

%feature("docstring") casadi::NlpBuilder::type_name "

Readable name of the class.

";

%feature("docstring") casadi::NlpBuilder::import_nl "

Import an .nl file.

";

%feature("docstring") casadi::NlpBuilder::get_str "

Get string representation.

";

%feature("docstring") casadi::NlpBuilder::disp "

Print a description of the object.

";


// File: classcasadi_1_1Nlpsol.xml
%feature("docstring") casadi::Nlpsol::callback "

[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::Nlpsol::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::Nlpsol::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Nlpsol::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Nlpsol::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::Nlpsol::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::Nlpsol::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Nlpsol::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::Nlpsol::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Nlpsol::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Nlpsol::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::Nlpsol::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::Nlpsol::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Nlpsol::get_function "

[INTERNAL]

>  const Function& casadi::OracleFunction::get_function(const std::string &name) const override
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Nlpsol::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::Nlpsol::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::Nlpsol::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::Nlpsol::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Nlpsol::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Nlpsol::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Nlpsol::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Nlpsol::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::Nlpsol::Nlpsol "

[INTERNAL]  Constructor.

";

%feature("docstring") casadi::Nlpsol::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Nlpsol::disp_more "

[INTERNAL]  Print description.

";

%feature("docstring") casadi::Nlpsol::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::Nlpsol::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Nlpsol::getReducedHessian "

[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Nlpsol::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::Nlpsol::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Nlpsol::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Nlpsol::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::Nlpsol::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Nlpsol::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::Nlpsol::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::Nlpsol::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::Nlpsol::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::Nlpsol::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::Nlpsol::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::Nlpsol::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::Nlpsol::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::Nlpsol::get_reverse "

[INTERNAL]  Generate a function that calculates reverse mode derivatives.

";

%feature("docstring") casadi::Nlpsol::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Nlpsol::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Nlpsol::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Nlpsol::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::Nlpsol::nlpsol_codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::Nlpsol::finalize "

[INTERNAL]  Finalize initialization.

";

%feature("docstring") casadi::Nlpsol::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::Nlpsol::eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Nlpsol::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::Nlpsol::monitored "

[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Nlpsol::factory "

[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Nlpsol::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::Nlpsol::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Nlpsol::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Nlpsol::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::Nlpsol::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::Nlpsol::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::Nlpsol::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Nlpsol::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::Nlpsol::setOptionsFromFile "

[INTERNAL]  Read options from parameter xml.

";

%feature("docstring") casadi::Nlpsol::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Nlpsol::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Nlpsol::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::Nlpsol::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Nlpsol::set_function "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::Nlpsol::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::Nlpsol::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Nlpsol::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Nlpsol::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Nlpsol::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::Nlpsol::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::Nlpsol::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Nlpsol::set_temp "

[INTERNAL]  Set the work vectors.

";

%feature("docstring") casadi::Nlpsol::get_forward "

[INTERNAL]  Generate a function that calculates forward mode derivatives.

";

%feature("docstring") casadi::Nlpsol::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::Nlpsol::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Nlpsol::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::Nlpsol::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::Nlpsol::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::Nlpsol::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Nlpsol::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::Nlpsol::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::Nlpsol::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::Nlpsol::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::Nlpsol::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::Nlpsol::has_function "

[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::Nlpsol::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Nlpsol::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Nlpsol::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::Nlpsol::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::Nlpsol::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Nlpsol::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::Nlpsol::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Nlpsol::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::Nlpsol::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::Nlpsol::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::Nlpsol::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Nlpsol::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Nlpsol::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Nlpsol::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::Nlpsol::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::Nlpsol::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::Nlpsol::kkt "

[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::solve "

[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::Nlpsol::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::Nlpsol::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Nlpsol::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Nlpsol::has_forward "

[INTERNAL]  Generate a function that calculates forward mode derivatives.

";

%feature("docstring") casadi::Nlpsol::expand "

[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Nlpsol::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Nlpsol::calc_function "

[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Nlpsol::has_reverse "

[INTERNAL]  Generate a function that calculates reverse mode derivatives.

";

%feature("docstring") casadi::Nlpsol::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::Nlpsol::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::Nlpsol::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Nlpsol::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Nlpsol::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::Nlpsol::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::Nlpsol::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Nlpsol::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::Nlpsol::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::Nlpsol::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Nlpsol "

NLP solver storage class.

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| bound_consistenc | OT_BOOL         | Ensure that      | casadi::Nlpsol   |
| y                |                 | primal-dual      |                  |
|                  |                 | solution is      |                  |
|                  |                 | consistent with  |                  |
|                  |                 | the bounds       |                  |
+------------------+-----------------+------------------+------------------+
| calc_f           | OT_BOOL         | Calculate 'f' in | casadi::Nlpsol   |
|                  |                 | the Nlpsol base  |                  |
|                  |                 | class            |                  |
+------------------+-----------------+------------------+------------------+
| calc_g           | OT_BOOL         | Calculate 'g' in | casadi::Nlpsol   |
|                  |                 | the Nlpsol base  |                  |
|                  |                 | class            |                  |
+------------------+-----------------+------------------+------------------+
| calc_lam_p       | OT_BOOL         | Calculate        | casadi::Nlpsol   |
|                  |                 | 'lam_p' in the   |                  |
|                  |                 | Nlpsol base      |                  |
|                  |                 | class            |                  |
+------------------+-----------------+------------------+------------------+
| calc_lam_x       | OT_BOOL         | Calculate        | casadi::Nlpsol   |
|                  |                 | 'lam_x' in the   |                  |
|                  |                 | Nlpsol base      |                  |
|                  |                 | class            |                  |
+------------------+-----------------+------------------+------------------+
| calc_multipliers | OT_BOOL         | Calculate        | casadi::Nlpsol   |
|                  |                 | Lagrange         |                  |
|                  |                 | multipliers in   |                  |
|                  |                 | the Nlpsol base  |                  |
|                  |                 | class            |                  |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| discrete         | OT_BOOLVECTOR   | Indicates which  | casadi::Nlpsol   |
|                  |                 | of the variables |                  |
|                  |                 | are discrete,    |                  |
|                  |                 | i.e. integer-    |                  |
|                  |                 | valued           |                  |
+------------------+-----------------+------------------+------------------+
| error_on_fail    | OT_BOOL         | When the         | casadi::Nlpsol   |
|                  |                 | numerical        |                  |
|                  |                 | process returns  |                  |
|                  |                 | unsuccessfully,  |                  |
|                  |                 | raise an error   |                  |
|                  |                 | (default false). |                  |
+------------------+-----------------+------------------+------------------+
| eval_errors_fata | OT_BOOL         | When errors      | casadi::Nlpsol   |
| l                |                 | occur during     |                  |
|                  |                 | evaluation of    |                  |
|                  |                 | f,g,...,stop the |                  |
|                  |                 | iterations       |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::OracleFu |
|                  |                 | SX expressions   | nction           |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| ignore_check_vec | OT_BOOL         | If set to true,  | casadi::Nlpsol   |
|                  |                 | the input shape  |                  |
|                  |                 | of F will not be |                  |
|                  |                 | checked.         |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_FUNCTION     | A function that  | casadi::Nlpsol   |
| ck               |                 | will be called   |                  |
|                  |                 | at each          |                  |
|                  |                 | iteration with   |                  |
|                  |                 | the solver as    |                  |
|                  |                 | input. Check     |                  |
|                  |                 | documentation of |                  |
|                  |                 | Callback .       |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_BOOL         | If set to true,  | casadi::Nlpsol   |
| ck_ignore_errors |                 | errors thrown by |                  |
|                  |                 | iteration_callba |                  |
|                  |                 | ck will be       |                  |
|                  |                 | ignored.         |                  |
+------------------+-----------------+------------------+------------------+
| iteration_callba | OT_INT          | Only call the    | casadi::Nlpsol   |
| ck_step          |                 | callback         |                  |
|                  |                 | function every   |                  |
|                  |                 | few iterations.  |                  |
+------------------+-----------------+------------------+------------------+
| min_lam          | OT_DOUBLE       | Minimum allowed  | casadi::Nlpsol   |
|                  |                 | multiplier value |                  |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| no_nlp_grad      | OT_BOOL         | Prevent the      | casadi::Nlpsol   |
|                  |                 | creation of the  |                  |
|                  |                 | 'nlp_grad'       |                  |
|                  |                 | function         |                  |
+------------------+-----------------+------------------+------------------+
| oracle_options   | OT_DICT         | Options to be    | casadi::Nlpsol   |
|                  |                 | passed to the    |                  |
|                  |                 | oracle function  |                  |
+------------------+-----------------+------------------+------------------+
| sens_linsol      | OT_STRING       | Linear solver    | casadi::Nlpsol   |
|                  |                 | used for         |                  |
|                  |                 | parametric       |                  |
|                  |                 | sensitivities    |                  |
|                  |                 | (default 'qr').  |                  |
+------------------+-----------------+------------------+------------------+
| sens_linsol_opti | OT_DICT         | Linear solver    | casadi::Nlpsol   |
| ons              |                 | options used for |                  |
|                  |                 | parametric       |                  |
|                  |                 | sensitivities.   |                  |
+------------------+-----------------+------------------+------------------+
| show_eval_warnin | OT_BOOL         | Show warnings    | casadi::OracleFu |
| gs               |                 | generated from   | nction           |
|                  |                 | function         |                  |
|                  |                 | evaluations      |                  |
|                  |                 | [true]           |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| verbose_init     | OT_BOOL         | Print out timing | casadi::Nlpsol   |
|                  |                 | information      |                  |
|                  |                 | about the        |                  |
|                  |                 | different stages |                  |
|                  |                 | of               |                  |
|                  |                 | initialization   |                  |
+------------------+-----------------+------------------+------------------+
| warn_initial_bou | OT_BOOL         | Warn if the      | casadi::Nlpsol   |
| nds              |                 | initial guess    |                  |
|                  |                 | does not satisfy |                  |
|                  |                 | LBX and UBX      |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: nlpsol_impl.hpp ";

%feature("docstring") casadi::Nlpsol::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Nlpsol::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::Nlpsol::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Nlpsol::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Nlpsol::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::Nlpsol::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Nlpsol::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::Nlpsol::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::Nlpsol::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Nlpsol::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::Nlpsol::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::Nlpsol::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Nlpsol::check_inputs "

[INTERNAL]  Check if the inputs correspond to a well-posed problem.

";

%feature("docstring") casadi::Nlpsol::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Nlpsol::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Nlpsol::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::Nlpsol::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Nlpsol::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::Nlpsol::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::Nlpsol::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::Nlpsol::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::Nlpsol::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Nlpsol::create_function "

[INTERNAL]  Create an oracle function

";

%feature("docstring") casadi::Nlpsol::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Nlpsol::codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::Nlpsol::class_name "

[INTERNAL]  Get type name.

";

%feature("docstring") casadi::Nlpsol::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::Nlpsol::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::Nlpsol::~Nlpsol "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Nlpsol::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::Nlpsol::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Nlpsol::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Nlpsol::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::Nlpsol::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::Nlpsol::jit_dependencies "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring") casadi::Nlpsol::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::Nlpsol::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::Nlpsol::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Nlpsol::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::Nlpsol::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::Nlpsol::integer_support "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring") casadi::Nlpsol::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Nlpsol::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Nlpsol::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::Nlpsol::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::Nlpsol::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::Nlpsol::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Nlpsol::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Nlpsol::generate_dependencies "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::Nlpsol::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Nlpsol::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::Nlpsol::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Nlpsol::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::Nlpsol::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Nlpsol::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Nlpsol::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::Nlpsol::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Nlpsol::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Nlpsol::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Nlpsol::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Nlpsol::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::Nlpsol::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Nlpsol::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Nlpsol::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Nlpsol::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::Nlpsol::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::Nlpsol::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";


// File: classcasadi_1_1NonZeros.xml
%feature("docstring") casadi::NonZeros::NonZeros "

Constructor.

";

%feature("docstring") casadi::NonZeros "

Access to a set of nonzeros.

NonZeros class for Matrix NonZeros is the return type for operator[] of the
Matrix class, it allows access to the value as well as changing the parent
object Joel Andersson

C++ includes: nonzeros.hpp ";


// File: classcasadi_1_1Norm.xml


// File: classcasadi_1_1Norm1.xml


// File: classcasadi_1_1Norm2.xml


// File: classcasadi_1_1NormF.xml


// File: classcasadi_1_1NormInf.xml


// File: classcasadi_1_1OmpMap.xml
%feature("docstring") casadi::OmpMap::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::OmpMap::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::OmpMap::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::OmpMap::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::OmpMap::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::OmpMap::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::OmpMap::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::OmpMap::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::OmpMap::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::OmpMap::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::OmpMap::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::OmpMap::eval "

[INTERNAL]  Evaluate the function numerically.

";

%feature("docstring") casadi::OmpMap::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::OmpMap::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::OmpMap::eval_sx "

[INTERNAL]  evaluate symbolically while also propagating directional
derivatives

";

%feature("docstring") casadi::OmpMap::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::OmpMap::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::OmpMap::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::OmpMap::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::OmpMap::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::OmpMap::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::OmpMap::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::OmpMap::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::OmpMap::OmpMap "

[INTERNAL] ";

%feature("docstring") casadi::OmpMap::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::OmpMap::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::OmpMap::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::OmpMap::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::OmpMap::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::OmpMap::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::OmpMap::~OmpMap "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::OmpMap::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::OmpMap::get_function "

[INTERNAL] ";

%feature("docstring") casadi::OmpMap::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::OmpMap::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::OmpMap::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::OmpMap::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::OmpMap::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::OmpMap::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::OmpMap::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::OmpMap::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::OmpMap::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::OmpMap::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::OmpMap::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::OmpMap::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::OmpMap::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::OmpMap::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::OmpMap::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::OmpMap::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::OmpMap::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::OmpMap::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::OmpMap::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::OmpMap::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::OmpMap::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::OmpMap::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::OmpMap::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::OmpMap::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::OmpMap::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::OmpMap::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::OmpMap::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::OmpMap::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::OmpMap::has_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::OmpMap::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::OmpMap::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::OmpMap::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::OmpMap::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::OmpMap::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::OmpMap::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::OmpMap::get_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::OmpMap::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::OmpMap::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::OmpMap::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::OmpMap::factory "

[INTERNAL] ";

%feature("docstring") casadi::OmpMap::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::OmpMap::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::OmpMap::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::OmpMap::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::OmpMap::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::OmpMap::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::OmpMap::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::OmpMap::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::OmpMap::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::OmpMap::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::OmpMap::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::OmpMap::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::OmpMap::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::OmpMap::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::OmpMap::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::OmpMap::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::OmpMap "

[INTERNAL]  A map Evaluate in parallel using OpenMP Note: Do not use this
class with much more than the intended number of threads for the parallel
evaluation as it will cause excessive memory use.

Joel Andersson

C++ includes: map.hpp ";

%feature("docstring") casadi::OmpMap::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::OmpMap::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::OmpMap::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::OmpMap::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::OmpMap::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::OmpMap::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::OmpMap::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::OmpMap::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::OmpMap::codegen_body "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring") casadi::OmpMap::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::OmpMap::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::OmpMap::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::OmpMap::generate_dependencies "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::OmpMap::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::OmpMap::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::OmpMap::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::OmpMap::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::OmpMap::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::OmpMap::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::OmpMap::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::OmpMap::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::OmpMap::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::OmpMap::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::OmpMap::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::OmpMap::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::OmpMap::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::OmpMap::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::OmpMap::has_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::OmpMap::eval_gen "

[INTERNAL]  Evaluate or propagate sparsities.

>  int casadi::Map::eval_gen(const T **arg, T **res, casadi_int *iw, T *w, int mem=0) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate or propagate sparsities.

";

";

%feature("docstring") casadi::OmpMap::jit_dependencies "

[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::OmpMap::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::OmpMap::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::OmpMap::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::OmpMap::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::OmpMap::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::OmpMap::finalize "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring") casadi::OmpMap::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::OmpMap::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::OmpMap::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::OmpMap::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::OmpMap::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::OmpMap::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::OmpMap::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::OmpMap::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::OmpMap::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::OmpMap::parallelization "

[INTERNAL]  Type of parallellization.

";

%feature("docstring") casadi::OmpMap::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::OmpMap::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::OmpMap::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::OmpMap::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::OmpMap::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::OmpMap::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::OmpMap::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::OmpMap::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::OmpMap::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::OmpMap::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::OmpMap::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::OmpMap::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::OmpMap::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::OmpMap::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::OmpMap::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::OmpMap::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::OmpMap::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::OmpMap::has_function "

[INTERNAL] ";

%feature("docstring") casadi::OmpMap::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::OmpMap::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::OmpMap::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::OmpMap::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::OmpMap::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::OmpMap::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::OmpMap::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::OmpMap::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::OmpMap::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::OmpMap::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::OmpMap::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::OmpMap::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::OmpMap::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::OmpMap::set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring") casadi::OmpMap::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::OmpMap::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::OmpMap::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::OmpMap::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::OmpMap::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::OmpMap::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::OmpMap::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::OmpMap::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::OmpMap::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::OmpMap::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::OmpMap::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::OmpMap::info "

[INTERNAL]  Obtain information about node

";

%feature("docstring") casadi::OmpMap::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::OmpMap::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::OmpMap::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::OmpMap::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::OmpMap::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::OmpMap::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::OmpMap::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::OmpMap::class_name "

[INTERNAL]  Get type name.

";

%feature("docstring") casadi::OmpMap::get_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::OmpMap::alloc_mem "

[INTERNAL]  Create memory block.

";


// File: classcasadi_1_1OneSX.xml


// File: classcasadi_1_1Opti.xml
%feature("docstring") casadi::Opti::stats "

Get statistics.

nlpsol stats are passed as-is. No stability can be guaranteed about this
part of the API

";

%feature("docstring") casadi::Opti::f "

Get objective expression.

";

%feature("docstring") casadi::Opti::g "

Get all (scalarised) constraint expressions as a column vector.

";

%feature("docstring") casadi::Opti::debug "

Get a copy with advanced functionality.

You get access to more methods, but you have no guarantees about API
stability

The copy is effectively a deep copy: Updating the state of the copy does not
update the original.

";

%feature("docstring") casadi::Opti::solve_limited "

Crunch the numbers; solve the problem.

Allows the solver to return without error when an iteration or time limit is
reached

";

%feature("docstring") casadi::Opti::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::Opti::parameter "

Create a parameter (symbol); fixed during optimization.

The order of creation does not matter. It is not required for parameter to
actualy appear in the optimization problem. Parameters that do appear, must
be given a value before the problem can be solved.

Parameters:
-----------

n:  number of rows (default 1)

m:  number of columnss (default 1)

attribute:  'full' (default) or 'symmetric'

";

%feature("docstring") casadi::Opti::p "

Get all (scalarised) parameters as a symbolic column vector.

";

%feature("docstring") casadi::Opti::set_value "

Set value of parameter.

Each parameter must be given a value before 'solve' can be called

";

%feature("docstring") casadi::Opti::lam_g "

Get all (scalarised) dual variables as a symbolic column vector.

Useful for obtaining the Lagrange Hessian:

::

  * sol.value(hessian(opti.f+opti.lam_g'*opti.g,opti.x)) % MATLAB
  * sol.value(hessian(opti.f+dot(opti.lam_g,opti.g),opti.x)[0]) # Python
  * 



";

%feature("docstring") casadi::Opti::solve "

Crunch the numbers; solve the problem.

";

%feature("docstring") casadi::Opti::x "

Get all (scalarised) decision variables as a symbolic column vector.

";

%feature("docstring") casadi::Opti::initial "

get assignment expressions for initial values

";

%feature("docstring") casadi::Opti::get_str "

Get string representation.

";

%feature("docstring") casadi::Opti::np "

Number of (scalarised) parameters.

";

%feature("docstring") casadi::Opti::set_initial "

Set initial guess for decision variables

::

  * opti.set_initial(x, 2)
  * opti.set_initial(10*x(1), 2)
  * 



";

%feature("docstring") casadi::Opti::callback_class "

Helper methods for callback()

Do not use directly.

";

%feature("docstring") casadi::Opti::nx "

Number of (scalarised) decision variables.

";

%feature("docstring") casadi::Opti::is_null "

Is a null pointer?

";

%feature("docstring") casadi::Opti::ng "

Number of (scalarised) constraints.

";

%feature("docstring") casadi::Opti::Opti "

Create Opti Context.

Parameters:
-----------

problem_type:  of optimization 'nlp' or 'conic' (default nlp)

";

%feature("docstring") casadi::Opti::type_name "

Readable name of the class.

";

%feature("docstring") casadi::Opti::value "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring") casadi::Opti::variable "

Create a decision variable (symbol)

The order of creation matters. The order will be reflected in the
optimization problem. It is not required for decision variables to actualy
appear in the optimization problem.

Parameters:
-----------

n:  number of rows (default 1)

m:  number of columnss (default 1)

attribute:  'full' (default) or 'symmetric'

";

%feature("docstring") casadi::Opti "

A simplified interface for NLP modeling/solving.

This class offers a view with model description facilities The API is
guaranteed to be stable.

Example NLP:

::

    opti = casadi.Opti();
  
    x = opti.variable();
    y = opti.variable();
  
    opti.minimize(  (y-x^2)^2   );
    opti.subject_to( x^2+y^2==1 );
    opti.subject_to(     x+y>=1 );
  
    opti.solver('ipopt');
    sol = opti.solve();
  
    sol.value(x)
    sol.value(y)



Example parametric NLP:

::

    opti = casadi.Opti();
  
    x = opti.variable(2,1);
    p = opti.parameter();
  
    opti.minimize(  (p*x(2)-x(1)^2)^2   );
    opti.subject_to( 1<=sum(x)<=2 );
  
    opti.solver('ipopt');
  
    opti.set_value(p, 3);
    sol = opti.solve();
    sol.value(x)
  
    opti.set_value(p, 5);
    sol = opti.solve();
    sol.value(x)



Joris Gillis, Erik Lambrechts, Joel Andersson

C++ includes: optistack.hpp ";

%feature("docstring") casadi::Opti::lbg "

Get all (scalarised) bounds on constraints as a column vector.

";

%feature("docstring") casadi::Opti::return_status "

Get return status of solver passed as-is from nlpsol No stability can be
guaranteed about this part of the API.

";

%feature("docstring") casadi::Opti::copy "

Get a copy of the.

The copy is effectively a deep copy: Updating the state of the copy does not
update the original.

";

%feature("docstring") casadi::Opti::class_name "

Get class name.

";

%feature("docstring") casadi::Opti::subject_to "

Clear constraints.

>  void casadi::Opti::subject_to()
------------------------------------------------------------------------

Clear constraints.

";

";

%feature("docstring") casadi::Opti::minimize "

Set objective.

Objective must be a scalar. Default objective: 0 When method is called
multiple times, the last call takes effect

";

%feature("docstring") casadi::Opti::value_variables "

get assignment expressions for latest values

";

%feature("docstring") casadi::Opti::user_dict "

Get user data.

";

%feature("docstring") casadi::Opti::to_function "

";

";

%feature("docstring") casadi::Opti::advanced "

Get a copy with advanced functionality.

You get access to more methods, but you have no guarantees about API
stability

The copy is effectively a deep copy: Updating the state of the copy does not
update the original.

";

%feature("docstring") casadi::Opti::solver "

Set a solver.

Parameters:
-----------

solver:  any of the nlpsol plugins can be used here In practice, not all
nlpsol plugins may be supported yet

options:  passed on to nlpsol plugin No stability can be guaranteed about
this part of the API

options:  to be passed to nlpsol solver No stability can be guaranteed about
this part of the API

";

%feature("docstring") casadi::Opti::dual "

get the dual variable

m must be a constraint expression. The returned value is still a symbolic
expression. Use value on it to obtain the numerical value.

";

%feature("docstring") casadi::Opti::print_ptr "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring") casadi::Opti::disp "

Print representation.

";

%feature("docstring") casadi::Opti::update_user_dict "

";

";


// File: classcasadi_1_1OptiAdvanced.xml
%feature("docstring") casadi::OptiAdvanced::dual "

get the dual variable

m must be a constraint expression. The returned value is still a symbolic
expression. Use value on it to obtain the numerical value.

";

%feature("docstring") casadi::OptiAdvanced::parameter "

Create a parameter (symbol); fixed during optimization.

The order of creation does not matter. It is not required for parameter to
actualy appear in the optimization problem. Parameters that do appear, must
be given a value before the problem can be solved.

Parameters:
-----------

n:  number of rows (default 1)

m:  number of columnss (default 1)

attribute:  'full' (default) or 'symmetric'

";

%feature("docstring") casadi::OptiAdvanced::lam_g "

Get all (scalarised) dual variables as a symbolic column vector.

Useful for obtaining the Lagrange Hessian:

::

  * sol.value(hessian(opti.f+opti.lam_g'*opti.g,opti.x)) % MATLAB
  * sol.value(hessian(opti.f+dot(opti.lam_g,opti.g),opti.x)[0]) # Python
  * 



";

%feature("docstring") casadi::OptiAdvanced::class_name "

Get class name.

";

%feature("docstring") casadi::OptiAdvanced::canon_expr "

Interpret an expression (for internal use only)

";

%feature("docstring") casadi::OptiAdvanced::get_meta_con "

Get meta-data of symbol (for internal use only)

";

%feature("docstring") casadi::OptiAdvanced::set_meta "

Set meta-data of an expression.

";

%feature("docstring") casadi::OptiAdvanced::user_dict "

Get user data.

";

%feature("docstring") casadi::OptiAdvanced::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::OptiAdvanced::disp "

Print representation.

";

%feature("docstring") casadi::OptiAdvanced::set_meta_con "

Set meta-data of an expression.

";

%feature("docstring") casadi::OptiAdvanced::variable "

Create a decision variable (symbol)

The order of creation matters. The order will be reflected in the
optimization problem. It is not required for decision variables to actualy
appear in the optimization problem.

Parameters:
-----------

n:  number of rows (default 1)

m:  number of columnss (default 1)

attribute:  'full' (default) or 'symmetric'

";

%feature("docstring") casadi::OptiAdvanced::value_variables "

get assignment expressions for latest values

";

%feature("docstring") casadi::OptiAdvanced::solve "

Crunch the numbers; solve the problem.

";

%feature("docstring") casadi::OptiAdvanced::copy "

Get a copy of the.

The copy is effectively a deep copy: Updating the state of the copy does not
update the original.

";

%feature("docstring") casadi::OptiAdvanced "

C++ includes: optistack.hpp ";

%feature("docstring") casadi::OptiAdvanced::value "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring") casadi::OptiAdvanced::casadi_solver "

Get the underlying CasADi solver of the Opti stack.

";

%feature("docstring") casadi::OptiAdvanced::update_user_dict "

";

";

%feature("docstring") casadi::OptiAdvanced::set_initial "

Set initial guess for decision variables

::

  * opti.set_initial(x, 2)
  * opti.set_initial(10*x(1), 2)
  * 



";

%feature("docstring") casadi::OptiAdvanced::~OptiAdvanced "

Destructor.

";

%feature("docstring") casadi::OptiAdvanced::callback_class "

Helper methods for callback()

Do not use directly.

";

%feature("docstring") casadi::OptiAdvanced::get_str "

Get string representation.

";

%feature("docstring") casadi::OptiAdvanced::to_function "

";

";

%feature("docstring") casadi::OptiAdvanced::lbg "

Get all (scalarised) bounds on constraints as a column vector.

";

%feature("docstring") casadi::OptiAdvanced::ng "

Number of (scalarised) constraints.

";

%feature("docstring") casadi::OptiAdvanced::get_meta "

Get meta-data of symbol (for internal use only)

";

%feature("docstring") casadi::OptiAdvanced::subject_to "

Clear constraints.

>  void casadi::Opti::subject_to()
------------------------------------------------------------------------

Clear constraints.

";

";

%feature("docstring") casadi::OptiAdvanced::initial "

get assignment expressions for initial values

";

%feature("docstring") casadi::OptiAdvanced::type_name "

Readable name of the class.

";

%feature("docstring") casadi::OptiAdvanced::nx "

Number of (scalarised) decision variables.

";

%feature("docstring") casadi::OptiAdvanced::set_value "

Set value of parameter.

Each parameter must be given a value before 'solve' can be called

";

%feature("docstring") casadi::OptiAdvanced::debug "

Get a copy with advanced functionality.

You get access to more methods, but you have no guarantees about API
stability

The copy is effectively a deep copy: Updating the state of the copy does not
update the original.

";

%feature("docstring") casadi::OptiAdvanced::print_ptr "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring") casadi::OptiAdvanced::np "

Number of (scalarised) parameters.

";

%feature("docstring") casadi::OptiAdvanced::symvar "

Get symbols present in expression.

Returned vector is ordered according to the order of variable()/parameter()
calls used to create the variables

";

%feature("docstring") casadi::OptiAdvanced::advanced "

Get a copy with advanced functionality.

You get access to more methods, but you have no guarantees about API
stability

The copy is effectively a deep copy: Updating the state of the copy does not
update the original.

";

%feature("docstring") casadi::OptiAdvanced::f "

Get objective expression.

";

%feature("docstring") casadi::OptiAdvanced::g "

Get all (scalarised) constraint expressions as a column vector.

";

%feature("docstring") casadi::OptiAdvanced::stats "

Get statistics.

nlpsol stats are passed as-is. No stability can be guaranteed about this
part of the API

";

%feature("docstring") casadi::OptiAdvanced::is_null "

Is a null pointer?

";

%feature("docstring") casadi::OptiAdvanced::return_status "

Get return status of solver passed as-is from nlpsol No stability can be
guaranteed about this part of the API.

";

%feature("docstring") casadi::OptiAdvanced::solve_limited "

Crunch the numbers; solve the problem.

Allows the solver to return without error when an iteration or time limit is
reached

";

%feature("docstring") casadi::OptiAdvanced::bake "

Fix the structure of the optimization problem.

";

%feature("docstring") casadi::OptiAdvanced::is_parametric "

return true if expression is only dependant on Opti parameters, not
variables

";

%feature("docstring") casadi::OptiAdvanced::p "

Get all (scalarised) parameters as a symbolic column vector.

";

%feature("docstring") casadi::OptiAdvanced::solver "

Set a solver.

Parameters:
-----------

solver:  any of the nlpsol plugins can be used here In practice, not all
nlpsol plugins may be supported yet

options:  passed on to nlpsol plugin No stability can be guaranteed about
this part of the API

options:  to be passed to nlpsol solver No stability can be guaranteed about
this part of the API

";

%feature("docstring") casadi::OptiAdvanced::minimize "

Set objective.

Objective must be a scalar. Default objective: 0 When method is called
multiple times, the last call takes effect

";

%feature("docstring") casadi::OptiAdvanced::x "

Get all (scalarised) decision variables as a symbolic column vector.

";


// File: classcasadi_1_1OptiCallback.xml
%feature("docstring") casadi::OptiCallback "

C++ includes: optistack.hpp ";


// File: classcasadi_1_1OptiSol.xml
%feature("docstring") casadi::OptiSol::value_variables "

get assignment expressions for the optimal solution

";

%feature("docstring") casadi::OptiSol::stats "

Get statistics.

nlpsol stats are passed as-is. No stability can be guaranteed about this
part of the API

";

%feature("docstring") casadi::OptiSol::value "

Obtain value of expression at the current value

In regular mode, teh current value is the converged solution In debug mode,
the value can be non-converged

Parameters:
-----------

values:  Optional assignment expressions (e.g. x==3) to overrule the current
value

";

%feature("docstring") casadi::OptiSol "

A simplified interface for NLP modeling/solving.

This class offers a view with solution retrieval facilities The API is
guaranteed to be stable.

Joris Gillis, Erik Lambrechts

C++ includes: optistack.hpp ";


// File: classcasadi_1_1OracleFunction.xml
%feature("docstring") casadi::OracleFunction::get_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::OracleFunction::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::OracleFunction::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::OracleFunction::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::OracleFunction::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::OracleFunction::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::OracleFunction::has_forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::OracleFunction::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::OracleFunction::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::OracleFunction::get_sparsity_out "

[INTERNAL]  Get sparsity of a given output.

";

%feature("docstring") casadi::OracleFunction::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::OracleFunction::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::OracleFunction::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::OracleFunction::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::OracleFunction::codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::OracleFunction::~OracleFunction "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::OracleFunction::has_function "

[INTERNAL] ";

%feature("docstring") casadi::OracleFunction::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::OracleFunction::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::OracleFunction::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::OracleFunction::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::OracleFunction::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::OracleFunction::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::OracleFunction::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::OracleFunction::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::OracleFunction::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::OracleFunction::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::OracleFunction::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::OracleFunction::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::OracleFunction::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::OracleFunction::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::OracleFunction::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::OracleFunction::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::OracleFunction::class_name "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::OracleFunction::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::OracleFunction::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::OracleFunction::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::OracleFunction::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::OracleFunction::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::OracleFunction::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::OracleFunction::factory "

[INTERNAL] ";

%feature("docstring") casadi::OracleFunction::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::OracleFunction::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::OracleFunction::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::OracleFunction::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::OracleFunction::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::OracleFunction::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::OracleFunction::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::OracleFunction::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::OracleFunction::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::OracleFunction::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::OracleFunction::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::OracleFunction::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::OracleFunction::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::OracleFunction::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::OracleFunction::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::OracleFunction::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::OracleFunction::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::OracleFunction::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::OracleFunction::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::OracleFunction::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::OracleFunction::has_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::OracleFunction::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::OracleFunction::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::OracleFunction::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::OracleFunction::getJacSparsityHierarchicalSymm
"

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::OracleFunction::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::OracleFunction::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::OracleFunction::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::OracleFunction::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::OracleFunction::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::OracleFunction::eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::OracleFunction::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::OracleFunction::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::OracleFunction::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::OracleFunction::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::OracleFunction::get_sparsity_in "

[INTERNAL]  Get sparsity of a given input.

";

%feature("docstring") casadi::OracleFunction::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::OracleFunction::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::OracleFunction::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::OracleFunction::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::OracleFunction::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::OracleFunction::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::OracleFunction::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::OracleFunction::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::OracleFunction::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::OracleFunction::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::OracleFunction::get_function "

[INTERNAL]

>  const Function& casadi::OracleFunction::get_function(const std::string &name) const override
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::OracleFunction::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::OracleFunction::expand "

[INTERNAL] ";

%feature("docstring") casadi::OracleFunction::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::OracleFunction::create_function "

[INTERNAL]  Create an oracle function

";

%feature("docstring") casadi::OracleFunction::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::OracleFunction::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::OracleFunction::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::OracleFunction::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::OracleFunction::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::OracleFunction::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::OracleFunction::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::OracleFunction::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::OracleFunction::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::OracleFunction::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::OracleFunction::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::OracleFunction::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::OracleFunction::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::OracleFunction::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::OracleFunction::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::OracleFunction::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::OracleFunction::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::OracleFunction::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::OracleFunction::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::OracleFunction::generate_dependencies "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::OracleFunction::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::OracleFunction::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::OracleFunction::set_temp "

[INTERNAL]  Set the work vectors.

";

%feature("docstring") casadi::OracleFunction::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::OracleFunction::calc_function "

[INTERNAL] ";

%feature("docstring") casadi::OracleFunction::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::OracleFunction::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::OracleFunction::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::OracleFunction::get_forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::OracleFunction::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::OracleFunction::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::OracleFunction::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::OracleFunction::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::OracleFunction::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::OracleFunction::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::OracleFunction::finalize "

[INTERNAL]  Finalize initialization.

";

%feature("docstring") casadi::OracleFunction::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::OracleFunction::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::OracleFunction::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::OracleFunction::monitored "

[INTERNAL] ";

%feature("docstring") casadi::OracleFunction::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::OracleFunction::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::OracleFunction::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::OracleFunction::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::OracleFunction "

[INTERNAL]  Base class for functions that perform calculation with an
oracle.

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::OracleFu |
|                  |                 | SX expressions   | nction           |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| show_eval_warnin | OT_BOOL         | Show warnings    | casadi::OracleFu |
| gs               |                 | generated from   | nction           |
|                  |                 | function         |                  |
|                  |                 | evaluations      |                  |
|                  |                 | [true]           |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: oracle_function.hpp ";

%feature("docstring") casadi::OracleFunction::set_function "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::OracleFunction::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::OracleFunction::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::OracleFunction::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::OracleFunction::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::OracleFunction::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::OracleFunction::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::OracleFunction::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::OracleFunction::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::OracleFunction::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::OracleFunction::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::OracleFunction::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::OracleFunction::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::OracleFunction::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::OracleFunction::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::OracleFunction::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::OracleFunction::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::OracleFunction::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::OracleFunction::init "

[INTERNAL]  Initialize

";

%feature("docstring") casadi::OracleFunction::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::OracleFunction::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::OracleFunction::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::OracleFunction::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::OracleFunction::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::OracleFunction::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::OracleFunction::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::OracleFunction::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::OracleFunction::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::OracleFunction::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::OracleFunction::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::OracleFunction::get_n_out "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::OracleFunction::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::OracleFunction::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::OracleFunction::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::OracleFunction::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::OracleFunction::jit_dependencies "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring") casadi::OracleFunction::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::OracleFunction::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::OracleFunction::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::OracleFunction::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::OracleFunction::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::OracleFunction::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::OracleFunction::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::OracleFunction::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::OracleFunction::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::OracleFunction::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::OracleFunction::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::OracleFunction::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::OracleFunction::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::OracleFunction::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::OracleFunction::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::OracleFunction::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::OracleFunction::OracleFunction "

[INTERNAL]  Constructor.

";

%feature("docstring") casadi::OracleFunction::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::OracleFunction::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::OracleFunction::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::OracleFunction::is_diff_out "

[INTERNAL] ";


// File: classcasadi_1_1Output.xml


// File: classcasadi_1_1Polynomial.xml
%feature("docstring") casadi::Polynomial "

Helper class for differentiating and integrating polynomials.

Joel Andersson

C++ includes: polynomial.hpp ";

%feature("docstring") casadi::Polynomial::derivative "

Create a new polynomial for the derivative.

";

%feature("docstring") casadi::Polynomial::Polynomial "

Construct from a vector of polynomial coefficients.

>  casadi::Polynomial::Polynomial(const std::vector< T > &coeff)
------------------------------------------------------------------------

Construct from a vector of polynomial coefficients.

";

";

%feature("docstring") casadi::Polynomial::type_name "

Readable name of the class.

";

%feature("docstring") casadi::Polynomial::anti_derivative "

Create a new polynomial for the anti-derivative (primitive function)

";

%feature("docstring") casadi::Polynomial::scalar "

Get scalar value (error if degree()!=0)

";

%feature("docstring") casadi::Polynomial::degree "

Degree of the polynomial.

";

%feature("docstring") casadi::Polynomial::disp "

Print a description of the object.

";

%feature("docstring") casadi::Polynomial::trim "

Remove excess zeros.

";


// File: classcasadi_1_1Project.xml


// File: classcasadi_1_1ProtoFunction.xml


// File: classcasadi_1_1QpToNlp.xml
%feature("docstring") casadi::QpToNlp::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::QpToNlp::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::QpToNlp::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::QpToNlp::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::QpToNlp::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::QpToNlp::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::QpToNlp::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::QpToNlp::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::QpToNlp::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::QpToNlp::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::QpToNlp::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::QpToNlp::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::QpToNlp::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::QpToNlp::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::QpToNlp::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::QpToNlp::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::QpToNlp::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::QpToNlp::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::QpToNlp::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::QpToNlp::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::QpToNlp::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::QpToNlp::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::QpToNlp::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::QpToNlp::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::QpToNlp::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::QpToNlp::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::QpToNlp::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::QpToNlp::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::QpToNlp::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::QpToNlp::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::QpToNlp::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::QpToNlp::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::QpToNlp::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::QpToNlp::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::QpToNlp::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::QpToNlp::jit_dependencies "

[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::QpToNlp::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::QpToNlp::set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring") casadi::QpToNlp::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::QpToNlp::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::QpToNlp::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::QpToNlp::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::QpToNlp::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::QpToNlp::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::QpToNlp::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::QpToNlp::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::QpToNlp::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::QpToNlp::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::QpToNlp::eval "

[INTERNAL]   Solve the QP.

";

%feature("docstring") casadi::QpToNlp::~QpToNlp "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::QpToNlp::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::QpToNlp::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::QpToNlp::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::QpToNlp::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::QpToNlp::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::QpToNlp::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::QpToNlp::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::QpToNlp::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::QpToNlp::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::QpToNlp::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::QpToNlp::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::QpToNlp::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::QpToNlp::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::QpToNlp::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::QpToNlp::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::QpToNlp::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::QpToNlp::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::QpToNlp::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::QpToNlp::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::QpToNlp::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::QpToNlp::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::QpToNlp::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::QpToNlp::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::QpToNlp::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::QpToNlp::factory "

[INTERNAL] ";

%feature("docstring") casadi::QpToNlp "

'nlpsol' plugin for Conic

Solve QPs using an Nlpsol Use the 'nlpsol' option to specify the NLP solver
to use.

>List of available options

+----------------+-----------+---------------------------------+
|       Id       |   Type    |           Description           |
+================+===========+=================================+
| nlpsol         | OT_STRING | Name of solver.                 |
+----------------+-----------+---------------------------------+
| nlpsol_options | OT_DICT   | Options to be passed to solver. |
+----------------+-----------+---------------------------------+

Joris Gillis

>List of available options

+----------------+---------------+-----------------------+-----------------+
|       Id       |     Type      |      Description      |     Used in     |
+================+===============+=======================+=================+
| discrete       | OT_BOOLVECTOR | Indicates which of    | casadi::Conic   |
|                |               | the variables are     |                 |
|                |               | discrete, i.e.        |                 |
|                |               | integer-valued        |                 |
+----------------+---------------+-----------------------+-----------------+
| error_on_fail  | OT_BOOL       | When the numerical    | casadi::Conic   |
|                |               | process returns       |                 |
|                |               | unsuccessfully, raise |                 |
|                |               | an error (default     |                 |
|                |               | false).               |                 |
+----------------+---------------+-----------------------+-----------------+
| nlpsol         | OT_STRING     | Name of solver.       | casadi::QpToNlp |
+----------------+---------------+-----------------------+-----------------+
| nlpsol_options | OT_DICT       | Options to be passed  | casadi::QpToNlp |
|                |               | to solver.            |                 |
+----------------+---------------+-----------------------+-----------------+
| print_problem  | OT_BOOL       | Print a numeric       | casadi::Conic   |
|                |               | description of the    |                 |
|                |               | problem               |                 |
+----------------+---------------+-----------------------+-----------------+

Diagrams
--------



C++ includes: qp_to_nlp.hpp ";

%feature("docstring") casadi::QpToNlp::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::QpToNlp::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::QpToNlp::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::QpToNlp::check_inputs "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::QpToNlp::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::QpToNlp::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::QpToNlp::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::QpToNlp::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::QpToNlp::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::QpToNlp::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::QpToNlp::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::QpToNlp::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::QpToNlp::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::QpToNlp::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::QpToNlp::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::QpToNlp::get_function "

[INTERNAL] ";

%feature("docstring") casadi::QpToNlp::class_name "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::QpToNlp::get_forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::QpToNlp::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::QpToNlp::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::QpToNlp::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::QpToNlp::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::QpToNlp::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::QpToNlp::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::QpToNlp::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::QpToNlp::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::QpToNlp::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::QpToNlp::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::QpToNlp::psd_support "

[INTERNAL]  Can psd constraints be treated.

";

%feature("docstring") casadi::QpToNlp::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::QpToNlp::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::QpToNlp::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::QpToNlp::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::QpToNlp::has_function "

[INTERNAL] ";

%feature("docstring") casadi::QpToNlp::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::QpToNlp::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::QpToNlp::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::QpToNlp::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::QpToNlp::solve "

[INTERNAL]   Solve the QP.

";

%feature("docstring") casadi::QpToNlp::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::QpToNlp::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::QpToNlp::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::QpToNlp::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::QpToNlp::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::QpToNlp::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::QpToNlp::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::QpToNlp::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::QpToNlp::generate_dependencies "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::QpToNlp::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::QpToNlp::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::QpToNlp::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::QpToNlp::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::QpToNlp::has_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::QpToNlp::integer_support "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring") casadi::QpToNlp::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::QpToNlp::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::QpToNlp::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::QpToNlp::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::QpToNlp::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::QpToNlp::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::QpToNlp::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::QpToNlp::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::QpToNlp::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::QpToNlp::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::QpToNlp::QpToNlp "

[INTERNAL]  Create a new Solver.

";

%feature("docstring") casadi::QpToNlp::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::QpToNlp::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::QpToNlp::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::QpToNlp::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::QpToNlp::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::QpToNlp::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::QpToNlp::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::QpToNlp::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::QpToNlp::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::QpToNlp::codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::QpToNlp::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::QpToNlp::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::QpToNlp::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::QpToNlp::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::QpToNlp::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::QpToNlp::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::QpToNlp::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::QpToNlp::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::QpToNlp::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::QpToNlp::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::QpToNlp::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::QpToNlp::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::QpToNlp::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::QpToNlp::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::QpToNlp::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::QpToNlp::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::QpToNlp::has_forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::QpToNlp::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::QpToNlp::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::QpToNlp::generateNativeCode "

[INTERNAL]  Generate native code in the interfaced language for debugging

";

%feature("docstring") casadi::QpToNlp::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::QpToNlp::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::QpToNlp::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::QpToNlp::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::QpToNlp::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::QpToNlp::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::QpToNlp::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::QpToNlp::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::QpToNlp::finalize "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring") casadi::QpToNlp::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::QpToNlp::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::QpToNlp::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::QpToNlp::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::QpToNlp::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::QpToNlp::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::QpToNlp::get_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::QpToNlp::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::QpToNlp::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::QpToNlp::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::QpToNlp::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::QpToNlp::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::QpToNlp::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::QpToNlp::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::QpToNlp::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";


// File: classcasadi_1_1Qrqp.xml
%feature("docstring") casadi::Qrqp::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Qrqp::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Qrqp::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::Qrqp::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::Qrqp::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Qrqp::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::Qrqp::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Qrqp::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::Qrqp::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::Qrqp::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Qrqp::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Qrqp::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Qrqp::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::Qrqp::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::Qrqp::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Qrqp::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::Qrqp::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Qrqp::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Qrqp::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Qrqp::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::Qrqp::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::Qrqp::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::Qrqp::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::Qrqp::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::Qrqp::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Qrqp::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Qrqp::eval "

[INTERNAL]   Solve the QP.

";

%feature("docstring") casadi::Qrqp::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::Qrqp::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::Qrqp::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::Qrqp::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::Qrqp::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::Qrqp::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::Qrqp::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Qrqp::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Qrqp::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::Qrqp::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::Qrqp::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Qrqp::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::Qrqp::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Qrqp::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::Qrqp::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Qrqp::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::Qrqp::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Qrqp::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::Qrqp::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Qrqp::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::Qrqp::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::Qrqp::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Qrqp::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Qrqp::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Qrqp::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::Qrqp::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Qrqp::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Qrqp::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::Qrqp::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::Qrqp::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::Qrqp::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::Qrqp::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Qrqp::integer_support "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring") casadi::Qrqp::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::Qrqp::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Qrqp::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::Qrqp::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Qrqp::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::Qrqp::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Qrqp::solve "

[INTERNAL]   Solve the QP.

";

%feature("docstring") casadi::Qrqp::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Qrqp::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Qrqp::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::Qrqp::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Qrqp::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Qrqp::get_forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::Qrqp::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::Qrqp::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::Qrqp::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Qrqp::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Qrqp::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::Qrqp::jit_dependencies "

[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::Qrqp::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Qrqp::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Qrqp::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Qrqp::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::Qrqp::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::Qrqp::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Qrqp::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::Qrqp::has_function "

[INTERNAL] ";

%feature("docstring") casadi::Qrqp::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::Qrqp::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Qrqp::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Qrqp::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Qrqp::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::Qrqp::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::Qrqp::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::Qrqp::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::Qrqp::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::Qrqp::generateNativeCode "

[INTERNAL]  Generate native code in the interfaced language for debugging

";

%feature("docstring") casadi::Qrqp::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::Qrqp::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Qrqp::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::Qrqp::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Qrqp::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Qrqp::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::Qrqp::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Qrqp::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::Qrqp::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Qrqp::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::Qrqp::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Qrqp::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Qrqp::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Qrqp::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::Qrqp::set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring") casadi::Qrqp::has_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Qrqp::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Qrqp::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::Qrqp::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::Qrqp::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::Qrqp::get_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Qrqp::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Qrqp::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::Qrqp::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Qrqp::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::Qrqp::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::Qrqp::has_forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::Qrqp::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::Qrqp::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Qrqp::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::Qrqp::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Qrqp::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Qrqp::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::Qrqp::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::Qrqp::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::Qrqp::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::Qrqp::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Qrqp::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::Qrqp::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Qrqp::class_name "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::Qrqp::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::Qrqp::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Qrqp "

'qrqp' plugin for Conic

Solve QPs using an active-set method

>List of available options

+-----------------+-----------+--------------------------------------------+
|       Id        |   Type    |                Description                 |
+=================+===========+============================================+
| constr_viol_tol | OT_DOUBLE | Constraint violation tolerance [1e-8].     |
+-----------------+-----------+--------------------------------------------+
| dual_inf_tol    | OT_DOUBLE | Dual feasibility violation tolerance       |
|                 |           | [1e-8]                                     |
+-----------------+-----------+--------------------------------------------+
| max_iter        | OT_INT    | Maximum number of iterations [1000].       |
+-----------------+-----------+--------------------------------------------+
| min_lam         | OT_DOUBLE | Smallest multiplier treated as inactive    |
|                 |           | for the initial active set [0].            |
+-----------------+-----------+--------------------------------------------+
| print_header    | OT_BOOL   | Print header [true].                       |
+-----------------+-----------+--------------------------------------------+
| print_info      | OT_BOOL   | Print info [true].                         |
+-----------------+-----------+--------------------------------------------+
| print_iter      | OT_BOOL   | Print iterations [true].                   |
+-----------------+-----------+--------------------------------------------+
| print_lincomb   | OT_BOOL   | Print dependant linear combinations of     |
|                 |           | constraints [false]. Printed numbers are   |
|                 |           | 0-based indices into the vector of [simple |
|                 |           | bounds;linear bounds]                      |
+-----------------+-----------+--------------------------------------------+

Joel Andersson

>List of available options

+-----------------+---------------+------------------------+---------------+
|       Id        |     Type      |      Description       |    Used in    |
+=================+===============+========================+===============+
| constr_viol_tol | OT_DOUBLE     | Constraint violation   | casadi::Qrqp  |
|                 |               | tolerance [1e-8].      |               |
+-----------------+---------------+------------------------+---------------+
| discrete        | OT_BOOLVECTOR | Indicates which of the | casadi::Conic |
|                 |               | variables are          |               |
|                 |               | discrete, i.e.         |               |
|                 |               | integer-valued         |               |
+-----------------+---------------+------------------------+---------------+
| dual_inf_tol    | OT_DOUBLE     | Dual feasibility       | casadi::Qrqp  |
|                 |               | violation tolerance    |               |
|                 |               | [1e-8]                 |               |
+-----------------+---------------+------------------------+---------------+
| error_on_fail   | OT_BOOL       | When the numerical     | casadi::Conic |
|                 |               | process returns        |               |
|                 |               | unsuccessfully, raise  |               |
|                 |               | an error (default      |               |
|                 |               | false).                |               |
+-----------------+---------------+------------------------+---------------+
| max_iter        | OT_INT        | Maximum number of      | casadi::Qrqp  |
|                 |               | iterations [1000].     |               |
+-----------------+---------------+------------------------+---------------+
| min_lam         | OT_DOUBLE     | Smallest multiplier    | casadi::Qrqp  |
|                 |               | treated as inactive    |               |
|                 |               | for the initial active |               |
|                 |               | set [0].               |               |
+-----------------+---------------+------------------------+---------------+
| print_header    | OT_BOOL       | Print header [true].   | casadi::Qrqp  |
+-----------------+---------------+------------------------+---------------+
| print_info      | OT_BOOL       | Print info [true].     | casadi::Qrqp  |
+-----------------+---------------+------------------------+---------------+
| print_iter      | OT_BOOL       | Print iterations       | casadi::Qrqp  |
|                 |               | [true].                |               |
+-----------------+---------------+------------------------+---------------+
| print_lincomb   | OT_BOOL       | Print dependant linear | casadi::Qrqp  |
|                 |               | combinations of        |               |
|                 |               | constraints [false].   |               |
|                 |               | Printed numbers are    |               |
|                 |               | 0-based indices into   |               |
|                 |               | the vector of [simple  |               |
|                 |               | bounds;linear bounds]  |               |
+-----------------+---------------+------------------------+---------------+
| print_problem   | OT_BOOL       | Print a numeric        | casadi::Conic |
|                 |               | description of the     |               |
|                 |               | problem                |               |
+-----------------+---------------+------------------------+---------------+

Diagrams
--------



C++ includes: qrqp.hpp ";

%feature("docstring") casadi::Qrqp::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::Qrqp::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::Qrqp::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::Qrqp::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::Qrqp::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Qrqp::~Qrqp "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Qrqp::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::Qrqp::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::Qrqp::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::Qrqp::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Qrqp::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::Qrqp::get_function "

[INTERNAL] ";

%feature("docstring") casadi::Qrqp::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Qrqp::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Qrqp::check_inputs "

[INTERNAL]  Check if the numerical values of the supplied bounds make sense.

";

%feature("docstring") casadi::Qrqp::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Qrqp::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::Qrqp::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::Qrqp::factory "

[INTERNAL] ";

%feature("docstring") casadi::Qrqp::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::Qrqp::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Qrqp::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Qrqp::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::Qrqp::finalize "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring") casadi::Qrqp::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::Qrqp::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Qrqp::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Qrqp::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::Qrqp::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::Qrqp::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Qrqp::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Qrqp::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Qrqp::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Qrqp::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::Qrqp::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::Qrqp::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::Qrqp::generate_dependencies "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Qrqp::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Qrqp::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::Qrqp::codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::Qrqp::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::Qrqp::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Qrqp::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Qrqp::Qrqp "

[INTERNAL]  Create a new Solver.

";

%feature("docstring") casadi::Qrqp::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Qrqp::psd_support "

[INTERNAL]  Can psd constraints be treated.

";

%feature("docstring") casadi::Qrqp::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::Qrqp::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::Qrqp::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Qrqp::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::Qrqp::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::Qrqp::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::Qrqp::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::Qrqp::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Qrqp::serialize_type "

[INTERNAL]  Serialize type information.

";


// File: classcasadi_1_1Qrsqp.xml
%feature("docstring") casadi::Qrsqp::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Qrsqp::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Qrsqp::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::Qrsqp::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::Qrsqp::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::Qrsqp::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::Qrsqp::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Qrsqp::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::Qrsqp::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::Qrsqp::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Qrsqp::get_function "

[INTERNAL]

>  const Function& casadi::OracleFunction::get_function(const std::string &name) const override
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Qrsqp::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Qrsqp::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::Qrsqp::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Qrsqp::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::Qrsqp::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::Qrsqp::setOptionsFromFile "

[INTERNAL]  Read options from parameter xml.

";

%feature("docstring") casadi::Qrsqp::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Qrsqp::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::Qrsqp::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Qrsqp::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Qrsqp::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::Qrsqp::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Qrsqp::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::Qrsqp::set_temp "

[INTERNAL]  Set the work vectors.

";

%feature("docstring") casadi::Qrsqp::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::Qrsqp::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Qrsqp::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Qrsqp::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Qrsqp::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::Qrsqp::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::Qrsqp::monitored "

[INTERNAL] ";

%feature("docstring") casadi::Qrsqp::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::Qrsqp::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::Qrsqp::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Qrsqp::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::Qrsqp::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::Qrsqp::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::Qrsqp::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Qrsqp::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::Qrsqp::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Qrsqp::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::Qrsqp::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Qrsqp::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::Qrsqp::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::Qrsqp::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Qrsqp::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Qrsqp::nlpsol_codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::Qrsqp::codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::Qrsqp::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::Qrsqp::has_function "

[INTERNAL] ";

%feature("docstring") casadi::Qrsqp::~Qrsqp "

[INTERNAL] ";

%feature("docstring") casadi::Qrsqp::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::Qrsqp::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Qrsqp::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Qrsqp::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::Qrsqp::kkt "

[INTERNAL] ";

%feature("docstring") casadi::Qrsqp::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::Qrsqp::integer_support "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring") casadi::Qrsqp "

'sqsqp' plugin for Nlpsol

A textbook SQPMethod

>List of available options

+--------------------+---------------+--------------------+----------------+
|         Id         |     Type      |    Description     |    Used in     |
+====================+===============+====================+================+
| beta               | OT_DOUBLE     | Line-search        | casadi::Qrsqp  |
|                    |               | parameter,         |                |
|                    |               | restoration factor |                |
|                    |               | of stepsize        |                |
+--------------------+---------------+--------------------+----------------+
| bound_consistency  | OT_BOOL       | Ensure that        | casadi::Nlpsol |
|                    |               | primal-dual        |                |
|                    |               | solution is        |                |
|                    |               | consistent with    |                |
|                    |               | the bounds         |                |
+--------------------+---------------+--------------------+----------------+
| c1                 | OT_DOUBLE     | Armijo condition,  | casadi::Qrsqp  |
|                    |               | coefficient of     |                |
|                    |               | decrease in merit  |                |
+--------------------+---------------+--------------------+----------------+
| calc_f             | OT_BOOL       | Calculate 'f' in   | casadi::Nlpsol |
|                    |               | the Nlpsol base    |                |
|                    |               | class              |                |
+--------------------+---------------+--------------------+----------------+
| calc_g             | OT_BOOL       | Calculate 'g' in   | casadi::Nlpsol |
|                    |               | the Nlpsol base    |                |
|                    |               | class              |                |
+--------------------+---------------+--------------------+----------------+
| calc_lam_p         | OT_BOOL       | Calculate 'lam_p'  | casadi::Nlpsol |
|                    |               | in the Nlpsol base |                |
|                    |               | class              |                |
+--------------------+---------------+--------------------+----------------+
| calc_lam_x         | OT_BOOL       | Calculate 'lam_x'  | casadi::Nlpsol |
|                    |               | in the Nlpsol base |                |
|                    |               | class              |                |
+--------------------+---------------+--------------------+----------------+
| calc_multipliers   | OT_BOOL       | Calculate Lagrange | casadi::Nlpsol |
|                    |               | multipliers in the |                |
|                    |               | Nlpsol base class  |                |
+--------------------+---------------+--------------------+----------------+
| discrete           | OT_BOOLVECTOR | Indicates which of | casadi::Nlpsol |
|                    |               | the variables are  |                |
|                    |               | discrete, i.e.     |                |
|                    |               | integer-valued     |                |
+--------------------+---------------+--------------------+----------------+
| error_on_fail      | OT_BOOL       | When the numerical | casadi::Nlpsol |
|                    |               | process returns    |                |
|                    |               | unsuccessfully,    |                |
|                    |               | raise an error     |                |
|                    |               | (default false).   |                |
+--------------------+---------------+--------------------+----------------+
| eval_errors_fatal  | OT_BOOL       | When errors occur  | casadi::Nlpsol |
|                    |               | during evaluation  |                |
|                    |               | of f,g,...,stop    |                |
|                    |               | the iterations     |                |
+--------------------+---------------+--------------------+----------------+
| hessian_approximat | OT_STRING     | limited-           | casadi::Qrsqp  |
| ion                |               | memory|exact       |                |
+--------------------+---------------+--------------------+----------------+
| ignore_check_vec   | OT_BOOL       | If set to true,    | casadi::Nlpsol |
|                    |               | the input shape of |                |
|                    |               | F will not be      |                |
|                    |               | checked.           |                |
+--------------------+---------------+--------------------+----------------+
| iteration_callback | OT_FUNCTION   | A function that    | casadi::Nlpsol |
|                    |               | will be called at  |                |
|                    |               | each iteration     |                |
|                    |               | with the solver as |                |
|                    |               | input. Check       |                |
|                    |               | documentation of   |                |
|                    |               | Callback .         |                |
+--------------------+---------------+--------------------+----------------+
| iteration_callback | OT_BOOL       | If set to true,    | casadi::Nlpsol |
| _ignore_errors     |               | errors thrown by   |                |
|                    |               | iteration_callback |                |
|                    |               | will be ignored.   |                |
+--------------------+---------------+--------------------+----------------+
| iteration_callback | OT_INT        | Only call the      | casadi::Nlpsol |
| _step              |               | callback function  |                |
|                    |               | every few          |                |
|                    |               | iterations.        |                |
+--------------------+---------------+--------------------+----------------+
| lbfgs_memory       | OT_INT        | Size of L-BFGS     | casadi::Qrsqp  |
|                    |               | memory.            |                |
+--------------------+---------------+--------------------+----------------+
| max_iter           | OT_INT        | Maximum number of  | casadi::Qrsqp  |
|                    |               | SQP iterations     |                |
+--------------------+---------------+--------------------+----------------+
| max_iter_ls        | OT_INT        | Maximum number of  | casadi::Qrsqp  |
|                    |               | linesearch         |                |
|                    |               | iterations         |                |
+--------------------+---------------+--------------------+----------------+
| merit_memory       | OT_INT        | Size of memory to  | casadi::Qrsqp  |
|                    |               | store history of   |                |
|                    |               | merit function     |                |
|                    |               | values             |                |
+--------------------+---------------+--------------------+----------------+
| min_iter           | OT_INT        | Minimum number of  | casadi::Qrsqp  |
|                    |               | SQP iterations     |                |
+--------------------+---------------+--------------------+----------------+
| min_lam            | OT_DOUBLE     | Minimum allowed    | casadi::Nlpsol |
|                    |               | multiplier value   |                |
+--------------------+---------------+--------------------+----------------+
| min_step_size      | OT_DOUBLE     | The size (inf-     | casadi::Qrsqp  |
|                    |               | norm) of the step  |                |
|                    |               | size should not    |                |
|                    |               | become smaller     |                |
|                    |               | than this.         |                |
+--------------------+---------------+--------------------+----------------+
| no_nlp_grad        | OT_BOOL       | Prevent the        | casadi::Nlpsol |
|                    |               | creation of the    |                |
|                    |               | 'nlp_grad'         |                |
|                    |               | function           |                |
+--------------------+---------------+--------------------+----------------+
| oracle_options     | OT_DICT       | Options to be      | casadi::Nlpsol |
|                    |               | passed to the      |                |
|                    |               | oracle function    |                |
+--------------------+---------------+--------------------+----------------+
| print_header       | OT_BOOL       | Print the header   | casadi::Qrsqp  |
|                    |               | with problem       |                |
|                    |               | statistics         |                |
+--------------------+---------------+--------------------+----------------+
| print_iteration    | OT_BOOL       | Print the          | casadi::Qrsqp  |
|                    |               | iterations         |                |
+--------------------+---------------+--------------------+----------------+
| qpsol              | OT_STRING     | The QP solver to   | casadi::Qrsqp  |
|                    |               | be used by the SQP |                |
|                    |               | method [qrqp]      |                |
+--------------------+---------------+--------------------+----------------+
| qpsol_options      | OT_DICT       | Options to be      | casadi::Qrsqp  |
|                    |               | passed to the QP   |                |
|                    |               | solver             |                |
+--------------------+---------------+--------------------+----------------+
| regularize         | OT_BOOL       | Automatic          | casadi::Qrsqp  |
|                    |               | regularization of  |                |
|                    |               | Lagrange Hessian.  |                |
+--------------------+---------------+--------------------+----------------+
| sens_linsol        | OT_STRING     | Linear solver used | casadi::Nlpsol |
|                    |               | for parametric     |                |
|                    |               | sensitivities      |                |
|                    |               | (default 'qr').    |                |
+--------------------+---------------+--------------------+----------------+
| sens_linsol_option | OT_DICT       | Linear solver      | casadi::Nlpsol |
| s                  |               | options used for   |                |
|                    |               | parametric         |                |
|                    |               | sensitivities.     |                |
+--------------------+---------------+--------------------+----------------+
| tol_du             | OT_DOUBLE     | Stopping criterion | casadi::Qrsqp  |
|                    |               | for dual           |                |
|                    |               | infeasability      |                |
+--------------------+---------------+--------------------+----------------+
| tol_pr             | OT_DOUBLE     | Stopping criterion | casadi::Qrsqp  |
|                    |               | for primal         |                |
|                    |               | infeasibility      |                |
+--------------------+---------------+--------------------+----------------+
| verbose_init       | OT_BOOL       | Print out timing   | casadi::Nlpsol |
|                    |               | information about  |                |
|                    |               | the different      |                |
|                    |               | stages of          |                |
|                    |               | initialization     |                |
+--------------------+---------------+--------------------+----------------+
| warn_initial_bound | OT_BOOL       | Warn if the        | casadi::Nlpsol |
| s                  |               | initial guess does |                |
|                    |               | not satisfy LBX    |                |
|                    |               | and UBX            |                |
+--------------------+---------------+--------------------+----------------+

Diagrams
--------



C++ includes: qrsqp.hpp ";

%feature("docstring") casadi::Qrsqp::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Qrsqp::disp_more "

[INTERNAL]  Print description.

";

%feature("docstring") casadi::Qrsqp::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::Qrsqp::calc_function "

[INTERNAL] ";

%feature("docstring") casadi::Qrsqp::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Qrsqp::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::Qrsqp::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::Qrsqp::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Qrsqp::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::Qrsqp::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Qrsqp::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::Qrsqp::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::Qrsqp::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::Qrsqp::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Qrsqp::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::Qrsqp::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::Qrsqp::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Qrsqp::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::Qrsqp::finalize "

[INTERNAL]  Finalize initialization.

";

%feature("docstring") casadi::Qrsqp::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Qrsqp::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::Qrsqp::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Qrsqp::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Qrsqp::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Qrsqp::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Qrsqp::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Qrsqp::factory "

[INTERNAL] ";

%feature("docstring") casadi::Qrsqp::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::Qrsqp::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::Qrsqp::expand "

[INTERNAL] ";

%feature("docstring") casadi::Qrsqp::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::Qrsqp::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::Qrsqp::getReducedHessian "

[INTERNAL] ";

%feature("docstring") casadi::Qrsqp::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::Qrsqp::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::Qrsqp::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::Qrsqp::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Qrsqp::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Qrsqp::set_function "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::Qrsqp::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::Qrsqp::check_inputs "

[INTERNAL]  Check if the inputs correspond to a well-posed problem.

";

%feature("docstring") casadi::Qrsqp::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Qrsqp::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Qrsqp::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::Qrsqp::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::Qrsqp::has_forward "

[INTERNAL]  Generate a function that calculates forward mode derivatives.

";

%feature("docstring") casadi::Qrsqp::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Qrsqp::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Qrsqp::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Qrsqp::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::Qrsqp::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::Qrsqp::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Qrsqp::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::Qrsqp::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::Qrsqp::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::Qrsqp::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::Qrsqp::generate_dependencies "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::Qrsqp::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Qrsqp::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::Qrsqp::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Qrsqp::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Qrsqp::get_forward "

[INTERNAL]  Generate a function that calculates forward mode derivatives.

";

%feature("docstring") casadi::Qrsqp::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::Qrsqp::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Qrsqp::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::Qrsqp::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Qrsqp::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::Qrsqp::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::Qrsqp::print_iteration "

[INTERNAL]  Print iteration.

>  void casadi::Qrsqp::print_iteration(casadi_int iter, double obj, double pr_inf, double du_inf, double dx_norm, double rg, casadi_int ls_trials, bool ls_success) const 
------------------------------------------------------------------------
[INTERNAL] 
Print iteration.

";

";

%feature("docstring") casadi::Qrsqp::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::Qrsqp::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Qrsqp::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Qrsqp::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::Qrsqp::Qrsqp "

[INTERNAL] ";

%feature("docstring") casadi::Qrsqp::solve_QP "

[INTERNAL] ";

%feature("docstring") casadi::Qrsqp::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::Qrsqp::eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Qrsqp::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::Qrsqp::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Qrsqp::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::Qrsqp::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::Qrsqp::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::Qrsqp::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Qrsqp::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Qrsqp::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Qrsqp::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Qrsqp::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::Qrsqp::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Qrsqp::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::Qrsqp::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Qrsqp::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Qrsqp::solve "

[INTERNAL] ";

%feature("docstring") casadi::Qrsqp::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::Qrsqp::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::Qrsqp::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::Qrsqp::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Qrsqp::jit_dependencies "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring") casadi::Qrsqp::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::Qrsqp::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Qrsqp::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::Qrsqp::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Qrsqp::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Qrsqp::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::Qrsqp::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Qrsqp::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Qrsqp::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::Qrsqp::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::Qrsqp::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::Qrsqp::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::Qrsqp::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Qrsqp::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::Qrsqp::getConic "

[INTERNAL]  Access Conic.

";

%feature("docstring") casadi::Qrsqp::create_function "

[INTERNAL]  Create an oracle function

";

%feature("docstring") casadi::Qrsqp::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::Qrsqp::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::Qrsqp::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::Qrsqp::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::Qrsqp::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Qrsqp::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::Qrsqp::get_reverse "

[INTERNAL]  Generate a function that calculates reverse mode derivatives.

";

%feature("docstring") casadi::Qrsqp::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Qrsqp::has_reverse "

[INTERNAL]  Generate a function that calculates reverse mode derivatives.

";

%feature("docstring") casadi::Qrsqp::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Qrsqp::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::Qrsqp::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Qrsqp::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::Qrsqp::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Qrsqp::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::Qrsqp::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Qrsqp::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Qrsqp::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::Qrsqp::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Qrsqp::callback "

[INTERNAL] ";

%feature("docstring") casadi::Qrsqp::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::Qrsqp::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Qrsqp::class_name "

[INTERNAL]  Get type name.

";

%feature("docstring") casadi::Qrsqp::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Qrsqp::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Qrsqp::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Qrsqp::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Qrsqp::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Qrsqp::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::Qrsqp::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::Qrsqp::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Qrsqp::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::Qrsqp::signature "

[INTERNAL]  Code generate the function.

";


// File: classcasadi_1_1Rank1.xml


// File: classcasadi_1_1RealtypeSX.xml


// File: classcasadi_1_1Reshape.xml


// File: classcasadi_1_1Rootfinder.xml
%feature("docstring") casadi::Rootfinder::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Rootfinder::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::Rootfinder::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::Rootfinder::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::Rootfinder::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::Rootfinder::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::Rootfinder::expand "

[INTERNAL] ";

%feature("docstring") casadi::Rootfinder::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::Rootfinder::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::Rootfinder::set_temp "

[INTERNAL]  Set the work vectors.

";

%feature("docstring") casadi::Rootfinder::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::Rootfinder::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Rootfinder::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::Rootfinder::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Rootfinder::calc_function "

[INTERNAL] ";

%feature("docstring") casadi::Rootfinder::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Rootfinder::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Rootfinder::monitored "

[INTERNAL] ";

%feature("docstring") casadi::Rootfinder::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Rootfinder::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Rootfinder::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::Rootfinder::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Rootfinder::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::Rootfinder::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Rootfinder::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::Rootfinder::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::Rootfinder::has_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Rootfinder::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Rootfinder::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Rootfinder::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::Rootfinder::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::Rootfinder::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::Rootfinder::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Rootfinder::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::Rootfinder::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::Rootfinder::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Rootfinder::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::Rootfinder::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Rootfinder::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::Rootfinder::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Rootfinder::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::Rootfinder::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::Rootfinder::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::Rootfinder::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::Rootfinder::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Rootfinder::set_function "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::Rootfinder::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Rootfinder::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Rootfinder::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Rootfinder::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::Rootfinder::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Rootfinder::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::Rootfinder::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Rootfinder::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Rootfinder::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::Rootfinder::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::Rootfinder::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::Rootfinder::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::Rootfinder::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::Rootfinder::Rootfinder "

[INTERNAL]  Constructor.

Parameters:
-----------

f:   Function mapping from (n+1) inputs to 1 output.

";

%feature("docstring") casadi::Rootfinder::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Rootfinder::get_function "

[INTERNAL]

>  const Function& casadi::OracleFunction::get_function(const std::string &name) const override
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Rootfinder::has_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Rootfinder::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::Rootfinder::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Rootfinder::solve "

[INTERNAL] ";

%feature("docstring") casadi::Rootfinder::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::Rootfinder::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::Rootfinder::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::Rootfinder::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::Rootfinder::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Rootfinder::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::Rootfinder::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Rootfinder::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Rootfinder::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::Rootfinder::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Rootfinder::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::Rootfinder::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::Rootfinder::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Rootfinder::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::Rootfinder::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::Rootfinder::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::Rootfinder::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Rootfinder::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::Rootfinder::ad_forward "

[INTERNAL]  Create call to (cached) derivative function, forward mode.

";

%feature("docstring") casadi::Rootfinder::~Rootfinder "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Rootfinder::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::Rootfinder::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Rootfinder::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::Rootfinder::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::Rootfinder::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::Rootfinder::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Rootfinder::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::Rootfinder::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Rootfinder::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Rootfinder::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Rootfinder::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Rootfinder::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::Rootfinder::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::Rootfinder::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::Rootfinder::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::Rootfinder "

Internal class.

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| common_options   | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | auto-generated   | nction           |
|                  |                 | functions        |                  |
+------------------+-----------------+------------------+------------------+
| constraints      | OT_INTVECTOR    | Constrain the    | casadi::Rootfind |
|                  |                 | unknowns. 0      | er               |
|                  |                 | (default): no    |                  |
|                  |                 | constraint on    |                  |
|                  |                 | ui, 1: ui >=     |                  |
|                  |                 | 0.0, -1: ui <=   |                  |
|                  |                 | 0.0, 2: ui >     |                  |
|                  |                 | 0.0, -2: ui <    |                  |
|                  |                 | 0.0.             |                  |
+------------------+-----------------+------------------+------------------+
| error_on_fail    | OT_BOOL         | When the         | casadi::Rootfind |
|                  |                 | numerical        | er               |
|                  |                 | process returns  |                  |
|                  |                 | unsuccessfully,  |                  |
|                  |                 | raise an error   |                  |
|                  |                 | (default false). |                  |
+------------------+-----------------+------------------+------------------+
| expand           | OT_BOOL         | Replace MX with  | casadi::OracleFu |
|                  |                 | SX expressions   | nction           |
|                  |                 | in problem       |                  |
|                  |                 | formulation      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| implicit_input   | OT_INT          | Index of the     | casadi::Rootfind |
|                  |                 | input that       | er               |
|                  |                 | corresponds to   |                  |
|                  |                 | the actual root- |                  |
|                  |                 | finding          |                  |
+------------------+-----------------+------------------+------------------+
| implicit_output  | OT_INT          | Index of the     | casadi::Rootfind |
|                  |                 | output that      | er               |
|                  |                 | corresponds to   |                  |
|                  |                 | the actual root- |                  |
|                  |                 | finding          |                  |
+------------------+-----------------+------------------+------------------+
| jacobian_functio | OT_FUNCTION     | Function object  | casadi::Rootfind |
| n                |                 | for calculating  | er               |
|                  |                 | the Jacobian     |                  |
|                  |                 | (autogenerated   |                  |
|                  |                 | by default)      |                  |
+------------------+-----------------+------------------+------------------+
| linear_solver    | OT_STRING       | User-defined     | casadi::Rootfind |
|                  |                 | linear solver    | er               |
|                  |                 | class. Needed    |                  |
|                  |                 | for              |                  |
|                  |                 | sensitivities.   |                  |
+------------------+-----------------+------------------+------------------+
| linear_solver_op | OT_DICT         | Options to be    | casadi::Rootfind |
| tions            |                 | passed to the    | er               |
|                  |                 | linear solver.   |                  |
+------------------+-----------------+------------------+------------------+
| monitor          | OT_STRINGVECTOR | Set of user      | casadi::OracleFu |
|                  |                 | problem          | nction           |
|                  |                 | functions to be  |                  |
|                  |                 | monitored        |                  |
+------------------+-----------------+------------------+------------------+
| show_eval_warnin | OT_BOOL         | Show warnings    | casadi::OracleFu |
| gs               |                 | generated from   | nction           |
|                  |                 | function         |                  |
|                  |                 | evaluations      |                  |
|                  |                 | [true]           |                  |
+------------------+-----------------+------------------+------------------+
| specific_options | OT_DICT         | Options for      | casadi::OracleFu |
|                  |                 | specific auto-   | nction           |
|                  |                 | generated        |                  |
|                  |                 | functions,       |                  |
|                  |                 | overwriting the  |                  |
|                  |                 | defaults from    |                  |
|                  |                 | common_options.  |                  |
|                  |                 | Nested           |                  |
|                  |                 | dictionary.      |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: rootfinder_impl.hpp ";

%feature("docstring") casadi::Rootfinder::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::Rootfinder::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::Rootfinder::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Rootfinder::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Rootfinder::finalize "

[INTERNAL]  Finalize initialization.

";

%feature("docstring") casadi::Rootfinder::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Rootfinder::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Rootfinder::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Rootfinder::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::Rootfinder::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::Rootfinder::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Rootfinder::class_name "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::Rootfinder::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::Rootfinder::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Rootfinder::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Rootfinder::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Rootfinder::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Rootfinder::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::Rootfinder::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::Rootfinder::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::Rootfinder::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::Rootfinder::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Rootfinder::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::Rootfinder::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::Rootfinder::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Rootfinder::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::Rootfinder::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::Rootfinder::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Rootfinder::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::Rootfinder::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Rootfinder::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Rootfinder::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Rootfinder::ad_reverse "

[INTERNAL]  Create call to (cached) derivative function, reverse mode.

";

%feature("docstring") casadi::Rootfinder::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::Rootfinder::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::Rootfinder::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::Rootfinder::create_function "

[INTERNAL]  Create an oracle function

";

%feature("docstring") casadi::Rootfinder::jit_dependencies "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring") casadi::Rootfinder::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Rootfinder::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Rootfinder::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Rootfinder::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Rootfinder::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::Rootfinder::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Rootfinder::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::Rootfinder::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Rootfinder::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Rootfinder::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::Rootfinder::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::Rootfinder::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::Rootfinder::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::Rootfinder::has_function "

[INTERNAL] ";

%feature("docstring") casadi::Rootfinder::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::Rootfinder::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Rootfinder::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Rootfinder::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Rootfinder::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::Rootfinder::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Rootfinder::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::Rootfinder::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::Rootfinder::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Rootfinder::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::Rootfinder::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Rootfinder::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Rootfinder::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::Rootfinder::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Rootfinder::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Rootfinder::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Rootfinder::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::Rootfinder::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Rootfinder::codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::Rootfinder::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::Rootfinder::get_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Rootfinder::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::Rootfinder::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::Rootfinder::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Rootfinder::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::Rootfinder::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Rootfinder::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::Rootfinder::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::Rootfinder::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Rootfinder::factory "

[INTERNAL] ";

%feature("docstring") casadi::Rootfinder::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Rootfinder::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::Rootfinder::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::Rootfinder::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::Rootfinder::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Rootfinder::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Rootfinder::eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Rootfinder::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::Rootfinder::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Rootfinder::generate_dependencies "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::Rootfinder::get_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Rootfinder::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::Rootfinder::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::Rootfinder::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";


// File: classcasadi_1_1RungeKutta.xml
%feature("docstring") casadi::RungeKutta::rx "

[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::rz "

[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::RungeKutta::~RungeKutta "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::RungeKutta::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::RungeKutta::rq "

[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::rp "

[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::jit_dependencies "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring") casadi::RungeKutta::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::RungeKutta::has_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::RungeKutta::aug_fwd "

[INTERNAL]  Generate a augmented DAE system with nfwd forward sensitivities.

";

%feature("docstring") casadi::RungeKutta::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::RungeKutta::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::RungeKutta::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::RungeKutta::finalize "

[INTERNAL]  Finalize initialization.

";

%feature("docstring") casadi::RungeKutta::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::RungeKutta::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::RungeKutta::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::RungeKutta::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::RungeKutta::class_name "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::RungeKutta::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::RungeKutta::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::RungeKutta::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::RungeKutta::create_advanced "

[INTERNAL]  Helper for a more powerful 'integrator' factory

";

%feature("docstring") casadi::RungeKutta::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::RungeKutta::expand "

[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::RungeKutta::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::RungeKutta::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::RungeKutta::print_stats "

[INTERNAL]  Print solver statistics.

";

%feature("docstring") casadi::RungeKutta::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::RungeKutta::setStopTime "

[INTERNAL]  Set stop time for the integration.

";

%feature("docstring") casadi::RungeKutta::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::RungeKutta::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::RungeKutta::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::RungeKutta::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::RungeKutta::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::RungeKutta::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::RungeKutta::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::RungeKutta::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::RungeKutta::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::RungeKutta::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::RungeKutta::getExplicit "

[INTERNAL]  Get explicit dynamics.

";

%feature("docstring") casadi::RungeKutta::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::RungeKutta::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::RungeKutta::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::RungeKutta::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::RungeKutta::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::RungeKutta::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::RungeKutta::sp_jac_rdae "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (backward
problem)

";

%feature("docstring") casadi::RungeKutta::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::RungeKutta::p "

[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::q "

[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::t "

[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::z "

[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::RungeKutta::x "

[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::RungeKutta::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::RungeKutta::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::RungeKutta::RungeKutta "

[INTERNAL]  Constructor.

";

%feature("docstring") casadi::RungeKutta::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::RungeKutta::factory "

[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::RungeKutta::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::RungeKutta::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::RungeKutta::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::RungeKutta::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::RungeKutta::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::RungeKutta::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::RungeKutta::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::RungeKutta::create_function "

[INTERNAL]  Create an oracle function

";

%feature("docstring") casadi::RungeKutta::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::get_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::RungeKutta::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::RungeKutta::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::RungeKutta::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::RungeKutta::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::RungeKutta::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::RungeKutta::codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::RungeKutta::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::RungeKutta::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::RungeKutta::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::RungeKutta::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::RungeKutta::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::RungeKutta::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::RungeKutta::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::RungeKutta::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::RungeKutta::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::RungeKutta::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::RungeKutta::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::RungeKutta::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::RungeKutta::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::RungeKutta::sp_jac_dae "

[INTERNAL]  Create sparsity pattern of the extended Jacobian (forward
problem)

";

%feature("docstring") casadi::RungeKutta::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::RungeKutta::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::RungeKutta::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::RungeKutta::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::RungeKutta::get_function "

[INTERNAL]

>  const Function& casadi::OracleFunction::get_function(const std::string &name) const override
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::RungeKutta::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::RungeKutta::algebraic_state_output "

[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::setupFG "

[INTERNAL]  Setup F and G.

";

%feature("docstring") casadi::RungeKutta::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::RungeKutta::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::RungeKutta::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::RungeKutta::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::RungeKutta::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::RungeKutta::retreat "

[INTERNAL]  Retreat solution in time.

";

%feature("docstring") casadi::RungeKutta::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::RungeKutta::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::RungeKutta::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::RungeKutta::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::RungeKutta::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::RungeKutta::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::RungeKutta::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::RungeKutta::advance "

[INTERNAL]  Advance solution in time.

";

%feature("docstring") casadi::RungeKutta::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::RungeKutta::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::RungeKutta::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::RungeKutta::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::RungeKutta::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::RungeKutta::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::RungeKutta::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::RungeKutta::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::RungeKutta::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::RungeKutta::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::RungeKutta "

[INTERNAL]  'rk' plugin for Integrator

Fixed-step explicit Runge-Kutta integrator for ODEs Currently implements
RK4.

The method is still under development

Joel Andersson

C++ includes: runge_kutta.hpp ";

%feature("docstring") casadi::RungeKutta::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::RungeKutta::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::RungeKutta::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::RungeKutta::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::RungeKutta::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::RungeKutta::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::RungeKutta::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::RungeKutta::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::RungeKutta::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::RungeKutta::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::RungeKutta::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::RungeKutta::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::RungeKutta::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::RungeKutta::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::RungeKutta::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::RungeKutta::has_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::RungeKutta::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::RungeKutta::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::RungeKutta::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::RungeKutta::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::RungeKutta::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::RungeKutta::set_function "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::RungeKutta::getExplicitB "

[INTERNAL]  Get explicit dynamics (backward problem)

";

%feature("docstring") casadi::RungeKutta::set_temp "

[INTERNAL]  Set the work vectors.

";

%feature("docstring") casadi::RungeKutta::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::RungeKutta::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::RungeKutta::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::RungeKutta::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::RungeKutta::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::RungeKutta::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::RungeKutta::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::RungeKutta::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::RungeKutta::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::RungeKutta::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::RungeKutta::monitored "

[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::RungeKutta::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::RungeKutta::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::RungeKutta::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::RungeKutta::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::RungeKutta::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::RungeKutta::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::RungeKutta::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::RungeKutta::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::RungeKutta::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::RungeKutta::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::RungeKutta::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::RungeKutta::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::RungeKutta::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::RungeKutta::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::RungeKutta::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::RungeKutta::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::RungeKutta::resetB "

[INTERNAL]  Reset the backward problem and take time to tf.

";

%feature("docstring") casadi::RungeKutta::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::RungeKutta::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::RungeKutta::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::RungeKutta::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::RungeKutta::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::RungeKutta::eval "

[INTERNAL]  evaluate

";

%feature("docstring") casadi::RungeKutta::calc_function "

[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::RungeKutta::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::RungeKutta::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::RungeKutta::algebraic_state_init "

[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::RungeKutta::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::RungeKutta::get_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::RungeKutta::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::RungeKutta::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::RungeKutta::reset "

[INTERNAL]  Reset the forward problem.

";

%feature("docstring") casadi::RungeKutta::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::RungeKutta::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::RungeKutta::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::RungeKutta::init "

[INTERNAL]  Initialize stage.

";

%feature("docstring") casadi::RungeKutta::generate_dependencies "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::RungeKutta::getDerivativeOptions "

[INTERNAL]  Set solver specific options to generated augmented integrators.

";

%feature("docstring") casadi::RungeKutta::has_function "

[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::RungeKutta::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::RungeKutta::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::RungeKutta::aug_adj "

[INTERNAL]  Generate a augmented DAE system with nadj adjoint sensitivities.

";

%feature("docstring") casadi::RungeKutta::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::RungeKutta::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::RungeKutta::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::RungeKutta::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::RungeKutta::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::RungeKutta::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::RungeKutta::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::RungeKutta::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::RungeKutta::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::RungeKutta::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::RungeKutta::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";


// File: classcasadi_1_1ScopedTiming.xml
%feature("docstring") casadi::ScopedTiming::~ScopedTiming "

[INTERNAL] ";

%feature("docstring") casadi::ScopedTiming "

[INTERNAL] C++ includes: timing.hpp ";

%feature("docstring") casadi::ScopedTiming::ScopedTiming "

[INTERNAL] ";


// File: classcasadi_1_1Scpgen.xml
%feature("docstring") casadi::Scpgen::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Scpgen::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::Scpgen::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::Scpgen::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Scpgen::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::Scpgen::create_function "

[INTERNAL]  Create an oracle function

";

%feature("docstring") casadi::Scpgen::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::Scpgen::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::Scpgen::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::Scpgen::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Scpgen::eval_vec "

[INTERNAL] ";

%feature("docstring") casadi::Scpgen::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::Scpgen::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Scpgen::eval_res "

[INTERNAL] ";

%feature("docstring") casadi::Scpgen::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Scpgen::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Scpgen::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::Scpgen::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::Scpgen::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::Scpgen::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Scpgen::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::Scpgen::nlpsol_codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::Scpgen::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::Scpgen::codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::Scpgen::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::Scpgen::eval_mat "

[INTERNAL] ";

%feature("docstring") casadi::Scpgen::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Scpgen::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Scpgen::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Scpgen::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Scpgen::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::Scpgen::disp_more "

[INTERNAL]  Print description.

";

%feature("docstring") casadi::Scpgen::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::Scpgen::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::Scpgen::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::Scpgen::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Scpgen::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::Scpgen::expand "

[INTERNAL] ";

%feature("docstring") casadi::Scpgen::get_reverse "

[INTERNAL]  Generate a function that calculates reverse mode derivatives.

";

%feature("docstring") casadi::Scpgen::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Scpgen::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Scpgen::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::Scpgen::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::Scpgen::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::Scpgen::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Scpgen::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::Scpgen::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::Scpgen::Scpgen "

[INTERNAL] ";

%feature("docstring") casadi::Scpgen::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::Scpgen::setOptionsFromFile "

[INTERNAL]  Read options from parameter xml.

";

%feature("docstring") casadi::Scpgen::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Scpgen::finalize "

[INTERNAL]  Finalize initialization.

";

%feature("docstring") casadi::Scpgen::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::Scpgen::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Scpgen::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Scpgen::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Scpgen::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Scpgen::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::Scpgen::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Scpgen::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Scpgen::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::Scpgen::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Scpgen::integer_support "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring") casadi::Scpgen::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Scpgen::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::Scpgen::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::Scpgen::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::Scpgen::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Scpgen::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::Scpgen::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Scpgen::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::Scpgen::primalInfeasibility "

[INTERNAL] ";

%feature("docstring") casadi::Scpgen::set_function "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::Scpgen::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Scpgen::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::Scpgen::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::Scpgen::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Scpgen::get_forward "

[INTERNAL]  Generate a function that calculates forward mode derivatives.

";

%feature("docstring") casadi::Scpgen::getConic "

[INTERNAL]  Access qpsol.

";

%feature("docstring") casadi::Scpgen::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::Scpgen::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::Scpgen::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::Scpgen::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Scpgen::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::Scpgen::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Scpgen::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Scpgen::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::Scpgen::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::Scpgen::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Scpgen::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::Scpgen::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::Scpgen::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::Scpgen::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::Scpgen::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Scpgen::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Scpgen::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Scpgen::solve "

[INTERNAL] ";

%feature("docstring") casadi::Scpgen::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Scpgen::has_reverse "

[INTERNAL]  Generate a function that calculates reverse mode derivatives.

";

%feature("docstring") casadi::Scpgen::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::Scpgen::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::Scpgen::dualInfeasibility "

[INTERNAL] ";

%feature("docstring") casadi::Scpgen::class_name "

[INTERNAL]  Get type name.

";

%feature("docstring") casadi::Scpgen::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Scpgen::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::Scpgen::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::Scpgen::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::Scpgen::solve_qp "

[INTERNAL] ";

%feature("docstring") casadi::Scpgen::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::Scpgen::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Scpgen::eval_exp "

[INTERNAL] ";

%feature("docstring") casadi::Scpgen::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Scpgen::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Scpgen::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::Scpgen::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::Scpgen::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::Scpgen::regularize "

[INTERNAL] ";

%feature("docstring") casadi::Scpgen::set_temp "

[INTERNAL]  Set the work vectors.

";

%feature("docstring") casadi::Scpgen::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::Scpgen::callback "

[INTERNAL] ";

%feature("docstring") casadi::Scpgen::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Scpgen::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Scpgen::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::Scpgen::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Scpgen::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Scpgen::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::Scpgen::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::Scpgen::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Scpgen::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::Scpgen::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Scpgen::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Scpgen::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::Scpgen::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::Scpgen::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Scpgen::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Scpgen::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Scpgen::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Scpgen::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Scpgen::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Scpgen::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::Scpgen::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::Scpgen::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::Scpgen::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::Scpgen::check_inputs "

[INTERNAL]  Check if the inputs correspond to a well-posed problem.

";

%feature("docstring") casadi::Scpgen::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::Scpgen::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Scpgen::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Scpgen::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::Scpgen::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Scpgen::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::Scpgen::generate_dependencies "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::Scpgen::monitored "

[INTERNAL] ";

%feature("docstring") casadi::Scpgen::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Scpgen::get_function "

[INTERNAL]

>  const Function& casadi::OracleFunction::get_function(const std::string &name) const override
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Scpgen::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::Scpgen::getReducedHessian "

[INTERNAL] ";

%feature("docstring") casadi::Scpgen::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Scpgen::kkt "

[INTERNAL] ";

%feature("docstring") casadi::Scpgen::eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Scpgen::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Scpgen::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::Scpgen::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Scpgen::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Scpgen::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::Scpgen::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::Scpgen::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::Scpgen::jit_dependencies "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring") casadi::Scpgen::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Scpgen::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Scpgen::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::Scpgen::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Scpgen::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Scpgen::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Scpgen::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::Scpgen::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Scpgen::line_search "

[INTERNAL] ";

%feature("docstring") casadi::Scpgen::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::Scpgen::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Scpgen::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Scpgen::has_forward "

[INTERNAL]  Generate a function that calculates forward mode derivatives.

";

%feature("docstring") casadi::Scpgen::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::Scpgen::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Scpgen::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::Scpgen::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::Scpgen::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::Scpgen::calc_function "

[INTERNAL] ";

%feature("docstring") casadi::Scpgen::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::Scpgen::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::Scpgen::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::Scpgen::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::Scpgen::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Scpgen::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Scpgen::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::Scpgen::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::Scpgen::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Scpgen::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Scpgen::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::Scpgen::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::Scpgen::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::Scpgen::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Scpgen::factory "

[INTERNAL] ";

%feature("docstring") casadi::Scpgen::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::Scpgen::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::Scpgen "

'scpgen' plugin for Nlpsol

A structure-exploiting sequential quadratic programming (to be come
sequential convex programming) method for nonlinear programming.

>List of available options

+-----------------------+-----------------+--------------------------------+
|          Id           |      Type       |          Description           |
+=======================+=================+================================+
| beta                  | OT_DOUBLE       | Line-search parameter,         |
|                       |                 | restoration factor of stepsize |
+-----------------------+-----------------+--------------------------------+
| c1                    | OT_DOUBLE       | Armijo condition, coefficient  |
|                       |                 | of decrease in merit           |
+-----------------------+-----------------+--------------------------------+
| codegen               | OT_BOOL         | C-code generation              |
+-----------------------+-----------------+--------------------------------+
| hessian_approximation | OT_STRING       | gauss-newton|exact             |
+-----------------------+-----------------+--------------------------------+
| lbfgs_memory          | OT_INT          | Size of L-BFGS memory.         |
+-----------------------+-----------------+--------------------------------+
| max_iter              | OT_INT          | Maximum number of SQP          |
|                       |                 | iterations                     |
+-----------------------+-----------------+--------------------------------+
| max_iter_ls           | OT_INT          | Maximum number of linesearch   |
|                       |                 | iterations                     |
+-----------------------+-----------------+--------------------------------+
| merit_memsize         | OT_INT          | Size of memory to store        |
|                       |                 | history of merit function      |
|                       |                 | values                         |
+-----------------------+-----------------+--------------------------------+
| merit_start           | OT_DOUBLE       | Lower bound for the merit      |
|                       |                 | function parameter             |
+-----------------------+-----------------+--------------------------------+
| name_x                | OT_STRINGVECTOR | Names of the variables.        |
+-----------------------+-----------------+--------------------------------+
| print_header          | OT_BOOL         | Print the header with problem  |
|                       |                 | statistics                     |
+-----------------------+-----------------+--------------------------------+
| print_x               | OT_INTVECTOR    | Which variables to print.      |
+-----------------------+-----------------+--------------------------------+
| qpsol                 | OT_STRING       | The QP solver to be used by    |
|                       |                 | the SQP method                 |
+-----------------------+-----------------+--------------------------------+
| qpsol_options         | OT_DICT         | Options to be passed to the QP |
|                       |                 | solver                         |
+-----------------------+-----------------+--------------------------------+
| reg_threshold         | OT_DOUBLE       | Threshold for the              |
|                       |                 | regularization.                |
+-----------------------+-----------------+--------------------------------+
| regularize            | OT_BOOL         | Automatic regularization of    |
|                       |                 | Lagrange Hessian.              |
+-----------------------+-----------------+--------------------------------+
| tol_du                | OT_DOUBLE       | Stopping criterion for dual    |
|                       |                 | infeasability                  |
+-----------------------+-----------------+--------------------------------+
| tol_pr                | OT_DOUBLE       | Stopping criterion for primal  |
|                       |                 | infeasibility                  |
+-----------------------+-----------------+--------------------------------+
| tol_pr_step           | OT_DOUBLE       | Stopping criterion for the     |
|                       |                 | step size                      |
+-----------------------+-----------------+--------------------------------+
| tol_reg               | OT_DOUBLE       | Stopping criterion for         |
|                       |                 | regularization                 |
+-----------------------+-----------------+--------------------------------+

Joel Andersson, Attila Kozma and Joris Gillis

>List of available options

+-------------------+-----------------+-------------------+----------------+
|        Id         |      Type       |    Description    |    Used in     |
+===================+=================+===================+================+
| beta              | OT_DOUBLE       | Line-search       | casadi::Scpgen |
|                   |                 | parameter,        |                |
|                   |                 | restoration       |                |
|                   |                 | factor of         |                |
|                   |                 | stepsize          |                |
+-------------------+-----------------+-------------------+----------------+
| bound_consistency | OT_BOOL         | Ensure that       | casadi::Nlpsol |
|                   |                 | primal-dual       |                |
|                   |                 | solution is       |                |
|                   |                 | consistent with   |                |
|                   |                 | the bounds        |                |
+-------------------+-----------------+-------------------+----------------+
| c1                | OT_DOUBLE       | Armijo condition, | casadi::Scpgen |
|                   |                 | coefficient of    |                |
|                   |                 | decrease in merit |                |
+-------------------+-----------------+-------------------+----------------+
| calc_f            | OT_BOOL         | Calculate 'f' in  | casadi::Nlpsol |
|                   |                 | the Nlpsol base   |                |
|                   |                 | class             |                |
+-------------------+-----------------+-------------------+----------------+
| calc_g            | OT_BOOL         | Calculate 'g' in  | casadi::Nlpsol |
|                   |                 | the Nlpsol base   |                |
|                   |                 | class             |                |
+-------------------+-----------------+-------------------+----------------+
| calc_lam_p        | OT_BOOL         | Calculate 'lam_p' | casadi::Nlpsol |
|                   |                 | in the Nlpsol     |                |
|                   |                 | base class        |                |
+-------------------+-----------------+-------------------+----------------+
| calc_lam_x        | OT_BOOL         | Calculate 'lam_x' | casadi::Nlpsol |
|                   |                 | in the Nlpsol     |                |
|                   |                 | base class        |                |
+-------------------+-----------------+-------------------+----------------+
| calc_multipliers  | OT_BOOL         | Calculate         | casadi::Nlpsol |
|                   |                 | Lagrange          |                |
|                   |                 | multipliers in    |                |
|                   |                 | the Nlpsol base   |                |
|                   |                 | class             |                |
+-------------------+-----------------+-------------------+----------------+
| codegen           | OT_BOOL         | C-code generation | casadi::Scpgen |
+-------------------+-----------------+-------------------+----------------+
| discrete          | OT_BOOLVECTOR   | Indicates which   | casadi::Nlpsol |
|                   |                 | of the variables  |                |
|                   |                 | are discrete,     |                |
|                   |                 | i.e. integer-     |                |
|                   |                 | valued            |                |
+-------------------+-----------------+-------------------+----------------+
| error_on_fail     | OT_BOOL         | When the          | casadi::Nlpsol |
|                   |                 | numerical process |                |
|                   |                 | returns           |                |
|                   |                 | unsuccessfully,   |                |
|                   |                 | raise an error    |                |
|                   |                 | (default false).  |                |
+-------------------+-----------------+-------------------+----------------+
| eval_errors_fatal | OT_BOOL         | When errors occur | casadi::Nlpsol |
|                   |                 | during evaluation |                |
|                   |                 | of f,g,...,stop   |                |
|                   |                 | the iterations    |                |
+-------------------+-----------------+-------------------+----------------+
| hessian_approxima | OT_STRING       | gauss-            | casadi::Scpgen |
| tion              |                 | newton|exact      |                |
+-------------------+-----------------+-------------------+----------------+
| ignore_check_vec  | OT_BOOL         | If set to true,   | casadi::Nlpsol |
|                   |                 | the input shape   |                |
|                   |                 | of F will not be  |                |
|                   |                 | checked.          |                |
+-------------------+-----------------+-------------------+----------------+
| iteration_callbac | OT_FUNCTION     | A function that   | casadi::Nlpsol |
| k                 |                 | will be called at |                |
|                   |                 | each iteration    |                |
|                   |                 | with the solver   |                |
|                   |                 | as input. Check   |                |
|                   |                 | documentation of  |                |
|                   |                 | Callback .        |                |
+-------------------+-----------------+-------------------+----------------+
| iteration_callbac | OT_BOOL         | If set to true,   | casadi::Nlpsol |
| k_ignore_errors   |                 | errors thrown by  |                |
|                   |                 | iteration_callbac |                |
|                   |                 | k will be         |                |
|                   |                 | ignored.          |                |
+-------------------+-----------------+-------------------+----------------+
| iteration_callbac | OT_INT          | Only call the     | casadi::Nlpsol |
| k_step            |                 | callback function |                |
|                   |                 | every few         |                |
|                   |                 | iterations.       |                |
+-------------------+-----------------+-------------------+----------------+
| lbfgs_memory      | OT_INT          | Size of L-BFGS    | casadi::Scpgen |
|                   |                 | memory.           |                |
+-------------------+-----------------+-------------------+----------------+
| max_iter          | OT_INT          | Maximum number of | casadi::Scpgen |
|                   |                 | SQP iterations    |                |
+-------------------+-----------------+-------------------+----------------+
| max_iter_ls       | OT_INT          | Maximum number of | casadi::Scpgen |
|                   |                 | linesearch        |                |
|                   |                 | iterations        |                |
+-------------------+-----------------+-------------------+----------------+
| merit_memsize     | OT_INT          | Size of memory to | casadi::Scpgen |
|                   |                 | store history of  |                |
|                   |                 | merit function    |                |
|                   |                 | values            |                |
+-------------------+-----------------+-------------------+----------------+
| merit_start       | OT_DOUBLE       | Lower bound for   | casadi::Scpgen |
|                   |                 | the merit         |                |
|                   |                 | function          |                |
|                   |                 | parameter         |                |
+-------------------+-----------------+-------------------+----------------+
| min_lam           | OT_DOUBLE       | Minimum allowed   | casadi::Nlpsol |
|                   |                 | multiplier value  |                |
+-------------------+-----------------+-------------------+----------------+
| name_x            | OT_STRINGVECTOR | Names of the      | casadi::Scpgen |
|                   |                 | variables.        |                |
+-------------------+-----------------+-------------------+----------------+
| no_nlp_grad       | OT_BOOL         | Prevent the       | casadi::Nlpsol |
|                   |                 | creation of the   |                |
|                   |                 | 'nlp_grad'        |                |
|                   |                 | function          |                |
+-------------------+-----------------+-------------------+----------------+
| oracle_options    | OT_DICT         | Options to be     | casadi::Nlpsol |
|                   |                 | passed to the     |                |
|                   |                 | oracle function   |                |
+-------------------+-----------------+-------------------+----------------+
| print_header      | OT_BOOL         | Print the header  | casadi::Scpgen |
|                   |                 | with problem      |                |
|                   |                 | statistics        |                |
+-------------------+-----------------+-------------------+----------------+
| print_x           | OT_INTVECTOR    | Which variables   | casadi::Scpgen |
|                   |                 | to print.         |                |
+-------------------+-----------------+-------------------+----------------+
| qpsol             | OT_STRING       | The QP solver to  | casadi::Scpgen |
|                   |                 | be used by the    |                |
|                   |                 | SQP method        |                |
+-------------------+-----------------+-------------------+----------------+
| qpsol_options     | OT_DICT         | Options to be     | casadi::Scpgen |
|                   |                 | passed to the QP  |                |
|                   |                 | solver            |                |
+-------------------+-----------------+-------------------+----------------+
| reg_threshold     | OT_DOUBLE       | Threshold for the | casadi::Scpgen |
|                   |                 | regularization.   |                |
+-------------------+-----------------+-------------------+----------------+
| regularize        | OT_BOOL         | Automatic         | casadi::Scpgen |
|                   |                 | regularization of |                |
|                   |                 | Lagrange Hessian. |                |
+-------------------+-----------------+-------------------+----------------+
| sens_linsol       | OT_STRING       | Linear solver     | casadi::Nlpsol |
|                   |                 | used for          |                |
|                   |                 | parametric        |                |
|                   |                 | sensitivities     |                |
|                   |                 | (default 'qr').   |                |
+-------------------+-----------------+-------------------+----------------+
| sens_linsol_optio | OT_DICT         | Linear solver     | casadi::Nlpsol |
| ns                |                 | options used for  |                |
|                   |                 | parametric        |                |
|                   |                 | sensitivities.    |                |
+-------------------+-----------------+-------------------+----------------+
| tol_du            | OT_DOUBLE       | Stopping          | casadi::Scpgen |
|                   |                 | criterion for     |                |
|                   |                 | dual              |                |
|                   |                 | infeasability     |                |
+-------------------+-----------------+-------------------+----------------+
| tol_pr            | OT_DOUBLE       | Stopping          | casadi::Scpgen |
|                   |                 | criterion for     |                |
|                   |                 | primal            |                |
|                   |                 | infeasibility     |                |
+-------------------+-----------------+-------------------+----------------+
| tol_pr_step       | OT_DOUBLE       | Stopping          | casadi::Scpgen |
|                   |                 | criterion for the |                |
|                   |                 | step size         |                |
+-------------------+-----------------+-------------------+----------------+
| tol_reg           | OT_DOUBLE       | Stopping          | casadi::Scpgen |
|                   |                 | criterion for     |                |
|                   |                 | regularization    |                |
+-------------------+-----------------+-------------------+----------------+
| verbose_init      | OT_BOOL         | Print out timing  | casadi::Nlpsol |
|                   |                 | information about |                |
|                   |                 | the different     |                |
|                   |                 | stages of         |                |
|                   |                 | initialization    |                |
+-------------------+-----------------+-------------------+----------------+
| warn_initial_boun | OT_BOOL         | Warn if the       | casadi::Nlpsol |
| ds                |                 | initial guess     |                |
|                   |                 | does not satisfy  |                |
|                   |                 | LBX and UBX       |                |
+-------------------+-----------------+-------------------+----------------+

Diagrams
--------



C++ includes: scpgen.hpp ";

%feature("docstring") casadi::Scpgen::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Scpgen::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::Scpgen::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::Scpgen::~Scpgen "

[INTERNAL] ";

%feature("docstring") casadi::Scpgen::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Scpgen::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Scpgen::has_function "

[INTERNAL] ";

%feature("docstring") casadi::Scpgen::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::Scpgen::printIteration "

[INTERNAL] ";

%feature("docstring") casadi::Scpgen::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";


// File: classcasadi_1_1SerializerBase.xml
%feature("docstring") casadi::SerializerBase "

C++ includes: serializer.hpp ";


// File: classcasadi_1_1SerializingStream.xml
%feature("docstring") casadi::SerializingStream::pack "

Serializes an object to the output stream.

";

%feature("docstring") casadi::SerializingStream "

Helper class for Serialization.

Joris Gillis

C++ includes: serializing_stream.hpp ";

%feature("docstring") casadi::SerializingStream::SerializingStream "

";

";


// File: classcasadi_1_1SetNonzeros.xml


// File: classcasadi_1_1SetNonzerosParam.xml


// File: classcasadi_1_1SetNonzerosParamParam.xml


// File: classcasadi_1_1SetNonzerosParamSlice.xml


// File: classcasadi_1_1SetNonzerosParamVector.xml


// File: classcasadi_1_1SetNonzerosSlice.xml


// File: classcasadi_1_1SetNonzerosSlice2.xml


// File: classcasadi_1_1SetNonzerosSliceParam.xml


// File: classcasadi_1_1SetNonzerosVector.xml


// File: classcasadi_1_1SharedObject.xml
%feature("docstring") casadi::SharedObject::class_name "

Get class name.

";

%feature("docstring") casadi::SharedObject::is_null "

Is a null pointer?

";

%feature("docstring") casadi::SharedObject::print_ptr "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring") casadi::SharedObject::disp "

Print a description of the object.

";

%feature("docstring") casadi::SharedObject::get_str "

Get string representation.

";

%feature("docstring") casadi::SharedObject "

SharedObject implements a reference counting framework similar for efficient
and easily-maintained memory management.

To use the class, both the SharedObject class (the public class), and the
SharedObjectInternal class (the internal class) must be inherited from. It
can be done in two different files and together with memory management, this
approach provides a clear distinction of which methods of the class are to
be considered \"public\", i.e. methods for public use that can be considered
to remain over time with small changes, and the internal memory.

When interfacing a software, which typically includes including some header
file, this is best done only in the file where the internal class is
defined, to avoid polluting the global namespace and other side effects.

The default constructor always means creating a null pointer to an internal
class only. To allocate an internal class (this works only when the internal
class isn't abstract), use the constructor with arguments.

The copy constructor and the assignment operator perform shallow copies
only, to make a deep copy you must use the clone method explicitly. This
will give a shared pointer instance.

In an inheritance hierarchy, you can cast down automatically, e.g. (
SXFunction is a child class of Function): SXFunction derived(...); Function
base = derived;

To cast up, use the shared_cast template function, which works analogously
to dynamic_cast, static_cast, const_cast etc, e.g.: SXFunction derived(...);
Function base = derived; SXFunction derived_from_base =
shared_cast<SXFunction>(base);

A failed shared_cast will result in a null pointer (cf. dynamic_cast)

Joel Andersson

C++ includes: shared_object.hpp ";

%feature("docstring") casadi::SharedObject::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";


// File: classcasadi_1_1ShellCompiler.xml
%feature("docstring") casadi::ShellCompiler::read_external "

[INTERNAL]  Get an external function declaration.

";

%feature("docstring") casadi::ShellCompiler::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::ShellCompiler::~ShellCompiler "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::ShellCompiler::finalize "

[INTERNAL] ";

%feature("docstring") casadi::ShellCompiler::serialize_body "

[INTERNAL] ";

%feature("docstring") casadi::ShellCompiler::disp "

[INTERNAL]  Print.

";

%feature("docstring") casadi::ShellCompiler::serialize_type "

[INTERNAL] ";

%feature("docstring") casadi::ShellCompiler::plugin_name "

[INTERNAL]  Get name of plugin.

";

%feature("docstring") casadi::ShellCompiler::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::ShellCompiler::to_text "

[INTERNAL]  Get entry as a text.

";

%feature("docstring") casadi::ShellCompiler::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::ShellCompiler::get_function "

[INTERNAL]  Get a function pointer for numerical evaluation.

";

%feature("docstring") casadi::ShellCompiler::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::ShellCompiler::serialize "

[INTERNAL] ";

%feature("docstring") casadi::ShellCompiler::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::ShellCompiler::library "

[INTERNAL]  Get library name.

";

%feature("docstring") casadi::ShellCompiler::class_name "

[INTERNAL]  Get type name.

";

%feature("docstring") casadi::ShellCompiler::get_meta "

[INTERNAL]  Get entry as a text.

";

%feature("docstring") casadi::ShellCompiler::has_function "

[INTERNAL]  Get a function pointer for numerical evaluation.

";

%feature("docstring") casadi::ShellCompiler::body "

[INTERNAL]  Get the function body, if inlined.

";

%feature("docstring") casadi::ShellCompiler::has_meta "

[INTERNAL]  Does an entry exist?

";

%feature("docstring") casadi::ShellCompiler "

'shell' plugin for Importer

Joel Andersson  Interface to the JIT compiler SHELL

>List of available options

+----------------------+-----------------+---------------------------------+
|          Id          |      Type       |           Description           |
+======================+=================+=================================+
| cleanup              | OT_BOOL         | Cleanup temporary files when    |
|                      |                 | unloading. Default: true        |
+----------------------+-----------------+---------------------------------+
| compiler             | OT_STRING       | Compiler command                |
+----------------------+-----------------+---------------------------------+
| compiler_flags       | OT_STRINGVECTOR | Alias for 'compiler_flags'      |
+----------------------+-----------------+---------------------------------+
| compiler_output_flag | OT_STRING       | Compiler flag to denote object  |
|                      |                 | output. Default: '-o '          |
+----------------------+-----------------+---------------------------------+
| compiler_setup       | OT_STRING       | Compiler setup command.         |
|                      |                 | Intended to be fixed. The       |
|                      |                 | 'flag' option is the prefered   |
|                      |                 | way to set custom flags.        |
+----------------------+-----------------+---------------------------------+
| extra_suffixes       | OT_STRINGVECTOR | List of suffixes for extra      |
|                      |                 | files that the compiler may     |
|                      |                 | generate. Default: None         |
+----------------------+-----------------+---------------------------------+
| flags                | OT_STRINGVECTOR | Compile flags for the JIT       |
|                      |                 | compiler. Default: None         |
+----------------------+-----------------+---------------------------------+
| folder               | OT_STRING       | Folder to put temporary objects |
|                      |                 | in.                             |
+----------------------+-----------------+---------------------------------+
| linker               | OT_STRING       | Linker command                  |
+----------------------+-----------------+---------------------------------+
| linker_flags         | OT_STRINGVECTOR | Linker flags for the JIT        |
|                      |                 | compiler. Default: None         |
+----------------------+-----------------+---------------------------------+
| linker_output_flag   | OT_STRING       | Linker flag to denote shared    |
|                      |                 | library output. Default: '-o '  |
+----------------------+-----------------+---------------------------------+
| linker_setup         | OT_STRING       | Linker setup command. Intended  |
|                      |                 | to be fixed. The 'flag' option  |
|                      |                 | is the prefered way to set      |
|                      |                 | custom flags.                   |
+----------------------+-----------------+---------------------------------+
| name                 | OT_STRING       | The file name used to write out |
|                      |                 | compiled objects/libraries. The |
|                      |                 | actual file names used depend   |
|                      |                 | on 'temp_suffix' and include    |
|                      |                 | extensions. Default:            |
|                      |                 | 'tmp_casadi_compiler_shell'     |
+----------------------+-----------------+---------------------------------+
| temp_suffix          | OT_BOOL         | Use a temporary (seemingly      |
|                      |                 | random) filename suffix for     |
|                      |                 | file names. This is desired for |
|                      |                 | thread-safety. This behaviour   |
|                      |                 | may defeat caching compiler     |
|                      |                 | wrappers. Default: true         |
+----------------------+-----------------+---------------------------------+

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| cleanup          | OT_BOOL         | Cleanup          | casadi::ShellCom |
|                  |                 | temporary files  | piler            |
|                  |                 | when unloading.  |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Compiler command | casadi::ShellCom |
|                  |                 |                  | piler            |
+------------------+-----------------+------------------+------------------+
| compiler_flags   | OT_STRINGVECTOR | Alias for        | casadi::ShellCom |
|                  |                 | 'compiler_flags' | piler            |
+------------------+-----------------+------------------+------------------+
| compiler_output_ | OT_STRING       | Compiler flag to | casadi::ShellCom |
| flag             |                 | denote object    | piler            |
|                  |                 | output. Default: |                  |
|                  |                 | '-o '            |                  |
+------------------+-----------------+------------------+------------------+
| compiler_setup   | OT_STRING       | Compiler setup   | casadi::ShellCom |
|                  |                 | command.         | piler            |
|                  |                 | Intended to be   |                  |
|                  |                 | fixed. The       |                  |
|                  |                 | 'flag' option is |                  |
|                  |                 | the prefered way |                  |
|                  |                 | to set custom    |                  |
|                  |                 | flags.           |                  |
+------------------+-----------------+------------------+------------------+
| extra_suffixes   | OT_STRINGVECTOR | List of suffixes | casadi::ShellCom |
|                  |                 | for extra files  | piler            |
|                  |                 | that the         |                  |
|                  |                 | compiler may     |                  |
|                  |                 | generate.        |                  |
|                  |                 | Default: None    |                  |
+------------------+-----------------+------------------+------------------+
| flags            | OT_STRINGVECTOR | Compile flags    | casadi::ShellCom |
|                  |                 | for the JIT      | piler            |
|                  |                 | compiler.        |                  |
|                  |                 | Default: None    |                  |
+------------------+-----------------+------------------+------------------+
| folder           | OT_STRING       | Folder to put    | casadi::ShellCom |
|                  |                 | temporary        | piler            |
|                  |                 | objects in.      |                  |
+------------------+-----------------+------------------+------------------+
| linker           | OT_STRING       | Linker command   | casadi::ShellCom |
|                  |                 |                  | piler            |
+------------------+-----------------+------------------+------------------+
| linker_flags     | OT_STRINGVECTOR | Linker flags for | casadi::ShellCom |
|                  |                 | the JIT          | piler            |
|                  |                 | compiler.        |                  |
|                  |                 | Default: None    |                  |
+------------------+-----------------+------------------+------------------+
| linker_output_fl | OT_STRING       | Linker flag to   | casadi::ShellCom |
| ag               |                 | denote shared    | piler            |
|                  |                 | library output.  |                  |
|                  |                 | Default: '-o '   |                  |
+------------------+-----------------+------------------+------------------+
| linker_setup     | OT_STRING       | Linker setup     | casadi::ShellCom |
|                  |                 | command.         | piler            |
|                  |                 | Intended to be   |                  |
|                  |                 | fixed. The       |                  |
|                  |                 | 'flag' option is |                  |
|                  |                 | the prefered way |                  |
|                  |                 | to set custom    |                  |
|                  |                 | flags.           |                  |
+------------------+-----------------+------------------+------------------+
| name             | OT_STRING       | The file name    | casadi::ShellCom |
|                  |                 | used to write    | piler            |
|                  |                 | out compiled obj |                  |
|                  |                 | ects/libraries.  |                  |
|                  |                 | The actual file  |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on        |                  |
|                  |                 | 'temp_suffix'    |                  |
|                  |                 | and include      |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default: 'tmp_ca |                  |
|                  |                 | sadi_compiler_sh |                  |
|                  |                 | ell'             |                  |
+------------------+-----------------+------------------+------------------+
| temp_suffix      | OT_BOOL         | Use a temporary  | casadi::ShellCom |
|                  |                 | (seemingly       | piler            |
|                  |                 | random) filename |                  |
|                  |                 | suffix for file  |                  |
|                  |                 | names. This is   |                  |
|                  |                 | desired for      |                  |
|                  |                 | thread-safety.   |                  |
|                  |                 | This behaviour   |                  |
|                  |                 | may defeat       |                  |
|                  |                 | caching compiler |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Importer |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: shell_compiler.hpp ";

%feature("docstring") casadi::ShellCompiler::read_meta "

[INTERNAL]  Get meta information.

";

%feature("docstring") casadi::ShellCompiler::can_have_meta "

[INTERNAL]  Can meta information be read?

";

%feature("docstring") casadi::ShellCompiler::inlined "

[INTERNAL] ";

%feature("docstring") casadi::ShellCompiler::ShellCompiler "

[INTERNAL]  Constructor.

";


// File: classcasadi_1_1Slice.xml
%feature("docstring") casadi::Slice::is_scalar "

Is the slice a scalar.

";

%feature("docstring") casadi::Slice::serialize "

Serialize an object.

";

%feature("docstring") casadi::Slice::disp "

Print a description of the object.

";

%feature("docstring") casadi::Slice::scalar "

Get scalar (if is_scalar)

";

%feature("docstring") casadi::Slice::size "

Get number of elements.

";

%feature("docstring") casadi::Slice "

Class representing a Slice.

Note that Python or Octave do not need to use this class. They can just use
slicing utility from the host language ( M[0:6] in Python, M(1:7) )

C++ includes: slice.hpp ";

%feature("docstring") casadi::Slice::info "

Obtain information

";

%feature("docstring") casadi::Slice::all "

Get a vector of indices (nested slice)

>  std::vector<casadi_int> casadi::Slice::all(const Slice &outer, casadi_int len) const 
------------------------------------------------------------------------

Get a vector of indices (nested slice)

";

";

%feature("docstring") casadi::Slice::apply "

Apply concrete length.

";

%feature("docstring") casadi::Slice::is_empty "

Check if slice is empty.

";

%feature("docstring") casadi::Slice::Slice "

";

";

%feature("docstring") casadi::Slice::type_name "

Get name of the class.

";

%feature("docstring") casadi::Slice::get_str "

Get string representation.

";


// File: classcasadi_1_1SlicotDple.xml
%feature("docstring") casadi::SlicotDple::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::SlicotDple::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::SlicotDple::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::SlicotDple::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::SlicotDple::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::SlicotDple::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::SlicotDple::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::SlicotDple::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::SlicotDple::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::SlicotDple::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::SlicotDple::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::SlicotDple::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::SlicotDple::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::SlicotDple::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::SlicotDple::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::SlicotDple::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::SlicotDple::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::SlicotDple::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::SlicotDple::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::SlicotDple::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::SlicotDple::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::SlicotDple::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::SlicotDple::get_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::SlicotDple::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::SlicotDple::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::SlicotDple::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::SlicotDple::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::SlicotDple::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::SlicotDple::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::SlicotDple::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::SlicotDple::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::SlicotDple::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::SlicotDple::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::SlicotDple::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::SlicotDple::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::SlicotDple::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::SlicotDple::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::SlicotDple::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::SlicotDple::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::SlicotDple::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::SlicotDple::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::SlicotDple::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::SlicotDple::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::SlicotDple::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::SlicotDple::eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::SlicotDple::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::SlicotDple::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::SlicotDple::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::SlicotDple::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::SlicotDple::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::SlicotDple::SlicotDple "

[INTERNAL]

>  casadi::SlicotDple::SlicotDple(const SpDict &st)
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::SlicotDple::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::SlicotDple::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::SlicotDple::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::SlicotDple::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::SlicotDple::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::SlicotDple "

'slicot' plugin for Dple

An efficient solver for Discrete Periodic Lyapunov Equations using SLICOT

An efficient solver for Discrete Periodic Lyapunov Equations using SLICOT

Uses Periodic Schur Decomposition ('psd') and does not assume positive
definiteness. Based on Periodic Lyapunov equations: some applications and
new algorithms. Int. J. Control, vol. 67, pp. 69-87, 1997.

Overview of the method: J. Gillis Practical Methods for Approximate Robust
Periodic Optimal Control ofNonlinear Mechanical Systems, PhD Thesis,
KULeuven, 2015

>List of available options

+-----------------------+-----------+--------------------------------------+
|          Id           |   Type    |             Description              |
+=======================+===========+======================================+
| linear_solver         | OT_STRING | User-defined linear solver class.    |
|                       |           | Needed for sensitivities.            |
+-----------------------+-----------+--------------------------------------+
| linear_solver_options | OT_DICT   | Options to be passed to the linear   |
|                       |           | solver.                              |
+-----------------------+-----------+--------------------------------------+
| psd_num_zero          | OT_DOUBLE | Numerical zero used in Periodic      |
|                       |           | Schur decomposition with slicot.This |
|                       |           | option is needed when your systems   |
|                       |           | has Floquet multiplierszero or close |
|                       |           | to zero                              |
+-----------------------+-----------+--------------------------------------+

Joris Gillis

>List of available options

+--------------------+-----------+--------------------+--------------------+
|         Id         |   Type    |    Description     |      Used in       |
+====================+===========+====================+====================+
| const_dim          | OT_BOOL   | Assume constant    | casadi::Dple       |
|                    |           | dimension of P     |                    |
+--------------------+-----------+--------------------+--------------------+
| eps_unstable       | OT_DOUBLE | A margin for       | casadi::Dple       |
|                    |           | unstability        |                    |
|                    |           | detection          |                    |
+--------------------+-----------+--------------------+--------------------+
| error_unstable     | OT_BOOL   | Throw an exception | casadi::Dple       |
|                    |           | when it is         |                    |
|                    |           | detected that      |                    |
|                    |           | Product(A_i,       |                    |
|                    |           | i=N..1)has         |                    |
|                    |           | eigenvalues        |                    |
|                    |           | greater than       |                    |
|                    |           | 1-eps_unstable     |                    |
+--------------------+-----------+--------------------+--------------------+
| linear_solver      | OT_STRING | User-defined       | casadi::SlicotDple |
|                    |           | linear solver      |                    |
|                    |           | class. Needed for  |                    |
|                    |           | sensitivities.     |                    |
+--------------------+-----------+--------------------+--------------------+
| linear_solver_opti | OT_DICT   | Options to be      | casadi::SlicotDple |
| ons                |           | passed to the      |                    |
|                    |           | linear solver.     |                    |
+--------------------+-----------+--------------------+--------------------+
| pos_def            | OT_BOOL   | Assume P positive  | casadi::Dple       |
|                    |           | definite           |                    |
+--------------------+-----------+--------------------+--------------------+
| psd_num_zero       | OT_DOUBLE | Numerical zero     | casadi::SlicotDple |
|                    |           | used in Periodic   |                    |
|                    |           | Schur              |                    |
|                    |           | decomposition with |                    |
|                    |           | slicot.This option |                    |
|                    |           | is needed when     |                    |
|                    |           | your systems has   |                    |
|                    |           | Floquet            |                    |
|                    |           | multiplierszero or |                    |
|                    |           | close to zero      |                    |
+--------------------+-----------+--------------------+--------------------+

Diagrams
--------



C++ includes: slicot_dple.hpp ";

%feature("docstring") casadi::SlicotDple::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::SlicotDple::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::SlicotDple::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::SlicotDple::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::SlicotDple::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::SlicotDple::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::SlicotDple::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::SlicotDple::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::SlicotDple::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::SlicotDple::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::SlicotDple::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::SlicotDple::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::SlicotDple::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::SlicotDple::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::SlicotDple::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::SlicotDple::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::SlicotDple::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::SlicotDple::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::SlicotDple::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::SlicotDple::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::SlicotDple::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::SlicotDple::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::SlicotDple::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::SlicotDple::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::SlicotDple::set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring") casadi::SlicotDple::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::SlicotDple::codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::SlicotDple::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::SlicotDple::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::SlicotDple::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::SlicotDple::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::SlicotDple::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::SlicotDple::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::SlicotDple::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::SlicotDple::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::SlicotDple::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::SlicotDple::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::SlicotDple::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::SlicotDple::~SlicotDple "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::SlicotDple::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::SlicotDple::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::SlicotDple::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::SlicotDple::class_name "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::SlicotDple::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::SlicotDple::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::SlicotDple::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::SlicotDple::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::SlicotDple::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::SlicotDple::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::SlicotDple::jit_dependencies "

[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::SlicotDple::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::SlicotDple::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::SlicotDple::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::SlicotDple::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::SlicotDple::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::SlicotDple::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::SlicotDple::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::SlicotDple::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::SlicotDple::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::SlicotDple::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::SlicotDple::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::SlicotDple::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::SlicotDple::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::SlicotDple::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::SlicotDple::get_function "

[INTERNAL] ";

%feature("docstring") casadi::SlicotDple::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::SlicotDple::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::SlicotDple::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::SlicotDple::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::SlicotDple::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::SlicotDple::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::SlicotDple::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::SlicotDple::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::SlicotDple::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::SlicotDple::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::SlicotDple::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::SlicotDple::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::SlicotDple::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::SlicotDple::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::SlicotDple::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::SlicotDple::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::SlicotDple::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::SlicotDple::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::SlicotDple::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::SlicotDple::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::SlicotDple::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::SlicotDple::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::SlicotDple::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::SlicotDple::generate_dependencies "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::SlicotDple::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::SlicotDple::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::SlicotDple::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::SlicotDple::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::SlicotDple::finalize "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring") casadi::SlicotDple::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::SlicotDple::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::SlicotDple::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::SlicotDple::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::SlicotDple::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::SlicotDple::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::SlicotDple::has_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::SlicotDple::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::SlicotDple::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::SlicotDple::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::SlicotDple::has_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::SlicotDple::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::SlicotDple::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::SlicotDple::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::SlicotDple::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::SlicotDple::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::SlicotDple::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::SlicotDple::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::SlicotDple::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::SlicotDple::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::SlicotDple::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::SlicotDple::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::SlicotDple::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::SlicotDple::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::SlicotDple::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::SlicotDple::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::SlicotDple::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::SlicotDple::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::SlicotDple::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::SlicotDple::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::SlicotDple::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::SlicotDple::get_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::SlicotDple::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::SlicotDple::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::SlicotDple::factory "

[INTERNAL] ";

%feature("docstring") casadi::SlicotDple::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::SlicotDple::has_function "

[INTERNAL] ";

%feature("docstring") casadi::SlicotDple::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::SlicotDple::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";


// File: classcasadi_1_1SlicotExpm.xml
%feature("docstring") casadi::SlicotExpm::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::SlicotExpm::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::SlicotExpm::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::SlicotExpm::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::SlicotExpm::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::SlicotExpm::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::SlicotExpm::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::SlicotExpm::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::SlicotExpm::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::SlicotExpm::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::SlicotExpm::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::SlicotExpm::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::SlicotExpm::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::SlicotExpm::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::SlicotExpm::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::SlicotExpm::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::SlicotExpm::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::SlicotExpm::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::SlicotExpm::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::SlicotExpm::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::SlicotExpm::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::SlicotExpm::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::SlicotExpm::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::SlicotExpm::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::SlicotExpm::factory "

[INTERNAL] ";

%feature("docstring") casadi::SlicotExpm::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::SlicotExpm::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::SlicotExpm::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::SlicotExpm::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::SlicotExpm::SlicotExpm "

[INTERNAL]  Constructor.

Parameters:
-----------

st:

Problem structure.

>  casadi::SlicotExpm::SlicotExpm(const std::string &name, const Sparsity &A)
------------------------------------------------------------------------
[INTERNAL] 
Constructor.

Parameters:
-----------

st:

Problem structure.

";

";

%feature("docstring") casadi::SlicotExpm::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::SlicotExpm::get_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::SlicotExpm::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::SlicotExpm::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::SlicotExpm::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::SlicotExpm::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::SlicotExpm::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::SlicotExpm::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::SlicotExpm::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::SlicotExpm::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::SlicotExpm::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::SlicotExpm::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::SlicotExpm::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::SlicotExpm::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::SlicotExpm::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::SlicotExpm::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::SlicotExpm::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::SlicotExpm::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::SlicotExpm::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::SlicotExpm::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::SlicotExpm::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::SlicotExpm::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::SlicotExpm::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::SlicotExpm::finalize "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring") casadi::SlicotExpm::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::SlicotExpm::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::SlicotExpm::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::SlicotExpm "

[INTERNAL]  'slicot' plugin for Expm

An efficient solver for Discrete Periodic Lyapunov Equations using SLICOT

Joris Gillis

C++ includes: slicot_expm.hpp ";

%feature("docstring") casadi::SlicotExpm::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::SlicotExpm::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::SlicotExpm::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::SlicotExpm::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::SlicotExpm::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::SlicotExpm::class_name "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::SlicotExpm::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::SlicotExpm::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::SlicotExpm::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::SlicotExpm::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::SlicotExpm::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::SlicotExpm::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::SlicotExpm::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::SlicotExpm::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::SlicotExpm::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::SlicotExpm::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::SlicotExpm::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::SlicotExpm::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::SlicotExpm::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::SlicotExpm::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::SlicotExpm::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::SlicotExpm::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::SlicotExpm::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::SlicotExpm::~SlicotExpm "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::SlicotExpm::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::SlicotExpm::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::SlicotExpm::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::SlicotExpm::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::SlicotExpm::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::SlicotExpm::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::SlicotExpm::generate_dependencies "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::SlicotExpm::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::SlicotExpm::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::SlicotExpm::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::SlicotExpm::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::SlicotExpm::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::SlicotExpm::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::SlicotExpm::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::SlicotExpm::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::SlicotExpm::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::SlicotExpm::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::SlicotExpm::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::SlicotExpm::has_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::SlicotExpm::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::SlicotExpm::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::SlicotExpm::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::SlicotExpm::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::SlicotExpm::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::SlicotExpm::get_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::SlicotExpm::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::SlicotExpm::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::SlicotExpm::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::SlicotExpm::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::SlicotExpm::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::SlicotExpm::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::SlicotExpm::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::SlicotExpm::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::SlicotExpm::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::SlicotExpm::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::SlicotExpm::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::SlicotExpm::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::SlicotExpm::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::SlicotExpm::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::SlicotExpm::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::SlicotExpm::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::SlicotExpm::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::SlicotExpm::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::SlicotExpm::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::SlicotExpm::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::SlicotExpm::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::SlicotExpm::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::SlicotExpm::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::SlicotExpm::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::SlicotExpm::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::SlicotExpm::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::SlicotExpm::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::SlicotExpm::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::SlicotExpm::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::SlicotExpm::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::SlicotExpm::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::SlicotExpm::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::SlicotExpm::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::SlicotExpm::has_function "

[INTERNAL] ";

%feature("docstring") casadi::SlicotExpm::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::SlicotExpm::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::SlicotExpm::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::SlicotExpm::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::SlicotExpm::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::SlicotExpm::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::SlicotExpm::has_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::SlicotExpm::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::SlicotExpm::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::SlicotExpm::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::SlicotExpm::get_function "

[INTERNAL] ";

%feature("docstring") casadi::SlicotExpm::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::SlicotExpm::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::SlicotExpm::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::SlicotExpm::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::SlicotExpm::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::SlicotExpm::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::SlicotExpm::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::SlicotExpm::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::SlicotExpm::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::SlicotExpm::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::SlicotExpm::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::SlicotExpm::jit_dependencies "

[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::SlicotExpm::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::SlicotExpm::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::SlicotExpm::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::SlicotExpm::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::SlicotExpm::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::SlicotExpm::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::SlicotExpm::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::SlicotExpm::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::SlicotExpm::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::SlicotExpm::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::SlicotExpm::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::SlicotExpm::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::SlicotExpm::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::SlicotExpm::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::SlicotExpm::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::SlicotExpm::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::SlicotExpm::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::SlicotExpm::codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::SlicotExpm::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::SlicotExpm::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::SlicotExpm::set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring") casadi::SlicotExpm::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::SlicotExpm::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::SlicotExpm::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::SlicotExpm::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::SlicotExpm::eval "

[INTERNAL]  Evaluate numerically.

";


// File: classcasadi_1_1Smoothing.xml
%feature("docstring") casadi::Smoothing "

[INTERNAL]  Calculate derivative using 3th order smoothing scheme Joel
Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| abstol           | OT_DOUBLE       | Accuracy of      | casadi::Smoothin |
|                  |                 | function outputs | g                |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| h                | OT_DOUBLE       | Step size        | casadi::Smoothin |
|                  |                 | [default:        | g                |
|                  |                 | computed from    |                  |
|                  |                 | abstol]          |                  |
+------------------+-----------------+------------------+------------------+
| h_iter           | OT_INT          | Number of        | casadi::Smoothin |
|                  |                 | iterations to    | g                |
|                  |                 | improve on the   |                  |
|                  |                 | step-size        |                  |
|                  |                 | [default: 1 if   |                  |
|                  |                 | error estimate   |                  |
|                  |                 | available,       |                  |
|                  |                 | otherwise 0]     |                  |
+------------------+-----------------+------------------+------------------+
| h_max            | OT_DOUBLE       | Maximum step     | casadi::Smoothin |
|                  |                 | size [default 0] | g                |
+------------------+-----------------+------------------+------------------+
| h_min            | OT_DOUBLE       | Minimum step     | casadi::Smoothin |
|                  |                 | size [default    | g                |
|                  |                 | inf]             |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reltol           | OT_DOUBLE       | Accuracy of      | casadi::Smoothin |
|                  |                 | function inputs  | g                |
|                  |                 | [default: query  |                  |
|                  |                 | object]          |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| second_order_ste | OT_DOUBLE       | Second order     | casadi::Smoothin |
| psize            |                 | perturbation     | g                |
|                  |                 | size [default:   |                  |
|                  |                 | 1e-3]            |                  |
+------------------+-----------------+------------------+------------------+
| smoothing        | OT_DOUBLE       | Smoothing        | casadi::Smoothin |
|                  |                 | regularization   | g                |
|                  |                 | [default:        |                  |
|                  |                 | machine          |                  |
|                  |                 | precision]       |                  |
+------------------+-----------------+------------------+------------------+
| u_aim            | OT_DOUBLE       | Target ratio of  | casadi::Smoothin |
|                  |                 | roundoff error   | g                |
|                  |                 | to truncation    |                  |
|                  |                 | error [default:  |                  |
|                  |                 | 100.]            |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: finite_differences.hpp ";

%feature("docstring") casadi::Smoothing::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Smoothing::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::Smoothing::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Smoothing::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Smoothing::has_function "

[INTERNAL] ";

%feature("docstring") casadi::Smoothing::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Smoothing::calc_fd "

[INTERNAL] ";

%feature("docstring") casadi::Smoothing::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Smoothing::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Smoothing::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Smoothing::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Smoothing::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::Smoothing::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Smoothing::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Smoothing::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Smoothing::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::Smoothing::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Smoothing::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::Smoothing::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::Smoothing::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::Smoothing::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Smoothing::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::Smoothing::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Smoothing::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::Smoothing::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::Smoothing::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Smoothing::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::Smoothing::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Smoothing::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::Smoothing::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::Smoothing::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::Smoothing::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::Smoothing::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Smoothing::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::Smoothing::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::Smoothing::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Smoothing::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Smoothing::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::Smoothing::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Smoothing::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::Smoothing::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::Smoothing::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::Smoothing::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Smoothing::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Smoothing::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::Smoothing::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Smoothing::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::Smoothing::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::Smoothing::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::Smoothing::get_function "

[INTERNAL] ";

%feature("docstring") casadi::Smoothing::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Smoothing::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Smoothing::jit_dependencies "

[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::Smoothing::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::Smoothing::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Smoothing::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::Smoothing::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::Smoothing::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Smoothing::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::Smoothing::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Smoothing::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::Smoothing::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::Smoothing::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::Smoothing::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::Smoothing::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Smoothing::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::Smoothing::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::Smoothing::has_err "

[INTERNAL] ";

%feature("docstring") casadi::Smoothing::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Smoothing::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::Smoothing::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Smoothing::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::Smoothing::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::Smoothing::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Smoothing::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::Smoothing::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::Smoothing::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Smoothing::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::Smoothing::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::Smoothing::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::Smoothing::pert "

[INTERNAL] ";

%feature("docstring") casadi::Smoothing::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::Smoothing::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::Smoothing::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::Smoothing::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Smoothing::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::Smoothing::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::Smoothing::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Smoothing::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Smoothing::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::Smoothing::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Smoothing::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::Smoothing::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Smoothing::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::Smoothing::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Smoothing::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::Smoothing::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::Smoothing::Smoothing "

[INTERNAL] ";

%feature("docstring") casadi::Smoothing::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::Smoothing::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Smoothing::finalize "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring") casadi::Smoothing::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Smoothing::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::Smoothing::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::Smoothing::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Smoothing::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::Smoothing::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::Smoothing::codegen_body "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring") casadi::Smoothing::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Smoothing::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Smoothing::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::Smoothing::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Smoothing::class_name "

[INTERNAL]  Get type name.

";

%feature("docstring") casadi::Smoothing::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Smoothing::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::Smoothing::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::Smoothing::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Smoothing::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::Smoothing::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Smoothing::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::Smoothing::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::Smoothing::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Smoothing::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::Smoothing::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::Smoothing::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Smoothing::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::Smoothing::get_forward "

[INTERNAL]  Second order derivatives.

";

%feature("docstring") casadi::Smoothing::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::Smoothing::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Smoothing::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::Smoothing::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Smoothing::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::Smoothing::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::Smoothing::get_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Smoothing::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Smoothing::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Smoothing::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Smoothing::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::Smoothing::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Smoothing::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Smoothing::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Smoothing::set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring") casadi::Smoothing::uses_output "

[INTERNAL]  Is the scheme using the (nondifferentiated) output?

";

%feature("docstring") casadi::Smoothing::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Smoothing::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Smoothing::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Smoothing::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Smoothing::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::Smoothing::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::Smoothing::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Smoothing::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Smoothing::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::Smoothing::generate_dependencies "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Smoothing::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::Smoothing::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Smoothing::has_reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Smoothing::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Smoothing::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Smoothing::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::Smoothing::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::Smoothing::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Smoothing::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Smoothing::eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Smoothing::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::Smoothing::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::Smoothing::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Smoothing::n_pert "

[INTERNAL] ";

%feature("docstring") casadi::Smoothing::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::Smoothing::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::Smoothing::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::Smoothing::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Smoothing::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::Smoothing::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::Smoothing::~Smoothing "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Smoothing::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::Smoothing::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::Smoothing::has_forward "

[INTERNAL]  Second order derivatives.

";

%feature("docstring") casadi::Smoothing::calc_stepsize "

[INTERNAL] ";

%feature("docstring") casadi::Smoothing::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::Smoothing::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::Smoothing::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Smoothing::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::Smoothing::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::Smoothing::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::Smoothing::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Smoothing::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Smoothing::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Smoothing::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::Smoothing::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Smoothing::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Smoothing::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::Smoothing::factory "

[INTERNAL] ";

%feature("docstring") casadi::Smoothing::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";


// File: classcasadi_1_1Solve.xml


// File: classcasadi_1_1SparseStorage.xml
%feature("docstring") casadi::SparseStorage::has_nz "

[INTERNAL]  Returns true if the matrix has a non-zero at location rr, cc.

";

%feature("docstring") casadi::SparseStorage::elem "

[INTERNAL]  get a reference to an element

";

%feature("docstring") casadi::SparseStorage::clear "

[INTERNAL] ";

%feature("docstring") casadi::SparseStorage::reserve "

[INTERNAL] ";

%feature("docstring") casadi::SparseStorage::resize "

[INTERNAL] ";

%feature("docstring") casadi::SparseStorage "

[INTERNAL] C++ includes: sparse_storage.hpp ";

%feature("docstring") casadi::SparseStorage::sparsity "

[INTERNAL]  Const access the sparsity - reference to data member.

";

%feature("docstring") casadi::SparseStorage::SparseStorage "

[INTERNAL]  Copy constructor.

>  casadi::SparseStorage< DataType >::SparseStorage(const SparseStorage< DataType > &m)
------------------------------------------------------------------------
[INTERNAL] 
Copy constructor.

";

";

%feature("docstring") casadi::SparseStorage::nonzeros "

[INTERNAL]  Const access the non-zero elements.

>  const std::vector< DataType > & casadi::SparseStorage< DataType >::nonzeros() const 
------------------------------------------------------------------------
[INTERNAL] 
Const access the non-zero elements.

";

";


// File: classcasadi_1_1Sparsify.xml


// File: classcasadi_1_1Sparsity.xml


/*  Check if two sparsity patterns are identical  */

/*  Size and element counting  */ %feature("docstring")
casadi::Sparsity::enlargeRows "

Enlarge the matrix along the first dimension (i.e. insert rows)

";

%feature("docstring") casadi::Sparsity "

General sparsity class.

The storage format is a compressed column storage (CCS) format.  In this
format, the structural non-zero elements are stored in column-major order,
starting from the upper left corner of the matrix and ending in the lower
right corner.

In addition to the dimension ( size1(), size2()), (i.e. the number of rows
and the number of columns respectively), there are also two vectors of
integers:

\"colind\" [length size2()+1], which contains the index to the first non-
zero element on or after the corresponding column. All the non-zero elements
of a particular i are thus the elements with index el that fulfills:
colind[i] <= el < colind[i+1].

\"row\" [same length as the number of non-zero elements, nnz()] The rows for
each of the structural non-zeros.

Note that with this format, it is cheap to loop over all the non-zero
elements of a particular column, at constant time per element, but expensive
to jump to access a location (i, j).

If the matrix is dense, i.e. length(row) == size1()*size2(), the format
reduces to standard dense column major format, which allows access to an
arbitrary element in constant time.

Since the object is reference counted (it inherits from SharedObject),
several matrices are allowed to share the same sparsity pattern.

The implementations of methods marked as such in this class has been taken
from the CSparse package and modified to fit CasADi data structures and
separation of sparsity pattern calculation and numerical evaluation. These
functions are Copyright(c) Timothy A. Davis, 2006-2009 and licensed as a
derivative work under the GNU LGPL

See:   Matrix

Joel Andersson

C++ includes: sparsity.hpp ";

%feature("docstring") casadi::Sparsity::largest_first "

Order the columns by decreasing degree.

";

%feature("docstring") casadi::Sparsity::dim "

Get the dimension as a string.

";

%feature("docstring") casadi::Sparsity::is_reshape "

Check if the sparsity is a reshape of another.

";

%feature("docstring") casadi::Sparsity::add_nz "

Get the index of a non-zero element Add the element if it does not exist and
copy object if it's not unique.

";

%feature("docstring") casadi::Sparsity::is_scalar "

Is scalar?

";

%feature("docstring") casadi::Sparsity::rowsSequential "

Do the rows appear sequentially on each column.

Parameters:
-----------

strictly:  if true, then do not allow multiple entries

";

%feature("docstring") casadi::Sparsity::get_diag "

Get the diagonal of the matrix/create a diagonal matrix (mapping will
contain the nonzero mapping) When the input is square, the diagonal elements
are returned. If the input is vector-like, a diagonal matrix is constructed
with it.

";

%feature("docstring") casadi::Sparsity::btf "

Calculate the block triangular form (BTF) See Direct Methods for Sparse
Linear Systems by Davis (2006).

The function computes the Dulmage-Mendelsohn decomposition, which allows you
to reorder the rows and columns of a matrix to bring it into block
triangular form (BTF).

It will not consider the distance of off-diagonal elements to the diagonal:
there is no guarantee you will get a block-diagonal matrix if you supply a
randomly permuted block-diagonal matrix.

If your matrix is symmetrical, this method is of limited use; permutation
can make it non-symmetric.

See:   scc  The implementation is a modified version of cs_dmperm in CSparse
Copyright(c) Timothy A. Davis, 2006-2009 Licensed as a derivative work under
the GNU LGPL

";

%feature("docstring") casadi::Sparsity::is_triu "

Is upper triangular?

";

%feature("docstring") casadi::Sparsity::qr_sparse "

Symbolic QR factorization Returns the sparsity pattern of V (compact
representation of Q) and R as well as vectors needed for the numerical
factorization and solution. The implementation is a modified version of
CSparse Copyright(c) Timothy A. Davis, 2006-2009 Licensed as a derivative
work under the GNU LGPL.

";

%feature("docstring") casadi::Sparsity::is_vector "

Check if the pattern is a row or column vector.

";

%feature("docstring") casadi::Sparsity::resize "

Resize.

";

%feature("docstring") casadi::Sparsity::disp "

Print a description of the object.

";

%feature("docstring") casadi::Sparsity::find "

Get the location of all non-zero elements as they would appear in a Dense
matrix A : DenseMatrix 4 x 3 B : SparseMatrix 4 x 3 , 5 structural non-
zeros.

k = A.find() A[k] will contain the elements of A that are non-zero in B

Inverse of nonzeros.

";

%feature("docstring") casadi::Sparsity::nnz_diag "

Number of non-zeros on the diagonal, i.e. the number of elements (i, j) with
j==i.

";

%feature("docstring") casadi::Sparsity::bw_lower "

Lower half-bandwidth.

";

%feature("docstring") casadi::Sparsity::T "

Transpose the matrix.

";

%feature("docstring") casadi::Sparsity::repr_el "

Describe the nonzero location k as a string.

";

%feature("docstring") casadi::Sparsity::Sparsity "

Create a sparse matrix with all structural zeros.

>  casadi::Sparsity::Sparsity(const std::pair< casadi_int, casadi_int > &rc)
------------------------------------------------------------------------

Create a sparse matrix with all structural zeros.

";

";

%feature("docstring") casadi::Sparsity::to_file "

Export sparsity pattern to file

Supported formats: .mtx Matrix Market

";

%feature("docstring") casadi::Sparsity::colind "

Get a reference to the colindex of column cc (see class description)

";

%feature("docstring") casadi::Sparsity::is_stacked "

Check if pattern is horizontal repeat of another.

";

%feature("docstring") casadi::Sparsity::is_row "

Check if the pattern is a row vector (i.e. size1()==1)

";

%feature("docstring") casadi::Sparsity::numel "

The total number of elements, including structural zeros, i.e.
size2()*size1() Beware of overflow.

See:   nnz()

";

%feature("docstring") casadi::Sparsity::columns "

Get the number of columns, Octave-style syntax.

";

%feature("docstring") casadi::Sparsity::unite "

Union of two sparsity patterns.

";

%feature("docstring") casadi::Sparsity::is_transpose "

Check if the sparsity is the transpose of another.

";

%feature("docstring") casadi::Sparsity::get_triplet "

Get the sparsity in sparse triplet format.

";

%feature("docstring") casadi::Sparsity::is_square "

Is square?

";

%feature("docstring") casadi::Sparsity::appendColumns "

Append another sparsity patten horizontally.

";

%feature("docstring") casadi::Sparsity::ldl "

Symbolic LDL factorization Returns the sparsity pattern of L^T.

The implementation is a modified version of LDL Copyright(c) Timothy A.
Davis, 2005-2013 Licensed as a derivative work under the GNU LGPL

";

%feature("docstring") casadi::Sparsity::get_ccs "

Get the sparsity in compressed column storage (CCS) format.

";

%feature("docstring") casadi::Sparsity::removeDuplicates "

Remove duplicate entries.

The same indices will be removed from the mapping vector, which must have
the same length as the number of nonzeros

";

%feature("docstring") casadi::Sparsity::is_empty "

Check if the sparsity is empty.

A sparsity is considered empty if one of the dimensions is zero (or
optionally both dimensions)

";

%feature("docstring") casadi::Sparsity::export_code "

Export matrix in specific language.

lang: only 'matlab' supported for now

::

   * options:
   *   inline: Indicates if you want everything on a single line (default: False)
   *   name: Name of exported variable (default: 'sp')
   *   as_matrix: Matlab does not have a sparsity object. (default: false)
  *               With this option true, a numeric matrix will be constructed
   * 



";

%feature("docstring") casadi::Sparsity::get_str "

Get string representation.

";

%feature("docstring") casadi::Sparsity::makeDense "

Make a patten dense.

";

%feature("docstring") casadi::Sparsity::pattern_inverse "

Take the inverse of a sparsity pattern; flip zeros and non-zeros.

";

%feature("docstring") casadi::Sparsity::dense "

Create a dense rectangular sparsity pattern.

";

%feature("docstring") casadi::Sparsity::spy_matlab "

Generate a script for Matlab or Octave which visualizes the sparsity using
the spy command.

";

%feature("docstring") casadi::Sparsity::diag "

Create diagonal sparsity pattern.

";

%feature("docstring") casadi::Sparsity::print_ptr "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring") casadi::Sparsity::get_crs "

Get the sparsity in compressed row storage (CRS) format.

";

%feature("docstring") casadi::Sparsity::serialize "

Serialize an object.

>  void casadi::Sparsity::serialize(SerializingStream &s) const 
------------------------------------------------------------------------

Serialize an object.

";

";

%feature("docstring") casadi::Sparsity::sub "

Get a set of elements.

Returns the sparsity of the corresponding elements, with a mapping such that
submatrix[k] = originalmatrix[mapping[k]]

>  Sparsity casadi::Sparsity::sub(const std::vector< casadi_int > &rr, const Sparsity &sp, std::vector< casadi_int > &output_mapping, bool ind1=false) const 
------------------------------------------------------------------------

Get a set of elements.

Returns the sparsity of the corresponding elements, with a mapping such that
submatrix[k] = originalmatrix[mapping[k]]

";

";

%feature("docstring") casadi::Sparsity::unit "

Create the sparsity pattern for a unit vector of length n and a nonzero on
position el.

";

%feature("docstring") casadi::Sparsity::is_null "

Is a null pointer?

";

%feature("docstring") casadi::Sparsity::append "

Append another sparsity patten vertically (NOTE: only efficient if vector)

";

%feature("docstring") casadi::Sparsity::combine "

Combine two sparsity patterns Returns the new sparsity pattern as well as a
mapping with the same length as the number of non-zero elements The mapping
matrix contains the arguments for each nonzero, the first bit indicates if
the first argument is nonzero, the second bit indicates if the second
argument is nonzero (note that none of, one of or both of the arguments can
be nonzero)

";

%feature("docstring") casadi::Sparsity::nnz "

Get the number of (structural) non-zeros.

See:   numel()

";

%feature("docstring") casadi::Sparsity::intersect "

Intersection of two sparsity patterns Returns the new sparsity pattern as
well as a mapping with the same length as the number of non-zero elements
The value is 1 if the non-zero comes from the first (i.e. this) object, 2 if
it is from the second and 3 (i.e. 1 | 2) if from both.

";

%feature("docstring") casadi::Sparsity::row "

Get the row of a non-zero element.

";

%feature("docstring") casadi::Sparsity::is_column "

Check if the pattern is a column vector (i.e. size2()==1)

";

%feature("docstring") casadi::Sparsity::get_colind "

Get the column index for each column Together with the row-vector, one
obtains the sparsity pattern in the column compressed format.

";

%feature("docstring") casadi::Sparsity::get_row "

Get the row for each non-zero entry Together with the column-vector, this
vector gives the sparsity of the matrix in sparse triplet format, and
together with the colind vector, one obtains the sparsity in column
compressed format.

";

%feature("docstring") casadi::Sparsity::is_symmetric "

Is symmetric?

";

%feature("docstring") casadi::Sparsity::is_subset "

Is subset?

";

%feature("docstring") casadi::Sparsity::has_nz "

Returns true if the pattern has a non-zero at location rr, cc.

";

%feature("docstring") casadi::Sparsity::transpose "

Transpose the matrix and get the reordering of the non-zero entries.

Parameters:
-----------

mapping:  the non-zeros of the original matrix for each non-zero of the new
matrix

";

%feature("docstring") casadi::Sparsity::pmult "

Permute rows and/or columns Multiply the sparsity with a permutation matrix
from the left and/or from the right P * A * trans(P), A * trans(P) or A *
trans(P) with P defined by an index vector containing the row for each col.
As an alternative, P can be transposed (inverted).

";

%feature("docstring") casadi::Sparsity::is_diag "

Is diagonal?

";

%feature("docstring") casadi::Sparsity::amd "

Approximate minimal degree preordering Fill-reducing ordering applied to the
sparsity pattern of a linear system prior to factorization. The system must
be symmetric, for an unsymmetric matrix A, first form the square of the
pattern, A'*A.

The implementation is a modified version of cs_amd in CSparse Copyright(c)
Timothy A. Davis, 2006-2009 Licensed as a derivative work under the GNU LGPL

";

%feature("docstring") casadi::Sparsity::class_name "

Get class name.

";

%feature("docstring") casadi::Sparsity::nnz_lower "

Number of non-zeros in the lower triangular half, i.e. the number of
elements (i, j) with j<=i.

";

%feature("docstring") casadi::Sparsity::get_lower "

Get nonzeros in lower triangular part.

";

%feature("docstring") casadi::Sparsity::is_singular "

Check whether the sparsity-pattern indicates structural singularity.

";

%feature("docstring") casadi::Sparsity::is_dense "

Is dense?

";

%feature("docstring") casadi::Sparsity::sanity_check "

[DEPRECATED] Correctness of sparsity patterns are checked during
construction

";

%feature("docstring") casadi::Sparsity::compressed "

Create from a single vector containing the pattern in compressed column
storage format: The format: The first two entries are the number of rows
(nrow) and columns (ncol) The next ncol+1 entries are the column offsets
(colind). Note that the last element, colind[ncol], gives the number of
nonzeros The last colind[ncol] entries are the row indices

";

%feature("docstring") casadi::Sparsity::uni_coloring "

Perform a unidirectional coloring: A greedy distance-2 coloring algorithm
(Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN)

";

%feature("docstring") casadi::Sparsity::star_coloring "

Perform a star coloring of a symmetric matrix: A greedy distance-2 coloring
algorithm Algorithm 4.1 in What Color Is Your Jacobian? Graph Coloring for
Computing Derivatives A. H. GEBREMEDHIN, F. MANNE, A. POTHEN SIAM Rev.,
47(4), 629705 (2006)

Ordering options: None (0), largest first (1)

";

%feature("docstring") casadi::Sparsity::density "

The percentage of nonzero Equivalent to (100.0 * nnz())/numel(), but avoids
overflow.

";

%feature("docstring") casadi::Sparsity::enlarge "

Enlarge matrix Make the matrix larger by inserting empty rows and columns,
keeping the existing non-zeros.

For the matrices A to B A(m, n) length(jj)=m , length(ii)=n B(nrow, ncol)

A=enlarge(m, n, ii, jj) makes sure that

B[jj, ii] == A

";

%feature("docstring") casadi::Sparsity::compress "

Compress a sparsity pattern.

";

%feature("docstring") casadi::Sparsity::scc "

Find the strongly connected components of the bigraph defined by the
sparsity pattern of a square matrix.

See Direct Methods for Sparse Linear Systems by Davis (2006). Returns:
Number of components

Offset for each components (length: 1 + number of components)

Indices for each components, component i has indices index[offset[i]], ...,
index[offset[i+1]]

In the case that the matrix is symmetric, the result has a particular
interpretation: Given a symmetric matrix A and n = A.scc(p, r)

=> A[p, p] will appear block-diagonal with n blocks and with the indices of
the block boundaries to be found in r.

The implementation is a modified version of cs_scc in CSparse Copyright(c)
Timothy A. Davis, 2006-2009 Licensed as a derivative work under the GNU LGPL

";

%feature("docstring") casadi::Sparsity::info "

Obtain information about sparsity

";

%feature("docstring") casadi::Sparsity::get_upper "

Get nonzeros in upper triangular part.

";

%feature("docstring") casadi::Sparsity::dfs "

Depth-first search on the adjacency graph of the sparsity See Direct Methods
for Sparse Linear Systems by Davis (2006).

";

%feature("docstring") casadi::Sparsity::is_tril "

Is lower triangular?

";

%feature("docstring") casadi::Sparsity::size2 "

Get the number of columns.

";

%feature("docstring") casadi::Sparsity::get_col "

Get the column for each non-zero entry Together with the row-vector, this
vector gives the sparsity of the matrix in sparse triplet format, i.e. the
column and row for each non-zero elements.

";

%feature("docstring") casadi::Sparsity::size1 "

Get the number of rows.

";

%feature("docstring") casadi::Sparsity::star_coloring2 "

Perform a star coloring of a symmetric matrix: A new greedy distance-2
coloring algorithm Algorithm 4.1 in NEW ACYCLIC AND STAR COLORING ALGORITHMS
WITH APPLICATION TO COMPUTING HESSIANS A. H. GEBREMEDHIN, A. TARAFDAR, F.
MANNE, A. POTHEN SIAM J. SCI. COMPUT. Vol. 29, No. 3, pp. 10421072 (2007)

Ordering options: None (0), largest first (1)

";

%feature("docstring") casadi::Sparsity::spy "

Print a textual representation of sparsity.

";

%feature("docstring") casadi::Sparsity::postfix_dim "

Dimension string as a postfix to a name Rules:

Dense and scalar: \"\"

0-by-0: \"[]\"

Dense column vector: \"[5]\"

Dense matrix: \"[5x10]\"

Otherwise: \"[5x10,3nz]\"

";

%feature("docstring") casadi::Sparsity::enlargeColumns "

Enlarge the matrix along the second dimension (i.e. insert columns)

";

%feature("docstring") casadi::Sparsity::rows "

Get the number of rows, Octave-style syntax.

";

%feature("docstring") casadi::Sparsity::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::Sparsity::size "

Get the size along a particular dimensions.

>  casadi_int casadi::Sparsity::size(casadi_int axis) const 
------------------------------------------------------------------------

Get the size along a particular dimensions.

";

";

%feature("docstring") casadi::Sparsity::etree "

Calculate the elimination tree See Direct Methods for Sparse Linear Systems
by Davis (2006). If the parameter ata is false, the algorithm is equivalent
to MATLAB's etree(A), except that the indices are zero- based. If ata is
true, the algorithm is equivalent to MATLAB's etree(A, 'col').

The implementation is a modified version of cs_etree in CSparse Copyright(c)
Timothy A. Davis, 2006-2009 Licensed as a derivative work under the GNU LGPL

";

%feature("docstring") casadi::Sparsity::get_nz "

Get the nonzero index for a set of elements The index vector is used both
for input and outputs and must be sorted by increasing nonzero index, i.e.
column-wise. Elements not found in the sparsity pattern are set to -1.

>  void casadi::Sparsity::get_nz(std::vector< casadi_int > &INOUT) const 
------------------------------------------------------------------------

Get the nonzero index for a set of elements The index vector is used both
for input and outputs and must be sorted by increasing nonzero index, i.e.
column-wise. Elements not found in the sparsity pattern are set to -1.

";

";

%feature("docstring") casadi::Sparsity::erase "

Erase elements of a matrix.

>  std::vector<casadi_int> casadi::Sparsity::erase(const std::vector< casadi_int > &rr, bool ind1=false)
------------------------------------------------------------------------

Erase elements of a matrix.

";

";

%feature("docstring") casadi::Sparsity::bw_upper "

Upper half-bandwidth.

";

%feature("docstring") casadi::Sparsity::scalar "

Create a scalar sparsity pattern.

";

%feature("docstring") casadi::Sparsity::nnz_upper "

Number of non-zeros in the upper triangular half, i.e. the number of
elements (i, j) with j>=i.

";


// File: classcasadi_1_1Split.xml


// File: classcasadi_1_1Sqpmethod.xml
%feature("docstring") casadi::Sqpmethod::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::Sqpmethod::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Sqpmethod::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Sqpmethod::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Sqpmethod::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::Sqpmethod::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::Sqpmethod::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Sqpmethod::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Sqpmethod::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Sqpmethod::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::Sqpmethod::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::Sqpmethod::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::Sqpmethod::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::Sqpmethod::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::Sqpmethod::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Sqpmethod::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::Sqpmethod::codegen_qp_solve "

[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::set_temp "

[INTERNAL]  Set the work vectors.

";

%feature("docstring") casadi::Sqpmethod::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::Sqpmethod::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Sqpmethod::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Sqpmethod::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Sqpmethod::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::Sqpmethod::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Sqpmethod::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::Sqpmethod::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Sqpmethod::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Sqpmethod::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::Sqpmethod::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Sqpmethod::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::Sqpmethod::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::Sqpmethod::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::Sqpmethod::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Sqpmethod::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::Sqpmethod::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Sqpmethod::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::Sqpmethod::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Sqpmethod::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Sqpmethod::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Sqpmethod::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::Sqpmethod::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::Sqpmethod::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Sqpmethod::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Sqpmethod::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Sqpmethod::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Sqpmethod::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::Sqpmethod::has_reverse "

[INTERNAL]  Generate a function that calculates reverse mode derivatives.

";

%feature("docstring") casadi::Sqpmethod::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::Sqpmethod::get_reverse "

[INTERNAL]  Generate a function that calculates reverse mode derivatives.

";

%feature("docstring") casadi::Sqpmethod::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Sqpmethod::codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::Sqpmethod::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::Sqpmethod::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Sqpmethod "

'sqpmethod' plugin for Nlpsol

A textbook SQPMethod

>List of available options

+-----------------------+-------------+------------------------------------+
|          Id           |    Type     |            Description             |
+=======================+=============+====================================+
| beta                  | OT_DOUBLE   | Line-search parameter, restoration |
|                       |             | factor of stepsize                 |
+-----------------------+-------------+------------------------------------+
| c1                    | OT_DOUBLE   | Armijo condition, coefficient of   |
|                       |             | decrease in merit                  |
+-----------------------+-------------+------------------------------------+
| convexify_margin      | OT_DOUBLE   | When using a convexification       |
|                       |             | strategy, make sure that the       |
|                       |             | smallest eigenvalue is at least    |
|                       |             | this (default: 1e-7).              |
+-----------------------+-------------+------------------------------------+
| convexify_strategy    | OT_STRING   | NONE|regularize|eigen-reflect      |
|                       |             | |eigen-clip. Strategy to convexify |
|                       |             | the Lagrange Hessian before        |
|                       |             | passing it to the solver.          |
+-----------------------+-------------+------------------------------------+
| hess_lag              | OT_FUNCTION | Function for calculating the       |
|                       |             | Hessian of the Lagrangian          |
|                       |             | (autogenerated by default)         |
+-----------------------+-------------+------------------------------------+
| hessian_approximation | OT_STRING   | limited-memory|exact               |
+-----------------------+-------------+------------------------------------+
| jac_fg                | OT_FUNCTION | Function for calculating the       |
|                       |             | gradient of the objective and      |
|                       |             | Jacobian of the constraints        |
|                       |             | (autogenerated by default)         |
+-----------------------+-------------+------------------------------------+
| lbfgs_memory          | OT_INT      | Size of L-BFGS memory.             |
+-----------------------+-------------+------------------------------------+
| max_iter              | OT_INT      | Maximum number of SQP iterations   |
+-----------------------+-------------+------------------------------------+
| max_iter_eig          | OT_DOUBLE   | Maximum number of iterations to    |
|                       |             | compute an eigenvalue              |
|                       |             | decomposition (default: 50).       |
+-----------------------+-------------+------------------------------------+
| max_iter_ls           | OT_INT      | Maximum number of linesearch       |
|                       |             | iterations                         |
+-----------------------+-------------+------------------------------------+
| merit_memory          | OT_INT      | Size of memory to store history of |
|                       |             | merit function values              |
+-----------------------+-------------+------------------------------------+
| min_iter              | OT_INT      | Minimum number of SQP iterations   |
+-----------------------+-------------+------------------------------------+
| min_step_size         | OT_DOUBLE   | The size (inf-norm) of the step    |
|                       |             | size should not become smaller     |
|                       |             | than this.                         |
+-----------------------+-------------+------------------------------------+
| print_header          | OT_BOOL     | Print the header with problem      |
|                       |             | statistics                         |
+-----------------------+-------------+------------------------------------+
| print_iteration       | OT_BOOL     | Print the iterations               |
+-----------------------+-------------+------------------------------------+
| print_status          | OT_BOOL     | Print a status message after       |
|                       |             | solving                            |
+-----------------------+-------------+------------------------------------+
| qpsol                 | OT_STRING   | The QP solver to be used by the    |
|                       |             | SQP method [qpoases]               |
+-----------------------+-------------+------------------------------------+
| qpsol_options         | OT_DICT     | Options to be passed to the QP     |
|                       |             | solver                             |
+-----------------------+-------------+------------------------------------+
| tol_du                | OT_DOUBLE   | Stopping criterion for dual        |
|                       |             | infeasability                      |
+-----------------------+-------------+------------------------------------+
| tol_pr                | OT_DOUBLE   | Stopping criterion for primal      |
|                       |             | infeasibility                      |
+-----------------------+-------------+------------------------------------+

>List of available options

+-------------------+---------------+-------------------+------------------+
|        Id         |     Type      |    Description    |     Used in      |
+===================+===============+===================+==================+
| beta              | OT_DOUBLE     | Line-search       | casadi::Sqpmetho |
|                   |               | parameter,        | d                |
|                   |               | restoration       |                  |
|                   |               | factor of         |                  |
|                   |               | stepsize          |                  |
+-------------------+---------------+-------------------+------------------+
| bound_consistency | OT_BOOL       | Ensure that       | casadi::Nlpsol   |
|                   |               | primal-dual       |                  |
|                   |               | solution is       |                  |
|                   |               | consistent with   |                  |
|                   |               | the bounds        |                  |
+-------------------+---------------+-------------------+------------------+
| c1                | OT_DOUBLE     | Armijo condition, | casadi::Sqpmetho |
|                   |               | coefficient of    | d                |
|                   |               | decrease in merit |                  |
+-------------------+---------------+-------------------+------------------+
| calc_f            | OT_BOOL       | Calculate 'f' in  | casadi::Nlpsol   |
|                   |               | the Nlpsol base   |                  |
|                   |               | class             |                  |
+-------------------+---------------+-------------------+------------------+
| calc_g            | OT_BOOL       | Calculate 'g' in  | casadi::Nlpsol   |
|                   |               | the Nlpsol base   |                  |
|                   |               | class             |                  |
+-------------------+---------------+-------------------+------------------+
| calc_lam_p        | OT_BOOL       | Calculate 'lam_p' | casadi::Nlpsol   |
|                   |               | in the Nlpsol     |                  |
|                   |               | base class        |                  |
+-------------------+---------------+-------------------+------------------+
| calc_lam_x        | OT_BOOL       | Calculate 'lam_x' | casadi::Nlpsol   |
|                   |               | in the Nlpsol     |                  |
|                   |               | base class        |                  |
+-------------------+---------------+-------------------+------------------+
| calc_multipliers  | OT_BOOL       | Calculate         | casadi::Nlpsol   |
|                   |               | Lagrange          |                  |
|                   |               | multipliers in    |                  |
|                   |               | the Nlpsol base   |                  |
|                   |               | class             |                  |
+-------------------+---------------+-------------------+------------------+
| convexify_margin  | OT_DOUBLE     | When using a      | casadi::Sqpmetho |
|                   |               | convexification   | d                |
|                   |               | strategy, make    |                  |
|                   |               | sure that the     |                  |
|                   |               | smallest          |                  |
|                   |               | eigenvalue is at  |                  |
|                   |               | least this        |                  |
|                   |               | (default: 1e-7).  |                  |
+-------------------+---------------+-------------------+------------------+
| convexify_strateg | OT_STRING     | NONE|regularize   | casadi::Sqpmetho |
| y                 |               | |eigen-reflect    | d                |
|                   |               | |eigen-clip.      |                  |
|                   |               | Strategy to       |                  |
|                   |               | convexify the     |                  |
|                   |               | Lagrange Hessian  |                  |
|                   |               | before passing it |                  |
|                   |               | to the solver.    |                  |
+-------------------+---------------+-------------------+------------------+
| discrete          | OT_BOOLVECTOR | Indicates which   | casadi::Nlpsol   |
|                   |               | of the variables  |                  |
|                   |               | are discrete,     |                  |
|                   |               | i.e. integer-     |                  |
|                   |               | valued            |                  |
+-------------------+---------------+-------------------+------------------+
| error_on_fail     | OT_BOOL       | When the          | casadi::Nlpsol   |
|                   |               | numerical process |                  |
|                   |               | returns           |                  |
|                   |               | unsuccessfully,   |                  |
|                   |               | raise an error    |                  |
|                   |               | (default false).  |                  |
+-------------------+---------------+-------------------+------------------+
| eval_errors_fatal | OT_BOOL       | When errors occur | casadi::Nlpsol   |
|                   |               | during evaluation |                  |
|                   |               | of f,g,...,stop   |                  |
|                   |               | the iterations    |                  |
+-------------------+---------------+-------------------+------------------+
| hess_lag          | OT_FUNCTION   | Function for      | casadi::Sqpmetho |
|                   |               | calculating the   | d                |
|                   |               | Hessian of the    |                  |
|                   |               | Lagrangian        |                  |
|                   |               | (autogenerated by |                  |
|                   |               | default)          |                  |
+-------------------+---------------+-------------------+------------------+
| hessian_approxima | OT_STRING     | limited-          | casadi::Sqpmetho |
| tion              |               | memory|exact      | d                |
+-------------------+---------------+-------------------+------------------+
| ignore_check_vec  | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
|                   |               | the input shape   |                  |
|                   |               | of F will not be  |                  |
|                   |               | checked.          |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_FUNCTION   | A function that   | casadi::Nlpsol   |
| k                 |               | will be called at |                  |
|                   |               | each iteration    |                  |
|                   |               | with the solver   |                  |
|                   |               | as input. Check   |                  |
|                   |               | documentation of  |                  |
|                   |               | Callback .        |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_BOOL       | If set to true,   | casadi::Nlpsol   |
| k_ignore_errors   |               | errors thrown by  |                  |
|                   |               | iteration_callbac |                  |
|                   |               | k will be         |                  |
|                   |               | ignored.          |                  |
+-------------------+---------------+-------------------+------------------+
| iteration_callbac | OT_INT        | Only call the     | casadi::Nlpsol   |
| k_step            |               | callback function |                  |
|                   |               | every few         |                  |
|                   |               | iterations.       |                  |
+-------------------+---------------+-------------------+------------------+
| jac_fg            | OT_FUNCTION   | Function for      | casadi::Sqpmetho |
|                   |               | calculating the   | d                |
|                   |               | gradient of the   |                  |
|                   |               | objective and     |                  |
|                   |               | Jacobian of the   |                  |
|                   |               | constraints       |                  |
|                   |               | (autogenerated by |                  |
|                   |               | default)          |                  |
+-------------------+---------------+-------------------+------------------+
| lbfgs_memory      | OT_INT        | Size of L-BFGS    | casadi::Sqpmetho |
|                   |               | memory.           | d                |
+-------------------+---------------+-------------------+------------------+
| max_iter          | OT_INT        | Maximum number of | casadi::Sqpmetho |
|                   |               | SQP iterations    | d                |
+-------------------+---------------+-------------------+------------------+
| max_iter_eig      | OT_DOUBLE     | Maximum number of | casadi::Sqpmetho |
|                   |               | iterations to     | d                |
|                   |               | compute an        |                  |
|                   |               | eigenvalue        |                  |
|                   |               | decomposition     |                  |
|                   |               | (default: 50).    |                  |
+-------------------+---------------+-------------------+------------------+
| max_iter_ls       | OT_INT        | Maximum number of | casadi::Sqpmetho |
|                   |               | linesearch        | d                |
|                   |               | iterations        |                  |
+-------------------+---------------+-------------------+------------------+
| merit_memory      | OT_INT        | Size of memory to | casadi::Sqpmetho |
|                   |               | store history of  | d                |
|                   |               | merit function    |                  |
|                   |               | values            |                  |
+-------------------+---------------+-------------------+------------------+
| min_iter          | OT_INT        | Minimum number of | casadi::Sqpmetho |
|                   |               | SQP iterations    | d                |
+-------------------+---------------+-------------------+------------------+
| min_lam           | OT_DOUBLE     | Minimum allowed   | casadi::Nlpsol   |
|                   |               | multiplier value  |                  |
+-------------------+---------------+-------------------+------------------+
| min_step_size     | OT_DOUBLE     | The size (inf-    | casadi::Sqpmetho |
|                   |               | norm) of the step | d                |
|                   |               | size should not   |                  |
|                   |               | become smaller    |                  |
|                   |               | than this.        |                  |
+-------------------+---------------+-------------------+------------------+
| no_nlp_grad       | OT_BOOL       | Prevent the       | casadi::Nlpsol   |
|                   |               | creation of the   |                  |
|                   |               | 'nlp_grad'        |                  |
|                   |               | function          |                  |
+-------------------+---------------+-------------------+------------------+
| oracle_options    | OT_DICT       | Options to be     | casadi::Nlpsol   |
|                   |               | passed to the     |                  |
|                   |               | oracle function   |                  |
+-------------------+---------------+-------------------+------------------+
| print_header      | OT_BOOL       | Print the header  | casadi::Sqpmetho |
|                   |               | with problem      | d                |
|                   |               | statistics        |                  |
+-------------------+---------------+-------------------+------------------+
| print_iteration   | OT_BOOL       | Print the         | casadi::Sqpmetho |
|                   |               | iterations        | d                |
+-------------------+---------------+-------------------+------------------+
| print_status      | OT_BOOL       | Print a status    | casadi::Sqpmetho |
|                   |               | message after     | d                |
|                   |               | solving           |                  |
+-------------------+---------------+-------------------+------------------+
| qpsol             | OT_STRING     | The QP solver to  | casadi::Sqpmetho |
|                   |               | be used by the    | d                |
|                   |               | SQP method        |                  |
|                   |               | [qpoases]         |                  |
+-------------------+---------------+-------------------+------------------+
| qpsol_options     | OT_DICT       | Options to be     | casadi::Sqpmetho |
|                   |               | passed to the QP  | d                |
|                   |               | solver            |                  |
+-------------------+---------------+-------------------+------------------+
| sens_linsol       | OT_STRING     | Linear solver     | casadi::Nlpsol   |
|                   |               | used for          |                  |
|                   |               | parametric        |                  |
|                   |               | sensitivities     |                  |
|                   |               | (default 'qr').   |                  |
+-------------------+---------------+-------------------+------------------+
| sens_linsol_optio | OT_DICT       | Linear solver     | casadi::Nlpsol   |
| ns                |               | options used for  |                  |
|                   |               | parametric        |                  |
|                   |               | sensitivities.    |                  |
+-------------------+---------------+-------------------+------------------+
| tol_du            | OT_DOUBLE     | Stopping          | casadi::Sqpmetho |
|                   |               | criterion for     | d                |
|                   |               | dual              |                  |
|                   |               | infeasability     |                  |
+-------------------+---------------+-------------------+------------------+
| tol_pr            | OT_DOUBLE     | Stopping          | casadi::Sqpmetho |
|                   |               | criterion for     | d                |
|                   |               | primal            |                  |
|                   |               | infeasibility     |                  |
+-------------------+---------------+-------------------+------------------+
| verbose_init      | OT_BOOL       | Print out timing  | casadi::Nlpsol   |
|                   |               | information about |                  |
|                   |               | the different     |                  |
|                   |               | stages of         |                  |
|                   |               | initialization    |                  |
+-------------------+---------------+-------------------+------------------+
| warn_initial_boun | OT_BOOL       | Warn if the       | casadi::Nlpsol   |
| ds                |               | initial guess     |                  |
|                   |               | does not satisfy  |                  |
|                   |               | LBX and UBX       |                  |
+-------------------+---------------+-------------------+------------------+

Diagrams
--------



C++ includes: sqpmethod.hpp ";

%feature("docstring") casadi::Sqpmethod::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::Sqpmethod::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Sqpmethod::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::Sqpmethod::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::Sqpmethod::generate_dependencies "

[INTERNAL]  Export / Generate C code for the generated functions.

";

%feature("docstring") casadi::Sqpmethod::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::Sqpmethod::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::Sqpmethod::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::Sqpmethod::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::Sqpmethod::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Sqpmethod::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Sqpmethod::get_forward "

[INTERNAL]  Generate a function that calculates forward mode derivatives.

";

%feature("docstring") casadi::Sqpmethod::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::Sqpmethod::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::Sqpmethod::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::Sqpmethod::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::Sqpmethod::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::Sqpmethod::get_function "

[INTERNAL]

>  const Function& casadi::OracleFunction::get_function(const std::string &name) const override
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Sqpmethod::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Sqpmethod::jit_dependencies "

[INTERNAL]  JIT for dependencies.

";

%feature("docstring") casadi::Sqpmethod::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Sqpmethod::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Sqpmethod::set_function "

[INTERNAL]  Register the function for evaluation and statistics gathering

";

%feature("docstring") casadi::Sqpmethod::has_forward "

[INTERNAL]  Generate a function that calculates forward mode derivatives.

";

%feature("docstring") casadi::Sqpmethod::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::Sqpmethod::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::Sqpmethod::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::Sqpmethod::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::Sqpmethod::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Sqpmethod::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::Sqpmethod::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Sqpmethod::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Sqpmethod::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::Sqpmethod::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Sqpmethod::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Sqpmethod::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Sqpmethod::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Sqpmethod::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::Sqpmethod::setOptionsFromFile "

[INTERNAL]  Read options from parameter xml.

";

%feature("docstring") casadi::Sqpmethod::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Sqpmethod::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::Sqpmethod::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Sqpmethod::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::Sqpmethod::finalize "

[INTERNAL]  Finalize initialization.

";

%feature("docstring") casadi::Sqpmethod::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Sqpmethod::has_function "

[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::Sqpmethod::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Sqpmethod::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Sqpmethod::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::Sqpmethod::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::Sqpmethod::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::Sqpmethod::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::Sqpmethod::callback "

[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::Sqpmethod::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::Sqpmethod::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Sqpmethod::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::Sqpmethod::solve "

[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Sqpmethod::expand "

[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::Sqpmethod::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Sqpmethod::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::Sqpmethod::solve_QP "

[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::Sqpmethod::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Sqpmethod::info "

[INTERNAL]  Obtain information about function

";

%feature("docstring") casadi::Sqpmethod::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Sqpmethod::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::Sqpmethod::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::Sqpmethod::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Sqpmethod::nlpsol_codegen_body "

[INTERNAL]  Generate code for the function body.

";

%feature("docstring") casadi::Sqpmethod::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Sqpmethod::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Sqpmethod::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::Sqpmethod::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::Sqpmethod::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Sqpmethod::create_function "

[INTERNAL]  Create an oracle function

";

%feature("docstring") casadi::Sqpmethod::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::Sqpmethod::getReducedHessian "

[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::disp_more "

[INTERNAL]  Print description.

";

%feature("docstring") casadi::Sqpmethod::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::Sqpmethod::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::Sqpmethod::monitored "

[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::integer_support "

[INTERNAL]  Can discrete variables be treated.

";

%feature("docstring") casadi::Sqpmethod::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::Sqpmethod::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Sqpmethod::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::Sqpmethod::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Sqpmethod::getConic "

[INTERNAL]  Access Conic.

";

%feature("docstring") casadi::Sqpmethod::eval "

[INTERNAL]  Evaluate numerically.

";

%feature("docstring") casadi::Sqpmethod::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Sqpmethod::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::Sqpmethod::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Sqpmethod::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::Sqpmethod::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Sqpmethod::eval_sx "

[INTERNAL]  Evaluate with symbolic scalars.

";

%feature("docstring") casadi::Sqpmethod::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::Sqpmethod::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Sqpmethod::print_iteration "

[INTERNAL]  Print iteration.

>  void casadi::Sqpmethod::print_iteration(casadi_int iter, double obj, double pr_inf, double du_inf, double dx_norm, double rg, casadi_int ls_trials, bool ls_success) const 
------------------------------------------------------------------------
[INTERNAL] 
Print iteration.

";

";

%feature("docstring") casadi::Sqpmethod::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::Sqpmethod::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Sqpmethod::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::Sqpmethod::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Sqpmethod::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::Sqpmethod::kkt "

[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::Sqpmethod::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Sqpmethod::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::Sqpmethod::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Sqpmethod::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Sqpmethod::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::Sqpmethod::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::Sqpmethod::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::Sqpmethod::calc_function "

[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::Sqpmethod::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Sqpmethod::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::Sqpmethod::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Sqpmethod::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::Sqpmethod::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::Sqpmethod::check_inputs "

[INTERNAL]  Check if the inputs correspond to a well-posed problem.

";

%feature("docstring") casadi::Sqpmethod::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::Sqpmethod::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::Sqpmethod::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Sqpmethod::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::Sqpmethod::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::Sqpmethod::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Sqpmethod::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::Sqpmethod::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Sqpmethod::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::Sqpmethod::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Sqpmethod::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Sqpmethod::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::Sqpmethod::Sqpmethod "

[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Sqpmethod::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::Sqpmethod::class_name "

[INTERNAL]  Get type name.

";

%feature("docstring") casadi::Sqpmethod::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Sqpmethod::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Sqpmethod::~Sqpmethod "

[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Sqpmethod::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Sqpmethod::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Sqpmethod::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::Sqpmethod::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Sqpmethod::factory "

[INTERNAL] ";

%feature("docstring") casadi::Sqpmethod::is_a "

[INTERNAL]  Check if the function is of a particular type.

";


// File: classcasadi_1_1Logger_1_1Stream.xml
%feature("docstring") casadi::Logger::Stream "

C++ includes: casadi_logger.hpp ";


// File: classcasadi_1_1Logger_1_1Streambuf.xml
%feature("docstring") casadi::Logger::Streambuf "

C++ includes: casadi_logger.hpp ";


// File: classcasadi_1_1StringDeserializer.xml
%feature("docstring") casadi::StringDeserializer "

C++ includes: serializer.hpp ";

%feature("docstring") casadi::StringDeserializer::StringDeserializer "

Advanced deserialization of CasADi objects.

StringDeserializer

";

%feature("docstring") casadi::StringDeserializer::decode "

Sets the string to deserialize objects from.

";


// File: classcasadi_1_1StringSerializer.xml
%feature("docstring") casadi::StringSerializer::encode "

Returns a string that holds the serialized objects.

As a side effect, this method clears the internal buffer

";

%feature("docstring") casadi::StringSerializer "

C++ includes: serializer.hpp ";


// File: classcasadi_1_1SubAssign.xml


// File: classcasadi_1_1SubIndex.xml
%feature("docstring") casadi::SubIndex "

SubIndex class for Matrix Same as the above class but for single argument
return for operator() Joel Andersson

C++ includes: submatrix.hpp ";

%feature("docstring") casadi::SubIndex::SubIndex "

Constructor.

";


// File: classcasadi_1_1SubMatrix.xml
%feature("docstring") casadi::SubMatrix "

SubMatrix class for Matrix SubMatrix is the return type for operator() of
the Matrix class, it allows access to the value as well as changing the
parent object Joel Andersson

C++ includes: submatrix.hpp ";

%feature("docstring") casadi::SubMatrix::SubMatrix "

Constructor.

";


// File: classcasadi_1_1SubRef.xml


// File: classcasadi_1_1Switch.xml
%feature("docstring") casadi::Switch::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::Switch::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::Switch::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::Switch::disp_more "

[INTERNAL]  Print description.

";

%feature("docstring") casadi::Switch::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Switch::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::Switch::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::Switch::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Switch::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Switch::eval "

[INTERNAL]  Evaluate numerically, work vectors given.

";

%feature("docstring") casadi::Switch::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Switch::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Switch::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Switch::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Switch::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::Switch::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Switch::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Switch::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::Switch::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::Switch::eval_gen "

[INTERNAL]  Evaluate a function, overloaded.

>  int casadi::FunctionInternal::eval_gen(const SXElem **arg, SXElem **res, casadi_int *iw, SXElem *w, void *mem) const

>  int casadi::FunctionInternal::eval_gen(const bvec_t **arg, bvec_t **res, casadi_int *iw, bvec_t *w, void *mem) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate a function, overloaded.

";

";

%feature("docstring") casadi::Switch::get_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Switch::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::Switch::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::Switch::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Switch::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::Switch::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::Switch::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::Switch::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::Switch::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Switch::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Switch::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::Switch::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Switch::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::Switch::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::Switch::set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring") casadi::Switch::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::Switch::has_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::Switch::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::Switch::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::Switch::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Switch::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::Switch::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::Switch::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::Switch::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Switch::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Switch::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::Switch::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::Switch::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Switch::~Switch "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::Switch::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::Switch::info "

[INTERNAL]  Obtain information about node

";

%feature("docstring") casadi::Switch::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Switch::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Switch::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::Switch::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::Switch::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::Switch::codegen_body "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring") casadi::Switch::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::Switch::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::Switch::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::Switch::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::Switch::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::Switch::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::Switch::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::Switch::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::Switch::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::Switch::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::Switch::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::Switch::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::Switch::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Switch::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::Switch::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::Switch::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::Switch::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Switch::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::Switch::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::Switch::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Switch::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Switch::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::Switch::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::Switch::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::Switch::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::Switch::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::Switch::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Switch::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Switch::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::Switch::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Switch::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::Switch::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::Switch::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::Switch::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Switch::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::Switch::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::Switch::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::Switch::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::Switch::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::Switch::generate_dependencies "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::Switch::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::Switch::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::Switch::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::Switch::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::Switch::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::Switch::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::Switch::factory "

[INTERNAL] ";

%feature("docstring") casadi::Switch::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::Switch::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::Switch::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::Switch::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::Switch::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::Switch::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::Switch::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::Switch::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::Switch::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::Switch::class_name "

[INTERNAL]  Get type name.

";

%feature("docstring") casadi::Switch::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::Switch::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::Switch::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Switch::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::Switch::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::Switch::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::Switch::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::Switch::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::Switch::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::Switch::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::Switch::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Switch::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::Switch::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::Switch::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::Switch::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::Switch::get_function "

[INTERNAL] ";

%feature("docstring") casadi::Switch::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::Switch::eval_sx "

[INTERNAL]  evaluate symbolically while also propagating directional
derivatives

";

%feature("docstring") casadi::Switch::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::Switch::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::Switch::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::Switch::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::Switch::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::Switch::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::Switch::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Switch::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Switch::Switch "

[INTERNAL]  Constructor (generic switch)

";

%feature("docstring") casadi::Switch::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Switch::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::Switch::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::Switch::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::Switch::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::Switch::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::Switch::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Switch::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::Switch::has_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Switch::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::Switch::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::Switch "

[INTERNAL]   Switch statement Joel Andersson

C++ includes: switch.hpp ";

%feature("docstring") casadi::Switch::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Switch::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::Switch::jit_dependencies "

[INTERNAL]  Jit dependencies.

";

%feature("docstring") casadi::Switch::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::Switch::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::Switch::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::Switch::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::Switch::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::Switch::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::Switch::finalize "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring") casadi::Switch::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::Switch::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::Switch::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::Switch::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::Switch::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::Switch::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::Switch::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::Switch::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::Switch::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Switch::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::Switch::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::Switch::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::Switch::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::Switch::has_function "

[INTERNAL] ";

%feature("docstring") casadi::Switch::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::Switch::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::Switch::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::Switch::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::Switch::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::Switch::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::Switch::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::Switch::get_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::Switch::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::Switch::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::Switch::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::Switch::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";


// File: classcasadi_1_1SXFunction.xml


// File: classcasadi_1_1SymbolicMX.xml


// File: classcasadi_1_1SymbolicQr.xml
%feature("docstring") casadi::SymbolicQr::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::SymbolicQr::neig "

[INTERNAL]  Number of negative eigenvalues.

";

%feature("docstring") casadi::SymbolicQr::class_name "

[INTERNAL]  Readable name of the internal class.

";

%feature("docstring") casadi::SymbolicQr::SymbolicQr "

[INTERNAL] ";

%feature("docstring") casadi::SymbolicQr::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::SymbolicQr::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::SymbolicQr::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::SymbolicQr::linsol_eval_sx "

[INTERNAL]  Evaluate symbolically (SX)

";

%feature("docstring") casadi::SymbolicQr::~SymbolicQr "

[INTERNAL] ";

%feature("docstring") casadi::SymbolicQr::rank "

[INTERNAL]   Matrix rank.

";

%feature("docstring") casadi::SymbolicQr::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::SymbolicQr::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::SymbolicQr::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::SymbolicQr::nrow "

[INTERNAL]  Get sparsity pattern.

";

%feature("docstring") casadi::SymbolicQr "

'symbolicqr' plugin for Linsol

Linear solver for sparse least-squares problems Inspired
fromhttps://github.com/scipy/scipy/blob/v0.14.0/scipy/sparse/linalg/isolve/lsqr.py#L96

Linsol based on QR factorization with sparsity pattern based reordering
without partial pivoting

>List of available options

+-------+---------+----------------------------------------------------+
|  Id   |  Type   |                    Description                     |
+=======+=========+====================================================+
| fopts | OT_DICT | Options to be passed to generated function objects |
+-------+---------+----------------------------------------------------+

Joel Andersson

>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| fopts            | OT_DICT         | Options to be    | casadi::Symbolic |
|                  |                 | passed to        | Qr               |
|                  |                 | generated        |                  |
|                  |                 | function objects |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

Diagrams
--------



C++ includes: symbolic_qr.hpp ";

%feature("docstring") casadi::SymbolicQr::nnz "

[INTERNAL] ";

%feature("docstring") casadi::SymbolicQr::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::SymbolicQr::ncol "

[INTERNAL] ";

%feature("docstring") casadi::SymbolicQr::generate "

[INTERNAL]  Generate C code.

";

%feature("docstring") casadi::SymbolicQr::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::SymbolicQr::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::SymbolicQr::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::SymbolicQr::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::SymbolicQr::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::SymbolicQr::plugin_name "

[INTERNAL] ";

%feature("docstring") casadi::SymbolicQr::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::SymbolicQr::finalize "

[INTERNAL]  Finalize the object creation This function, which visits the
class hierarchy in reverse order is run after init() has been completed.

";

%feature("docstring") casadi::SymbolicQr::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::SymbolicQr::solve "

[INTERNAL] ";

%feature("docstring") casadi::SymbolicQr::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::SymbolicQr::nfact "

[INTERNAL]  Numeric factorization.

";

%feature("docstring") casadi::SymbolicQr::sfact "

[INTERNAL] ";

%feature("docstring") casadi::SymbolicQr::row "

[INTERNAL] ";

%feature("docstring") casadi::SymbolicQr::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::SymbolicQr::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::SymbolicQr::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::SymbolicQr::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::SymbolicQr::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::SymbolicQr::colind "

[INTERNAL] ";

%feature("docstring") casadi::SymbolicQr::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::SymbolicQr::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::SymbolicQr::sprint "

[INTERNAL]  C-style formatted printing to string.

";


// File: classcasadi_1_1SymbolicSX.xml


// File: classcasadi_1_1ThreadMap.xml
%feature("docstring") casadi::ThreadMap::symbolicAdjSeed "

[INTERNAL]  Symbolic expressions for the adjoint seeds.

";

%feature("docstring") casadi::ThreadMap::serialize "

[INTERNAL]  Serialize an object.

";

%feature("docstring") casadi::ThreadMap::class_name "

[INTERNAL]  Get type name.

";

%feature("docstring") casadi::ThreadMap::getJacSparsityGen "

[INTERNAL]  Get the sparsity pattern, forward mode.

";

%feature("docstring") casadi::ThreadMap::self "

[INTERNAL]  Get a public class instance.

";

%feature("docstring") casadi::ThreadMap::sparsity_in "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::ThreadMap::get_sparsity_in "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::ThreadMap::sparsity_jac "

[INTERNAL]  Get, if necessary generate, the sparsity of a Jacobian block.

";

%feature("docstring") casadi::ThreadMap::project_res "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::ThreadMap::construct "

[INTERNAL]  Construct Prepares the function for evaluation.

";

%feature("docstring") casadi::ThreadMap::finalize "

[INTERNAL]  Finalize the object creation.

";

%feature("docstring") casadi::ThreadMap::jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ThreadMap::sx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ThreadMap::tocache "

[INTERNAL]  Save function to cache.

";

%feature("docstring") casadi::ThreadMap::disp "

[INTERNAL]  Display object.

";

%feature("docstring") casadi::ThreadMap::sz_arg "

[INTERNAL]  Get required length of arg field.

";

%feature("docstring") casadi::ThreadMap::serialize_body "

[INTERNAL]  Serialize an object without type information.

";

%feature("docstring") casadi::ThreadMap::codegen_init_mem "

[INTERNAL]  Codegen decref for init_mem.

";

%feature("docstring") casadi::ThreadMap::mapsum_mx "

[INTERNAL]  Parallel evaluation.

";

%feature("docstring") casadi::ThreadMap::check_arg "

[INTERNAL]  Check if input arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::ThreadMap::size2_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ThreadMap::replace_arg "

[INTERNAL]  Replace 0-by-0 inputs.

";

%feature("docstring") casadi::ThreadMap::ThreadMap "

[INTERNAL] ";

%feature("docstring") casadi::ThreadMap::generate_out "

[INTERNAL] ";

%feature("docstring") casadi::ThreadMap::eval_mx "

[INTERNAL]  Evaluate with symbolic matrices.

";

%feature("docstring") casadi::ThreadMap::free_sx "

[INTERNAL]  Get free variables (SX)

";

%feature("docstring") casadi::ThreadMap::dm_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ThreadMap::has_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ThreadMap::size_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ThreadMap::instruction_input "

[INTERNAL]  Get the (integer) input arguments of an atomic operation.

";

%feature("docstring") casadi::ThreadMap::signature "

[INTERNAL]  Code generate the function.

";

%feature("docstring") casadi::ThreadMap::codegen_incref "

[INTERNAL]  Codegen incref for dependencies.

";

%feature("docstring") casadi::ThreadMap::checkout "

[INTERNAL]  Checkout a memory object.

";

%feature("docstring") casadi::ThreadMap::get_jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ThreadMap::eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::ThreadMap::print_dimensions "

[INTERNAL]  Print dimensions of inputs and outputs.

";

%feature("docstring") casadi::ThreadMap::eval_gen "

[INTERNAL]  Evaluate or propagate sparsities.

>  int casadi::Map::eval_gen(const T **arg, T **res, casadi_int *iw, T *w, int mem=0) const 
------------------------------------------------------------------------
[INTERNAL] 
Evaluate or propagate sparsities.

";

";

%feature("docstring") casadi::ThreadMap::get_partition "

[INTERNAL]  Get the unidirectional or bidirectional partition.

";

%feature("docstring") casadi::ThreadMap::alloc "

[INTERNAL]  Ensure work vectors long enough to evaluate function.

";

%feature("docstring") casadi::ThreadMap::memory "

[INTERNAL]  Memory objects.

";

%feature("docstring") casadi::ThreadMap::set_temp "

[INTERNAL]  Set the (temporary) work vectors.

";

%feature("docstring") casadi::ThreadMap::get_options "

[INTERNAL]  Options.

";

%feature("docstring") casadi::ThreadMap::get_max_in "

[INTERNAL]  Get largest input value.

";

%feature("docstring") casadi::ThreadMap::wrap_as_needed "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::ThreadMap::info "

[INTERNAL]  Obtain information about node

";

%feature("docstring") casadi::ThreadMap::jacobian "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ThreadMap::get_free "

[INTERNAL]  Print free variables.

";

%feature("docstring") casadi::ThreadMap::parallelization "

[INTERNAL]  Type of parallellization.

";

%feature("docstring") casadi::ThreadMap::call_gen "

[INTERNAL]   Call a function, overloaded.

";

%feature("docstring") casadi::ThreadMap::check_res "

[INTERNAL]  Check if output arguments have correct length and dimensions.

Raises errors.

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::ThreadMap::alloc_iw "

[INTERNAL]  Ensure required length of iw field.

";

%feature("docstring") casadi::ThreadMap::get_name_out "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::ThreadMap::matching_res "

[INTERNAL]  Check if output arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::ThreadMap::has_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::ThreadMap::which_depends "

[INTERNAL]  Which variables enter with some order.

Parameters:
-----------

s_in:   Input name

s_out:   Output name(s)

order:  Only 1 (linear) and 2 (nonlinear) allowed

tr:  Flip the relationship. Return which expressions contain the variables

";

%feature("docstring") casadi::ThreadMap::sz_res "

[INTERNAL]  Get required length of res field.

";

%feature("docstring") casadi::ThreadMap::instruction_output "

[INTERNAL]  Get the (integer) output argument of an atomic operation.

";

%feature("docstring") casadi::ThreadMap::alloc_mem "

[INTERNAL]  Create memory block.

";

%feature("docstring") casadi::ThreadMap::reverse "

[INTERNAL]  Return function that calculates adjoint derivatives
reverse(nadj) returns a cached instance if available, and calls  Function
get_reverse(casadi_int nadj) if no cached version is available.

";

%feature("docstring") casadi::ThreadMap::init "

[INTERNAL]  Initialize.

";

%feature("docstring") casadi::ThreadMap::has_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::ThreadMap::replace_aseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_aseed(const std::vector< std::vector< M > > &aseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::ThreadMap::getCount "

[INTERNAL]  Get the reference count.

";

%feature("docstring") casadi::ThreadMap::nnz_out "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::ThreadMap::get_forward "

[INTERNAL]  Generate a function that calculates nfwd forward derivatives.

";

%feature("docstring") casadi::ThreadMap::eval_sx "

[INTERNAL]  evaluate symbolically while also propagating directional
derivatives

";

%feature("docstring") casadi::ThreadMap::is_diff_out "

[INTERNAL] ";

%feature("docstring") casadi::ThreadMap::project_arg "

[INTERNAL]   Project sparsities.

";

%feature("docstring") casadi::ThreadMap::has_spfwd "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::ThreadMap::codegen_declarations "

[INTERNAL]  Generate code for the declarations of the C function.

";

%feature("docstring") casadi::ThreadMap::get_name_in "

[INTERNAL]  Names of function input and outputs.

";

%feature("docstring") casadi::ThreadMap::call "

[INTERNAL]   Call a function, templated.

";

%feature("docstring") casadi::ThreadMap::map "

[INTERNAL]  Generate/retrieve cached serial map.

";

%feature("docstring") casadi::ThreadMap::has_free "

[INTERNAL]  Does the function have free variables.

";

%feature("docstring") casadi::ThreadMap::get_reverse "

[INTERNAL]  Generate a function that calculates nadj adjoint derivatives.

";

%feature("docstring") casadi::ThreadMap::sp_forward "

[INTERNAL]  Propagate sparsity forward.

";

%feature("docstring") casadi::ThreadMap::serialize_type "

[INTERNAL]  Serialize type information.

";

%feature("docstring") casadi::ThreadMap::sx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ThreadMap::get_min_in "

[INTERNAL]  Get smallest input value.

";

%feature("docstring") casadi::ThreadMap::has_eval_dm "

[INTERNAL]  Evaluate with DM matrices.

";

%feature("docstring") casadi::ThreadMap::get_sparsity_out "

[INTERNAL]  Sparsities of function inputs and outputs.

";

%feature("docstring") casadi::ThreadMap::format_time "

[INTERNAL]  Format time in a fixed width 8 format.

";

%feature("docstring") casadi::ThreadMap::codegen_meta "

[INTERNAL]  Generate meta-information allowing a user to evaluate a
generated function.

";

%feature("docstring") casadi::ThreadMap::all_scalar "

[INTERNAL]  Are all inputs and outputs scalar.

";

%feature("docstring") casadi::ThreadMap::fwdViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::ThreadMap::generate_lifted "

[INTERNAL]  Extract the functions needed for the Lifted Newton method.

";

%feature("docstring") casadi::ThreadMap::eval "

[INTERNAL]  Evaluate the function numerically.

";

%feature("docstring") casadi::ThreadMap::convert_arg "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::ThreadMap::has_sprev "

[INTERNAL]  Is the class able to propagate seeds through the algorithm?

";

%feature("docstring") casadi::ThreadMap::get_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::ThreadMap::print_time "

[INTERNAL]  Print timing statistics.

";

%feature("docstring") casadi::ThreadMap::size2_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ThreadMap::instructions_sx "

[INTERNAL]  get SX expression associated with instructions

";

%feature("docstring") casadi::ThreadMap::nnz_in "

[INTERNAL]  Number of input/output nonzeros.

";

%feature("docstring") casadi::ThreadMap::sp_reverse "

[INTERNAL]  Propagate sparsity backwards.

";

%feature("docstring") casadi::ThreadMap::export_code "

[INTERNAL]  Export function in a specific language.

";

%feature("docstring") casadi::ThreadMap::instruction_id "

[INTERNAL]  Get an atomic operation operator index.

";

%feature("docstring") casadi::ThreadMap::wrap "

[INTERNAL]  Wrap in an Function instance consisting of only one MX call.

";

%feature("docstring") casadi::ThreadMap::slice "

[INTERNAL]  returns a new function with a selection of inputs/outputs of the
original

";

%feature("docstring") casadi::ThreadMap::call_forward "

[INTERNAL]  Forward mode AD, virtual functions overloaded in derived
classes.

";

%feature("docstring") casadi::ThreadMap::codegen_mem "

[INTERNAL]  Get thread-local memory object.

";

%feature("docstring") casadi::ThreadMap::index_out "

[INTERNAL]  Get output scheme index by name.

";

%feature("docstring") casadi::ThreadMap::is_a "

[INTERNAL]  Check if the function is of a particular type.

";

%feature("docstring") casadi::ThreadMap::codegen_body "

[INTERNAL]  Generate code for the body of the C function.

";

%feature("docstring") casadi::ThreadMap::get_function "

[INTERNAL] ";

%feature("docstring") casadi::ThreadMap::mx_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ThreadMap::nz_out "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::ThreadMap::sz_iw "

[INTERNAL]  Get required length of iw field.

";

%feature("docstring") casadi::ThreadMap::getJacSparsityHierarchicalSymm "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition for symmetric Jacobians

";

%feature("docstring") casadi::ThreadMap::incache "

[INTERNAL]  Get function in cache.

";

%feature("docstring") casadi::ThreadMap::n_instructions "

[INTERNAL]  Get the number of atomic operations.

";

%feature("docstring") casadi::ThreadMap::get_stats "

[INTERNAL]  Get all statistics.

";

%feature("docstring") casadi::ThreadMap::convert_res "

[INTERNAL]  Convert from/to input/output lists/map.

";

%feature("docstring") casadi::ThreadMap::getJacSparsityHierarchical "

[INTERNAL]  A flavor of getJacSparsity that does hierarchical block
structure recognition.

";

%feature("docstring") casadi::ThreadMap::codegen "

[INTERNAL]  Generate code the function.

";

%feature("docstring") casadi::ThreadMap::sparsity_out "

[INTERNAL]  Input/output sparsity.

";

%feature("docstring") casadi::ThreadMap::has_jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::ThreadMap::get_abstol "

[INTERNAL]  Get absolute tolerance.

";

%feature("docstring") casadi::ThreadMap::alloc_w "

[INTERNAL]  Ensure required length of w field.

";

%feature("docstring") casadi::ThreadMap::call_reverse "

[INTERNAL]  Reverse mode, virtual functions overloaded in derived classes.

";

%feature("docstring") casadi::ThreadMap::weak "

[INTERNAL]  Get a weak reference to the object.

";

%feature("docstring") casadi::ThreadMap::ad_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode.

";

%feature("docstring") casadi::ThreadMap::codegen_mem_type "

[INTERNAL]  Thread-local memory object type.

";

%feature("docstring") casadi::ThreadMap::get_n_in "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::ThreadMap::disp_more "

[INTERNAL]  Print more.

";

%feature("docstring") casadi::ThreadMap::size1_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ThreadMap::fwd_seed "

[INTERNAL]  Symbolic expressions for the forward seeds.

";

%feature("docstring") casadi::ThreadMap::nz_in "

[INTERNAL]  Convert from/to flat vector of input/output nonzeros.

";

%feature("docstring") casadi::ThreadMap::definition "

[INTERNAL]  Get function signature: name:(inputs)->(outputs)

";

%feature("docstring") casadi::ThreadMap::getJacSparsity "

[INTERNAL]  Generate the sparsity of a Jacobian block.

";

%feature("docstring") casadi::ThreadMap::~ThreadMap "

[INTERNAL]  Destructor.

";

%feature("docstring") casadi::ThreadMap::init_mem "

[INTERNAL]  Initalize memory block.

";

%feature("docstring") casadi::ThreadMap::codegen_name "

[INTERNAL]  Get name in codegen.

";

%feature("docstring") casadi::ThreadMap::set_work "

[INTERNAL]  Set the (persistent) work vectors.

";

%feature("docstring") casadi::ThreadMap::numel_out "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::ThreadMap::dm_in "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ThreadMap::codegen_decref "

[INTERNAL]  Codegen decref for dependencies.

";

%feature("docstring") casadi::ThreadMap::generate_options "

[INTERNAL]  Reconstruct options dict.

";

%feature("docstring") casadi::ThreadMap::size1_out "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ThreadMap::mx_out "

[INTERNAL]  Get function input(s) and output(s)

";

%feature("docstring") casadi::ThreadMap::instruction_constant "

[INTERNAL]  Get the floating point output argument of an atomic operation.

";

%feature("docstring") casadi::ThreadMap::index_in "

[INTERNAL]  Get input scheme index by name.

";

%feature("docstring") casadi::ThreadMap::size_in "

[INTERNAL]  Input/output dimensions.

";

%feature("docstring") casadi::ThreadMap::replace_fseed "

[INTERNAL]

>  std::vector<std::vector<M> > casadi::FunctionInternal::replace_fseed(const std::vector< std::vector< M > > &fseed, casadi_int npar) const 
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::ThreadMap::get_reltol "

[INTERNAL]  Get relative tolerance.

";

%feature("docstring") casadi::ThreadMap::get_default_in "

[INTERNAL]  Get default input value.

";

%feature("docstring") casadi::ThreadMap::matching_arg "

[INTERNAL]  Check if input arguments that needs to be replaced.

Raises errors

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar:  max number of horizontal repetitions across all arguments (or -1)

";

%feature("docstring") casadi::ThreadMap::getAdaptorSolverName "

[INTERNAL]  Obtain solver name from Adaptor.

";

%feature("docstring") casadi::ThreadMap::has_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ThreadMap::forward "

[INTERNAL]  Return function that calculates forward derivatives
forward(nfwd) returns a cached instance if available, and calls  Function
get_forward(casadi_int nfwd) if no cached version is available.

";

%feature("docstring") casadi::ThreadMap::has_derivative "

[INTERNAL]  Can derivatives be calculated in any way?

";

%feature("docstring") casadi::ThreadMap::get_jac "

[INTERNAL]  Return Jacobian of all input elements with respect to all output
elements.

";

%feature("docstring") casadi::ThreadMap::print_options "

[INTERNAL]  Print list of options.

";

%feature("docstring") casadi::ThreadMap::generate_in "

[INTERNAL]  Export an input file that can be passed to generate C code with
a main.

";

%feature("docstring") casadi::ThreadMap::free_mem "

[INTERNAL]  Free memory block.

";

%feature("docstring") casadi::ThreadMap::free_mx "

[INTERNAL]  Get free variables ( MX)

";

%feature("docstring") casadi::ThreadMap::get_n_out "

[INTERNAL]  Number of function inputs and outputs.

";

%feature("docstring") casadi::ThreadMap::sprint "

[INTERNAL]  C-style formatted printing to string.

";

%feature("docstring") casadi::ThreadMap::jacobian_sparsity "

[INTERNAL]  Get Jacobian sparsity.

";

%feature("docstring") casadi::ThreadMap::codegen_alloc_mem "

[INTERNAL]  Codegen decref for alloc_mem.

";

%feature("docstring") casadi::ThreadMap::has_codegen "

[INTERNAL]  Is codegen supported?

";

%feature("docstring") casadi::ThreadMap::numel_in "

[INTERNAL]  Number of input/output elements.

";

%feature("docstring") casadi::ThreadMap::n_nodes "

[INTERNAL]  Number of nodes in the algorithm.

";

%feature("docstring") casadi::ThreadMap::replace_res "

[INTERNAL]  Replace 0-by-0 outputs.

";

%feature("docstring") casadi::ThreadMap::clear_mem "

[INTERNAL]  Clear all memory (called from destructor)

";

%feature("docstring") casadi::ThreadMap::sz_w "

[INTERNAL]  Get required length of w field.

";

%feature("docstring") casadi::ThreadMap::has_function "

[INTERNAL] ";

%feature("docstring") casadi::ThreadMap::adjViaJac "

[INTERNAL]  Calculate derivatives by multiplying the full Jacobian and
multiplying.

";

%feature("docstring") casadi::ThreadMap::is_diff_in "

[INTERNAL] ";

%feature("docstring") casadi::ThreadMap::release "

[INTERNAL]  Release a memory object.

";

%feature("docstring") casadi::ThreadMap::serialize_base_function "

[INTERNAL]  String used to identify the immediate FunctionInternal subclass.

";

%feature("docstring") casadi::ThreadMap::print "

[INTERNAL]  C-style formatted printing during evaluation.

";

%feature("docstring") casadi::ThreadMap::alloc_arg "

[INTERNAL]  Ensure required length of arg field.

";

%feature("docstring") casadi::ThreadMap::uses_output "

[INTERNAL]  Do the derivative functions need nondifferentiated outputs?

";

%feature("docstring") casadi::ThreadMap::factory "

[INTERNAL] ";

%feature("docstring") casadi::ThreadMap::sz_work "

[INTERNAL]  Get number of temporary variables needed.

";

%feature("docstring") casadi::ThreadMap::instruction_MX "

[INTERNAL]  get MX expression associated with instruction

";

%feature("docstring") casadi::ThreadMap::alloc_res "

[INTERNAL]  Ensure required length of res field.

";

%feature("docstring") casadi::ThreadMap::print_option "

[INTERNAL]  Print all information there is to know about a certain option.

";

%feature("docstring") casadi::ThreadMap::codegen_free_mem "

[INTERNAL]  Codegen for free_mem.

";

%feature("docstring") casadi::ThreadMap::check_mat "

[INTERNAL]  Helper function

Parameters:
-----------

npar[in]:  normal usage: 1, disallow pararallel calls: -1

npar[out]:  required number of parallel calls (or -1)

";

%feature("docstring") casadi::ThreadMap::oracle "

[INTERNAL]  Get oracle.

";

%feature("docstring") casadi::ThreadMap::symbolic_output "

[INTERNAL]  Get a vector of symbolic variables corresponding to the outputs.

";

%feature("docstring") casadi::ThreadMap::setup "

[INTERNAL]  Set the (persistent and temporary) work vectors.

";

%feature("docstring") casadi::ThreadMap::generate_dependencies "

[INTERNAL]  Export / Generate C code for the dependency function.

";

%feature("docstring") casadi::ThreadMap::sp_weight "

[INTERNAL]  Weighting factor for chosing forward/reverse mode, sparsity
propagation.

";

%feature("docstring") casadi::ThreadMap "

[INTERNAL]  A map Evaluate in parallel using std::thread Note: Do not use
this class with much more than the intended number of threads for the
parallel evaluation as it will cause excessive memory use.

Joris Gillis

C++ includes: map.hpp ";

%feature("docstring") casadi::ThreadMap::jacobian_sparsity_filter "

[INTERNAL]  Filter out nonzeros in the full sparsity jacobian according to
is_diff_in/out.

";

%feature("docstring") casadi::ThreadMap::codegen_sparsities "

[INTERNAL]  Codegen sparsities.

";

%feature("docstring") casadi::ThreadMap::jit_dependencies "

[INTERNAL]  Jit dependencies.

";


// File: classcasadi_1_1Transpose.xml


// File: classcasadi_1_1UnaryMX.xml


// File: classcasadi_1_1UnarySX.xml


// File: classcasadi_1_1Vertcat.xml


// File: classcasadi_1_1Vertsplit.xml


// File: classcasadi_1_1WeakRef.xml
%feature("docstring") casadi::WeakRef "

Weak reference type A weak reference to a SharedObject.

Joel Andersson

C++ includes: shared_object.hpp ";

%feature("docstring") casadi::WeakRef::shared "

Get a shared (owning) reference.

";

%feature("docstring") casadi::WeakRef::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::WeakRef::is_null "

Is a null pointer?

";

%feature("docstring") casadi::WeakRef::print_ptr "

[INTERNAL]  Print the pointer to the internal class

";

%feature("docstring") casadi::WeakRef::WeakRef "

Construct from a shared object (also implicit type conversion)

>  casadi::WeakRef::WeakRef(SharedObject shared)
------------------------------------------------------------------------

Construct from a shared object (also implicit type conversion)

";

";

%feature("docstring") casadi::WeakRef::disp "

Print a description of the object.

";

%feature("docstring") casadi::WeakRef::get_str "

Get string representation.

";

%feature("docstring") casadi::WeakRef::class_name "

Get class name.

";

%feature("docstring") casadi::WeakRef::alive "

Check if alive.

";


// File: classcasadi_1_1XFunction.xml


// File: classcasadi_1_1XmlFile.xml
%feature("docstring") casadi::XmlFile "

XML parser Can be used for parsing XML files into CasADi data structures.

Joel Andersson

C++ includes: xml_file.hpp ";

%feature("docstring") casadi::XmlFile::get_str "

Get string representation.

";

%feature("docstring") casadi::XmlFile::__hash__ "

Returns a number that is unique for a given Node. If the Object does not
point to any node, \"0\" is returned.

";

%feature("docstring") casadi::XmlFile::class_name "

Get class name.

";

%feature("docstring") casadi::XmlFile::is_null "

Is a null pointer?

";

%feature("docstring") casadi::XmlFile::disp "

Print a description of the object.

";

%feature("docstring") casadi::XmlFile::print_ptr "

[INTERNAL]  Print the pointer to the internal class

";


// File: classcasadi_1_1ZeroByZero.xml


// File: classcasadi_1_1ZeroSX.xml


// File: namespaceBonmin.xml


// File: namespacecasadi.xml
%feature("docstring") casadi::is_nondecreasing "
Check if the vector is non-decreasing.

";

%feature("docstring") casadi::matrixName< double > "

Get typename.

";

%feature("docstring") casadi::complement "

Returns the list of all i in [0, size[ not found in supplied list.

The supplied vector may contain duplicates and may be non-monotonous The
supplied vector will be checked for bounds The result vector is guaranteed
to be monotonously increasing

";

%feature("docstring") casadi::conic_option_type "

Get type info for a particular option.

";

%feature("docstring") casadi::casadi_ipqp_predictor_prepare "

[INTERNAL] ";

%feature("docstring") casadi::casadi_qp_pr_index "

[INTERNAL] ";

%feature("docstring") casadi::load_expm "

Explicitly load a plugin dynamically.

";

%feature("docstring") casadi::casadi_rank1 "

[INTERNAL]

>  void casadi::casadi_rank1(T1 *A, const casadi_int *sp_A, T1 alpha, const T1 *x, const T1 *y)
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::casadi_nlpsol_work "

[INTERNAL] ";

%feature("docstring") casadi::casadi_cvx_house_apply "

[INTERNAL]  Apply householder transform on dense A m-by-n matrix

A is modified in-place

s : stride normally equal to m when A is a submatrix of a bigger matrix, set
equal to latter's number of rows v : compact housholder factorisation
(length m) First element (always one) is used to store beta p : length n

";

%feature("docstring") casadi::casadi_qp_kkt_residual "

[INTERNAL] ";

%feature("docstring") casadi::detect_simple_bounds "

Detect simple bounds from general constraints.

Given parametric constraints:

::

  *   subject to lbg(p) <= g(x,p) <= ubg(p)
  * 



Returns an equivalent set

::

  *   subject to  lbg(p)(gi) <= g(x,p)(gi) <= ubg(p)(gi)
  *               lbx(p) <= x                 <= ubx(p)
  * 



Parameters:
-----------

lam_forward:  (lam_g,p)->(lam_sg,lam_x)

lam_backward:  (lam_sg,lam_x,p)->(lam_g)

";

%feature("docstring") casadi::dense_mul_tn "

[INTERNAL] ";

%feature("docstring") casadi::casadi_ipqp_residual "

[INTERNAL] ";

%feature("docstring") casadi::dense_mul_nn_stride "

[INTERNAL] ";

%feature("docstring") casadi::dple_out "

Get DPLE output scheme name by index.

>  std::string casadi::dple_out(casadi_int ind)
------------------------------------------------------------------------

Get DPLE output scheme name by index.

";

";

%feature("docstring") casadi::casadi_norm_1 "

[INTERNAL]  NORM_1: ||x||_1 -> return.

";

%feature("docstring") casadi::expmsol "

Performs a matrix exponentiation expm(A)

General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| const_A          | OT_BOOL         | Assume A is      | casadi::Expm     |
|                  |                 | constant.        |                  |
|                  |                 | Default: false.  |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

List of plugins
===============



- slicot

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Expm.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

slicot
------





--------------------------------------------------------------------------------



Joris Gillis

";

%feature("docstring") casadi::casadi_qp_du "

[INTERNAL] ";

%feature("docstring") casadi::casadi_mtimes "

[INTERNAL]  Sparse matrix-matrix multiplication: z <- z + x*y.

";

%feature("docstring") casadi::casadi_interpn_weights "

[INTERNAL] ";

%feature("docstring") casadi::integrator_n_out "

Get the number of integrator outputs.

";

%feature("docstring") casadi::casadi_mmax "

[INTERNAL] ";

%feature("docstring") casadi::slicot_periodic_schur "

[INTERNAL] ";

%feature("docstring") casadi::casadi_qp_prepare "

[INTERNAL] ";

%feature("docstring") casadi::casadi_cvx_scalar "

[INTERNAL] ";

%feature("docstring") casadi::external "

Load a just-in-time compiled external function File name given.

>  Function casadi::external(const std::string &name, const Importer &li, const Dict &opts=Dict())
------------------------------------------------------------------------

Load a just-in-time compiled external function File name given.

";

";

%feature("docstring") casadi::nlpsol_n_out "

Number of NLP solver outputs.

";

%feature("docstring") casadi::casadi_bfgs_reset "

[INTERNAL] ";

%feature("docstring") casadi::casadi_qp_print_colcomb "

[INTERNAL] ";

%feature("docstring") casadi::collocation_coeff "

Obtain collocation interpolating matrices.

A collocation method poses a polynomial Pi that interpolates exactly through
an initial state (0,X_0) and helper states at collocation points
(tau_j,Xc_j) with j=1..degree.

This function computes the linear mapping between dPi/dt and coefficients
Z=[X_0 Xc].

Parameters:
-----------

tau:  location of collocation points (length: degree), as obtained from
collocation_points

C:  interpolating coefficients to obtain derivatives. Size: (degree+1)-by-
degree

You may find the slopes of Pi at the collocation points as

::

dPi/dt @ Xc = (1/h) Z*C,



with h the length of the integration interval.

Parameters:
-----------

D:  interpolating coefficients to obtain end state. Size: (degree+1)-by-1

You may find the end point of Pi as

::

Pi @X_f = Z*D



Parameters:
-----------

B:  quadrature coefficients Size: degree-by-1

Given quadrature righ-hand-sides 'quad' evaluated at the collocation points,
you may find the integrated quadratures as

::

q = quad*B*h



";

%feature("docstring") casadi::casadi_ipqp_step "

[INTERNAL] ";

%feature("docstring") casadi::in_range "

Check if for each element of v holds: lower <= v_i < upper.

>  bool casadi::in_range(const std::vector< T > &v, casadi_int lower, casadi_int upper)
------------------------------------------------------------------------

Check if for each element of v holds: lower <= v_i < upper.

";

";

%feature("docstring") casadi::casadi_qp_du_index "

[INTERNAL] ";

%feature("docstring") casadi::load_integrator "

Explicitly load a plugin dynamically.

";

%feature("docstring") casadi::casadi_ipqp_reset "

[INTERNAL] ";

%feature("docstring") casadi::casadi_qp_dual_blocking "

[INTERNAL] ";

%feature("docstring") casadi::casadi_qp_work "

[INTERNAL] ";

%feature("docstring") casadi::expm_n_out "

Get the number of expm solver outputs.

";

%feature("docstring") casadi::casadi_ipqp_return_status "

[INTERNAL] ";

%feature("docstring") casadi::casadi_sum_viol "

[INTERNAL]  Sum of bound violations.

";

%feature("docstring") casadi::load_nlpsol "

Explicitly load a plugin dynamically.

";

%feature("docstring") casadi::is_increasing "

Check if the vector is strictly increasing.

";

%feature("docstring") casadi::casadi_scal "

[INTERNAL]  SCAL: x <- alpha*x.

";

%feature("docstring") casadi::casadi_lsqr_solve "

[INTERNAL] ";

%feature("docstring") casadi::check_sos "

Check sos structure and generate defaults.

";

%feature("docstring") casadi::casadi_ipqp_bounds "

[INTERNAL] ";

%feature("docstring") casadi::casadi_fill_casadi_int "

[INTERNAL] ";

%feature("docstring") casadi::casadi_ipqp_init "

[INTERNAL] ";

%feature("docstring") casadi::casadi_cvx "

[INTERNAL] ";

%feature("docstring") casadi::dense_copy_stride "

[INTERNAL] ";

%feature("docstring") casadi::casadi_qp_iterate "

[INTERNAL] ";

%feature("docstring") casadi::casadi_qr_singular "

[INTERNAL] ";

%feature("docstring") casadi::conic_options "

Get all options for a plugin.

";

%feature("docstring") casadi::casadi_ipqp_corrector_prepare "

[INTERNAL] ";

%feature("docstring") casadi::load_linsol "

Explicitly load a plugin dynamically.

";

%feature("docstring") casadi::casadi_interpn_grad "

[INTERNAL] ";

%feature("docstring") casadi::casadi_qp_calc_step "

[INTERNAL] ";

%feature("docstring") casadi::has_interpolant "

Check if a particular plugin is available.

";

%feature("docstring") casadi::conic_debug "

Generate native code in the interfaced language for debugging

";

%feature("docstring") casadi::casadi_swap "

[INTERNAL]  SWAP: x <-> y.

";

%feature("docstring") casadi::casadi_qp_flip_check "

[INTERNAL] ";

%feature("docstring") casadi::integrator "

";

";

%feature("docstring") casadi::casadi_ipqp_mu "

[INTERNAL] ";

%feature("docstring") casadi::casadi_cvx_house_apply_symm "

[INTERNAL] ";

%feature("docstring") casadi::casadi_ipqp_print_iteration "

[INTERNAL] ";

%feature("docstring") casadi::casadi_qp_take_step "

[INTERNAL] ";

%feature("docstring") casadi::conic_option_info "

Get documentation for a particular option.

";

%feature("docstring") casadi::casadi_ipqp_maxstep "

[INTERNAL] ";

%feature("docstring") casadi::check_exposed "

[INTERNAL] ";

%feature("docstring") casadi::casadi_ipqp_predictor "

[INTERNAL] ";

%feature("docstring") casadi::casadi_interpn "

[INTERNAL] ";

%feature("docstring") casadi::read_matlab "

Read matrix, matlab style.

>  void casadi::read_matlab(std::ifstream &file, std::vector< std::vector< T > > &v)
------------------------------------------------------------------------

Read matrix, matlab style.

";

";

%feature("docstring") casadi::casadi_iamax "

[INTERNAL]  IAMAX: index corresponding to the entry with the largest
absolute value.

";

%feature("docstring") casadi::has_expm "

Check if a particular plugin is available.

";

%feature("docstring") casadi::write_matlab "

Print matrix, matlab style.

>  void casadi::write_matlab(std::ostream &stream, const std::vector< std::vector< T > > &v)
------------------------------------------------------------------------

Print matrix, matlab style.

";

";

%feature("docstring") casadi::casadi_sparsify "

[INTERNAL]  Convert dense to sparse.

";

%feature("docstring") casadi::hash_sparsity "

";

";

%feature("docstring") casadi::is_slice2 "

Check if an index vector can be represented more efficiently as two nested
slices.

";

%feature("docstring") casadi::rootfinder "

";

";

%feature("docstring") casadi::casadi_qp_setup "

[INTERNAL] ";

%feature("docstring") casadi::casadi_ldl "

[INTERNAL] ";

%feature("docstring") casadi::casadi_ipqp "

[INTERNAL] ";

%feature("docstring") casadi::dple_n_in "

Get the number of QP solver inputs.

";

%feature("docstring") casadi::has_negative "

Check if the vector has negative entries.

";

%feature("docstring") casadi::casadi_tri_project "

[INTERNAL] ";

%feature("docstring") casadi::casadi_cvx_symm_schur "

[INTERNAL]  Golub & Van Loan Alg. 8.3.3.

";

%feature("docstring") casadi::to_slice2 "

Construct nested slices from an index vector (requires is_slice2(v) to be
true)

";

%feature("docstring") casadi::casadi_qp_linesearch "

[INTERNAL] ";

%feature("docstring") casadi::casadi_vfmin "

[INTERNAL] ";

%feature("docstring") casadi::to_slice "

Construct from an index vector (requires is_slice(v) to be true)

>  Slice casadi::to_slice(const std::vector< casadi_int > &v, bool ind1=false)
------------------------------------------------------------------------

Construct from an index vector (requires is_slice(v) to be true)

";

";

%feature("docstring") casadi::casadi_qp_dual_breakpoints "

[INTERNAL] ";

%feature("docstring") casadi::doc_linsol "

Get the documentation string for a plugin.

";

%feature("docstring") casadi::getcopy "

[INTERNAL] ";

%feature("docstring") casadi::expm_n_in "

Get the number of expm solver inputs.

";

%feature("docstring") casadi::rootfinder_out "

Get rootfinder output scheme name by index.

>  std::string casadi::rootfinder_out(casadi_int ind)
------------------------------------------------------------------------

Get rootfinder output scheme name by index.

";

";

%feature("docstring") casadi::conic_in "

Get QP solver input scheme name by index.

>  std::string casadi::conic_in(casadi_int ind)
------------------------------------------------------------------------

Get QP solver input scheme name by index.

";

";

%feature("docstring") casadi::doc_expm "

Get the documentation string for a plugin.

";

%feature("docstring") casadi::lookupvector "

";

";

%feature("docstring") casadi::doc_dple "

Get the documentation string for a plugin.

";

%feature("docstring") casadi::casadi_nlpsol_init "

[INTERNAL] ";

%feature("docstring") casadi::hash_combine "

Generate a hash value incrementally, array.

>  void casadi::hash_combine(std::size_t &seed, const casadi_int *v, std::size_t sz)
------------------------------------------------------------------------

Generate a hash value incrementally, array.

";

";

%feature("docstring") casadi::casadi_ipqp_setup "

[INTERNAL] ";

%feature("docstring") casadi::casadi_ipqp_solution "

[INTERNAL] ";

%feature("docstring") casadi::rootfinder_n_in "

Number of rootfinder inputs.

";

%feature("docstring") casadi::casadi_sqpmethod_init "

[INTERNAL] ";

%feature("docstring") casadi::casadi_ipqp_sigma "

[INTERNAL] ";

%feature("docstring") casadi::casadi_qp_calc_sens "

[INTERNAL] ";

%feature("docstring") casadi::has_integrator "

Check if a particular plugin is available.

";

%feature("docstring") casadi::casadi_bound_consistency "

[INTERNAL] ";

%feature("docstring") casadi::dense_mul_nn2 "

[INTERNAL] ";

%feature("docstring") casadi::casadi_central_diff "

[INTERNAL] ";

%feature("docstring") casadi::casadi_ipqp_print_header "

[INTERNAL] ";

%feature("docstring") casadi::nlpsol_options "

Get all options for a plugin.

";

%feature("docstring") casadi::integrator_out "

Get output scheme name by index.

>  std::string casadi::integrator_out(casadi_int ind)
------------------------------------------------------------------------

Get output scheme name by index.

";

";

%feature("docstring") casadi::has_dple "

Check if a particular plugin is available.

";

%feature("docstring") casadi::rootfinder_option_info "

Get documentation for a particular option.

";

%feature("docstring") casadi::casadi_qp_enforceable "

[INTERNAL] ";

%feature("docstring") casadi::replace_mat "

[INTERNAL] ";

%feature("docstring") casadi::casadi_cvx_implicit_qr "

[INTERNAL] ";

%feature("docstring") casadi::casadi_qp_primal_blocking "

[INTERNAL] ";

%feature("docstring") casadi::casadi_cvx_givens "

[INTERNAL] ";

%feature("docstring") casadi::load_interpolant "

Explicitly load a plugin dynamically.

";

%feature("docstring") casadi::casadi_newton "

[INTERNAL] ";

%feature("docstring") casadi::flatten_nested_vector "

Flatten a nested std::vector tot a single flattened vector.

Contents of nested[i] ends up in flat[indices[i]]..flat[indices[i+1]-1]

";

%feature("docstring") casadi::integrator_n_in "

Get the number of integrator inputs.

";

%feature("docstring") casadi::collocation_points "

Obtain collocation points of specific order and scheme.

Parameters:
-----------

order:  Which order (1 to 9 supported)

scheme:  'radau' or 'legendre'

";

%feature("docstring") casadi::conic "

Create a QP solver Solves the following strictly convex problem:



::

  min          1/2 x' H x + g' x
  x
  
  subject to
  LBA <= A x <= UBA
  LBX <= x   <= UBX
  
  resize(Q x, np, np) + P >= 0 (psd)
  
  with :
  H sparse (n x n) positive definite
  g dense  (n x 1)
  A sparse (nc x n)
  Q sparse symmetric (np^2 x n)
  P sparse symmetric (np x nq)
  
  n: number of decision variables (x)
  nc: number of constraints (A)
  nq: shape of psd constraint matrix



If H is not positive-definite, the solver should throw an error.

Second-order cone constraints can be added as psd constraints through a
helper function 'soc':

x in R^n y in R

|| x ||_2 <= y

<=>

soc(x, y) psd

This can be proven with soc(x, y)=[y*I x; x' y] using the Shur complement.

General information
===================



>List of available options

+------------------+-----------------+------------------+------------------+
|        Id        |      Type       |   Description    |     Used in      |
+==================+=================+==================+==================+
| ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for derivative   | Internal         |
|                  |                 | calculation.When |                  |
|                  |                 | there is an      |                  |
|                  |                 | option of either |                  |
|                  |                 | using forward or |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | directional      |                  |
|                  |                 | derivatives, the |                  |
|                  |                 | condition ad_wei |                  |
|                  |                 | ght*nf<=(1-ad_we |                  |
|                  |                 | ight)*na is used |                  |
|                  |                 | where nf and na  |                  |
|                  |                 | are estimates of |                  |
|                  |                 | the number of    |                  |
|                  |                 | forward/reverse  |                  |
|                  |                 | mode directional |                  |
|                  |                 | derivatives      |                  |
|                  |                 | needed. By       |                  |
|                  |                 | default,         |                  |
|                  |                 | ad_weight is     |                  |
|                  |                 | calculated       |                  |
|                  |                 | automatically,   |                  |
|                  |                 | but this can be  |                  |
|                  |                 | overridden by    |                  |
|                  |                 | setting this     |                  |
|                  |                 | option. In       |                  |
|                  |                 | particular, 0    |                  |
|                  |                 | means forcing    |                  |
|                  |                 | forward mode and |                  |
|                  |                 | 1 forcing        |                  |
|                  |                 | reverse mode.    |                  |
|                  |                 | Leave unset for  |                  |
|                  |                 | (class specific) |                  |
|                  |                 | heuristics.      |                  |
+------------------+-----------------+------------------+------------------+
| ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
|                  |                 | for sparsity     | Internal         |
|                  |                 | pattern          |                  |
|                  |                 | calculation calc |                  |
|                  |                 | ulation.Override |                  |
|                  |                 | s default        |                  |
|                  |                 | behavior. Set to |                  |
|                  |                 | 0 and 1 to force |                  |
|                  |                 | forward and      |                  |
|                  |                 | reverse mode     |                  |
|                  |                 | respectively.    |                  |
|                  |                 | Cf. option       |                  |
|                  |                 | \"ad_weight\".     |                  |
|                  |                 | When set to -1,  |                  |
|                  |                 | sparsity is      |                  |
|                  |                 | completely       |                  |
|                  |                 | ignored and      |                  |
|                  |                 | dense matrices   |                  |
|                  |                 | are used.        |                  |
+------------------+-----------------+------------------+------------------+
| always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| compiler         | OT_STRING       | Just-in-time     | casadi::Function |
|                  |                 | compiler plugin  | Internal         |
|                  |                 | to be used.      |                  |
+------------------+-----------------+------------------+------------------+
| custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
|                  |                 | CasADi's AD. Use | Internal         |
|                  |                 | together with    |                  |
|                  |                 | 'jac_penalty':   |                  |
|                  |                 | 0. Note: Highly  |                  |
|                  |                 | experimental.    |                  |
|                  |                 | Syntax may break |                  |
|                  |                 | often.           |                  |
+------------------+-----------------+------------------+------------------+
| derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
|                  |                 | a derivative of  | Internal         |
|                  |                 | another          |                  |
|                  |                 | function. The    |                  |
|                  |                 | type of          |                  |
|                  |                 | derivative       |                  |
|                  |                 | (directional     |                  |
|                  |                 | derivative,      |                  |
|                  |                 | Jacobian) is     |                  |
|                  |                 | inferred from    |                  |
|                  |                 | the function     |                  |
|                  |                 | name.            |                  |
+------------------+-----------------+------------------+------------------+
| discrete         | OT_BOOLVECTOR   | Indicates which  | casadi::Conic    |
|                  |                 | of the variables |                  |
|                  |                 | are discrete,    |                  |
|                  |                 | i.e. integer-    |                  |
|                  |                 | valued           |                  |
+------------------+-----------------+------------------+------------------+
| dump             | OT_BOOL         | Dump function to | casadi::Function |
|                  |                 | file upon first  | Internal         |
|                  |                 | evaluation.      |                  |
|                  |                 | [false]          |                  |
+------------------+-----------------+------------------+------------------+
| dump_dir         | OT_STRING       | Directory to     | casadi::Function |
|                  |                 | dump             | Internal         |
|                  |                 | inputs/outputs   |                  |
|                  |                 | to. Make sure    |                  |
|                  |                 | the directory    |                  |
|                  |                 | exists [.]       |                  |
+------------------+-----------------+------------------+------------------+
| dump_format      | OT_STRING       | Choose file      | casadi::Function |
|                  |                 | format to dump   | Internal         |
|                  |                 | matrices. See    |                  |
|                  |                 | DM.from_file     |                  |
|                  |                 | [mtx]            |                  |
+------------------+-----------------+------------------+------------------+
| dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | to file          |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs to file  |                  |
|                  |                 | (readable with   |                  |
|                  |                 | DM.from_file )   |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| enable_fd        | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation by   |                  |
|                  |                 | finite           |                  |
|                  |                 | differencing.    |                  |
|                  |                 | [default:        |                  |
|                  |                 | false]]          |                  |
+------------------+-----------------+------------------+------------------+
| enable_forward   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using forward    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | Jacobians of all |                  |
|                  |                 | differentiable   |                  |
|                  |                 | outputs with     |                  |
|                  |                 | respect to all   |                  |
|                  |                 | differentiable   |                  |
|                  |                 | inputs - if      |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
|                  |                 | derivative       | Internal         |
|                  |                 | calculation      |                  |
|                  |                 | using generated  |                  |
|                  |                 | functions for    |                  |
|                  |                 | transposed       |                  |
|                  |                 | Jacobian-times-  |                  |
|                  |                 | vector products  |                  |
|                  |                 | - typically      |                  |
|                  |                 | using reverse    |                  |
|                  |                 | mode AD - if     |                  |
|                  |                 | available.       |                  |
|                  |                 | [default: true]  |                  |
+------------------+-----------------+------------------+------------------+
| error_on_fail    | OT_BOOL         | When the         | casadi::Conic    |
|                  |                 | numerical        |                  |
|                  |                 | process returns  |                  |
|                  |                 | unsuccessfully,  |                  |
|                  |                 | raise an error   |                  |
|                  |                 | (default false). |                  |
+------------------+-----------------+------------------+------------------+
| fd_method        | OT_STRING       | Method for       | casadi::Function |
|                  |                 | finite           | Internal         |
|                  |                 | differencing     |                  |
|                  |                 | [default         |                  |
|                  |                 | 'central']       |                  |
+------------------+-----------------+------------------+------------------+
| fd_options       | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | finite           |                  |
|                  |                 | difference       |                  |
|                  |                 | instance         |                  |
+------------------+-----------------+------------------+------------------+
| forward_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | forward mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
|                  |                 | option           | Internal         |
|                  |                 | (ignored):       |                  |
|                  |                 | Statistics are   |                  |
|                  |                 | now always       |                  |
|                  |                 | collected.       |                  |
+------------------+-----------------+------------------+------------------+
| input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when the         | Internal         |
|                  |                 | numerical values |                  |
|                  |                 | of the inputs    |                  |
|                  |                 | don't make sense |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each input if it | Internal         |
|                  |                 | should be        |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
|                  |                 | each output if   | Internal         |
|                  |                 | it should be     |                  |
|                  |                 | differentiable.  |                  |
+------------------+-----------------+------------------+------------------+
| jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
|                  |                 | for a number of  | Internal         |
|                  |                 | forward/reverse  |                  |
|                  |                 | directions, it   |                  |
|                  |                 | may be cheaper   |                  |
|                  |                 | to compute first |                  |
|                  |                 | the full         |                  |
|                  |                 | jacobian and     |                  |
|                  |                 | then multiply    |                  |
|                  |                 | with seeds,      |                  |
|                  |                 | rather than      |                  |
|                  |                 | obtain the       |                  |
|                  |                 | requested        |                  |
|                  |                 | directions in a  |                  |
|                  |                 | straightforward  |                  |
|                  |                 | manner. Casadi   |                  |
|                  |                 | uses a heuristic |                  |
|                  |                 | to decide which  |                  |
|                  |                 | is cheaper. A    |                  |
|                  |                 | high value of    |                  |
|                  |                 | 'jac_penalty'    |                  |
|                  |                 | makes it less    |                  |
|                  |                 | likely for the   |                  |
|                  |                 | heurstic to      |                  |
|                  |                 | chose the full   |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy. The    |                  |
|                  |                 | special value -1 |                  |
|                  |                 | indicates never  |                  |
|                  |                 | to use the full  |                  |
|                  |                 | Jacobian         |                  |
|                  |                 | strategy         |                  |
+------------------+-----------------+------------------+------------------+
| jit              | OT_BOOL         | Use just-in-time | casadi::Function |
|                  |                 | compiler to      | Internal         |
|                  |                 | speed up the     |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
|                  |                 | temporary source | Internal         |
|                  |                 | file that jit    |                  |
|                  |                 | creates.         |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| jit_name         | OT_STRING       | The file name    | casadi::Function |
|                  |                 | used to write    | Internal         |
|                  |                 | out code. The    |                  |
|                  |                 | actual file      |                  |
|                  |                 | names used       |                  |
|                  |                 | depend on 'jit_t |                  |
|                  |                 | emp_suffix' and  |                  |
|                  |                 | include          |                  |
|                  |                 | extensions.      |                  |
|                  |                 | Default:         |                  |
|                  |                 | 'jit_tmp'        |                  |
+------------------+-----------------+------------------+------------------+
| jit_options      | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to the    | Internal         |
|                  |                 | jit compiler.    |                  |
+------------------+-----------------+------------------+------------------+
| jit_serialize    | OT_STRING       | Specify          | casadi::Function |
|                  |                 | behaviour when   | Internal         |
|                  |                 | serializing a    |                  |
|                  |                 | jitted function: |                  |
|                  |                 | SOURCE|link|embe |                  |
|                  |                 | d.               |                  |
+------------------+-----------------+------------------+------------------+
| jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
|                  |                 | (seemingly       | Internal         |
|                  |                 | random) filename |                  |
|                  |                 | suffix for       |                  |
|                  |                 | generated code   |                  |
|                  |                 | and libraries.   |                  |
|                  |                 | This is desired  |                  |
|                  |                 | for thread-      |                  |
|                  |                 | safety. This     |                  |
|                  |                 | behaviour may    |                  |
|                  |                 | defeat caching   |                  |
|                  |                 | compiler         |                  |
|                  |                 | wrappers.        |                  |
|                  |                 | Default: true    |                  |
+------------------+-----------------+------------------+------------------+
| max_num_dir      | OT_INT          | Specify the      | casadi::Function |
|                  |                 | maximum number   | Internal         |
|                  |                 | of directions    |                  |
|                  |                 | for derivative   |                  |
|                  |                 | functions.       |                  |
|                  |                 | Overrules the    |                  |
|                  |                 | builtin optimize |                  |
|                  |                 | d_num_dir.       |                  |
+------------------+-----------------+------------------+------------------+
| never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
|                  |                 |                  | Internal         |
+------------------+-----------------+------------------+------------------+
| output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
|                  |                 | option (ignored) | Internal         |
+------------------+-----------------+------------------+------------------+
| print_in         | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of inputs | Internal         |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_out        | OT_BOOL         | Print numerical  | casadi::Function |
|                  |                 | values of        | Internal         |
|                  |                 | outputs          |                  |
|                  |                 | [default: false] |                  |
+------------------+-----------------+------------------+------------------+
| print_problem    | OT_BOOL         | Print a numeric  | casadi::Conic    |
|                  |                 | description of   |                  |
|                  |                 | the problem      |                  |
+------------------+-----------------+------------------+------------------+
| print_time       | OT_BOOL         | print            | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time. Implies    |                  |
|                  |                 | record_time.     |                  |
+------------------+-----------------+------------------+------------------+
| record_time      | OT_BOOL         | record           | casadi::Function |
|                  |                 | information      | Internal         |
|                  |                 | about execution  |                  |
|                  |                 | time, for        |                  |
|                  |                 | retrieval with   |                  |
|                  |                 | stats().         |                  |
+------------------+-----------------+------------------+------------------+
| regularity_check | OT_BOOL         | Throw exceptions | casadi::Function |
|                  |                 | when NaN or Inf  | Internal         |
|                  |                 | appears during   |                  |
|                  |                 | evaluation       |                  |
+------------------+-----------------+------------------+------------------+
| reverse_options  | OT_DICT         | Options to be    | casadi::Function |
|                  |                 | passed to a      | Internal         |
|                  |                 | reverse mode     |                  |
|                  |                 | constructor      |                  |
+------------------+-----------------+------------------+------------------+
| user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
|                  |                 | field that can   | Internal         |
|                  |                 | be used to       |                  |
|                  |                 | identify the     |                  |
|                  |                 | function or pass |                  |
|                  |                 | additional       |                  |
|                  |                 | information      |                  |
+------------------+-----------------+------------------+------------------+
| verbose          | OT_BOOL         | Verbose          | casadi::Function |
|                  |                 | evaluation  for  | Internal         |
|                  |                 | debugging        |                  |
+------------------+-----------------+------------------+------------------+

>Input scheme: casadi::ConicInput (CONIC_NUM_IN = 12)

+--------------+--------+--------------------------------------------------+
|  Full name   | Short  |                   Description                    |
+==============+========+==================================================+
| CONIC_H      | h      | The square matrix H: sparse, (n x n). Only the   |
|              |        | lower triangular part is actually used. The      |
|              |        | matrix is assumed to be symmetrical.             |
+--------------+--------+--------------------------------------------------+
| CONIC_G      | g      | The vector g: dense, (n x 1)                     |
+--------------+--------+--------------------------------------------------+
| CONIC_A      | a      | The matrix A: sparse, (nc x n) - product with x  |
|              |        | must be dense.                                   |
+--------------+--------+--------------------------------------------------+
| CONIC_LBA    | lba    | dense, (nc x 1)                                  |
+--------------+--------+--------------------------------------------------+
| CONIC_UBA    | uba    | dense, (nc x 1)                                  |
+--------------+--------+--------------------------------------------------+
| CONIC_LBX    | lbx    | dense, (n x 1)                                   |
+--------------+--------+--------------------------------------------------+
| CONIC_UBX    | ubx    | dense, (n x 1)                                   |
+--------------+--------+--------------------------------------------------+
| CONIC_X0     | x0     | dense, (n x 1)                                   |
+--------------+--------+--------------------------------------------------+
| CONIC_LAM_X0 | lam_x0 | dense                                            |
+--------------+--------+--------------------------------------------------+
| CONIC_LAM_A0 | lam_a0 | dense                                            |
+--------------+--------+--------------------------------------------------+
| CONIC_Q      | q      | The matrix Q: sparse symmetric, (np^2 x n)       |
+--------------+--------+--------------------------------------------------+
| CONIC_P      | p      | The matrix P: sparse symmetric, (np x np)        |
+--------------+--------+--------------------------------------------------+

>Output scheme: casadi::ConicOutput (CONIC_NUM_OUT = 4)

+-------------+-------+---------------------------------------------------+
|  Full name  | Short |                    Description                    |
+=============+=======+===================================================+
| CONIC_X     | x     | The primal solution.                              |
+-------------+-------+---------------------------------------------------+
| CONIC_COST  | cost  | The optimal cost.                                 |
+-------------+-------+---------------------------------------------------+
| CONIC_LAM_A | lam_a | The dual solution corresponding to linear bounds. |
+-------------+-------+---------------------------------------------------+
| CONIC_LAM_X | lam_x | The dual solution corresponding to simple bounds. |
+-------------+-------+---------------------------------------------------+

List of plugins
===============



- cbc

- clp

- cplex

- gurobi

- hpmpc

- ooqp

- osqp

- qpoases

- sqic

- superscs

- ipqp

- nlpsol

- qrqp

Note: some of the plugins in this list might not be available on your
system. Also, there might be extra plugins available to you that are not
listed here. You can obtain their documentation with
Conic.doc(\"myextraplugin\")



--------------------------------------------------------------------------------

cbc
---



Interface to Cbc solver for sparse Quadratic Programs

>List of available options

+-------------+-----------------------+------------------------------------+
|     Id      |         Type          |            Description             |
+=============+=======================+====================================+
| cbc         | OT_DICT               | Options to be passed to CBC.Three  |
|             |                       | sets of options are supported. The |
|             |                       | first can be found in              |
|             |                       | OsiSolverParameters.hpp. The       |
|             |                       | second can be found in             |
|             |                       | CbcModel.hpp. The third are        |
|             |                       | options that can be passed to      |
|             |                       | CbcMain1.                          |
+-------------+-----------------------+------------------------------------+
| hot_start   | OT_BOOL               | Hot start with x0 [Default false]. |
+-------------+-----------------------+------------------------------------+
| sos_groups  | OT_INTVECTORVECTOR    | Definition of SOS groups by        |
|             |                       | indices.                           |
+-------------+-----------------------+------------------------------------+
| sos_types   | OT_INTVECTOR          | Specify 1 or 2 for each SOS group. |
+-------------+-----------------------+------------------------------------+
| sos_weights | OT_DOUBLEVECTORVECTOR | Weights corresponding to SOS       |
|             |                       | entries.                           |
+-------------+-----------------------+------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

clp
---



Interface to Clp solver for sparse Quadratic Programs

>List of available options

+-----+---------+----------------------------------------------------------+
| Id  |  Type   |                       Description                        |
+=====+=========+==========================================================+
| clp | OT_DICT | Options to be passed to CLP. A first set of options can  |
|     |         | be found in ClpParameters.hpp. eg. 'PrimalTolerance'.    |
|     |         | There are other options in additions. 'AutomaticScaling' |
|     |         | (bool) is recognised. 'initial_solve' (default off)      |
|     |         | activates the use of Clp's initialSolve.                 |
|     |         | 'initial_solve_options' takes a dictionary with          |
|     |         | following keys (see ClpSolve.hpp): SolveType (string),   |
|     |         | PresolveType (string), NumberPasses, SpecialOptions      |
|     |         | (intvectorvector), IndependentOptions (intvectorvector). |
+-----+---------+----------------------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

cplex
-----



Interface to Cplex solver for sparse Quadratic Programs

>List of available options

+---------------+-----------------------+----------------------------------+
|      Id       |         Type          |           Description            |
+===============+=======================+==================================+
| cplex         | OT_DICT               | Options to be passed to CPLEX    |
+---------------+-----------------------+----------------------------------+
| dep_check     | OT_INT                | Detect redundant constraints.    |
+---------------+-----------------------+----------------------------------+
| dump_filename | OT_STRING             | The filename to dump to.         |
+---------------+-----------------------+----------------------------------+
| dump_to_file  | OT_BOOL               | Dumps QP to file in CPLEX        |
|               |                       | format.                          |
+---------------+-----------------------+----------------------------------+
| mip_start     | OT_BOOL               | Hot start integers with x0       |
|               |                       | [Default false].                 |
+---------------+-----------------------+----------------------------------+
| qp_method     | OT_INT                | Determines which CPLEX algorithm |
|               |                       | to use.                          |
+---------------+-----------------------+----------------------------------+
| sos_groups    | OT_INTVECTORVECTOR    | Definition of SOS groups by      |
|               |                       | indices.                         |
+---------------+-----------------------+----------------------------------+
| sos_types     | OT_INTVECTOR          | Specify 1 or 2 for each SOS      |
|               |                       | group.                           |
+---------------+-----------------------+----------------------------------+
| sos_weights   | OT_DOUBLEVECTORVECTOR | Weights corresponding to SOS     |
|               |                       | entries.                         |
+---------------+-----------------------+----------------------------------+
| tol           | OT_DOUBLE             | Tolerance of solver              |
+---------------+-----------------------+----------------------------------+
| warm_start    | OT_BOOL               | Use warm start with simplex      |
|               |                       | methods (affects only the        |
|               |                       | simplex methods).                |
+---------------+-----------------------+----------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

gurobi
------



Interface to the GUROBI Solver for quadratic programming

>List of available options

+-------------+-----------------------+------------------------------------+
|     Id      |         Type          |            Description             |
+=============+=======================+====================================+
| gurobi      | OT_DICT               | Options to be passed to gurobi.    |
+-------------+-----------------------+------------------------------------+
| sos_groups  | OT_INTVECTORVECTOR    | Definition of SOS groups by        |
|             |                       | indices.                           |
+-------------+-----------------------+------------------------------------+
| sos_types   | OT_INTVECTOR          | Specify 1 or 2 for each SOS group. |
+-------------+-----------------------+------------------------------------+
| sos_weights | OT_DOUBLEVECTORVECTOR | Weights corresponding to SOS       |
|             |                       | entries.                           |
+-------------+-----------------------+------------------------------------+
| vtype       | OT_STRINGVECTOR       | Type of variables: [CONTINUOUS|bin |
|             |                       | ary|integer|semicont|semiint]      |
+-------------+-----------------------+------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

hpmpc
-----



Interface to HMPC Solver

In order to use this interface, you must:

Decision variables must only by state and control, and the variable ordering
must be [x0 u0 x1 u1 ...]

The constraints must be in order: [ gap0 lincon0 gap1 lincon1 ]

gap: Ak+1 = Ak xk + Bk uk lincon: yk= Ck xk + Dk uk



::

         A0 B0 -I
         C0 D0
                A1 B1 -I
                C1 D1



where I must be a diagonal sparse matrix Either supply all of N, nx, ng, nu
options or rely on automatic detection

>List of available options

+----------------+--------------+------------------------------------------+
|       Id       |     Type     |               Description                |
+================+==============+==========================================+
| N              | OT_INT       | OCP horizon                              |
+----------------+--------------+------------------------------------------+
| blasfeo_target | OT_STRING    | hpmpc target                             |
+----------------+--------------+------------------------------------------+
| inf            | OT_DOUBLE    | HPMPC cannot handle infinities.          |
|                |              | Infinities will be replaced by this      |
|                |              | option's value.                          |
+----------------+--------------+------------------------------------------+
| max_iter       | OT_INT       | Max number of iterations                 |
+----------------+--------------+------------------------------------------+
| mu0            | OT_DOUBLE    | Max element in cost function as estimate |
|                |              | of max multiplier                        |
+----------------+--------------+------------------------------------------+
| ng             | OT_INTVECTOR | Number of non-dynamic constraints,       |
|                |              | length N+1                               |
+----------------+--------------+------------------------------------------+
| nu             | OT_INTVECTOR | Number of controls, length N             |
+----------------+--------------+------------------------------------------+
| nx             | OT_INTVECTOR | Number of states, length N+1             |
+----------------+--------------+------------------------------------------+
| print_level    | OT_INT       | Amount of diagnostic printing [Default:  |
|                |              | 1].                                      |
+----------------+--------------+------------------------------------------+
| target         | OT_STRING    | hpmpc target                             |
+----------------+--------------+------------------------------------------+
| tol            | OT_DOUBLE    | Tolerance in the duality measure         |
+----------------+--------------+------------------------------------------+
| warm_start     | OT_BOOL      | Use warm-starting                        |
+----------------+--------------+------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

ooqp
----



Interface to the OOQP Solver for quadratic programming The current
implementation assumes that OOQP is configured with the MA27 sparse linear
solver.

NOTE: when doing multiple calls to evaluate(), check if you need to
reInit();

>List of available options

+-------------+-----------+------------------------------------------------+
|     Id      |   Type    |                  Description                   |
+=============+===========+================================================+
| artol       | OT_DOUBLE | tolerance as provided with setArTol to OOQP    |
+-------------+-----------+------------------------------------------------+
| mutol       | OT_DOUBLE | tolerance as provided with setMuTol to OOQP    |
+-------------+-----------+------------------------------------------------+
| print_level | OT_INT    | Print level. OOQP listens to print_level 0, 10 |
|             |           | and 100                                        |
+-------------+-----------+------------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

osqp
----



Interface to the OSQP Solver for quadratic programming

>List of available options

+-------------------+---------+--------------------------------------------+
|        Id         |  Type   |                Description                 |
+===================+=========+============================================+
| osqp              | OT_DICT | const Options to be passed to osqp.        |
+-------------------+---------+--------------------------------------------+
| warm_start_dual   | OT_BOOL | Use lam_a0 and lam_x0 input to warmstart   |
|                   |         | [Default: truw].                           |
+-------------------+---------+--------------------------------------------+
| warm_start_primal | OT_BOOL | Use x0 input to warmstart [Default: true]. |
+-------------------+---------+--------------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

qpoases
-------



Interface to QPOases Solver for quadratic programming

>List of available options

+-------------------------------+-----------+------------------------------+
|              Id               |   Type    |         Description          |
+===============================+===========+==============================+
| CPUtime                       | OT_DOUBLE | The maximum allowed CPU time |
|                               |           | in seconds for the whole     |
|                               |           | initialisation (and the      |
|                               |           | actually required one on     |
|                               |           | output). Disabled if unset.  |
+-------------------------------+-----------+------------------------------+
| boundRelaxation               | OT_DOUBLE | Initial relaxation of bounds |
|                               |           | to start homotopy and        |
|                               |           | initial value for far        |
|                               |           | bounds.                      |
+-------------------------------+-----------+------------------------------+
| boundTolerance                | OT_DOUBLE | If upper and lower bounds    |
|                               |           | differ less than this        |
|                               |           | tolerance, they are regarded |
|                               |           | equal, i.e. as equality      |
|                               |           | constraint.                  |
+-------------------------------+-----------+------------------------------+
| enableCholeskyRefactorisation | OT_INT    | Specifies the frequency of a |
|                               |           | full re-factorisation of     |
|                               |           | projected Hessian matrix: 0: |
|                               |           | turns them off, 1: uses them |
|                               |           | at each iteration etc.       |
+-------------------------------+-----------+------------------------------+
| enableDriftCorrection         | OT_INT    | Specifies the frequency of   |
|                               |           | drift corrections: 0: turns  |
|                               |           | them off.                    |
+-------------------------------+-----------+------------------------------+
| enableEqualities              | OT_BOOL   | Specifies whether equalities |
|                               |           | should be treated as always  |
|                               |           | active (True) or not (False) |
+-------------------------------+-----------+------------------------------+
| enableFarBounds               | OT_BOOL   | Enables the use of far       |
|                               |           | bounds.                      |
+-------------------------------+-----------+------------------------------+
| enableFlippingBounds          | OT_BOOL   | Enables the use of flipping  |
|                               |           | bounds.                      |
+-------------------------------+-----------+------------------------------+
| enableFullLITests             | OT_BOOL   | Enables condition-hardened   |
|                               |           | (but more expensive) LI      |
|                               |           | test.                        |
+-------------------------------+-----------+------------------------------+
| enableInertiaCorrection       | OT_BOOL   | Should working set be        |
|                               |           | repaired when negative       |
|                               |           | curvature is discovered      |
|                               |           | during hotstart.             |
+-------------------------------+-----------+------------------------------+
| enableNZCTests                | OT_BOOL   | Enables nonzero curvature    |
|                               |           | tests.                       |
+-------------------------------+-----------+------------------------------+
| enableRamping                 | OT_BOOL   | Enables ramping.             |
+-------------------------------+-----------+------------------------------+
| enableRegularisation          | OT_BOOL   | Enables automatic Hessian    |
|                               |           | regularisation.              |
+-------------------------------+-----------+------------------------------+
| epsDen                        | OT_DOUBLE | Denominator tolerance for    |
|                               |           | ratio tests.                 |
+-------------------------------+-----------+------------------------------+
| epsFlipping                   | OT_DOUBLE | Tolerance of squared         |
|                               |           | Cholesky diagonal factor     |
|                               |           | which triggers flipping      |
|                               |           | bound.                       |
+-------------------------------+-----------+------------------------------+
| epsIterRef                    | OT_DOUBLE | Early termination tolerance  |
|                               |           | for iterative refinement.    |
+-------------------------------+-----------+------------------------------+
| epsLITests                    | OT_DOUBLE | Tolerance for linear         |
|                               |           | independence tests.          |
+-------------------------------+-----------+------------------------------+
| epsNZCTests                   | OT_DOUBLE | Tolerance for nonzero        |
|                               |           | curvature tests.             |
+-------------------------------+-----------+------------------------------+
| epsNum                        | OT_DOUBLE | Numerator tolerance for      |
|                               |           | ratio tests.                 |
+-------------------------------+-----------+------------------------------+
| epsRegularisation             | OT_DOUBLE | Scaling factor of identity   |
|                               |           | matrix used for Hessian      |
|                               |           | regularisation.              |
+-------------------------------+-----------+------------------------------+
| finalRamping                  | OT_DOUBLE | Final value for ramping      |
|                               |           | strategy.                    |
+-------------------------------+-----------+------------------------------+
| growFarBounds                 | OT_DOUBLE | Factor to grow far bounds.   |
+-------------------------------+-----------+------------------------------+
| hessian_type                  | OT_STRING | Type of Hessian - see        |
|                               |           | qpOASES documentation [UNKNO |
|                               |           | WN|posdef|semidef|indef|zero |
|                               |           | |identity]]                  |
+-------------------------------+-----------+------------------------------+
| initialFarBounds              | OT_DOUBLE | Initial size for far bounds. |
+-------------------------------+-----------+------------------------------+
| initialRamping                | OT_DOUBLE | Start value for ramping      |
|                               |           | strategy.                    |
+-------------------------------+-----------+------------------------------+
| initialStatusBounds           | OT_STRING | Initial status of bounds at  |
|                               |           | first iteration.             |
+-------------------------------+-----------+------------------------------+
| linsol_plugin                 | OT_STRING | Linear solver plugin         |
+-------------------------------+-----------+------------------------------+
| maxDualJump                   | OT_DOUBLE | Maximum allowed jump in dual |
|                               |           | variables in linear          |
|                               |           | independence tests.          |
+-------------------------------+-----------+------------------------------+
| maxPrimalJump                 | OT_DOUBLE | Maximum allowed jump in      |
|                               |           | primal variables in nonzero  |
|                               |           | curvature tests.             |
+-------------------------------+-----------+------------------------------+
| max_schur                     | OT_INT    | Maximal number of Schur      |
|                               |           | updates [75]                 |
+-------------------------------+-----------+------------------------------+
| nWSR                          | OT_INT    | The maximum number of        |
|                               |           | working set recalculations   |
|                               |           | to be performed during the   |
|                               |           | initial homotopy. Default is |
|                               |           | 5(nx + nc)                   |
+-------------------------------+-----------+------------------------------+
| numRefinementSteps            | OT_INT    | Maximum number of iterative  |
|                               |           | refinement steps.            |
+-------------------------------+-----------+------------------------------+
| numRegularisationSteps        | OT_INT    | Maximum number of successive |
|                               |           | regularisation steps.        |
+-------------------------------+-----------+------------------------------+
| printLevel                    | OT_STRING | Defines the amount of text   |
|                               |           | output during QP solution,   |
|                               |           | see Section 5.7              |
+-------------------------------+-----------+------------------------------+
| schur                         | OT_BOOL   | Use Schur Complement         |
|                               |           | Approach [false]             |
+-------------------------------+-----------+------------------------------+
| sparse                        | OT_BOOL   | Formulate the QP using       |
|                               |           | sparse matrices. [false]     |
+-------------------------------+-----------+------------------------------+
| terminationTolerance          | OT_DOUBLE | Relative termination         |
|                               |           | tolerance to stop homotopy.  |
+-------------------------------+-----------+------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

sqic
----



Interface to the SQIC solver for quadratic programming

--------------------------------------------------------------------------------





--------------------------------------------------------------------------------

superscs
--------



Interface to the SuperSCS solver for conic programming

Joris Gillis, 2019

>List of available options

+----------+---------+-----------------------------------+
|    Id    |  Type   |            Description            |
+==========+=========+===================================+
| superscs | OT_DICT | Options to be passed to superscs. |
+----------+---------+-----------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

ipqp
----



Solves QPs using a Mehrotra predictor-corrector interior point method

>List of available options

+-----------------------+-----------+--------------------------------------+
|          Id           |   Type    |             Description              |
+=======================+===========+======================================+
| constr_viol_tol       | OT_DOUBLE | Constraint violation tolerance       |
|                       |           | [1e-8].                              |
+-----------------------+-----------+--------------------------------------+
| dual_inf_tol          | OT_DOUBLE | Dual feasibility violation tolerance |
|                       |           | [1e-8]                               |
+-----------------------+-----------+--------------------------------------+
| linear_solver         | OT_STRING | A custom linear solver creator       |
|                       |           | function [default: ldl]              |
+-----------------------+-----------+--------------------------------------+
| linear_solver_options | OT_DICT   | Options to be passed to the linear   |
|                       |           | solver                               |
+-----------------------+-----------+--------------------------------------+
| max_iter              | OT_INT    | Maximum number of iterations [1000]. |
+-----------------------+-----------+--------------------------------------+
| min_lam               | OT_DOUBLE | Smallest multiplier treated as       |
|                       |           | inactive for the initial active set  |
|                       |           | [0].                                 |
+-----------------------+-----------+--------------------------------------+
| print_header          | OT_BOOL   | Print header [true].                 |
+-----------------------+-----------+--------------------------------------+
| print_info            | OT_BOOL   | Print info [true].                   |
+-----------------------+-----------+--------------------------------------+
| print_iter            | OT_BOOL   | Print iterations [true].             |
+-----------------------+-----------+--------------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

nlpsol
------



Solve QPs using an Nlpsol Use the 'nlpsol' option to specify the NLP solver
to use.

>List of available options

+----------------+-----------+---------------------------------+
|       Id       |   Type    |           Description           |
+================+===========+=================================+
| nlpsol         | OT_STRING | Name of solver.                 |
+----------------+-----------+---------------------------------+
| nlpsol_options | OT_DICT   | Options to be passed to solver. |
+----------------+-----------+---------------------------------+

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------

qrqp
----



Solve QPs using an active-set method

>List of available options

+-----------------+-----------+--------------------------------------------+
|       Id        |   Type    |                Description                 |
+=================+===========+============================================+
| constr_viol_tol | OT_DOUBLE | Constraint violation tolerance [1e-8].     |
+-----------------+-----------+--------------------------------------------+
| dual_inf_tol    | OT_DOUBLE | Dual feasibility violation tolerance       |
|                 |           | [1e-8]                                     |
+-----------------+-----------+--------------------------------------------+
| max_iter        | OT_INT    | Maximum number of iterations [1000].       |
+-----------------+-----------+--------------------------------------------+
| min_lam         | OT_DOUBLE | Smallest multiplier treated as inactive    |
|                 |           | for the initial active set [0].            |
+-----------------+-----------+--------------------------------------------+
| print_header    | OT_BOOL   | Print header [true].                       |
+-----------------+-----------+--------------------------------------------+
| print_info      | OT_BOOL   | Print info [true].                         |
+-----------------+-----------+--------------------------------------------+
| print_iter      | OT_BOOL   | Print iterations [true].                   |
+-----------------+-----------+--------------------------------------------+
| print_lincomb   | OT_BOOL   | Print dependant linear combinations of     |
|                 |           | constraints [false]. Printed numbers are   |
|                 |           | 0-based indices into the vector of [simple |
|                 |           | bounds;linear bounds]                      |
+-----------------+-----------+--------------------------------------------+

--------------------------------------------------------------------------------



Joel Andersson

";

%feature("docstring") casadi::casadi_qp_reset "

[INTERNAL] ";

%feature("docstring") casadi::casadi_qp_pr "

[INTERNAL] ";

%feature("docstring") casadi::doc_integrator "

Get the documentation string for a plugin.

";

%feature("docstring") casadi::simpleIRK "

Construct an implicit Runge-Kutta integrator using a collocation scheme The
constructed function has three inputs, corresponding to initial state (x0),
parameter (p) and integration time (h) and one output, corresponding to
final state (xf).

Parameters:
-----------

f:  ODE function with two inputs (x and p) and one output (xdot)

N:  Number of integrator steps

order:  Order of interpolating polynomials

scheme:   Collocation scheme, as excepted by collocationPoints function.

solver:  Solver plugin

solver_options:  Options to be passed to the solver plugin

";

%feature("docstring") casadi::cache_check "

[INTERNAL] ";

%feature("docstring") casadi::nlpsol_option_type "

Get type info for a particular option.

";

%feature("docstring") casadi::casadi_axpy "

[INTERNAL]  AXPY: y <- a*x + y.

";

%feature("docstring") casadi::has_nlpsol "

Check if a particular plugin is available.

";

%feature("docstring") casadi::casadi_getu "

[INTERNAL]  Get the nonzeros for the upper triangular half.

";

%feature("docstring") casadi::doc_nlpsol "

Get the documentation string for a plugin.

";

%feature("docstring") casadi::casadi_sqpmethod_work "

[INTERNAL] ";

%feature("docstring") casadi::casadi_densify "

[INTERNAL]  Convert sparse to dense.

";

%feature("docstring") casadi::rootfinder_options "

Get all options for a plugin.

";

%feature("docstring") casadi::zip "

[INTERNAL] ";

%feature("docstring") casadi::casadi_max_viol "

[INTERNAL]  Largest bound violation.

";

%feature("docstring") casadi::casadi_qp_factorize "

[INTERNAL] ";

%feature("docstring") casadi::collocation_interpolators "

Obtain collocation interpolating matrices.

A collocation method poses a polynomial Pi that interpolates exactly through
an initial state (0,X_0) and helper states at collocation points
(tau_j,X(j)).

This function computes the linear mapping between dPi/dt and coefficients
Z=[X_0 X].

Parameters:
-----------

tau:  location of collocation points, as obtained from collocation_points

output_C:  interpolating coefficients to obtain derivatives. Length:
order+1, order+1



::

dPi/dt @Z_j = (1/h) Sum_i C[j][i]*Z_i,



with h the length of the integration interval.

Parameters:
-----------

output_D:  interpolating coefficients to obtain end state. Length: order+1



::

Pi @X_f = Sum_i D[i]*Z_i



";

%feature("docstring") casadi::casadi_cvx_tri "

[INTERNAL] ";

%feature("docstring") casadi::casadi_ipqp_sz_w "

[INTERNAL] ";

%feature("docstring") casadi::is_nonincreasing "

Check if the vector is non-increasing.

";

%feature("docstring") casadi::nlpsol_n_in "

Number of NLP solver inputs.

";

%feature("docstring") casadi::matrixName "

Get typename.

";

%feature("docstring") casadi::load_dple "

Explicitly load a plugin dynamically.

";

%feature("docstring") casadi::ConstantSX_deserialize "

[INTERNAL] ";

%feature("docstring") casadi::casadi_qp_expand_step "

[INTERNAL] ";

%feature("docstring") casadi::integrator_in "

Get integrator input scheme name by index.

>  std::string casadi::integrator_in(casadi_int ind)
------------------------------------------------------------------------

Get integrator input scheme name by index.

";

";

%feature("docstring") casadi::is_regular "

[INTERNAL]

>  bool casadi::is_regular(N_Vector v)
------------------------------------------------------------------------
[INTERNAL] 
";

";

%feature("docstring") casadi::casadi_vfmax "

[INTERNAL] ";

%feature("docstring") casadi::casadi_regularize "

[INTERNAL] ";

%feature("docstring") casadi::casadi_ldl_solve "

[INTERNAL] ";

%feature("docstring") casadi::casadi_qp_singular_step "

[INTERNAL] ";

%feature("docstring") casadi::casadi_kron "

[INTERNAL]  Calculates Calculates nonzeros of kronecker product

";

%feature("docstring") casadi::nlpsol_option_info "

Get documentation for a particular option.

";

%feature("docstring") casadi::casadi_qp_kkt_vector "

[INTERNAL] ";

%feature("docstring") casadi::hash_value "

Hash value of an integer.

";

%feature("docstring") casadi::casadi_polyval "

[INTERNAL]  Evaluate a polynomial.

";

%feature("docstring") casadi::casadi_house "

[INTERNAL] ";

%feature("docstring") casadi::dense_mul_nt "

[INTERNAL] ";

%feature("docstring") casadi::rootfinder_n_out "

Number of rootfinder outputs.

";

%feature("docstring") casadi::casadi_ipqp_guess "

[INTERNAL] ";

%feature("docstring") casadi::casadi_flip "

[INTERNAL] ";

%feature("docstring") casadi::simpleIntegrator "

Simplified wrapper for the Integrator class Constructs an integrator using
the same syntax as simpleRK and simpleIRK. The constructed function has
three inputs, corresponding to initial state (x0), parameter (p) and
integration time (h) and one output, corresponding to final state (xf).

Parameters:
-----------

f:  ODE function with two inputs (x and p) and one output (xdot)

N:  Number of integrator steps

order:  Order of interpolating polynomials

scheme:   Collocation scheme, as excepted by collocationPoints function.

";

%feature("docstring") casadi::casadi_interpn_interpolate "

[INTERNAL] ";

%feature("docstring") casadi::casadi_copy "

[INTERNAL]  COPY: y <-x.

";

%feature("docstring") casadi::nlpsol_default_in "

Default input for an NLP solver.

";

%feature("docstring") casadi::casadi_lsqr_sym_ortho "

[INTERNAL] ";

%feature("docstring") casadi::casadi_norm_inf "

[INTERNAL]  Inf-norm of a vector * Returns the largest element in absolute
value

";

%feature("docstring") casadi::casadi_ldl_trs "

[INTERNAL] ";

%feature("docstring") casadi::has_rootfinder "

Check if a particular plugin is available.

";

%feature("docstring") casadi::conic_n_out "

Get the number of QP solver outputs.

";

%feature("docstring") casadi::casadi_nd_boor_dual_eval "

[INTERNAL] ";

%feature("docstring") casadi::casadi_qr_colcomb "

[INTERNAL] ";

%feature("docstring") casadi::casadi_project "

[INTERNAL]  Sparse copy: y <- x, w work vector (length >= number of rows)

";

%feature("docstring") casadi::casadi_qp_calc_dependent "

[INTERNAL] ";

%feature("docstring") casadi::casadi_qp_print_header "

[INTERNAL] ";

%feature("docstring") casadi::interpolant "

Parametric variant of interpolant.

The resulting function will have an additional argument for the grid

By default, derivatives wrt the coefficients are not supported (zero). Some
interpolant plugins may support the inline=true which enables correct
derivatives

>  Function casadi::interpolant(const std::string &name, const std::string &solver, const std::vector< casadi_int > &grid_dims, const std::vector< double > &values, const Dict &opts=Dict())
------------------------------------------------------------------------

Parametric variant of interpolant.

The resulting function will have an additional argument for the grid

By default, derivatives wrt the coefficients are not supported (zero). Some
interpolant plugins may support the inline=true which enables correct
derivatives

";

";

%feature("docstring") casadi::rootfinder_in "

Get rootfinder input scheme name by index.

>  std::string casadi::rootfinder_in(casadi_int ind)
------------------------------------------------------------------------

Get rootfinder input scheme name by index.

";

";

%feature("docstring") casadi::dplesol "

";

";

%feature("docstring") casadi::is_slice "

Check if an index vector can be represented more efficiently as a slice.

>  bool casadi::is_slice(const std::vector< casadi_int > &v, bool ind1=false)
------------------------------------------------------------------------

Check if an index vector can be represented more efficiently as a slice.

";

";

%feature("docstring") casadi::casadi_mmin "

[INTERNAL] ";

%feature("docstring") casadi::is_decreasing "

Check if the vector is strictly decreasing.

";

%feature("docstring") casadi::casadi_qr "

[INTERNAL] ";

%feature("docstring") casadi::doc_conic "

Get the documentation string for a plugin.

";

%feature("docstring") casadi::casadi_dot "

[INTERNAL]  Inner product.

";

%feature("docstring") casadi::nlpsol "

";

";

%feature("docstring") casadi::casadi_kkt "

[INTERNAL] ";

%feature("docstring") casadi::casadi_qr_solve "

[INTERNAL] ";

%feature("docstring") casadi::casadi_de_boor "

[INTERNAL] ";

%feature("docstring") casadi::has_conic "

Check if a particular plugin is available.

";

%feature("docstring") casadi::casadi_clear_casadi_int "

[INTERNAL] ";

%feature("docstring") casadi::load_conic "

Explicitly load a plugin dynamically.

";

%feature("docstring") casadi::casadi_qp_du_check "

[INTERNAL] ";

%feature("docstring") casadi::rootfinder_option_type "

Get type info for a particular option.

";

%feature("docstring") casadi::casadi_lb_eig "

[INTERNAL] ";

%feature("docstring") casadi::casadi_smoothing_diff "

[INTERNAL] ";

%feature("docstring") casadi::casadi_ipqp_corrector "

[INTERNAL] ";

%feature("docstring") casadi::doc_interpolant "

Get the documentation string for a plugin.

";

%feature("docstring") casadi::dple_n_out "

Get the number of QP solver outputs.

";

%feature("docstring") casadi::casadi_low "

[INTERNAL] ";

%feature("docstring") casadi::load_rootfinder "

Explicitly load a plugin dynamically.

";

%feature("docstring") casadi::casadi_mv "

[INTERNAL]  Sparse matrix-vector multiplication: z <- z + x*y.

";

%feature("docstring") casadi::casadi_lsqr_single_solve "

[INTERNAL] ";

%feature("docstring") casadi::casadi_norm_2 "

[INTERNAL]  NORM_2: ||x||_2 -> return.

";

%feature("docstring") casadi::convexify_eval "

[INTERNAL] ";

%feature("docstring") casadi::dense_kron_stride "

[INTERNAL] ";

%feature("docstring") casadi::casadi_qp_pr_direction "

[INTERNAL] ";

%feature("docstring") casadi::casadi_forward_diff "

[INTERNAL] ";

%feature("docstring") casadi::casadi_cvx_givens_apply "

[INTERNAL] ";

%feature("docstring") casadi::casadi_qp_kkt "

[INTERNAL] ";

%feature("docstring") casadi::casadi_qp_flip "

[INTERNAL] ";

%feature("docstring") casadi::dense_mul_nn "

[INTERNAL] ";

%feature("docstring") casadi::casadi_clear "

[INTERNAL]  CLEAR: x <- 0.

";

%feature("docstring") casadi::casadi_ipqp_diag "

[INTERNAL] ";

%feature("docstring") casadi::casadi_qr_trs "

[INTERNAL] ";

%feature("docstring") casadi::_which_depends "

[INTERNAL] ";

%feature("docstring") casadi::casadi_bilin "

[INTERNAL]  Calculates dot(x, mul(A, y))

";

%feature("docstring") casadi::casadi_trans "

[INTERNAL]  TRANS: y <- trans(x) , w work vector (length >= rows x)

";

%feature("docstring") casadi::casadi_nd_boor_eval "

[INTERNAL] ";

%feature("docstring") casadi::nlpsol_out "

Get output scheme name by index.

>Output scheme: casadi::NlpsolOutput (NLPSOL_NUM_OUT = 6)

+--------------+-------+---------------------------------------------------+
|  Full name   | Short |                    Description                    |
+==============+=======+===================================================+
| NLPSOL_X     | x     | Decision variables at the optimal solution (nx x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_F     | f     | Cost function value at the optimal solution (1 x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_G     | g     | Constraints function at the optimal solution (ng  |
|              |       | x 1)                                              |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_X | lam_x | Lagrange multipliers for bounds on X at the       |
|              |       | solution (nx x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_G | lam_g | Lagrange multipliers for bounds on G at the       |
|              |       | solution (ng x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_P | lam_p | Lagrange multipliers for bounds on P at the       |
|              |       | solution (np x 1)                                 |
+--------------+-------+---------------------------------------------------+

>  std::string casadi::nlpsol_out(casadi_int ind)
------------------------------------------------------------------------

Get output scheme name by index.

>Output scheme: casadi::NlpsolOutput (NLPSOL_NUM_OUT = 6)

+--------------+-------+---------------------------------------------------+
|  Full name   | Short |                    Description                    |
+==============+=======+===================================================+
| NLPSOL_X     | x     | Decision variables at the optimal solution (nx x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_F     | f     | Cost function value at the optimal solution (1 x  |
|              |       | 1)                                                |
+--------------+-------+---------------------------------------------------+
| NLPSOL_G     | g     | Constraints function at the optimal solution (ng  |
|              |       | x 1)                                              |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_X | lam_x | Lagrange multipliers for bounds on X at the       |
|              |       | solution (nx x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_G | lam_g | Lagrange multipliers for bounds on G at the       |
|              |       | solution (ng x 1)                                 |
+--------------+-------+---------------------------------------------------+
| NLPSOL_LAM_P | lam_p | Lagrange multipliers for bounds on P at the       |
|              |       | solution (np x 1)                                 |
+--------------+-------+---------------------------------------------------+

";

";

%feature("docstring") casadi::casadi_qp_kkt_dot "

[INTERNAL] ";

%feature("docstring") casadi::is_strictly_monotone "

Check if the vector is strictly monotone.

";

%feature("docstring") casadi::has_linsol "

Check if a particular plugin is available.

";

%feature("docstring") casadi::casadi_ipqp_newiter "

[INTERNAL] ";

%feature("docstring") casadi::casadi_qp_du_direction "

[INTERNAL] ";

%feature("docstring") casadi::simpleRK "

Construct an explicit Runge-Kutta integrator The constructed function has
three inputs, corresponding to initial state (x0), parameter (p) and
integration time (h) and one output, corresponding to final state (xf).

Parameters:
-----------

f:  ODE function with two inputs (x and p) and one output (xdot)

N:  Number of integrator steps

order:  Order of interpolating polynomials

";

%feature("docstring") casadi::casadi_file_slurp "

[INTERNAL] ";

%feature("docstring") casadi::casadi_qp_init "

[INTERNAL] ";

%feature("docstring") casadi::nlpsol_in "

Get NLP solver input scheme name by index.

>Input scheme: casadi::NlpsolInput (NLPSOL_NUM_IN = 8)

+---------------+--------+-------------------------------------------------+
|   Full name   | Short  |                   Description                   |
+===============+========+=================================================+
| NLPSOL_X0     | x0     | Decision variables, initial guess (nx x 1)      |
+---------------+--------+-------------------------------------------------+
| NLPSOL_P      | p      | Value of fixed parameters (np x 1)              |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBX    | lbx    | Decision variables lower bound (nx x 1),        |
|               |        | default -inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBX    | ubx    | Decision variables upper bound (nx x 1),        |
|               |        | default +inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBG    | lbg    | Constraints lower bound (ng x 1), default -inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBG    | ubg    | Constraints upper bound (ng x 1), default +inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_X0 | lam_x0 | Lagrange multipliers for bounds on X, initial   |
|               |        | guess (nx x 1)                                  |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_G0 | lam_g0 | Lagrange multipliers for bounds on G, initial   |
|               |        | guess (ng x 1)                                  |
+---------------+--------+-------------------------------------------------+

>  std::string casadi::nlpsol_in(casadi_int ind)
------------------------------------------------------------------------

Get NLP solver input scheme name by index.

>Input scheme: casadi::NlpsolInput (NLPSOL_NUM_IN = 8)

+---------------+--------+-------------------------------------------------+
|   Full name   | Short  |                   Description                   |
+===============+========+=================================================+
| NLPSOL_X0     | x0     | Decision variables, initial guess (nx x 1)      |
+---------------+--------+-------------------------------------------------+
| NLPSOL_P      | p      | Value of fixed parameters (np x 1)              |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBX    | lbx    | Decision variables lower bound (nx x 1),        |
|               |        | default -inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBX    | ubx    | Decision variables upper bound (nx x 1),        |
|               |        | default +inf.                                   |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LBG    | lbg    | Constraints lower bound (ng x 1), default -inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_UBG    | ubg    | Constraints upper bound (ng x 1), default +inf. |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_X0 | lam_x0 | Lagrange multipliers for bounds on X, initial   |
|               |        | guess (nx x 1)                                  |
+---------------+--------+-------------------------------------------------+
| NLPSOL_LAM_G0 | lam_g0 | Lagrange multipliers for bounds on G, initial   |
|               |        | guess (ng x 1)                                  |
+---------------+--------+-------------------------------------------------+

";

";

%feature("docstring") casadi::casadi_qp_zero_blocking "

[INTERNAL] ";

%feature("docstring") casadi::conic_n_in "

Get the number of QP solver inputs.

";

%feature("docstring") casadi::doc_rootfinder "

Get the documentation string for a plugin.

";

%feature("docstring") casadi::dense_mul_nt_stride "

[INTERNAL] ";

%feature("docstring") casadi::casadi_bfgs "

[INTERNAL] ";

%feature("docstring") casadi::dple_in "

Get DPLE input scheme name by index.

>  std::string casadi::dple_in(casadi_int ind)
------------------------------------------------------------------------

Get DPLE input scheme name by index.

";

";

%feature("docstring") casadi::dense_copy_t_stride "

[INTERNAL] ";

%feature("docstring") casadi::casadi_qp_print_iteration "

[INTERNAL] ";

%feature("docstring") casadi::matrixName< casadi_int > "

Get typename.

";

%feature("docstring") casadi::is_monotone "

Check if the vector is monotone.

";

%feature("docstring") casadi::casadi_mv_dense "

[INTERNAL] ";

%feature("docstring") casadi::casadi_norm_inf_mul "

[INTERNAL]  Inf-norm of a Matrix-matrix product,*

Parameters:
-----------

dwork:  A real work vector that you must allocate Minimum size: y.size1()

iwork:  A integer work vector that you must allocate Minimum size:
y.size1()+x.size2()+1

";

%feature("docstring") casadi::casadi_qr_mv "

[INTERNAL] ";

%feature("docstring") casadi::casadi_fill "

[INTERNAL]  FILL: x <- alpha.

";

%feature("docstring") casadi::casadi_cvx_house "

[INTERNAL]  Computes Householder vector beta: scalar v: vector of length nv
Returns 2-norm of v

Ref: Golub & Van Loan Alg 5.1.1

";

%feature("docstring") casadi::conic_out "

Get output scheme name by index.

>  std::string casadi::conic_out(casadi_int ind)
------------------------------------------------------------------------

Get output scheme name by index.

";

";


// File: namespaceIpopt.xml


// File: namespacestd.xml


// File: chapter1.xml


// File: chapter2.xml


// File: chapter3.xml


// File: chapter4.xml


// File: chapter5.xml


// File: chapter6.xml

