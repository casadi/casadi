# This is an automatically generated file converting from the apm format
import casadi as cs


def hs119():
    # The optimal objective is (if given in):
    f_opt = 244.899698
    x_opt = cs.DM([0.0398474, 0.791983, 0.20287, 0.844358, 1.26991, 0.934739, 1.68196, 0.155301, 1.56787, 0, 0, 1.52723e-08, 0.660204, 0, 0.674256, 0])
    x = cs.MX.sym('x', 16)
    x0 = cs.DM.zeros(16, 1)
    lbx = -cs.inf*cs.DM.ones(16, 1)
    ubx = cs.inf*cs.DM.ones(16, 1)
    c = cs.DM.zeros(8, 1)
    s = cs.MX.zeros(8, 1)
    t = cs.MX.zeros(46, 1)
    z = cs.MX.zeros(46, 1)
    g = cs.MX.zeros(8, 1)
    lbg = -cs.inf*cs.DM.ones(8, 1)
    ubg = cs.inf*cs.DM.ones(8, 1)

    c[0] = 2.5
    c[1] = 1.1
    c[2] = -3.1
    c[3] = -3.5
    c[4] = 1.3
    c[5] = 2.1
    c[6] = 2.3
    c[7] = -1.5

    x0[0:16] = 10
    lbx[0:16] = 0
    ubx[0:16] = 5

    s[0] = 0.22*x[0] + 0.2*x[1] + 0.19*x[2] + 0.25*x[3] + 0.15*x[4] + 0.11*x[5] + 0.12*x[6] + 0.13*x[7] + 1*x[8]
    s[1] = -1.46*x[0] - 1.3*x[2] + 1.82*x[3] - 1.15*x[4] + 0.8*x[6] + 1*x[9]
    s[2] = 1.29*x[0] - 0.89*x[1] - 1.16*x[4] - 0.96*x[5] - 0.49*x[7] + 1*x[10]
    s[3] = -1.1*x[0] - 1.06*x[1] + 0.95*x[2] - 0.54*x[3] - 1.78*x[5] - 0.41*x[6] + 1*x[11]
    s[4] = -1.43*x[3] + 1.51*x[4] + 0.59*x[5] - 0.33*x[6] - 0.43*x[7] + 1*x[12]
    s[5] = -1.72*x[1] - 0.33*x[2] + 1.62*x[4] + 1.24*x[5] + 0.21*x[6] - 0.26*x[7] + 1*x[13]
    s[6] = 1.12*x[0] + 0.31*x[3] + 1.12*x[6] - 0.36*x[8] + 1*x[14]
    s[7] = 0.45*x[1] + 0.26*x[2] - 1.1*x[3] + 0.58*x[4] - 1.03*x[6] + 0.1*x[7] + 1*x[15]
    t[0] = (x[0]**2 + x[0] + 1) * (x[0]**2 + x[0] + 1)
    t[1] = (x[0]**2 + x[0] + 1) * (x[3]**2 + x[3] + 1)
    t[2] = (x[0]**2 + x[0] + 1) * (x[6]**2 + x[6] + 1)
    t[3] = (x[0]**2 + x[0] + 1) * (x[7]**2 + x[7] + 1)
    t[4] = (x[0]**2 + x[0] + 1) * (x[15]**2 + x[15] + 1)
    t[5] = (x[1]**2 + x[1] + 1) * (x[1]**2 + x[1] + 1)
    t[6] = (x[1]**2 + x[1] + 1) * (x[2]**2 + x[2] + 1)
    t[7] = (x[1]**2 + x[1] + 1) * (x[6]**2 + x[6] + 1)
    t[8] = (x[1]**2 + x[1] + 1) * (x[9]**2 + x[9] + 1)
    t[9] = (x[2]**2 + x[2] + 1) * (x[2]**2 + x[2] + 1)
    t[10] = (x[2]**2 + x[2] + 1) * (x[6]**2 + x[6] + 1)
    t[11] = (x[2]**2 + x[2] + 1) * (x[8]**2 + x[8] + 1)
    t[12] = (x[2]**2 + x[2] + 1) * (x[9]**2 + x[9] + 1)
    t[13] = (x[2]**2 + x[2] + 1) * (x[13]**2 + x[13] + 1)
    t[14] = (x[3]**2 + x[3] + 1) * (x[3]**2 + x[3] + 1)
    t[15] = (x[3]**2 + x[3] + 1) * (x[6]**2 + x[6] + 1)
    t[16] = (x[3]**2 + x[3] + 1) * (x[10]**2 + x[10] + 1)
    t[17] = (x[3]**2 + x[3] + 1) * (x[14]**2 + x[14] + 1)
    t[18] = (x[4]**2 + x[4] + 1) * (x[4]**2 + x[4] + 1)
    t[19] = (x[4]**2 + x[4] + 1) * (x[5]**2 + x[5] + 1)
    t[20] = (x[4]**2 + x[4] + 1) * (x[9]**2 + x[9] + 1)
    t[21] = (x[4]**2 + x[4] + 1) * (x[11]**2 + x[11] + 1)
    t[22] = (x[4]**2 + x[4] + 1) * (x[15]**2 + x[15] + 1)
    t[23] = (x[5]**2 + x[5] + 1) * (x[5]**2 + x[5] + 1)
    t[24] = (x[5]**2 + x[5] + 1) * (x[7]**2 + x[7] + 1)
    t[25] = (x[5]**2 + x[5] + 1) * (x[14]**2 + x[14] + 1)
    t[26] = (x[6]**2 + x[6] + 1) * (x[6]**2 + x[6] + 1)
    t[27] = (x[6]**2 + x[6] + 1) * (x[10]**2 + x[10] + 1)
    t[28] = (x[6]**2 + x[6] + 1) * (x[12]**2 + x[12] + 1)
    t[29] = (x[7]**2 + x[7] + 1) * (x[7]**2 + x[7] + 1)
    t[30] = (x[7]**2 + x[7] + 1) * (x[9]**2 + x[9] + 1)
    t[31] = (x[7]**2 + x[7] + 1) * (x[14]**2 + x[14] + 1)
    t[32] = (x[8]**2 + x[8] + 1) * (x[8]**2 + x[8] + 1)
    t[33] = (x[8]**2 + x[8] + 1) * (x[11]**2 + x[11] + 1)
    t[34] = (x[8]**2 + x[8] + 1) * (x[15]**2 + x[15] + 1)
    t[35] = (x[9]**2 + x[9] + 1) * (x[9]**2 + x[9] + 1)
    t[36] = (x[9]**2 + x[9] + 1) * (x[13]**2 + x[13] + 1)
    t[37] = (x[10]**2 + x[10] + 1) * (x[10]**2 + x[10] + 1)
    t[38] = (x[10]**2 + x[10] + 1) * (x[12]**2 + x[12] + 1)
    t[39] = (x[10]**2 + x[10] + 1) * (x[11]**2 + x[11] + 1)
    t[40] = (x[11]**2 + x[11] + 1) * (x[13]**2 + x[13] + 1)
    t[41] = (x[12]**2 + x[12] + 1) * (x[12]**2 + x[12] + 1)
    t[42] = (x[12]**2 + x[12] + 1) * (x[13]**2 + x[13] + 1)
    t[43] = (x[13]**2 + x[13] + 1) * (x[13]**2 + x[13] + 1)
    t[44] = (x[14]**2 + x[14] + 1) * (x[14]**2 + x[14] + 1)
    t[45] = (x[15]**2 + x[15] + 1) * (x[15]**2 + x[15] + 1)

    lbg[0:8] = c[0:8]
    ubg[0:8] = c[0:8]
    g[0:8] = s[0:8]
    f = cs.sum1(t)

    return (x_opt, f_opt, x, f, g, lbg, ubg, lbx, ubx, x0)
