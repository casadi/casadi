# This is an automatically generated file converting from the apm format

import casadi as cs

def hs086():
    # The optimal objective is (if given in):
    f_opt = -32.34867897
    x_opt = cs.DM([0.3, 0.333468, 0.4, 0.42831, 0.223965])
    x = cs.MX.sym('x', 5)
    obj = cs.MX.zeros(5, 1)
    x0 = cs.DM.zeros(5, 1)
    lbx = -cs.inf*cs.DM.ones(5, 1)
    ubx = cs.inf*cs.DM.ones(5, 1)
    a = cs.DM.zeros(10, 5)
    b = cs.DM.zeros(10, 1)
    c = cs.DM.zeros(5, 5)
    d = cs.DM.zeros(5, 1)
    e = cs.DM.zeros(5, 1)
    s = cs.MX.zeros(5, 1)
    g = cs.MX.zeros(10, 1)
    lbg = -cs.inf*cs.DM.ones(10, 1)
    ubg = cs.inf*cs.DM.ones(10, 1)
    
    a[0, 0] = -16
    a[0, 1] = 2
    a[0, 2] = 0
    a[0, 3] = 1
    a[0, 4] = 0
    a[1, 0] = 0
    a[1, 1] = -2
    a[1, 2] = 0
    a[1, 3] = 4
    a[1, 4] = 2
    a[2, 0] = -3.5
    a[2, 1] = 0
    a[2, 2] = 2
    a[2, 3] = 0
    a[2, 4] = 0
    a[3, 0] = 0
    a[3, 1] = -2
    a[3, 2] = 0
    a[3, 3] = -4
    a[3, 4] = -1
    a[4, 0] = 0
    a[4, 1] = -9
    a[4, 2] = -2
    a[4, 3] = 1
    a[4, 4] = -2.8
    a[5, 0] = 2
    a[5, 1] = 0
    a[5, 2] = -4
    a[5, 3] = 0
    a[5, 4] = 0
    a[6, 0] = -1
    a[6, 1] = -1
    a[6, 2] = -1
    a[6, 3] = -1
    a[6, 4] = -1
    a[7, 0] = -1
    a[7, 1] = -2
    a[7, 2] = -3
    a[7, 3] = -2
    a[7, 4] = -1
    a[8, 0] = 1
    a[8, 1] = 2
    a[8, 2] = 3
    a[8, 3] = 4
    a[8, 4] = 5
    a[9, 0] = 1
    a[9, 1] = 1
    a[9, 2] = 1
    a[9, 3] = 1
    a[9, 4] = 1
    b[0] = -40
    b[1] = -2
    b[2] = -0.25
    b[3] = -4
    b[4] = -4
    b[5] = -1
    b[6] = -40
    b[7] = -60
    b[8] = 5
    b[9] = 1
    c[0, 0] = 30
    c[0, 1] = -20
    c[0, 2] = -10
    c[0, 3] = 32
    c[0, 4] = -10
    c[1, 0] = -20
    c[1, 1] = 39
    c[1, 2] = -6
    c[1, 3] = -31
    c[1, 4] = 32
    c[2, 0] = -10
    c[2, 1] = -6
    c[2, 2] = 10
    c[2, 3] = -6
    c[2, 4] = -10
    c[3, 0] = 32
    c[3, 1] = -31
    c[3, 2] = -6
    c[3, 3] = 39
    c[3, 4] = -20
    c[4, 0] = -10
    c[4, 1] = 32
    c[4, 2] = -10
    c[4, 3] = -20
    c[4, 4] = 30
    d[0] = 4
    d[1] = 8
    d[2] = 10
    d[3] = 6
    d[4] = 2
    e[0] = -15
    e[1] = -27
    e[2] = -36
    e[3] = -18
    e[4] = -12
    
    x0[0:4]= 0
    lbx[0:4]=0
    x0[4]= 1
    lbx[4]=0
    
    s[0:5] = e[0:5]*x[0:5]+d[0:5]*x[0:5]**3
    t = s[0] + s[1] + s[2] + s[3] + s[4]
    
    lbg[0] = 0
    g[0] = a[0, 0]*x[0]+a[0, 1]*x[1]+a[0, 2]*x[2]+a[0, 3]*x[3]+a[0, 4]*x[4] - b[0]
    lbg[1] = 0
    g[1] = a[1, 0]*x[0]+a[1, 1]*x[1]+a[1, 2]*x[2]+a[1, 3]*x[3]+a[1, 4]*x[4] - b[1]
    lbg[2] = 0
    g[2] = a[2, 0]*x[0]+a[2, 1]*x[1]+a[2, 2]*x[2]+a[2, 3]*x[3]+a[2, 4]*x[4] - b[2]
    lbg[3] = 0
    g[3] = a[3, 0]*x[0]+a[3, 1]*x[1]+a[3, 2]*x[2]+a[3, 3]*x[3]+a[3, 4]*x[4] - b[3]
    lbg[4] = 0
    g[4] = a[4, 0]*x[0]+a[4, 1]*x[1]+a[4, 2]*x[2]+a[4, 3]*x[3]+a[4, 4]*x[4] - b[4]
    lbg[5] = 0
    g[5] = a[5, 0]*x[0]+a[5, 1]*x[1]+a[5, 2]*x[2]+a[5, 3]*x[3]+a[5, 4]*x[4] - b[5]
    lbg[6] = 0
    g[6] = a[6, 0]*x[0]+a[6, 1]*x[1]+a[6, 2]*x[2]+a[6, 3]*x[3]+a[6, 4]*x[4] - b[6]
    lbg[7] = 0
    g[7] = a[7, 0]*x[0]+a[7, 1]*x[1]+a[7, 2]*x[2]+a[7, 3]*x[3]+a[7, 4]*x[4] - b[7]
    lbg[8] = 0
    g[8] = a[8, 0]*x[0]+a[8, 1]*x[1]+a[8, 2]*x[2]+a[8, 3]*x[3]+a[8, 4]*x[4] - b[8]
    lbg[9] = 0
    g[9] = a[9, 0]*x[0]+a[9, 1]*x[1]+a[9, 2]*x[2]+a[9, 3]*x[3]+a[9, 4]*x[4] - b[9]
    obj[0] = x[0]*(c[0, 0]*x[0] + c[0, 1]*x[1] + c[0, 2]*x[2] + c[0, 3]*x[3] + c[0, 4]*x[4]) + t
    obj[1] = x[1]*(c[1, 0]*x[0] + c[1, 1]*x[1] + c[1, 2]*x[2] + c[1, 3]*x[3] + c[1, 4]*x[4])
    obj[2] = x[2]*(c[2, 0]*x[0] + c[2, 1]*x[1] + c[2, 2]*x[2] + c[2, 3]*x[3] + c[2, 4]*x[4])
    obj[3] = x[3]*(c[3, 0]*x[0] + c[3, 1]*x[1] + c[3, 2]*x[2] + c[3, 3]*x[3] + c[3, 4]*x[4])
    obj[4] = x[4]*(c[4, 0]*x[0] + c[4, 1]*x[1] + c[4, 2]*x[2] + c[4, 3]*x[3] + c[4, 4]*x[4])
    
    
    f = cs.sum1(obj)
    
    return (x_opt, f_opt, x, f, g, lbg, ubg, lbx, ubx, x0)
